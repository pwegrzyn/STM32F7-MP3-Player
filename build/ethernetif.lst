ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"ethernetif.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.low_level_input,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	low_level_input:
  25              	.LFB164:
  26              		.file 1 "Src/ethernetif.c"
   1:Src/ethernetif.c **** /**
   2:Src/ethernetif.c ****   ******************************************************************************
   3:Src/ethernetif.c ****   * File Name          : ethernetif.c
   4:Src/ethernetif.c ****   * Description        : This file provides code for the configuration
   5:Src/ethernetif.c ****   *                      of the ethernetif.c MiddleWare.
   6:Src/ethernetif.c ****   ******************************************************************************
   7:Src/ethernetif.c ****   * This notice applies to any and all portions of this file
   8:Src/ethernetif.c ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/ethernetif.c ****   * USER CODE END. Other portions of this file, whether 
  10:Src/ethernetif.c ****   * inserted by the user or by software development tools
  11:Src/ethernetif.c ****   * are owned by their respective copyright owners.
  12:Src/ethernetif.c ****   *
  13:Src/ethernetif.c ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  14:Src/ethernetif.c ****   * All rights reserved.
  15:Src/ethernetif.c ****   *
  16:Src/ethernetif.c ****   * Redistribution and use in source and binary forms, with or without 
  17:Src/ethernetif.c ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/ethernetif.c ****   *
  19:Src/ethernetif.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Src/ethernetif.c ****   *    this list of conditions and the following disclaimer.
  21:Src/ethernetif.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/ethernetif.c ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/ethernetif.c ****   *    and/or other materials provided with the distribution.
  24:Src/ethernetif.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Src/ethernetif.c ****   *    contributors to this software may be used to endorse or promote products 
  26:Src/ethernetif.c ****   *    derived from this software without specific written permission.
  27:Src/ethernetif.c ****   * 4. This software, including modifications and/or derivative works of this 
  28:Src/ethernetif.c ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/ethernetif.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/ethernetif.c ****   * 5. Redistribution and use of this software other than as permitted under 
  31:Src/ethernetif.c ****   *    this license is void and will automatically terminate your rights under 
  32:Src/ethernetif.c ****   *    this license. 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 2


  33:Src/ethernetif.c ****   *
  34:Src/ethernetif.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Src/ethernetif.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Src/ethernetif.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Src/ethernetif.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/ethernetif.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Src/ethernetif.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/ethernetif.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/ethernetif.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Src/ethernetif.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Src/ethernetif.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Src/ethernetif.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/ethernetif.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/ethernetif.c ****   *
  47:Src/ethernetif.c ****   ******************************************************************************
  48:Src/ethernetif.c ****   */
  49:Src/ethernetif.c **** 
  50:Src/ethernetif.c **** /* Includes ------------------------------------------------------------------*/
  51:Src/ethernetif.c **** #include "stm32f7xx_hal.h"
  52:Src/ethernetif.c **** #include "lwip/opt.h"
  53:Src/ethernetif.c **** 
  54:Src/ethernetif.c **** #include "lwip/timeouts.h"
  55:Src/ethernetif.c **** #include "netif/ethernet.h"
  56:Src/ethernetif.c **** #include "netif/etharp.h"
  57:Src/ethernetif.c **** #include "lwip/ethip6.h"
  58:Src/ethernetif.c **** #include "ethernetif.h"
  59:Src/ethernetif.c **** #include <string.h>
  60:Src/ethernetif.c **** #include "cmsis_os.h"
  61:Src/ethernetif.c **** /* Within 'USER CODE' section, code will be kept by default at each generation */
  62:Src/ethernetif.c **** /* USER CODE BEGIN 0 */
  63:Src/ethernetif.c **** 
  64:Src/ethernetif.c **** /* USER CODE END 0 */
  65:Src/ethernetif.c **** 
  66:Src/ethernetif.c **** /* Private define ------------------------------------------------------------*/
  67:Src/ethernetif.c **** /* The time to block waiting for input. */
  68:Src/ethernetif.c **** #define TIME_WAITING_FOR_INPUT ( portMAX_DELAY )
  69:Src/ethernetif.c **** /* Stack size of the interface thread */
  70:Src/ethernetif.c **** #define INTERFACE_THREAD_STACK_SIZE ( 350 )
  71:Src/ethernetif.c **** /* Network interface name */
  72:Src/ethernetif.c **** #define IFNAME0 's'
  73:Src/ethernetif.c **** #define IFNAME1 't'
  74:Src/ethernetif.c **** 
  75:Src/ethernetif.c **** /* USER CODE BEGIN 1 */
  76:Src/ethernetif.c **** 
  77:Src/ethernetif.c **** /* USER CODE END 1 */
  78:Src/ethernetif.c **** 
  79:Src/ethernetif.c **** /* Private variables ---------------------------------------------------------*/
  80:Src/ethernetif.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
  81:Src/ethernetif.c ****   #pragma data_alignment=4   
  82:Src/ethernetif.c **** #endif
  83:Src/ethernetif.c **** __ALIGN_BEGIN ETH_DMADescTypeDef  DMARxDscrTab[ETH_RXBUFNB] __ALIGN_END;/* Ethernet Rx MA Descripto
  84:Src/ethernetif.c **** 
  85:Src/ethernetif.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
  86:Src/ethernetif.c ****   #pragma data_alignment=4   
  87:Src/ethernetif.c **** #endif
  88:Src/ethernetif.c **** __ALIGN_BEGIN ETH_DMADescTypeDef  DMATxDscrTab[ETH_TXBUFNB] __ALIGN_END;/* Ethernet Tx DMA Descript
  89:Src/ethernetif.c **** 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 3


  90:Src/ethernetif.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
  91:Src/ethernetif.c ****   #pragma data_alignment=4   
  92:Src/ethernetif.c **** #endif
  93:Src/ethernetif.c **** __ALIGN_BEGIN uint8_t Rx_Buff[ETH_RXBUFNB][ETH_RX_BUF_SIZE] __ALIGN_END; /* Ethernet Receive Buffer
  94:Src/ethernetif.c **** 
  95:Src/ethernetif.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
  96:Src/ethernetif.c ****   #pragma data_alignment=4   
  97:Src/ethernetif.c **** #endif
  98:Src/ethernetif.c **** __ALIGN_BEGIN uint8_t Tx_Buff[ETH_TXBUFNB][ETH_TX_BUF_SIZE] __ALIGN_END; /* Ethernet Transmit Buffe
  99:Src/ethernetif.c **** 
 100:Src/ethernetif.c **** /* USER CODE BEGIN 2 */
 101:Src/ethernetif.c **** 
 102:Src/ethernetif.c **** /* USER CODE END 2 */
 103:Src/ethernetif.c **** 
 104:Src/ethernetif.c **** /* Semaphore to signal incoming packets */
 105:Src/ethernetif.c **** osSemaphoreId s_xSemaphore = NULL;
 106:Src/ethernetif.c **** /* Global Ethernet handle */
 107:Src/ethernetif.c **** ETH_HandleTypeDef heth;
 108:Src/ethernetif.c **** 
 109:Src/ethernetif.c **** /* USER CODE BEGIN 3 */
 110:Src/ethernetif.c **** 
 111:Src/ethernetif.c **** /* USER CODE END 3 */
 112:Src/ethernetif.c **** 
 113:Src/ethernetif.c **** /* Private functions ---------------------------------------------------------*/
 114:Src/ethernetif.c **** 
 115:Src/ethernetif.c **** void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
 116:Src/ethernetif.c **** {
 117:Src/ethernetif.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 118:Src/ethernetif.c ****   if(ethHandle->Instance==ETH)
 119:Src/ethernetif.c ****   {
 120:Src/ethernetif.c ****   /* USER CODE BEGIN ETH_MspInit 0 */
 121:Src/ethernetif.c **** 
 122:Src/ethernetif.c ****   /* USER CODE END ETH_MspInit 0 */
 123:Src/ethernetif.c ****     /* Enable Peripheral clock */
 124:Src/ethernetif.c ****     __HAL_RCC_ETH_CLK_ENABLE();
 125:Src/ethernetif.c ****   
 126:Src/ethernetif.c ****     /**ETH GPIO Configuration    
 127:Src/ethernetif.c ****     PG14     ------> ETH_TXD1
 128:Src/ethernetif.c ****     PG13     ------> ETH_TXD0
 129:Src/ethernetif.c ****     PG11     ------> ETH_TX_EN
 130:Src/ethernetif.c ****     PC1     ------> ETH_MDC
 131:Src/ethernetif.c ****     PA1     ------> ETH_REF_CLK
 132:Src/ethernetif.c ****     PC4     ------> ETH_RXD0
 133:Src/ethernetif.c ****     PA2     ------> ETH_MDIO
 134:Src/ethernetif.c ****     PC5     ------> ETH_RXD1
 135:Src/ethernetif.c ****     PA7     ------> ETH_CRS_DV 
 136:Src/ethernetif.c ****     */
 137:Src/ethernetif.c ****     GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 138:Src/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 139:Src/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 140:Src/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 141:Src/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 142:Src/ethernetif.c ****     HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 143:Src/ethernetif.c **** 
 144:Src/ethernetif.c ****     GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 145:Src/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 146:Src/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 4


 147:Src/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 148:Src/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 149:Src/ethernetif.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 150:Src/ethernetif.c **** 
 151:Src/ethernetif.c ****     GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 152:Src/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 153:Src/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 154:Src/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 155:Src/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 156:Src/ethernetif.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 157:Src/ethernetif.c **** 
 158:Src/ethernetif.c ****     /* Peripheral interrupt init */
 159:Src/ethernetif.c ****     HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 160:Src/ethernetif.c ****     HAL_NVIC_EnableIRQ(ETH_IRQn);
 161:Src/ethernetif.c ****   /* USER CODE BEGIN ETH_MspInit 1 */
 162:Src/ethernetif.c **** 
 163:Src/ethernetif.c ****   /* USER CODE END ETH_MspInit 1 */
 164:Src/ethernetif.c ****   }
 165:Src/ethernetif.c **** }
 166:Src/ethernetif.c **** 
 167:Src/ethernetif.c **** void HAL_ETH_MspDeInit(ETH_HandleTypeDef* ethHandle)
 168:Src/ethernetif.c **** {
 169:Src/ethernetif.c ****   if(ethHandle->Instance==ETH)
 170:Src/ethernetif.c ****   {
 171:Src/ethernetif.c ****   /* USER CODE BEGIN ETH_MspDeInit 0 */
 172:Src/ethernetif.c **** 
 173:Src/ethernetif.c ****   /* USER CODE END ETH_MspDeInit 0 */
 174:Src/ethernetif.c ****     /* Peripheral clock disable */
 175:Src/ethernetif.c ****     __HAL_RCC_ETH_CLK_DISABLE();
 176:Src/ethernetif.c ****   
 177:Src/ethernetif.c ****     /**ETH GPIO Configuration    
 178:Src/ethernetif.c ****     PG14     ------> ETH_TXD1
 179:Src/ethernetif.c ****     PG13     ------> ETH_TXD0
 180:Src/ethernetif.c ****     PG11     ------> ETH_TX_EN
 181:Src/ethernetif.c ****     PC1     ------> ETH_MDC
 182:Src/ethernetif.c ****     PA1     ------> ETH_REF_CLK
 183:Src/ethernetif.c ****     PC4     ------> ETH_RXD0
 184:Src/ethernetif.c ****     PA2     ------> ETH_MDIO
 185:Src/ethernetif.c ****     PC5     ------> ETH_RXD1
 186:Src/ethernetif.c ****     PA7     ------> ETH_CRS_DV 
 187:Src/ethernetif.c ****     */
 188:Src/ethernetif.c ****     HAL_GPIO_DeInit(GPIOG, RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin);
 189:Src/ethernetif.c **** 
 190:Src/ethernetif.c ****     HAL_GPIO_DeInit(GPIOC, RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin);
 191:Src/ethernetif.c **** 
 192:Src/ethernetif.c ****     HAL_GPIO_DeInit(GPIOA, RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin);
 193:Src/ethernetif.c **** 
 194:Src/ethernetif.c ****     /* Peripheral interrupt Deinit*/
 195:Src/ethernetif.c ****     HAL_NVIC_DisableIRQ(ETH_IRQn);
 196:Src/ethernetif.c **** 
 197:Src/ethernetif.c ****   /* USER CODE BEGIN ETH_MspDeInit 1 */
 198:Src/ethernetif.c **** 
 199:Src/ethernetif.c ****   /* USER CODE END ETH_MspDeInit 1 */
 200:Src/ethernetif.c ****   }
 201:Src/ethernetif.c **** }
 202:Src/ethernetif.c **** 
 203:Src/ethernetif.c **** /**
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 5


 204:Src/ethernetif.c ****   * @brief  Ethernet Rx Transfer completed callback
 205:Src/ethernetif.c ****   * @param  heth: ETH handle
 206:Src/ethernetif.c ****   * @retval None
 207:Src/ethernetif.c ****   */
 208:Src/ethernetif.c **** void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
 209:Src/ethernetif.c **** {
 210:Src/ethernetif.c ****   osSemaphoreRelease(s_xSemaphore);
 211:Src/ethernetif.c **** }
 212:Src/ethernetif.c **** 
 213:Src/ethernetif.c **** /* USER CODE BEGIN 4 */
 214:Src/ethernetif.c **** 
 215:Src/ethernetif.c **** /* USER CODE END 4 */
 216:Src/ethernetif.c **** 
 217:Src/ethernetif.c **** /*******************************************************************************
 218:Src/ethernetif.c ****                        LL Driver Interface ( LwIP stack --> ETH) 
 219:Src/ethernetif.c **** *******************************************************************************/
 220:Src/ethernetif.c **** /**
 221:Src/ethernetif.c ****  * In this function, the hardware should be initialized.
 222:Src/ethernetif.c ****  * Called from ethernetif_init().
 223:Src/ethernetif.c ****  *
 224:Src/ethernetif.c ****  * @param netif the already initialized lwip network interface structure
 225:Src/ethernetif.c ****  *        for this ethernetif
 226:Src/ethernetif.c ****  */
 227:Src/ethernetif.c **** static void low_level_init(struct netif *netif)
 228:Src/ethernetif.c **** { 
 229:Src/ethernetif.c ****   uint32_t regvalue = 0;
 230:Src/ethernetif.c ****   HAL_StatusTypeDef hal_eth_init_status;
 231:Src/ethernetif.c ****   
 232:Src/ethernetif.c **** /* Init ETH */
 233:Src/ethernetif.c **** 
 234:Src/ethernetif.c ****    uint8_t MACAddr[6] ;
 235:Src/ethernetif.c ****   heth.Instance = ETH;
 236:Src/ethernetif.c ****   heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 237:Src/ethernetif.c ****   heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 238:Src/ethernetif.c ****   MACAddr[0] = 0x00;
 239:Src/ethernetif.c ****   MACAddr[1] = 0x80;
 240:Src/ethernetif.c ****   MACAddr[2] = 0xE1;
 241:Src/ethernetif.c ****   MACAddr[3] = 0x00;
 242:Src/ethernetif.c ****   MACAddr[4] = 0xCA;
 243:Src/ethernetif.c ****   MACAddr[5] = 0xFE;
 244:Src/ethernetif.c ****   heth.Init.MACAddr = &MACAddr[0];
 245:Src/ethernetif.c ****   heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 246:Src/ethernetif.c ****   heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 247:Src/ethernetif.c ****   heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 248:Src/ethernetif.c **** 
 249:Src/ethernetif.c ****   /* USER CODE BEGIN MACADDRESS */
 250:Src/ethernetif.c ****     
 251:Src/ethernetif.c ****   /* USER CODE END MACADDRESS */
 252:Src/ethernetif.c **** 
 253:Src/ethernetif.c ****   hal_eth_init_status = HAL_ETH_Init(&heth);
 254:Src/ethernetif.c **** 
 255:Src/ethernetif.c ****   if (hal_eth_init_status == HAL_OK)
 256:Src/ethernetif.c ****   {
 257:Src/ethernetif.c ****     /* Set netif link flag */  
 258:Src/ethernetif.c ****     netif->flags |= NETIF_FLAG_LINK_UP;
 259:Src/ethernetif.c ****   }
 260:Src/ethernetif.c ****   /* Initialize Tx Descriptors list: Chain Mode */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 6


 261:Src/ethernetif.c ****   HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 262:Src/ethernetif.c ****      
 263:Src/ethernetif.c ****   /* Initialize Rx Descriptors list: Chain Mode  */
 264:Src/ethernetif.c ****   HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 265:Src/ethernetif.c ****  
 266:Src/ethernetif.c **** #if LWIP_ARP || LWIP_ETHERNET 
 267:Src/ethernetif.c **** 
 268:Src/ethernetif.c ****   /* set MAC hardware address length */
 269:Src/ethernetif.c ****   netif->hwaddr_len = ETH_HWADDR_LEN;
 270:Src/ethernetif.c ****   
 271:Src/ethernetif.c ****   /* set MAC hardware address */
 272:Src/ethernetif.c ****   netif->hwaddr[0] =  heth.Init.MACAddr[0];
 273:Src/ethernetif.c ****   netif->hwaddr[1] =  heth.Init.MACAddr[1];
 274:Src/ethernetif.c ****   netif->hwaddr[2] =  heth.Init.MACAddr[2];
 275:Src/ethernetif.c ****   netif->hwaddr[3] =  heth.Init.MACAddr[3];
 276:Src/ethernetif.c ****   netif->hwaddr[4] =  heth.Init.MACAddr[4];
 277:Src/ethernetif.c ****   netif->hwaddr[5] =  heth.Init.MACAddr[5];
 278:Src/ethernetif.c ****   
 279:Src/ethernetif.c ****   /* maximum transfer unit */
 280:Src/ethernetif.c ****   netif->mtu = 1500;
 281:Src/ethernetif.c ****   
 282:Src/ethernetif.c ****   /* Accept broadcast address and ARP traffic */
 283:Src/ethernetif.c ****   /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
 284:Src/ethernetif.c ****   #if LWIP_ARP
 285:Src/ethernetif.c ****     netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 286:Src/ethernetif.c ****   #else 
 287:Src/ethernetif.c ****     netif->flags |= NETIF_FLAG_BROADCAST;
 288:Src/ethernetif.c ****   #endif /* LWIP_ARP */
 289:Src/ethernetif.c ****   
 290:Src/ethernetif.c **** /* create a binary semaphore used for informing ethernetif of frame reception */
 291:Src/ethernetif.c ****   osSemaphoreDef(SEM);
 292:Src/ethernetif.c ****   s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 293:Src/ethernetif.c **** 
 294:Src/ethernetif.c **** /* create the task that handles the ETH_MAC */
 295:Src/ethernetif.c ****   osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 296:Src/ethernetif.c ****   osThreadCreate (osThread(EthIf), netif);
 297:Src/ethernetif.c ****   /* Enable MAC and DMA transmission and reception */
 298:Src/ethernetif.c ****   HAL_ETH_Start(&heth);
 299:Src/ethernetif.c **** 
 300:Src/ethernetif.c **** /* USER CODE BEGIN PHY_PRE_CONFIG */ 
 301:Src/ethernetif.c ****     
 302:Src/ethernetif.c **** /* USER CODE END PHY_PRE_CONFIG */
 303:Src/ethernetif.c ****   
 304:Src/ethernetif.c **** 
 305:Src/ethernetif.c ****   /* Read Register Configuration */
 306:Src/ethernetif.c ****   HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 307:Src/ethernetif.c ****   regvalue |= (PHY_ISFR_INT4);
 308:Src/ethernetif.c **** 
 309:Src/ethernetif.c ****   /* Enable Interrupt on change of link status */ 
 310:Src/ethernetif.c ****   HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 311:Src/ethernetif.c ****   
 312:Src/ethernetif.c ****   /* Read Register Configuration */
 313:Src/ethernetif.c ****   HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 314:Src/ethernetif.c **** 
 315:Src/ethernetif.c **** /* USER CODE BEGIN PHY_POST_CONFIG */ 
 316:Src/ethernetif.c ****     
 317:Src/ethernetif.c **** /* USER CODE END PHY_POST_CONFIG */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 7


 318:Src/ethernetif.c **** 
 319:Src/ethernetif.c **** #endif /* LWIP_ARP || LWIP_ETHERNET */
 320:Src/ethernetif.c **** 
 321:Src/ethernetif.c **** /* USER CODE BEGIN LOW_LEVEL_INIT */ 
 322:Src/ethernetif.c ****     
 323:Src/ethernetif.c **** /* USER CODE END LOW_LEVEL_INIT */
 324:Src/ethernetif.c **** }
 325:Src/ethernetif.c **** 
 326:Src/ethernetif.c **** /**
 327:Src/ethernetif.c ****  * This function should do the actual transmission of the packet. The packet is
 328:Src/ethernetif.c ****  * contained in the pbuf that is passed to the function. This pbuf
 329:Src/ethernetif.c ****  * might be chained.
 330:Src/ethernetif.c ****  *
 331:Src/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 332:Src/ethernetif.c ****  * @param p the MAC packet to send (e.g. IP packet including MAC addresses and type)
 333:Src/ethernetif.c ****  * @return ERR_OK if the packet could be sent
 334:Src/ethernetif.c ****  *         an err_t value if the packet couldn't be sent
 335:Src/ethernetif.c ****  *
 336:Src/ethernetif.c ****  * @note Returning ERR_MEM here if a DMA queue of your MAC is full can lead to
 337:Src/ethernetif.c ****  *       strange results. You might consider waiting for space in the DMA queue
 338:Src/ethernetif.c ****  *       to become availale since the stack doesn't retry to send a packet
 339:Src/ethernetif.c ****  *       dropped because of memory failure (except for the TCP timers).
 340:Src/ethernetif.c ****  */
 341:Src/ethernetif.c **** 
 342:Src/ethernetif.c **** static err_t low_level_output(struct netif *netif, struct pbuf *p)
 343:Src/ethernetif.c **** {
 344:Src/ethernetif.c ****   err_t errval;
 345:Src/ethernetif.c ****   struct pbuf *q;
 346:Src/ethernetif.c ****   uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 347:Src/ethernetif.c ****   __IO ETH_DMADescTypeDef *DmaTxDesc;
 348:Src/ethernetif.c ****   uint32_t framelength = 0;
 349:Src/ethernetif.c ****   uint32_t bufferoffset = 0;
 350:Src/ethernetif.c ****   uint32_t byteslefttocopy = 0;
 351:Src/ethernetif.c ****   uint32_t payloadoffset = 0;
 352:Src/ethernetif.c ****   DmaTxDesc = heth.TxDesc;
 353:Src/ethernetif.c ****   bufferoffset = 0;
 354:Src/ethernetif.c ****   
 355:Src/ethernetif.c ****   /* copy frame from pbufs to driver buffers */
 356:Src/ethernetif.c ****   for(q = p; q != NULL; q = q->next)
 357:Src/ethernetif.c ****     {
 358:Src/ethernetif.c ****       /* Is this buffer available? If not, goto error */
 359:Src/ethernetif.c ****       if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 360:Src/ethernetif.c ****       {
 361:Src/ethernetif.c ****         errval = ERR_USE;
 362:Src/ethernetif.c ****         goto error;
 363:Src/ethernetif.c ****       }
 364:Src/ethernetif.c ****     
 365:Src/ethernetif.c ****       /* Get bytes in current lwIP buffer */
 366:Src/ethernetif.c ****       byteslefttocopy = q->len;
 367:Src/ethernetif.c ****       payloadoffset = 0;
 368:Src/ethernetif.c ****     
 369:Src/ethernetif.c ****       /* Check if the length of data to copy is bigger than Tx buffer size*/
 370:Src/ethernetif.c ****       while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 371:Src/ethernetif.c ****       {
 372:Src/ethernetif.c ****         /* Copy data to Tx buffer*/
 373:Src/ethernetif.c ****         memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payl
 374:Src/ethernetif.c ****       
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 8


 375:Src/ethernetif.c ****         /* Point to next descriptor */
 376:Src/ethernetif.c ****         DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 377:Src/ethernetif.c ****       
 378:Src/ethernetif.c ****         /* Check if the buffer is available */
 379:Src/ethernetif.c ****         if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 380:Src/ethernetif.c ****         {
 381:Src/ethernetif.c ****           errval = ERR_USE;
 382:Src/ethernetif.c ****           goto error;
 383:Src/ethernetif.c ****         }
 384:Src/ethernetif.c ****       
 385:Src/ethernetif.c ****         buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 386:Src/ethernetif.c ****       
 387:Src/ethernetif.c ****         byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 388:Src/ethernetif.c ****         payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 389:Src/ethernetif.c ****         framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 390:Src/ethernetif.c ****         bufferoffset = 0;
 391:Src/ethernetif.c ****       }
 392:Src/ethernetif.c ****     
 393:Src/ethernetif.c ****       /* Copy the remaining bytes */
 394:Src/ethernetif.c ****       memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloa
 395:Src/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 396:Src/ethernetif.c ****       framelength = framelength + byteslefttocopy;
 397:Src/ethernetif.c ****     }
 398:Src/ethernetif.c ****   
 399:Src/ethernetif.c ****   /* Prepare transmit descriptors to give to DMA */ 
 400:Src/ethernetif.c ****   HAL_ETH_TransmitFrame(&heth, framelength);
 401:Src/ethernetif.c ****   
 402:Src/ethernetif.c ****   errval = ERR_OK;
 403:Src/ethernetif.c ****   
 404:Src/ethernetif.c **** error:
 405:Src/ethernetif.c ****   
 406:Src/ethernetif.c ****   /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume trans
 407:Src/ethernetif.c ****   if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 408:Src/ethernetif.c ****   {
 409:Src/ethernetif.c ****     /* Clear TUS ETHERNET DMA flag */
 410:Src/ethernetif.c ****     heth.Instance->DMASR = ETH_DMASR_TUS;
 411:Src/ethernetif.c **** 
 412:Src/ethernetif.c ****     /* Resume DMA transmission*/
 413:Src/ethernetif.c ****     heth.Instance->DMATPDR = 0;
 414:Src/ethernetif.c ****   }
 415:Src/ethernetif.c ****   return errval;
 416:Src/ethernetif.c **** }
 417:Src/ethernetif.c **** 
 418:Src/ethernetif.c **** /**
 419:Src/ethernetif.c ****  * Should allocate a pbuf and transfer the bytes of the incoming
 420:Src/ethernetif.c ****  * packet from the interface into the pbuf.
 421:Src/ethernetif.c ****  *
 422:Src/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 423:Src/ethernetif.c ****  * @return a pbuf filled with the received packet (including MAC header)
 424:Src/ethernetif.c ****  *         NULL on memory error
 425:Src/ethernetif.c ****    */
 426:Src/ethernetif.c **** static struct pbuf * low_level_input(struct netif *netif)
 427:Src/ethernetif.c **** {
  27              		.loc 1 427 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 9


  31              	.LVL0:
  32 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 32
  35              		.cfi_offset 4, -32
  36              		.cfi_offset 5, -28
  37              		.cfi_offset 6, -24
  38              		.cfi_offset 7, -20
  39              		.cfi_offset 8, -16
  40              		.cfi_offset 9, -12
  41              		.cfi_offset 10, -8
  42              		.cfi_offset 14, -4
  43              	.LVL1:
 428:Src/ethernetif.c ****   struct pbuf *p = NULL;
 429:Src/ethernetif.c ****   struct pbuf *q = NULL;
 430:Src/ethernetif.c ****   uint16_t len = 0;
 431:Src/ethernetif.c ****   uint8_t *buffer;
 432:Src/ethernetif.c ****   __IO ETH_DMADescTypeDef *dmarxdesc;
 433:Src/ethernetif.c ****   uint32_t bufferoffset = 0;
 434:Src/ethernetif.c ****   uint32_t payloadoffset = 0;
 435:Src/ethernetif.c ****   uint32_t byteslefttocopy = 0;
 436:Src/ethernetif.c ****   uint32_t i=0;
 437:Src/ethernetif.c ****   
 438:Src/ethernetif.c **** 
 439:Src/ethernetif.c ****   /* get received frame */
 440:Src/ethernetif.c ****   if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
  44              		.loc 1 440 0
  45 0004 3348     		ldr	r0, .L14
  46              	.LVL2:
  47 0006 FFF7FEFF 		bl	HAL_ETH_GetReceivedFrame_IT
  48              	.LVL3:
  49 000a 0028     		cmp	r0, #0
  50 000c 5ED1     		bne	.L10
 441:Src/ethernetif.c ****     return NULL;
 442:Src/ethernetif.c ****   
 443:Src/ethernetif.c ****   /* Obtain the size of the packet and put it into the "len" variable. */
 444:Src/ethernetif.c ****   len = heth.RxFrameInfos.length;
  51              		.loc 1 444 0
  52 000e 314B     		ldr	r3, .L14
  53 0010 998F     		ldrh	r1, [r3, #60]
  54              	.LVL4:
 445:Src/ethernetif.c ****   buffer = (uint8_t *)heth.RxFrameInfos.buffer;
  55              		.loc 1 445 0
  56 0012 D3F84090 		ldr	r9, [r3, #64]
  57              	.LVL5:
 446:Src/ethernetif.c ****   
 447:Src/ethernetif.c ****   if (len > 0)
  58              		.loc 1 447 0
  59 0016 29B9     		cbnz	r1, .L13
 428:Src/ethernetif.c ****   struct pbuf *q = NULL;
  60              		.loc 1 428 0
  61 0018 4FF00008 		mov	r8, #0
  62              	.LVL6:
  63              	.L3:
 448:Src/ethernetif.c ****   {
 449:Src/ethernetif.c ****     /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
 450:Src/ethernetif.c ****     p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 10


 451:Src/ethernetif.c ****   }
 452:Src/ethernetif.c ****   
 453:Src/ethernetif.c ****   if (p != NULL)
 454:Src/ethernetif.c ****   {
 455:Src/ethernetif.c ****     dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 456:Src/ethernetif.c ****     bufferoffset = 0;
 457:Src/ethernetif.c ****     for(q = p; q != NULL; q = q->next)
 458:Src/ethernetif.c ****     {
 459:Src/ethernetif.c ****       byteslefttocopy = q->len;
 460:Src/ethernetif.c ****       payloadoffset = 0;
 461:Src/ethernetif.c ****       
 462:Src/ethernetif.c ****       /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
 463:Src/ethernetif.c ****       while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 464:Src/ethernetif.c ****       {
 465:Src/ethernetif.c ****         /* Copy data to pbuf */
 466:Src/ethernetif.c ****         memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + buf
 467:Src/ethernetif.c ****         
 468:Src/ethernetif.c ****         /* Point to next descriptor */
 469:Src/ethernetif.c ****         dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 470:Src/ethernetif.c ****         buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 471:Src/ethernetif.c ****         
 472:Src/ethernetif.c ****         byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 473:Src/ethernetif.c ****         payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 474:Src/ethernetif.c ****         bufferoffset = 0;
 475:Src/ethernetif.c ****       }
 476:Src/ethernetif.c ****       /* Copy remaining data in pbuf */
 477:Src/ethernetif.c ****       memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + buffe
 478:Src/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 479:Src/ethernetif.c ****     }
 480:Src/ethernetif.c ****   }  
 481:Src/ethernetif.c ****   
 482:Src/ethernetif.c ****     /* Release descriptors to DMA */
 483:Src/ethernetif.c ****     /* Point to first descriptor */
 484:Src/ethernetif.c ****     dmarxdesc = heth.RxFrameInfos.FSRxDesc;
  64              		.loc 1 484 0
  65 001c 2D4B     		ldr	r3, .L14
  66 001e 1B6B     		ldr	r3, [r3, #48]
  67              	.LVL7:
 485:Src/ethernetif.c ****     /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
 486:Src/ethernetif.c ****     for (i=0; i< heth.RxFrameInfos.SegCount; i++)
  68              		.loc 1 486 0
  69 0020 0021     		movs	r1, #0
  70 0022 3AE0     		b	.L8
  71              	.LVL8:
  72              	.L13:
 450:Src/ethernetif.c ****   }
  73              		.loc 1 450 0
  74 0024 0322     		movs	r2, #3
  75 0026 0420     		movs	r0, #4
  76 0028 FFF7FEFF 		bl	pbuf_alloc
  77              	.LVL9:
 453:Src/ethernetif.c ****   {
  78              		.loc 1 453 0
  79 002c 8046     		mov	r8, r0
  80 002e 0028     		cmp	r0, #0
  81 0030 F4D0     		beq	.L3
 455:Src/ethernetif.c ****     bufferoffset = 0;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 11


  82              		.loc 1 455 0
  83 0032 284B     		ldr	r3, .L14
  84 0034 1F6B     		ldr	r7, [r3, #48]
  85              	.LVL10:
 450:Src/ethernetif.c ****   }
  86              		.loc 1 450 0
  87 0036 8246     		mov	r10, r0
 456:Src/ethernetif.c ****     for(q = p; q != NULL; q = q->next)
  88              		.loc 1 456 0
  89 0038 0024     		movs	r4, #0
 457:Src/ethernetif.c ****     {
  90              		.loc 1 457 0
  91 003a 21E0     		b	.L4
  92              	.LVL11:
  93              	.L6:
 466:Src/ethernetif.c ****         
  94              		.loc 1 466 0
  95 003c DAF80400 		ldr	r0, [r10, #4]
  96 0040 40F2F452 		movw	r2, #1524
  97              	.LVL12:
  98 0044 121B     		subs	r2, r2, r4
  99 0046 09EB0401 		add	r1, r9, r4
 100 004a 3044     		add	r0, r0, r6
 101 004c FFF7FEFF 		bl	memcpy
 102              	.LVL13:
 469:Src/ethernetif.c ****         buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 103              		.loc 1 469 0
 104 0050 FF68     		ldr	r7, [r7, #12]
 105              	.LVL14:
 470:Src/ethernetif.c ****         
 106              		.loc 1 470 0
 107 0052 D7F80890 		ldr	r9, [r7, #8]
 108              	.LVL15:
 472:Src/ethernetif.c ****         payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 109              		.loc 1 472 0
 110 0056 A5F2F452 		subw	r2, r5, #1524
 111              	.LVL16:
 473:Src/ethernetif.c ****         bufferoffset = 0;
 112              		.loc 1 473 0
 113 005a 361B     		subs	r6, r6, r4
 114              	.LVL17:
 115 005c 06F2F456 		addw	r6, r6, #1524
 116              	.LVL18:
 474:Src/ethernetif.c ****       }
 117              		.loc 1 474 0
 118 0060 0024     		movs	r4, #0
 119              	.LVL19:
 120              	.L5:
 463:Src/ethernetif.c ****       {
 121              		.loc 1 463 0
 122 0062 A518     		adds	r5, r4, r2
 123 0064 40F2F453 		movw	r3, #1524
 124 0068 9D42     		cmp	r5, r3
 125 006a E7D8     		bhi	.L6
 477:Src/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 126              		.loc 1 477 0 discriminator 2
 127 006c DAF80400 		ldr	r0, [r10, #4]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 12


 128 0070 09EB0401 		add	r1, r9, r4
 129 0074 3044     		add	r0, r0, r6
 130 0076 FFF7FEFF 		bl	memcpy
 131              	.LVL20:
 457:Src/ethernetif.c ****     {
 132              		.loc 1 457 0 discriminator 2
 133 007a DAF800A0 		ldr	r10, [r10]
 134              	.LVL21:
 478:Src/ethernetif.c ****     }
 135              		.loc 1 478 0 discriminator 2
 136 007e 2C46     		mov	r4, r5
 137              	.LVL22:
 138              	.L4:
 457:Src/ethernetif.c ****     {
 139              		.loc 1 457 0 discriminator 1
 140 0080 BAF1000F 		cmp	r10, #0
 141 0084 CAD0     		beq	.L3
 459:Src/ethernetif.c ****       payloadoffset = 0;
 142              		.loc 1 459 0
 143 0086 BAF80A20 		ldrh	r2, [r10, #10]
 144              	.LVL23:
 460:Src/ethernetif.c ****       
 145              		.loc 1 460 0
 146 008a 0026     		movs	r6, #0
 463:Src/ethernetif.c ****       {
 147              		.loc 1 463 0
 148 008c E9E7     		b	.L5
 149              	.LVL24:
 150              	.L9:
 487:Src/ethernetif.c ****     {  
 488:Src/ethernetif.c ****       dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 151              		.loc 1 488 0 discriminator 3
 152 008e 1A68     		ldr	r2, [r3]
 153 0090 42F00042 		orr	r2, r2, #-2147483648
 154 0094 1A60     		str	r2, [r3]
 489:Src/ethernetif.c ****       dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 155              		.loc 1 489 0 discriminator 3
 156 0096 DB68     		ldr	r3, [r3, #12]
 157              	.LVL25:
 486:Src/ethernetif.c ****     {  
 158              		.loc 1 486 0 discriminator 3
 159 0098 0131     		adds	r1, r1, #1
 160              	.LVL26:
 161              	.L8:
 486:Src/ethernetif.c ****     {  
 162              		.loc 1 486 0 is_stmt 0 discriminator 1
 163 009a 0E4A     		ldr	r2, .L14
 164 009c 926B     		ldr	r2, [r2, #56]
 165 009e 8A42     		cmp	r2, r1
 166 00a0 F5D8     		bhi	.L9
 490:Src/ethernetif.c ****     }
 491:Src/ethernetif.c ****     
 492:Src/ethernetif.c ****     /* Clear Segment_Count */
 493:Src/ethernetif.c ****     heth.RxFrameInfos.SegCount =0;  
 167              		.loc 1 493 0 is_stmt 1
 168 00a2 0C4B     		ldr	r3, .L14
 169              	.LVL27:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 13


 170 00a4 0022     		movs	r2, #0
 171 00a6 9A63     		str	r2, [r3, #56]
 494:Src/ethernetif.c ****   
 495:Src/ethernetif.c ****   /* When Rx Buffer unavailable flag is set: clear it and resume reception */
 496:Src/ethernetif.c ****   if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 172              		.loc 1 496 0
 173 00a8 1B68     		ldr	r3, [r3]
 174 00aa 41F21402 		movw	r2, #4116
 175 00ae 9A58     		ldr	r2, [r3, r2]
 176 00b0 12F0800F 		tst	r2, #128
 177 00b4 07D0     		beq	.L1
 497:Src/ethernetif.c ****   {
 498:Src/ethernetif.c ****     /* Clear RBUS ETHERNET DMA flag */
 499:Src/ethernetif.c ****     heth.Instance->DMASR = ETH_DMASR_RBUS;
 178              		.loc 1 499 0
 179 00b6 41F21402 		movw	r2, #4116
 180 00ba 8021     		movs	r1, #128
 181              	.LVL28:
 182 00bc 9950     		str	r1, [r3, r2]
 500:Src/ethernetif.c ****     /* Resume DMA reception */
 501:Src/ethernetif.c ****     heth.Instance->DMARPDR = 0;
 183              		.loc 1 501 0
 184 00be 41F20802 		movw	r2, #4104
 185 00c2 0021     		movs	r1, #0
 186 00c4 9950     		str	r1, [r3, r2]
 187              	.LVL29:
 188              	.L1:
 502:Src/ethernetif.c ****   }
 503:Src/ethernetif.c ****   return p;
 504:Src/ethernetif.c **** }
 189              		.loc 1 504 0
 190 00c6 4046     		mov	r0, r8
 191 00c8 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 192              	.LVL30:
 193              	.L10:
 441:Src/ethernetif.c ****   
 194              		.loc 1 441 0
 195 00cc 4FF00008 		mov	r8, #0
 196 00d0 F9E7     		b	.L1
 197              	.L15:
 198 00d2 00BF     		.align	2
 199              	.L14:
 200 00d4 00000000 		.word	heth
 201              		.cfi_endproc
 202              	.LFE164:
 204              		.section	.text.ethernetif_input,"ax",%progbits
 205              		.align	1
 206              		.global	ethernetif_input
 207              		.syntax unified
 208              		.thumb
 209              		.thumb_func
 210              		.fpu fpv5-sp-d16
 212              	ethernetif_input:
 213              	.LFB165:
 505:Src/ethernetif.c **** 
 506:Src/ethernetif.c **** /**
 507:Src/ethernetif.c ****  * This function should be called when a packet is ready to be read
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 14


 508:Src/ethernetif.c ****  * from the interface. It uses the function low_level_input() that
 509:Src/ethernetif.c ****  * should handle the actual reception of bytes from the network
 510:Src/ethernetif.c ****  * interface. Then the type of the received packet is determined and
 511:Src/ethernetif.c ****  * the appropriate input function is called.
 512:Src/ethernetif.c ****  *
 513:Src/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 514:Src/ethernetif.c ****  */
 515:Src/ethernetif.c **** void ethernetif_input( void const * argument ) 
 516:Src/ethernetif.c **** {
 214              		.loc 1 516 0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218              	.LVL31:
 219 0000 38B5     		push	{r3, r4, r5, lr}
 220              	.LCFI1:
 221              		.cfi_def_cfa_offset 16
 222              		.cfi_offset 3, -16
 223              		.cfi_offset 4, -12
 224              		.cfi_offset 5, -8
 225              		.cfi_offset 14, -4
 226 0002 0546     		mov	r5, r0
 227              	.LVL32:
 228              	.L17:
 517:Src/ethernetif.c ****   struct pbuf *p;
 518:Src/ethernetif.c ****   struct netif *netif = (struct netif *) argument;
 519:Src/ethernetif.c ****   
 520:Src/ethernetif.c ****   for( ;; )
 521:Src/ethernetif.c ****   {
 522:Src/ethernetif.c ****     if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 229              		.loc 1 522 0
 230 0004 4FF0FF31 		mov	r1, #-1
 231 0008 0B4B     		ldr	r3, .L22
 232 000a 1868     		ldr	r0, [r3]
 233 000c FFF7FEFF 		bl	osSemaphoreWait
 234              	.LVL33:
 235 0010 0028     		cmp	r0, #0
 236 0012 F7D1     		bne	.L17
 237 0014 01E0     		b	.L19
 238              	.LVL34:
 239              	.L18:
 523:Src/ethernetif.c ****     {
 524:Src/ethernetif.c ****       do
 525:Src/ethernetif.c ****       {   
 526:Src/ethernetif.c ****         p = low_level_input( netif );
 527:Src/ethernetif.c ****         if   (p != NULL)
 528:Src/ethernetif.c ****         {
 529:Src/ethernetif.c ****           if (netif->input( p, netif) != ERR_OK )
 530:Src/ethernetif.c ****           {
 531:Src/ethernetif.c ****             pbuf_free(p);
 532:Src/ethernetif.c ****           }
 533:Src/ethernetif.c ****         }
 534:Src/ethernetif.c ****       } while(p!=NULL);
 240              		.loc 1 534 0
 241 0016 002C     		cmp	r4, #0
 242 0018 F4D0     		beq	.L17
 243              	.LVL35:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 15


 244              	.L19:
 526:Src/ethernetif.c ****         if   (p != NULL)
 245              		.loc 1 526 0
 246 001a 2846     		mov	r0, r5
 247 001c FFF7FEFF 		bl	low_level_input
 248              	.LVL36:
 527:Src/ethernetif.c ****         {
 249              		.loc 1 527 0
 250 0020 0446     		mov	r4, r0
 251 0022 0028     		cmp	r0, #0
 252 0024 F7D0     		beq	.L18
 529:Src/ethernetif.c ****           {
 253              		.loc 1 529 0
 254 0026 2B69     		ldr	r3, [r5, #16]
 255 0028 2946     		mov	r1, r5
 256 002a 9847     		blx	r3
 257              	.LVL37:
 258 002c 0028     		cmp	r0, #0
 259 002e F2D0     		beq	.L18
 531:Src/ethernetif.c ****           }
 260              		.loc 1 531 0
 261 0030 2046     		mov	r0, r4
 262 0032 FFF7FEFF 		bl	pbuf_free
 263              	.LVL38:
 264 0036 EEE7     		b	.L18
 265              	.L23:
 266              		.align	2
 267              	.L22:
 268 0038 00000000 		.word	.LANCHOR0
 269              		.cfi_endproc
 270              	.LFE165:
 272              		.section	.text.low_level_output,"ax",%progbits
 273              		.align	1
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 277              		.fpu fpv5-sp-d16
 279              	low_level_output:
 280              	.LFB163:
 343:Src/ethernetif.c ****   err_t errval;
 281              		.loc 1 343 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              	.LVL39:
 286 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 287              	.LCFI2:
 288              		.cfi_def_cfa_offset 40
 289              		.cfi_offset 3, -40
 290              		.cfi_offset 4, -36
 291              		.cfi_offset 5, -32
 292              		.cfi_offset 6, -28
 293              		.cfi_offset 7, -24
 294              		.cfi_offset 8, -20
 295              		.cfi_offset 9, -16
 296              		.cfi_offset 10, -12
 297              		.cfi_offset 11, -8
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 16


 298              		.cfi_offset 14, -4
 299 0004 8B46     		mov	fp, r1
 346:Src/ethernetif.c ****   __IO ETH_DMADescTypeDef *DmaTxDesc;
 300              		.loc 1 346 0
 301 0006 2C4B     		ldr	r3, .L36
 302 0008 DE6A     		ldr	r6, [r3, #44]
 303 000a D6F808A0 		ldr	r10, [r6, #8]
 304              	.LVL40:
 353:Src/ethernetif.c ****   
 305              		.loc 1 353 0
 306 000e 0024     		movs	r4, #0
 348:Src/ethernetif.c ****   uint32_t bufferoffset = 0;
 307              		.loc 1 348 0
 308 0010 2746     		mov	r7, r4
 309              	.LVL41:
 310              	.L25:
 356:Src/ethernetif.c ****     {
 311              		.loc 1 356 0 discriminator 1
 312 0012 BBF1000F 		cmp	fp, #0
 313 0016 32D0     		beq	.L34
 359:Src/ethernetif.c ****       {
 314              		.loc 1 359 0
 315 0018 3368     		ldr	r3, [r6]
 316 001a 002B     		cmp	r3, #0
 317 001c 35DB     		blt	.L31
 366:Src/ethernetif.c ****       payloadoffset = 0;
 318              		.loc 1 366 0
 319 001e BBF80A90 		ldrh	r9, [fp, #10]
 320              	.LVL42:
 367:Src/ethernetif.c ****     
 321              		.loc 1 367 0
 322 0022 0025     		movs	r5, #0
 323              	.LVL43:
 324              	.L27:
 370:Src/ethernetif.c ****       {
 325              		.loc 1 370 0
 326 0024 04EB0908 		add	r8, r4, r9
 327 0028 40F2F453 		movw	r3, #1524
 328 002c 9845     		cmp	r8, r3
 329 002e 19D9     		bls	.L35
 373:Src/ethernetif.c ****       
 330              		.loc 1 373 0
 331 0030 DBF80410 		ldr	r1, [fp, #4]
 332 0034 40F2F452 		movw	r2, #1524
 333 0038 121B     		subs	r2, r2, r4
 334 003a 2944     		add	r1, r1, r5
 335 003c 0AEB0400 		add	r0, r10, r4
 336 0040 FFF7FEFF 		bl	memcpy
 337              	.LVL44:
 376:Src/ethernetif.c ****       
 338              		.loc 1 376 0
 339 0044 F668     		ldr	r6, [r6, #12]
 340              	.LVL45:
 379:Src/ethernetif.c ****         {
 341              		.loc 1 379 0
 342 0046 3368     		ldr	r3, [r6]
 343 0048 002B     		cmp	r3, #0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 17


 344 004a 21DB     		blt	.L32
 385:Src/ethernetif.c ****       
 345              		.loc 1 385 0
 346 004c D6F808A0 		ldr	r10, [r6, #8]
 347              	.LVL46:
 387:Src/ethernetif.c ****         payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 348              		.loc 1 387 0
 349 0050 A8F2F459 		subw	r9, r8, #1524
 350              	.LVL47:
 388:Src/ethernetif.c ****         framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 351              		.loc 1 388 0
 352 0054 2D1B     		subs	r5, r5, r4
 353              	.LVL48:
 354 0056 05F2F455 		addw	r5, r5, #1524
 355              	.LVL49:
 389:Src/ethernetif.c ****         bufferoffset = 0;
 356              		.loc 1 389 0
 357 005a 3F1B     		subs	r7, r7, r4
 358              	.LVL50:
 359 005c 07F2F457 		addw	r7, r7, #1524
 360              	.LVL51:
 390:Src/ethernetif.c ****       }
 361              		.loc 1 390 0
 362 0060 0024     		movs	r4, #0
 363 0062 DFE7     		b	.L27
 364              	.LVL52:
 365              	.L35:
 394:Src/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 366              		.loc 1 394 0 discriminator 2
 367 0064 DBF80410 		ldr	r1, [fp, #4]
 368 0068 4A46     		mov	r2, r9
 369 006a 2944     		add	r1, r1, r5
 370 006c 0AEB0400 		add	r0, r10, r4
 371 0070 FFF7FEFF 		bl	memcpy
 372              	.LVL53:
 396:Src/ethernetif.c ****     }
 373              		.loc 1 396 0 discriminator 2
 374 0074 4F44     		add	r7, r7, r9
 375              	.LVL54:
 356:Src/ethernetif.c ****     {
 376              		.loc 1 356 0 discriminator 2
 377 0076 DBF800B0 		ldr	fp, [fp]
 378              	.LVL55:
 395:Src/ethernetif.c ****       framelength = framelength + byteslefttocopy;
 379              		.loc 1 395 0 discriminator 2
 380 007a 4446     		mov	r4, r8
 381 007c C9E7     		b	.L25
 382              	.LVL56:
 383              	.L34:
 400:Src/ethernetif.c ****   
 384              		.loc 1 400 0
 385 007e 3946     		mov	r1, r7
 386 0080 0D48     		ldr	r0, .L36
 387 0082 FFF7FEFF 		bl	HAL_ETH_TransmitFrame
 388              	.LVL57:
 402:Src/ethernetif.c ****   
 389              		.loc 1 402 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 18


 390 0086 0020     		movs	r0, #0
 391 0088 04E0     		b	.L26
 392              	.LVL58:
 393              	.L31:
 361:Src/ethernetif.c ****         goto error;
 394              		.loc 1 361 0
 395 008a 6FF00700 		mvn	r0, #7
 396 008e 01E0     		b	.L26
 397              	.LVL59:
 398              	.L32:
 381:Src/ethernetif.c ****           goto error;
 399              		.loc 1 381 0
 400 0090 6FF00700 		mvn	r0, #7
 401              	.LVL60:
 402              	.L26:
 407:Src/ethernetif.c ****   {
 403              		.loc 1 407 0
 404 0094 084B     		ldr	r3, .L36
 405 0096 1B68     		ldr	r3, [r3]
 406 0098 41F21402 		movw	r2, #4116
 407 009c 9A58     		ldr	r2, [r3, r2]
 408 009e 12F0200F 		tst	r2, #32
 409 00a2 07D0     		beq	.L30
 410:Src/ethernetif.c **** 
 410              		.loc 1 410 0
 411 00a4 41F21402 		movw	r2, #4116
 412 00a8 2021     		movs	r1, #32
 413 00aa 9950     		str	r1, [r3, r2]
 413:Src/ethernetif.c ****   }
 414              		.loc 1 413 0
 415 00ac 41F20402 		movw	r2, #4100
 416 00b0 0021     		movs	r1, #0
 417 00b2 9950     		str	r1, [r3, r2]
 418              	.L30:
 416:Src/ethernetif.c **** 
 419              		.loc 1 416 0
 420 00b4 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 421              	.LVL61:
 422              	.L37:
 423              		.align	2
 424              	.L36:
 425 00b8 00000000 		.word	heth
 426              		.cfi_endproc
 427              	.LFE163:
 429              		.section	.text.low_level_init,"ax",%progbits
 430              		.align	1
 431              		.syntax unified
 432              		.thumb
 433              		.thumb_func
 434              		.fpu fpv5-sp-d16
 436              	low_level_init:
 437              	.LFB162:
 228:Src/ethernetif.c ****   uint32_t regvalue = 0;
 438              		.loc 1 228 0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 40
 441              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 19


 442              	.LVL62:
 443 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 444              	.LCFI3:
 445              		.cfi_def_cfa_offset 20
 446              		.cfi_offset 4, -20
 447              		.cfi_offset 5, -16
 448              		.cfi_offset 6, -12
 449              		.cfi_offset 7, -8
 450              		.cfi_offset 14, -4
 451 0002 8BB0     		sub	sp, sp, #44
 452              	.LCFI4:
 453              		.cfi_def_cfa_offset 64
 454 0004 0446     		mov	r4, r0
 229:Src/ethernetif.c ****   HAL_StatusTypeDef hal_eth_init_status;
 455              		.loc 1 229 0
 456 0006 0023     		movs	r3, #0
 457 0008 0993     		str	r3, [sp, #36]
 235:Src/ethernetif.c ****   heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 458              		.loc 1 235 0
 459 000a 3E48     		ldr	r0, .L41
 460              	.LVL63:
 461 000c 3E4A     		ldr	r2, .L41+4
 462 000e 0260     		str	r2, [r0]
 236:Src/ethernetif.c ****   heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 463              		.loc 1 236 0
 464 0010 0122     		movs	r2, #1
 465 0012 4260     		str	r2, [r0, #4]
 237:Src/ethernetif.c ****   MACAddr[0] = 0x00;
 466              		.loc 1 237 0
 467 0014 0382     		strh	r3, [r0, #16]	@ movhi
 238:Src/ethernetif.c ****   MACAddr[1] = 0x80;
 468              		.loc 1 238 0
 469 0016 8DF81C30 		strb	r3, [sp, #28]
 239:Src/ethernetif.c ****   MACAddr[2] = 0xE1;
 470              		.loc 1 239 0
 471 001a 8021     		movs	r1, #128
 472 001c 8DF81D10 		strb	r1, [sp, #29]
 240:Src/ethernetif.c ****   MACAddr[3] = 0x00;
 473              		.loc 1 240 0
 474 0020 E121     		movs	r1, #225
 475 0022 8DF81E10 		strb	r1, [sp, #30]
 241:Src/ethernetif.c ****   MACAddr[4] = 0xCA;
 476              		.loc 1 241 0
 477 0026 8DF81F30 		strb	r3, [sp, #31]
 242:Src/ethernetif.c ****   MACAddr[5] = 0xFE;
 478              		.loc 1 242 0
 479 002a CA21     		movs	r1, #202
 480 002c 8DF82010 		strb	r1, [sp, #32]
 243:Src/ethernetif.c ****   heth.Init.MACAddr = &MACAddr[0];
 481              		.loc 1 243 0
 482 0030 FE21     		movs	r1, #254
 483 0032 8DF82110 		strb	r1, [sp, #33]
 244:Src/ethernetif.c ****   heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 484              		.loc 1 244 0
 485 0036 07A9     		add	r1, sp, #28
 486 0038 4161     		str	r1, [r0, #20]
 245:Src/ethernetif.c ****   heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 20


 487              		.loc 1 245 0
 488 003a 8261     		str	r2, [r0, #24]
 246:Src/ethernetif.c ****   heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 489              		.loc 1 246 0
 490 003c C361     		str	r3, [r0, #28]
 247:Src/ethernetif.c **** 
 491              		.loc 1 247 0
 492 003e 4FF40003 		mov	r3, #8388608
 493 0042 0362     		str	r3, [r0, #32]
 253:Src/ethernetif.c **** 
 494              		.loc 1 253 0
 495 0044 FFF7FEFF 		bl	HAL_ETH_Init
 496              	.LVL64:
 255:Src/ethernetif.c ****   {
 497              		.loc 1 255 0
 498 0048 28B9     		cbnz	r0, .L39
 258:Src/ethernetif.c ****   }
 499              		.loc 1 258 0
 500 004a 94F82F30 		ldrb	r3, [r4, #47]	@ zero_extendqisi2
 501 004e 43F00403 		orr	r3, r3, #4
 502 0052 84F82F30 		strb	r3, [r4, #47]
 503              	.L39:
 261:Src/ethernetif.c ****      
 504              		.loc 1 261 0
 505 0056 2B4D     		ldr	r5, .L41
 506 0058 0423     		movs	r3, #4
 507 005a 2C4A     		ldr	r2, .L41+8
 508 005c 2C49     		ldr	r1, .L41+12
 509 005e 2846     		mov	r0, r5
 510              	.LVL65:
 511 0060 FFF7FEFF 		bl	HAL_ETH_DMATxDescListInit
 512              	.LVL66:
 264:Src/ethernetif.c ****  
 513              		.loc 1 264 0
 514 0064 0423     		movs	r3, #4
 515 0066 2B4A     		ldr	r2, .L41+16
 516 0068 2B49     		ldr	r1, .L41+20
 517 006a 2846     		mov	r0, r5
 518 006c FFF7FEFF 		bl	HAL_ETH_DMARxDescListInit
 519              	.LVL67:
 269:Src/ethernetif.c ****   
 520              		.loc 1 269 0
 521 0070 0623     		movs	r3, #6
 522 0072 84F82830 		strb	r3, [r4, #40]
 272:Src/ethernetif.c ****   netif->hwaddr[1] =  heth.Init.MACAddr[1];
 523              		.loc 1 272 0
 524 0076 6B69     		ldr	r3, [r5, #20]
 525 0078 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 526 007a 84F82920 		strb	r2, [r4, #41]
 273:Src/ethernetif.c ****   netif->hwaddr[2] =  heth.Init.MACAddr[2];
 527              		.loc 1 273 0
 528 007e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 529 0080 84F82A20 		strb	r2, [r4, #42]
 274:Src/ethernetif.c ****   netif->hwaddr[3] =  heth.Init.MACAddr[3];
 530              		.loc 1 274 0
 531 0084 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 532 0086 84F82B20 		strb	r2, [r4, #43]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 21


 275:Src/ethernetif.c ****   netif->hwaddr[4] =  heth.Init.MACAddr[4];
 533              		.loc 1 275 0
 534 008a DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 535 008c 84F82C20 		strb	r2, [r4, #44]
 276:Src/ethernetif.c ****   netif->hwaddr[5] =  heth.Init.MACAddr[5];
 536              		.loc 1 276 0
 537 0090 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 538 0092 84F82D20 		strb	r2, [r4, #45]
 277:Src/ethernetif.c ****   
 539              		.loc 1 277 0
 540 0096 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 541 0098 84F82E30 		strb	r3, [r4, #46]
 280:Src/ethernetif.c ****   
 542              		.loc 1 280 0
 543 009c 40F2DC53 		movw	r3, #1500
 544 00a0 E384     		strh	r3, [r4, #38]	@ movhi
 285:Src/ethernetif.c ****   #else 
 545              		.loc 1 285 0
 546 00a2 94F82F30 		ldrb	r3, [r4, #47]	@ zero_extendqisi2
 547 00a6 43F00A03 		orr	r3, r3, #10
 548 00aa 84F82F30 		strb	r3, [r4, #47]
 291:Src/ethernetif.c ****   s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 549              		.loc 1 291 0
 550 00ae 0AA8     		add	r0, sp, #40
 551 00b0 0023     		movs	r3, #0
 552 00b2 40F8103D 		str	r3, [r0, #-16]!
 292:Src/ethernetif.c **** 
 553              		.loc 1 292 0
 554 00b6 0121     		movs	r1, #1
 555 00b8 FFF7FEFF 		bl	osSemaphoreCreate
 556              	.LVL68:
 557 00bc 174B     		ldr	r3, .L41+24
 558 00be 1860     		str	r0, [r3]
 295:Src/ethernetif.c ****   osThreadCreate (osThread(EthIf), netif);
 559              		.loc 1 295 0
 560 00c0 01AE     		add	r6, sp, #4
 561 00c2 174F     		ldr	r7, .L41+28
 562 00c4 0FCF     		ldmia	r7!, {r0, r1, r2, r3}
 563 00c6 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 564 00c8 3B68     		ldr	r3, [r7]
 565 00ca 3360     		str	r3, [r6]
 296:Src/ethernetif.c ****   /* Enable MAC and DMA transmission and reception */
 566              		.loc 1 296 0
 567 00cc 2146     		mov	r1, r4
 568 00ce 01A8     		add	r0, sp, #4
 569 00d0 FFF7FEFF 		bl	osThreadCreate
 570              	.LVL69:
 298:Src/ethernetif.c **** 
 571              		.loc 1 298 0
 572 00d4 2846     		mov	r0, r5
 573 00d6 FFF7FEFF 		bl	HAL_ETH_Start
 574              	.LVL70:
 306:Src/ethernetif.c ****   regvalue |= (PHY_ISFR_INT4);
 575              		.loc 1 306 0
 576 00da 09AA     		add	r2, sp, #36
 577 00dc 0B21     		movs	r1, #11
 578 00de 2846     		mov	r0, r5
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 22


 579 00e0 FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
 580              	.LVL71:
 307:Src/ethernetif.c **** 
 581              		.loc 1 307 0
 582 00e4 099A     		ldr	r2, [sp, #36]
 583 00e6 42F00B02 		orr	r2, r2, #11
 584 00ea 0992     		str	r2, [sp, #36]
 310:Src/ethernetif.c ****   
 585              		.loc 1 310 0
 586 00ec 0B21     		movs	r1, #11
 587 00ee 2846     		mov	r0, r5
 588 00f0 FFF7FEFF 		bl	HAL_ETH_WritePHYRegister
 589              	.LVL72:
 313:Src/ethernetif.c **** 
 590              		.loc 1 313 0
 591 00f4 09AA     		add	r2, sp, #36
 592 00f6 0B21     		movs	r1, #11
 593 00f8 2846     		mov	r0, r5
 594 00fa FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
 595              	.LVL73:
 324:Src/ethernetif.c **** 
 596              		.loc 1 324 0
 597 00fe 0BB0     		add	sp, sp, #44
 598              	.LCFI5:
 599              		.cfi_def_cfa_offset 20
 600              		@ sp needed
 601 0100 F0BD     		pop	{r4, r5, r6, r7, pc}
 602              	.LVL74:
 603              	.L42:
 604 0102 00BF     		.align	2
 605              	.L41:
 606 0104 00000000 		.word	heth
 607 0108 00800240 		.word	1073905664
 608 010c 00000000 		.word	Tx_Buff
 609 0110 00000000 		.word	DMATxDscrTab
 610 0114 00000000 		.word	Rx_Buff
 611 0118 00000000 		.word	DMARxDscrTab
 612 011c 00000000 		.word	.LANCHOR0
 613 0120 00000000 		.word	.LANCHOR1
 614              		.cfi_endproc
 615              	.LFE162:
 617              		.section	.text.HAL_ETH_MspInit,"ax",%progbits
 618              		.align	1
 619              		.global	HAL_ETH_MspInit
 620              		.syntax unified
 621              		.thumb
 622              		.thumb_func
 623              		.fpu fpv5-sp-d16
 625              	HAL_ETH_MspInit:
 626              	.LFB159:
 116:Src/ethernetif.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 627              		.loc 1 116 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 32
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631              	.LVL75:
 118:Src/ethernetif.c ****   {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 23


 632              		.loc 1 118 0
 633 0000 0268     		ldr	r2, [r0]
 634 0002 284B     		ldr	r3, .L50
 635 0004 9A42     		cmp	r2, r3
 636 0006 00D0     		beq	.L49
 637 0008 7047     		bx	lr
 638              	.L49:
 116:Src/ethernetif.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 639              		.loc 1 116 0
 640 000a F0B5     		push	{r4, r5, r6, r7, lr}
 641              	.LCFI6:
 642              		.cfi_def_cfa_offset 20
 643              		.cfi_offset 4, -20
 644              		.cfi_offset 5, -16
 645              		.cfi_offset 6, -12
 646              		.cfi_offset 7, -8
 647              		.cfi_offset 14, -4
 648 000c 89B0     		sub	sp, sp, #36
 649              	.LCFI7:
 650              		.cfi_def_cfa_offset 56
 651              	.LBB2:
 124:Src/ethernetif.c ****   
 652              		.loc 1 124 0
 653 000e A3F59043 		sub	r3, r3, #18432
 654 0012 1A6B     		ldr	r2, [r3, #48]
 655 0014 42F00072 		orr	r2, r2, #33554432
 656 0018 1A63     		str	r2, [r3, #48]
 657 001a 1A6B     		ldr	r2, [r3, #48]
 658 001c 02F00072 		and	r2, r2, #33554432
 659 0020 0092     		str	r2, [sp]
 660 0022 009A     		ldr	r2, [sp]
 661              	.LBE2:
 662              	.LBB3:
 663 0024 1A6B     		ldr	r2, [r3, #48]
 664 0026 42F08062 		orr	r2, r2, #67108864
 665 002a 1A63     		str	r2, [r3, #48]
 666 002c 1A6B     		ldr	r2, [r3, #48]
 667 002e 02F08062 		and	r2, r2, #67108864
 668 0032 0192     		str	r2, [sp, #4]
 669 0034 019A     		ldr	r2, [sp, #4]
 670              	.LBE3:
 671              	.LBB4:
 672 0036 1A6B     		ldr	r2, [r3, #48]
 673 0038 42F00062 		orr	r2, r2, #134217728
 674 003c 1A63     		str	r2, [r3, #48]
 675 003e 1B6B     		ldr	r3, [r3, #48]
 676 0040 03F00063 		and	r3, r3, #134217728
 677 0044 0293     		str	r3, [sp, #8]
 678 0046 029B     		ldr	r3, [sp, #8]
 679              	.LBE4:
 137:Src/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 680              		.loc 1 137 0
 681 0048 4FF4D043 		mov	r3, #26624
 682 004c 0393     		str	r3, [sp, #12]
 138:Src/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 683              		.loc 1 138 0
 684 004e 0227     		movs	r7, #2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 24


 685 0050 0497     		str	r7, [sp, #16]
 139:Src/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 686              		.loc 1 139 0
 687 0052 0024     		movs	r4, #0
 688 0054 0594     		str	r4, [sp, #20]
 140:Src/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 689              		.loc 1 140 0
 690 0056 0326     		movs	r6, #3
 691 0058 0696     		str	r6, [sp, #24]
 141:Src/ethernetif.c ****     HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 692              		.loc 1 141 0
 693 005a 0B25     		movs	r5, #11
 694 005c 0795     		str	r5, [sp, #28]
 142:Src/ethernetif.c **** 
 695              		.loc 1 142 0
 696 005e 03A9     		add	r1, sp, #12
 697 0060 1148     		ldr	r0, .L50+4
 698              	.LVL76:
 699 0062 FFF7FEFF 		bl	HAL_GPIO_Init
 700              	.LVL77:
 144:Src/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 701              		.loc 1 144 0
 702 0066 3223     		movs	r3, #50
 703 0068 0393     		str	r3, [sp, #12]
 145:Src/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 704              		.loc 1 145 0
 705 006a 0497     		str	r7, [sp, #16]
 146:Src/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 706              		.loc 1 146 0
 707 006c 0594     		str	r4, [sp, #20]
 147:Src/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 708              		.loc 1 147 0
 709 006e 0696     		str	r6, [sp, #24]
 148:Src/ethernetif.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 710              		.loc 1 148 0
 711 0070 0795     		str	r5, [sp, #28]
 149:Src/ethernetif.c **** 
 712              		.loc 1 149 0
 713 0072 03A9     		add	r1, sp, #12
 714 0074 0D48     		ldr	r0, .L50+8
 715 0076 FFF7FEFF 		bl	HAL_GPIO_Init
 716              	.LVL78:
 151:Src/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 717              		.loc 1 151 0
 718 007a 8623     		movs	r3, #134
 719 007c 0393     		str	r3, [sp, #12]
 152:Src/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 720              		.loc 1 152 0
 721 007e 0497     		str	r7, [sp, #16]
 153:Src/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 722              		.loc 1 153 0
 723 0080 0594     		str	r4, [sp, #20]
 154:Src/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 724              		.loc 1 154 0
 725 0082 0696     		str	r6, [sp, #24]
 155:Src/ethernetif.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 726              		.loc 1 155 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 25


 727 0084 0795     		str	r5, [sp, #28]
 156:Src/ethernetif.c **** 
 728              		.loc 1 156 0
 729 0086 03A9     		add	r1, sp, #12
 730 0088 0948     		ldr	r0, .L50+12
 731 008a FFF7FEFF 		bl	HAL_GPIO_Init
 732              	.LVL79:
 159:Src/ethernetif.c ****     HAL_NVIC_EnableIRQ(ETH_IRQn);
 733              		.loc 1 159 0
 734 008e 2246     		mov	r2, r4
 735 0090 0521     		movs	r1, #5
 736 0092 3D20     		movs	r0, #61
 737 0094 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 738              	.LVL80:
 160:Src/ethernetif.c ****   /* USER CODE BEGIN ETH_MspInit 1 */
 739              		.loc 1 160 0
 740 0098 3D20     		movs	r0, #61
 741 009a FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 742              	.LVL81:
 165:Src/ethernetif.c **** 
 743              		.loc 1 165 0
 744 009e 09B0     		add	sp, sp, #36
 745              	.LCFI8:
 746              		.cfi_def_cfa_offset 20
 747              		@ sp needed
 748 00a0 F0BD     		pop	{r4, r5, r6, r7, pc}
 749              	.L51:
 750 00a2 00BF     		.align	2
 751              	.L50:
 752 00a4 00800240 		.word	1073905664
 753 00a8 00180240 		.word	1073879040
 754 00ac 00080240 		.word	1073874944
 755 00b0 00000240 		.word	1073872896
 756              		.cfi_endproc
 757              	.LFE159:
 759              		.section	.text.HAL_ETH_MspDeInit,"ax",%progbits
 760              		.align	1
 761              		.global	HAL_ETH_MspDeInit
 762              		.syntax unified
 763              		.thumb
 764              		.thumb_func
 765              		.fpu fpv5-sp-d16
 767              	HAL_ETH_MspDeInit:
 768              	.LFB160:
 168:Src/ethernetif.c ****   if(ethHandle->Instance==ETH)
 769              		.loc 1 168 0
 770              		.cfi_startproc
 771              		@ args = 0, pretend = 0, frame = 0
 772              		@ frame_needed = 0, uses_anonymous_args = 0
 773              	.LVL82:
 774 0000 08B5     		push	{r3, lr}
 775              	.LCFI9:
 776              		.cfi_def_cfa_offset 8
 777              		.cfi_offset 3, -8
 778              		.cfi_offset 14, -4
 169:Src/ethernetif.c ****   {
 779              		.loc 1 169 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 26


 780 0002 0268     		ldr	r2, [r0]
 781 0004 114B     		ldr	r3, .L56
 782 0006 9A42     		cmp	r2, r3
 783 0008 00D0     		beq	.L55
 784              	.LVL83:
 785              	.L52:
 201:Src/ethernetif.c **** 
 786              		.loc 1 201 0
 787 000a 08BD     		pop	{r3, pc}
 788              	.LVL84:
 789              	.L55:
 175:Src/ethernetif.c ****   
 790              		.loc 1 175 0
 791 000c A3F59043 		sub	r3, r3, #18432
 792 0010 1A6B     		ldr	r2, [r3, #48]
 793 0012 22F08062 		bic	r2, r2, #67108864
 794 0016 1A63     		str	r2, [r3, #48]
 795 0018 1A6B     		ldr	r2, [r3, #48]
 796 001a 22F00062 		bic	r2, r2, #134217728
 797 001e 1A63     		str	r2, [r3, #48]
 798 0020 1A6B     		ldr	r2, [r3, #48]
 799 0022 22F00072 		bic	r2, r2, #33554432
 800 0026 1A63     		str	r2, [r3, #48]
 188:Src/ethernetif.c **** 
 801              		.loc 1 188 0
 802 0028 4FF4D041 		mov	r1, #26624
 803 002c 0848     		ldr	r0, .L56+4
 804              	.LVL85:
 805 002e FFF7FEFF 		bl	HAL_GPIO_DeInit
 806              	.LVL86:
 190:Src/ethernetif.c **** 
 807              		.loc 1 190 0
 808 0032 3221     		movs	r1, #50
 809 0034 0748     		ldr	r0, .L56+8
 810 0036 FFF7FEFF 		bl	HAL_GPIO_DeInit
 811              	.LVL87:
 192:Src/ethernetif.c **** 
 812              		.loc 1 192 0
 813 003a 8621     		movs	r1, #134
 814 003c 0648     		ldr	r0, .L56+12
 815 003e FFF7FEFF 		bl	HAL_GPIO_DeInit
 816              	.LVL88:
 195:Src/ethernetif.c **** 
 817              		.loc 1 195 0
 818 0042 3D20     		movs	r0, #61
 819 0044 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 820              	.LVL89:
 201:Src/ethernetif.c **** 
 821              		.loc 1 201 0
 822 0048 DFE7     		b	.L52
 823              	.L57:
 824 004a 00BF     		.align	2
 825              	.L56:
 826 004c 00800240 		.word	1073905664
 827 0050 00180240 		.word	1073879040
 828 0054 00080240 		.word	1073874944
 829 0058 00000240 		.word	1073872896
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 27


 830              		.cfi_endproc
 831              	.LFE160:
 833              		.section	.text.HAL_ETH_RxCpltCallback,"ax",%progbits
 834              		.align	1
 835              		.global	HAL_ETH_RxCpltCallback
 836              		.syntax unified
 837              		.thumb
 838              		.thumb_func
 839              		.fpu fpv5-sp-d16
 841              	HAL_ETH_RxCpltCallback:
 842              	.LFB161:
 209:Src/ethernetif.c ****   osSemaphoreRelease(s_xSemaphore);
 843              		.loc 1 209 0
 844              		.cfi_startproc
 845              		@ args = 0, pretend = 0, frame = 0
 846              		@ frame_needed = 0, uses_anonymous_args = 0
 847              	.LVL90:
 848 0000 08B5     		push	{r3, lr}
 849              	.LCFI10:
 850              		.cfi_def_cfa_offset 8
 851              		.cfi_offset 3, -8
 852              		.cfi_offset 14, -4
 210:Src/ethernetif.c **** }
 853              		.loc 1 210 0
 854 0002 024B     		ldr	r3, .L60
 855 0004 1868     		ldr	r0, [r3]
 856              	.LVL91:
 857 0006 FFF7FEFF 		bl	osSemaphoreRelease
 858              	.LVL92:
 211:Src/ethernetif.c **** 
 859              		.loc 1 211 0
 860 000a 08BD     		pop	{r3, pc}
 861              	.L61:
 862              		.align	2
 863              	.L60:
 864 000c 00000000 		.word	.LANCHOR0
 865              		.cfi_endproc
 866              	.LFE161:
 868              		.section	.text.ethernetif_init,"ax",%progbits
 869              		.align	1
 870              		.global	ethernetif_init
 871              		.syntax unified
 872              		.thumb
 873              		.thumb_func
 874              		.fpu fpv5-sp-d16
 876              	ethernetif_init:
 877              	.LFB166:
 535:Src/ethernetif.c ****     }
 536:Src/ethernetif.c ****   }
 537:Src/ethernetif.c **** }
 538:Src/ethernetif.c **** 
 539:Src/ethernetif.c **** #if !LWIP_ARP
 540:Src/ethernetif.c **** /**
 541:Src/ethernetif.c ****  * This function has to be completed by user in case of ARP OFF.
 542:Src/ethernetif.c ****  *
 543:Src/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 544:Src/ethernetif.c ****  * @return ERR_OK if ...
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 28


 545:Src/ethernetif.c ****  */
 546:Src/ethernetif.c **** static err_t low_level_output_arp_off(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr
 547:Src/ethernetif.c **** {  
 548:Src/ethernetif.c ****   err_t errval;
 549:Src/ethernetif.c ****   errval = ERR_OK;
 550:Src/ethernetif.c ****     
 551:Src/ethernetif.c **** /* USER CODE BEGIN 5 */ 
 552:Src/ethernetif.c ****     
 553:Src/ethernetif.c **** /* USER CODE END 5 */  
 554:Src/ethernetif.c ****     
 555:Src/ethernetif.c ****   return errval;
 556:Src/ethernetif.c ****   
 557:Src/ethernetif.c **** }
 558:Src/ethernetif.c **** #endif /* LWIP_ARP */ 
 559:Src/ethernetif.c **** 
 560:Src/ethernetif.c **** /**
 561:Src/ethernetif.c ****  * Should be called at the beginning of the program to set up the
 562:Src/ethernetif.c ****  * network interface. It calls the function low_level_init() to do the
 563:Src/ethernetif.c ****  * actual setup of the hardware.
 564:Src/ethernetif.c ****  *
 565:Src/ethernetif.c ****  * This function should be passed as a parameter to netif_add().
 566:Src/ethernetif.c ****  *
 567:Src/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 568:Src/ethernetif.c ****  * @return ERR_OK if the loopif is initialized
 569:Src/ethernetif.c ****  *         ERR_MEM if private data couldn't be allocated
 570:Src/ethernetif.c ****  *         any other err_t on error
 571:Src/ethernetif.c ****  */
 572:Src/ethernetif.c **** err_t ethernetif_init(struct netif *netif)
 573:Src/ethernetif.c **** {
 878              		.loc 1 573 0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 0
 881              		@ frame_needed = 0, uses_anonymous_args = 0
 882              	.LVL93:
 883 0000 10B5     		push	{r4, lr}
 884              	.LCFI11:
 885              		.cfi_def_cfa_offset 8
 886              		.cfi_offset 4, -8
 887              		.cfi_offset 14, -4
 574:Src/ethernetif.c ****   LWIP_ASSERT("netif != NULL", (netif != NULL));
 888              		.loc 1 574 0
 889 0002 0446     		mov	r4, r0
 890 0004 70B1     		cbz	r0, .L65
 891              	.LVL94:
 892              	.L63:
 575:Src/ethernetif.c ****   
 576:Src/ethernetif.c **** #if LWIP_NETIF_HOSTNAME
 577:Src/ethernetif.c ****   /* Initialize interface hostname */
 578:Src/ethernetif.c ****   netif->hostname = "lwip";
 579:Src/ethernetif.c **** #endif /* LWIP_NETIF_HOSTNAME */
 580:Src/ethernetif.c **** 
 581:Src/ethernetif.c ****   netif->name[0] = IFNAME0;
 893              		.loc 1 581 0
 894 0006 7323     		movs	r3, #115
 895 0008 84F83030 		strb	r3, [r4, #48]
 582:Src/ethernetif.c ****   netif->name[1] = IFNAME1;
 896              		.loc 1 582 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 29


 897 000c 7423     		movs	r3, #116
 898 000e 84F83130 		strb	r3, [r4, #49]
 583:Src/ethernetif.c ****   /* We directly use etharp_output() here to save a function call.
 584:Src/ethernetif.c ****    * You can instead declare your own function an call etharp_output()
 585:Src/ethernetif.c ****    * from it if you have to do some checks before sending (e.g. if link
 586:Src/ethernetif.c ****    * is available...) */
 587:Src/ethernetif.c **** 
 588:Src/ethernetif.c **** #if LWIP_IPV4
 589:Src/ethernetif.c **** #if LWIP_ARP || LWIP_ETHERNET
 590:Src/ethernetif.c **** #if LWIP_ARP
 591:Src/ethernetif.c ****   netif->output = etharp_output;
 899              		.loc 1 591 0
 900 0012 084B     		ldr	r3, .L66
 901 0014 6361     		str	r3, [r4, #20]
 592:Src/ethernetif.c **** #else
 593:Src/ethernetif.c ****   /* The user should write ist own code in low_level_output_arp_off function */
 594:Src/ethernetif.c ****   netif->output = low_level_output_arp_off;
 595:Src/ethernetif.c **** #endif /* LWIP_ARP */
 596:Src/ethernetif.c **** #endif /* LWIP_ARP || LWIP_ETHERNET */
 597:Src/ethernetif.c **** #endif /* LWIP_IPV4 */
 598:Src/ethernetif.c ****  
 599:Src/ethernetif.c **** #if LWIP_IPV6
 600:Src/ethernetif.c ****   netif->output_ip6 = ethip6_output;
 601:Src/ethernetif.c **** #endif /* LWIP_IPV6 */
 602:Src/ethernetif.c **** 
 603:Src/ethernetif.c ****   netif->linkoutput = low_level_output;
 902              		.loc 1 603 0
 903 0016 084B     		ldr	r3, .L66+4
 904 0018 A361     		str	r3, [r4, #24]
 604:Src/ethernetif.c **** 
 605:Src/ethernetif.c ****   /* initialize the hardware */
 606:Src/ethernetif.c ****   low_level_init(netif);
 905              		.loc 1 606 0
 906 001a 2046     		mov	r0, r4
 907 001c FFF7FEFF 		bl	low_level_init
 908              	.LVL95:
 607:Src/ethernetif.c **** 
 608:Src/ethernetif.c ****   return ERR_OK;
 609:Src/ethernetif.c **** }
 909              		.loc 1 609 0
 910 0020 0020     		movs	r0, #0
 911 0022 10BD     		pop	{r4, pc}
 912              	.LVL96:
 913              	.L65:
 574:Src/ethernetif.c ****   
 914              		.loc 1 574 0 discriminator 1
 915 0024 054B     		ldr	r3, .L66+8
 916 0026 40F23E22 		movw	r2, #574
 917 002a 0549     		ldr	r1, .L66+12
 918 002c 0548     		ldr	r0, .L66+16
 919              	.LVL97:
 920 002e FFF7FEFF 		bl	printf
 921              	.LVL98:
 922 0032 E8E7     		b	.L63
 923              	.L67:
 924              		.align	2
 925              	.L66:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 30


 926 0034 00000000 		.word	etharp_output
 927 0038 00000000 		.word	low_level_output
 928 003c 00000000 		.word	.LC3
 929 0040 14000000 		.word	.LC4
 930 0044 24000000 		.word	.LC5
 931              		.cfi_endproc
 932              	.LFE166:
 934              		.section	.text.sys_jiffies,"ax",%progbits
 935              		.align	1
 936              		.global	sys_jiffies
 937              		.syntax unified
 938              		.thumb
 939              		.thumb_func
 940              		.fpu fpv5-sp-d16
 942              	sys_jiffies:
 943              	.LFB167:
 610:Src/ethernetif.c **** 
 611:Src/ethernetif.c **** /* USER CODE BEGIN 6 */
 612:Src/ethernetif.c **** 
 613:Src/ethernetif.c **** /**
 614:Src/ethernetif.c **** * @brief  Returns the current time in milliseconds
 615:Src/ethernetif.c **** *         when LWIP_TIMERS == 1 and NO_SYS == 1
 616:Src/ethernetif.c **** * @param  None
 617:Src/ethernetif.c **** * @retval Time
 618:Src/ethernetif.c **** */
 619:Src/ethernetif.c **** u32_t sys_jiffies(void)
 620:Src/ethernetif.c **** {
 944              		.loc 1 620 0
 945              		.cfi_startproc
 946              		@ args = 0, pretend = 0, frame = 0
 947              		@ frame_needed = 0, uses_anonymous_args = 0
 948 0000 08B5     		push	{r3, lr}
 949              	.LCFI12:
 950              		.cfi_def_cfa_offset 8
 951              		.cfi_offset 3, -8
 952              		.cfi_offset 14, -4
 621:Src/ethernetif.c ****   return HAL_GetTick();
 953              		.loc 1 621 0
 954 0002 FFF7FEFF 		bl	HAL_GetTick
 955              	.LVL99:
 622:Src/ethernetif.c **** }
 956              		.loc 1 622 0
 957 0006 08BD     		pop	{r3, pc}
 958              		.cfi_endproc
 959              	.LFE167:
 961              		.section	.text.sys_now,"ax",%progbits
 962              		.align	1
 963              		.global	sys_now
 964              		.syntax unified
 965              		.thumb
 966              		.thumb_func
 967              		.fpu fpv5-sp-d16
 969              	sys_now:
 970              	.LFB168:
 623:Src/ethernetif.c **** 
 624:Src/ethernetif.c **** /**
 625:Src/ethernetif.c **** * @brief  Returns the current time in milliseconds
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 31


 626:Src/ethernetif.c **** *         when LWIP_TIMERS == 1 and NO_SYS == 1
 627:Src/ethernetif.c **** * @param  None
 628:Src/ethernetif.c **** * @retval Time
 629:Src/ethernetif.c **** */
 630:Src/ethernetif.c **** u32_t sys_now(void)
 631:Src/ethernetif.c **** {
 971              		.loc 1 631 0
 972              		.cfi_startproc
 973              		@ args = 0, pretend = 0, frame = 0
 974              		@ frame_needed = 0, uses_anonymous_args = 0
 975 0000 08B5     		push	{r3, lr}
 976              	.LCFI13:
 977              		.cfi_def_cfa_offset 8
 978              		.cfi_offset 3, -8
 979              		.cfi_offset 14, -4
 632:Src/ethernetif.c ****   return HAL_GetTick();
 980              		.loc 1 632 0
 981 0002 FFF7FEFF 		bl	HAL_GetTick
 982              	.LVL100:
 633:Src/ethernetif.c **** }
 983              		.loc 1 633 0
 984 0006 08BD     		pop	{r3, pc}
 985              		.cfi_endproc
 986              	.LFE168:
 988              		.comm	heth,72,4
 989              		.global	s_xSemaphore
 990              		.comm	Tx_Buff,6096,4
 991              		.comm	Rx_Buff,6096,4
 992              		.comm	DMATxDscrTab,128,4
 993              		.comm	DMARxDscrTab,128,4
 994              		.section	.rodata
 995              		.align	2
 996              		.set	.LANCHOR1,. + 0
 997              	.LC2:
 998 0000 00000000 		.word	.LC0
 999 0004 00000000 		.word	ethernetif_input
 1000 0008 0300     		.short	3
 1001 000a 0000     		.space	2
 1002 000c 00000000 		.word	0
 1003 0010 5E010000 		.word	350
 1004              		.section	.bss.s_xSemaphore,"aw",%nobits
 1005              		.align	2
 1006              		.set	.LANCHOR0,. + 0
 1009              	s_xSemaphore:
 1010 0000 00000000 		.space	4
 1011              		.section	.rodata.ethernetif_init.str1.4,"aMS",%progbits,1
 1012              		.align	2
 1013              	.LC3:
 1014 0000 5372632F 		.ascii	"Src/ethernetif.c\000"
 1014      65746865 
 1014      726E6574 
 1014      69662E63 
 1014      00
 1015 0011 000000   		.space	3
 1016              	.LC4:
 1017 0014 6E657469 		.ascii	"netif != NULL\000"
 1017      6620213D 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 32


 1017      204E554C 
 1017      4C00
 1018 0022 0000     		.space	2
 1019              	.LC5:
 1020 0024 41737365 		.ascii	"Assertion \"%s\" failed at line %d in %s\012\000"
 1020      7274696F 
 1020      6E202225 
 1020      73222066 
 1020      61696C65 
 1021              		.section	.rodata.str1.4,"aMS",%progbits,1
 1022              		.align	2
 1023              	.LC0:
 1024 0000 45746849 		.ascii	"EthIf\000"
 1024      6600
 1025              		.text
 1026              	.Letext0:
 1027              		.file 2 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\machine\\_default
 1028              		.file 3 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 1029              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 1030              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1031              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 1032              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 1033              		.file 8 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 1034              		.file 9 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 1035              		.file 10 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\lib\\gcc\\arm-none-eabi\\7.3.1\\include\
 1036              		.file 11 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 1037              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1038              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 1039              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_eth.h"
 1040              		.file 15 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\stdlib.h"
 1041              		.file 16 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\time.h"
 1042              		.file 17 "Middlewares/Third_Party/LwIP/src/include/lwip/arch.h"
 1043              		.file 18 "Middlewares/Third_Party/LwIP/src/include/lwip/err.h"
 1044              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
 1045              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 1046              		.file 21 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 1047              		.file 22 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1048              		.file 23 "Middlewares/Third_Party/LwIP/src/include/lwip/timeouts.h"
 1049              		.file 24 "Middlewares/Third_Party/LwIP/src/include/lwip/pbuf.h"
 1050              		.file 25 "Middlewares/Third_Party/LwIP/src/include/lwip/ip4_addr.h"
 1051              		.file 26 "Middlewares/Third_Party/LwIP/src/include/lwip/ip_addr.h"
 1052              		.file 27 "Middlewares/Third_Party/LwIP/src/include/lwip/memp.h"
 1053              		.file 28 "Middlewares/Third_Party/LwIP/src/include/lwip/priv/memp_priv.h"
 1054              		.file 29 "Middlewares/Third_Party/LwIP/src/include/lwip/netif.h"
 1055              		.file 30 "Middlewares/Third_Party/LwIP/src/include/lwip/prot/ethernet.h"
 1056              		.file 31 "Middlewares/Third_Party/LwIP/src/include/netif/ethernet.h"
 1057              		.file 32 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 1058              		.file 33 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\stdio.h"
 1059              		.file 34 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_cortex.h"
 1060              		.file 35 "<built-in>"
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 33


DEFINED SYMBOLS
                            *ABS*:00000000 ethernetif.c
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:18     .text.low_level_input:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:24     .text.low_level_input:00000000 low_level_input
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:200    .text.low_level_input:000000d4 $d
                            *COM*:00000048 heth
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:205    .text.ethernetif_input:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:212    .text.ethernetif_input:00000000 ethernetif_input
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:268    .text.ethernetif_input:00000038 $d
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:273    .text.low_level_output:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:279    .text.low_level_output:00000000 low_level_output
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:425    .text.low_level_output:000000b8 $d
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:430    .text.low_level_init:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:436    .text.low_level_init:00000000 low_level_init
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:606    .text.low_level_init:00000104 $d
                            *COM*:000017d0 Tx_Buff
                            *COM*:00000080 DMATxDscrTab
                            *COM*:000017d0 Rx_Buff
                            *COM*:00000080 DMARxDscrTab
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:618    .text.HAL_ETH_MspInit:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:625    .text.HAL_ETH_MspInit:00000000 HAL_ETH_MspInit
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:752    .text.HAL_ETH_MspInit:000000a4 $d
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:760    .text.HAL_ETH_MspDeInit:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:767    .text.HAL_ETH_MspDeInit:00000000 HAL_ETH_MspDeInit
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:826    .text.HAL_ETH_MspDeInit:0000004c $d
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:834    .text.HAL_ETH_RxCpltCallback:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:841    .text.HAL_ETH_RxCpltCallback:00000000 HAL_ETH_RxCpltCallback
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:864    .text.HAL_ETH_RxCpltCallback:0000000c $d
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:869    .text.ethernetif_init:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:876    .text.ethernetif_init:00000000 ethernetif_init
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:926    .text.ethernetif_init:00000034 $d
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:935    .text.sys_jiffies:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:942    .text.sys_jiffies:00000000 sys_jiffies
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:962    .text.sys_now:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:969    .text.sys_now:00000000 sys_now
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:1009   .bss.s_xSemaphore:00000000 s_xSemaphore
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:995    .rodata:00000000 $d
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:1005   .bss.s_xSemaphore:00000000 $d
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:1012   .rodata.ethernetif_init.str1.4:00000000 $d
C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s:1022   .rodata.str1.4:00000000 $d

UNDEFINED SYMBOLS
HAL_ETH_GetReceivedFrame_IT
pbuf_alloc
memcpy
osSemaphoreWait
pbuf_free
HAL_ETH_TransmitFrame
HAL_ETH_Init
HAL_ETH_DMATxDescListInit
HAL_ETH_DMARxDescListInit
osSemaphoreCreate
osThreadCreate
HAL_ETH_Start
HAL_ETH_ReadPHYRegister
HAL_ETH_WritePHYRegister
HAL_GPIO_Init
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccDZxzUz.s 			page 34


HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_DeInit
HAL_NVIC_DisableIRQ
osSemaphoreRelease
printf
etharp_output
HAL_GetTick

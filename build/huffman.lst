ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"huffman.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.DecodeHuffmanPairs,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	DecodeHuffmanPairs:
  25              	.LFB0:
  26              		.file 1 "lib/helix/real/huffman.c"
   1:lib/helix/real/huffman.c **** /* ***** BEGIN LICENSE BLOCK ***** 
   2:lib/helix/real/huffman.c ****  * Version: RCSL 1.0/RPSL 1.0 
   3:lib/helix/real/huffman.c ****  *  
   4:lib/helix/real/huffman.c ****  * Portions Copyright (c) 1995-2002 RealNetworks, Inc. All Rights Reserved. 
   5:lib/helix/real/huffman.c ****  *      
   6:lib/helix/real/huffman.c ****  * The contents of this file, and the files included with this file, are 
   7:lib/helix/real/huffman.c ****  * subject to the current version of the RealNetworks Public Source License 
   8:lib/helix/real/huffman.c ****  * Version 1.0 (the "RPSL") available at 
   9:lib/helix/real/huffman.c ****  * http://www.helixcommunity.org/content/rpsl unless you have licensed 
  10:lib/helix/real/huffman.c ****  * the file under the RealNetworks Community Source License Version 1.0 
  11:lib/helix/real/huffman.c ****  * (the "RCSL") available at http://www.helixcommunity.org/content/rcsl, 
  12:lib/helix/real/huffman.c ****  * in which case the RCSL will apply. You may also obtain the license terms 
  13:lib/helix/real/huffman.c ****  * directly from RealNetworks.  You may not use this file except in 
  14:lib/helix/real/huffman.c ****  * compliance with the RPSL or, if you have a valid RCSL with RealNetworks 
  15:lib/helix/real/huffman.c ****  * applicable to this file, the RCSL.  Please see the applicable RPSL or 
  16:lib/helix/real/huffman.c ****  * RCSL for the rights, obligations and limitations governing use of the 
  17:lib/helix/real/huffman.c ****  * contents of the file.  
  18:lib/helix/real/huffman.c ****  *  
  19:lib/helix/real/huffman.c ****  * This file is part of the Helix DNA Technology. RealNetworks is the 
  20:lib/helix/real/huffman.c ****  * developer of the Original Code and owns the copyrights in the portions 
  21:lib/helix/real/huffman.c ****  * it created. 
  22:lib/helix/real/huffman.c ****  *  
  23:lib/helix/real/huffman.c ****  * This file, and the files included with this file, is distributed and made 
  24:lib/helix/real/huffman.c ****  * available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER 
  25:lib/helix/real/huffman.c ****  * EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS ALL SUCH WARRANTIES, 
  26:lib/helix/real/huffman.c ****  * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS 
  27:lib/helix/real/huffman.c ****  * FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. 
  28:lib/helix/real/huffman.c ****  * 
  29:lib/helix/real/huffman.c ****  * Technology Compatibility Kit Test Suite(s) Location: 
  30:lib/helix/real/huffman.c ****  *    http://www.helixcommunity.org/content/tck 
  31:lib/helix/real/huffman.c ****  * 
  32:lib/helix/real/huffman.c ****  * Contributor(s): 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 2


  33:lib/helix/real/huffman.c ****  *  
  34:lib/helix/real/huffman.c ****  * ***** END LICENSE BLOCK ***** */ 
  35:lib/helix/real/huffman.c **** 
  36:lib/helix/real/huffman.c **** /**************************************************************************************
  37:lib/helix/real/huffman.c ****  * Fixed-point MP3 decoder
  38:lib/helix/real/huffman.c ****  * Jon Recker (jrecker@real.com), Ken Cooke (kenc@real.com)
  39:lib/helix/real/huffman.c ****  * July 2003
  40:lib/helix/real/huffman.c ****  *
  41:lib/helix/real/huffman.c ****  * huffman.c - Huffman decoding of transform coefficients
  42:lib/helix/real/huffman.c ****  **************************************************************************************/
  43:lib/helix/real/huffman.c **** 
  44:lib/helix/real/huffman.c **** #include "coder.h"
  45:lib/helix/real/huffman.c **** 
  46:lib/helix/real/huffman.c **** /* helper macros - see comments in hufftabs.c about the format of the huffman tables */
  47:lib/helix/real/huffman.c **** #define GetMaxbits(x)   ((int)( (((unsigned short)(x)) >>  0) & 0x000f))
  48:lib/helix/real/huffman.c **** #define GetHLen(x)      ((int)( (((unsigned short)(x)) >> 12) & 0x000f))
  49:lib/helix/real/huffman.c **** #define GetCWY(x)       ((int)( (((unsigned short)(x)) >>  8) & 0x000f))
  50:lib/helix/real/huffman.c **** #define GetCWX(x)       ((int)( (((unsigned short)(x)) >>  4) & 0x000f))
  51:lib/helix/real/huffman.c **** #define GetSignBits(x)  ((int)( (((unsigned short)(x)) >>  0) & 0x000f))
  52:lib/helix/real/huffman.c **** 
  53:lib/helix/real/huffman.c **** #define GetHLenQ(x)     ((int)( (((unsigned char)(x)) >> 4) & 0x0f))
  54:lib/helix/real/huffman.c **** #define GetCWVQ(x)      ((int)( (((unsigned char)(x)) >> 3) & 0x01))
  55:lib/helix/real/huffman.c **** #define GetCWWQ(x)      ((int)( (((unsigned char)(x)) >> 2) & 0x01))
  56:lib/helix/real/huffman.c **** #define GetCWXQ(x)      ((int)( (((unsigned char)(x)) >> 1) & 0x01))
  57:lib/helix/real/huffman.c **** #define GetCWYQ(x)      ((int)( (((unsigned char)(x)) >> 0) & 0x01))
  58:lib/helix/real/huffman.c **** 
  59:lib/helix/real/huffman.c **** /* apply sign of s to the positive number x (save in MSB, will do two's complement in dequant) */
  60:lib/helix/real/huffman.c **** #define ApplySign(x, s)	{ (x) |= ((s) & 0x80000000); }
  61:lib/helix/real/huffman.c **** 
  62:lib/helix/real/huffman.c **** /**************************************************************************************
  63:lib/helix/real/huffman.c ****  * Function:    DecodeHuffmanPairs
  64:lib/helix/real/huffman.c ****  *
  65:lib/helix/real/huffman.c ****  * Description: decode 2-way vector Huffman codes in the "bigValues" region of spectrum
  66:lib/helix/real/huffman.c ****  *
  67:lib/helix/real/huffman.c ****  * Inputs:      valid BitStreamInfo struct, pointing to start of pair-wise codes
  68:lib/helix/real/huffman.c ****  *              pointer to xy buffer to received decoded values
  69:lib/helix/real/huffman.c ****  *              number of codewords to decode
  70:lib/helix/real/huffman.c ****  *              index of Huffman table to use
  71:lib/helix/real/huffman.c ****  *              number of bits remaining in bitstream
  72:lib/helix/real/huffman.c ****  *
  73:lib/helix/real/huffman.c ****  * Outputs:     pairs of decoded coefficients in vwxy
  74:lib/helix/real/huffman.c ****  *              updated BitStreamInfo struct
  75:lib/helix/real/huffman.c ****  *
  76:lib/helix/real/huffman.c ****  * Return:      number of bits used, or -1 if out of bits
  77:lib/helix/real/huffman.c ****  *
  78:lib/helix/real/huffman.c ****  * Notes:       assumes that nVals is an even number
  79:lib/helix/real/huffman.c ****  *              si_huff.bit tests every Huffman codeword in every table (though not
  80:lib/helix/real/huffman.c ****  *                necessarily all linBits outputs for x,y > 15)
  81:lib/helix/real/huffman.c ****  **************************************************************************************/
  82:lib/helix/real/huffman.c **** static int DecodeHuffmanPairs(int *xy, int nVals, int tabIdx, int bitsLeft, unsigned char *buf, int
  83:lib/helix/real/huffman.c **** {
  27              		.loc 1 83 0
  28              		.cfi_startproc
  29              		@ args = 8, pretend = 0, frame = 16
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 3


  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 36
  35              		.cfi_offset 4, -36
  36              		.cfi_offset 5, -32
  37              		.cfi_offset 6, -28
  38              		.cfi_offset 7, -24
  39              		.cfi_offset 8, -20
  40              		.cfi_offset 9, -16
  41              		.cfi_offset 10, -12
  42              		.cfi_offset 11, -8
  43              		.cfi_offset 14, -4
  44 0004 85B0     		sub	sp, sp, #20
  45              	.LCFI1:
  46              		.cfi_def_cfa_offset 56
  47 0006 0393     		str	r3, [sp, #12]
  48 0008 0E9D     		ldr	r5, [sp, #56]
  84:lib/helix/real/huffman.c **** 	int i, x, y;
  85:lib/helix/real/huffman.c **** 	int cachedBits, padBits, len, startBits, linBits, maxBits, minBits;
  86:lib/helix/real/huffman.c **** 	HuffTabType tabType;
  87:lib/helix/real/huffman.c **** 	unsigned short cw, *tBase, *tCurr;
  88:lib/helix/real/huffman.c **** 	unsigned int cache;
  89:lib/helix/real/huffman.c **** 
  90:lib/helix/real/huffman.c **** 	if(nVals <= 0) 
  49              		.loc 1 90 0
  50 000a 0029     		cmp	r1, #0
  51 000c 40F3A481 		ble	.L38
  52 0010 8646     		mov	lr, r0
  91:lib/helix/real/huffman.c **** 		return 0;
  92:lib/helix/real/huffman.c **** 
  93:lib/helix/real/huffman.c **** 	if (bitsLeft < 0)
  53              		.loc 1 93 0
  54 0012 002B     		cmp	r3, #0
  55 0014 C0F2A881 		blt	.L39
  56              	.LVL1:
  94:lib/helix/real/huffman.c **** 		return -1;
  95:lib/helix/real/huffman.c **** 	startBits = bitsLeft;
  96:lib/helix/real/huffman.c **** 
  97:lib/helix/real/huffman.c **** 	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
  57              		.loc 1 97 0
  58 0018 D04B     		ldr	r3, .L62
  59              	.LVL2:
  60 001a 53F82240 		ldr	r4, [r3, r2, lsl #2]
  61 001e D048     		ldr	r0, .L62+4
  62              	.LVL3:
  63 0020 00EB4403 		add	r3, r0, r4, lsl #1
  64 0024 0193     		str	r3, [sp, #4]
  65              	.LVL4:
  98:lib/helix/real/huffman.c **** 	linBits = huffTabLookup[tabIdx].linBits;
  66              		.loc 1 98 0
  67 0026 CF4B     		ldr	r3, .L62+8
  68              	.LVL5:
  69 0028 53F832A0 		ldr	r10, [r3, r2, lsl #3]
  70              	.LVL6:
  99:lib/helix/real/huffman.c **** 	tabType = huffTabLookup[tabIdx].tabType;
  71              		.loc 1 99 0
  72 002c 03EBC203 		add	r3, r3, r2, lsl #3
  73 0030 93F804B0 		ldrb	fp, [r3, #4]	@ zero_extendqisi2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 4


  74              	.LVL7:
 100:lib/helix/real/huffman.c **** 
 101:lib/helix/real/huffman.c **** 	ASSERT(!(nVals & 0x01));
 102:lib/helix/real/huffman.c **** 	ASSERT(tabIdx < HUFF_PAIRTABS);
 103:lib/helix/real/huffman.c **** 	ASSERT(tabIdx >= 0);
 104:lib/helix/real/huffman.c **** 	ASSERT(tabType != invalidTab);
 105:lib/helix/real/huffman.c **** 
 106:lib/helix/real/huffman.c **** 	/* initially fill cache with any partial byte */
 107:lib/helix/real/huffman.c **** 	cache = 0;
 108:lib/helix/real/huffman.c **** 	cachedBits = (8 - bitOffset) & 0x07;
  75              		.loc 1 108 0
  76 0034 0F9B     		ldr	r3, [sp, #60]
  77 0036 5B42     		negs	r3, r3
  78              	.LVL8:
 109:lib/helix/real/huffman.c **** 	if (cachedBits)
  79              		.loc 1 109 0
  80 0038 13F00703 		ands	r3, r3, #7
  81              	.LVL9:
  82 003c 2FD0     		beq	.L40
  83              	.LVL10:
 110:lib/helix/real/huffman.c **** 		cache = (unsigned int)(*buf++) << (32 - cachedBits);
  84              		.loc 1 110 0
  85 003e 2E78     		ldrb	r6, [r5]	@ zero_extendqisi2
  86 0040 C3F12002 		rsb	r2, r3, #32
  87              	.LVL11:
  88 0044 06FA02F2 		lsl	r2, r6, r2
  89              	.LVL12:
  90 0048 0135     		adds	r5, r5, #1
  91              	.LVL13:
  92              	.L3:
 111:lib/helix/real/huffman.c **** 	bitsLeft -= cachedBits;
  93              		.loc 1 111 0
  94 004a 039E     		ldr	r6, [sp, #12]
  95 004c A6EB030C 		sub	ip, r6, r3
  96              	.LVL14:
 112:lib/helix/real/huffman.c **** 
 113:lib/helix/real/huffman.c **** 	if (tabType == noBits) {
  97              		.loc 1 113 0
  98 0050 BBF1000F 		cmp	fp, #0
  99 0054 32D0     		beq	.L41
 114:lib/helix/real/huffman.c **** 		/* table 0, no data, x = y = 0 */
 115:lib/helix/real/huffman.c **** 		for (i = 0; i < nVals; i+=2) {
 116:lib/helix/real/huffman.c **** 			xy[i+0] = 0;
 117:lib/helix/real/huffman.c **** 			xy[i+1] = 0;
 118:lib/helix/real/huffman.c **** 		}
 119:lib/helix/real/huffman.c **** 		return 0;
 120:lib/helix/real/huffman.c **** 	} else if (tabType == oneShot) {
 100              		.loc 1 120 0
 101 0056 BBF1010F 		cmp	fp, #1
 102 005a 31D0     		beq	.L53
 121:lib/helix/real/huffman.c **** 		/* single lookup, no escapes */
 122:lib/helix/real/huffman.c **** 		maxBits = GetMaxbits(tBase[0]);
 123:lib/helix/real/huffman.c **** 		tBase++;
 124:lib/helix/real/huffman.c **** 		padBits = 0;
 125:lib/helix/real/huffman.c **** 		while (nVals > 0) {
 126:lib/helix/real/huffman.c **** 			/* refill cache - assumes cachedBits <= 16 */
 127:lib/helix/real/huffman.c **** 			if (bitsLeft >= 16) {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 5


 128:lib/helix/real/huffman.c **** 				/* load 2 new bytes into left-justified cache */
 129:lib/helix/real/huffman.c **** 				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 130:lib/helix/real/huffman.c **** 				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 131:lib/helix/real/huffman.c **** 				cachedBits += 16;
 132:lib/helix/real/huffman.c **** 				bitsLeft -= 16;
 133:lib/helix/real/huffman.c **** 			} else {
 134:lib/helix/real/huffman.c **** 				/* last time through, pad cache with zeros and drain cache */
 135:lib/helix/real/huffman.c **** 				if (cachedBits + bitsLeft <= 0)	return -1;
 136:lib/helix/real/huffman.c **** 				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 137:lib/helix/real/huffman.c **** 				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 138:lib/helix/real/huffman.c **** 				cachedBits += bitsLeft;
 139:lib/helix/real/huffman.c **** 				bitsLeft = 0;
 140:lib/helix/real/huffman.c **** 
 141:lib/helix/real/huffman.c **** 				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 142:lib/helix/real/huffman.c **** 				padBits = 11;
 143:lib/helix/real/huffman.c **** 				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 144:lib/helix/real/huffman.c **** 			}
 145:lib/helix/real/huffman.c **** 
 146:lib/helix/real/huffman.c **** 			/* largest maxBits = 9, plus 2 for sign bits, so make sure cache has at least 11 bits */
 147:lib/helix/real/huffman.c **** 			while (nVals > 0 && cachedBits >= 11 ) {
 148:lib/helix/real/huffman.c **** 				cw = tBase[cache >> (32 - maxBits)];
 149:lib/helix/real/huffman.c **** 				len = GetHLen(cw);
 150:lib/helix/real/huffman.c **** 				cachedBits -= len;
 151:lib/helix/real/huffman.c **** 				cache <<= len;
 152:lib/helix/real/huffman.c **** 
 153:lib/helix/real/huffman.c **** 				x = GetCWX(cw);		if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 154:lib/helix/real/huffman.c **** 				y = GetCWY(cw);		if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 155:lib/helix/real/huffman.c **** 
 156:lib/helix/real/huffman.c **** 				/* ran out of bits - should never have consumed padBits */
 157:lib/helix/real/huffman.c **** 				if (cachedBits < padBits)
 158:lib/helix/real/huffman.c **** 					return -1;
 159:lib/helix/real/huffman.c **** 
 160:lib/helix/real/huffman.c **** 				*xy++ = x;
 161:lib/helix/real/huffman.c **** 				*xy++ = y;
 162:lib/helix/real/huffman.c **** 				nVals -= 2;
 163:lib/helix/real/huffman.c **** 			}
 164:lib/helix/real/huffman.c **** 		}
 165:lib/helix/real/huffman.c **** 		bitsLeft += (cachedBits - padBits);
 166:lib/helix/real/huffman.c **** 		return (startBits - bitsLeft);
 167:lib/helix/real/huffman.c **** 	} else if (tabType == loopLinbits || tabType == loopNoLinbits) {
 103              		.loc 1 167 0
 104 005c ABF10200 		sub	r0, fp, #2
 105 0060 C0B2     		uxtb	r0, r0
 106 0062 0128     		cmp	r0, #1
 107 0064 00F2A680 		bhi	.L54
 168:lib/helix/real/huffman.c **** 		tCurr = tBase;
 108              		.loc 1 168 0
 109 0068 019E     		ldr	r6, [sp, #4]
 169:lib/helix/real/huffman.c **** 		padBits = 0;
 110              		.loc 1 169 0
 111 006a 0020     		movs	r0, #0
 112 006c 0290     		str	r0, [sp, #8]
 113              	.L18:
 114              	.LVL15:
 170:lib/helix/real/huffman.c **** 		while (nVals > 0) {
 115              		.loc 1 170 0
 116 006e 0029     		cmp	r1, #0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 6


 117 0070 40F36B81 		ble	.L55
 171:lib/helix/real/huffman.c **** 			/* refill cache - assumes cachedBits <= 16 */
 172:lib/helix/real/huffman.c **** 			if (bitsLeft >= 16) {
 118              		.loc 1 172 0
 119 0074 BCF10F0F 		cmp	ip, #15
 120 0078 40F39F80 		ble	.L19
 121              	.LVL16:
 173:lib/helix/real/huffman.c **** 				/* load 2 new bytes into left-justified cache */
 174:lib/helix/real/huffman.c **** 				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 122              		.loc 1 174 0
 123 007c 2846     		mov	r0, r5
 124 007e 10F8024B 		ldrb	r4, [r0], #2	@ zero_extendqisi2
 125 0082 C3F11807 		rsb	r7, r3, #24
 126 0086 BC40     		lsls	r4, r4, r7
 127 0088 2243     		orrs	r2, r2, r4
 128              	.LVL17:
 175:lib/helix/real/huffman.c **** 				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 129              		.loc 1 175 0
 130 008a 6C78     		ldrb	r4, [r5, #1]	@ zero_extendqisi2
 131 008c C3F11005 		rsb	r5, r3, #16
 132 0090 AC40     		lsls	r4, r4, r5
 133 0092 2243     		orrs	r2, r2, r4
 134              	.LVL18:
 176:lib/helix/real/huffman.c **** 				cachedBits += 16;
 135              		.loc 1 176 0
 136 0094 1033     		adds	r3, r3, #16
 137              	.LVL19:
 177:lib/helix/real/huffman.c **** 				bitsLeft -= 16;
 138              		.loc 1 177 0
 139 0096 ACF1100C 		sub	ip, ip, #16
 140              	.LVL20:
 175:lib/helix/real/huffman.c **** 				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 141              		.loc 1 175 0
 142 009a 0546     		mov	r5, r0
 143 009c 1CE1     		b	.L35
 144              	.LVL21:
 145              	.L40:
 107:lib/helix/real/huffman.c **** 	cachedBits = (8 - bitOffset) & 0x07;
 146              		.loc 1 107 0
 147 009e 0022     		movs	r2, #0
 148              	.LVL22:
 149 00a0 D3E7     		b	.L3
 150              	.LVL23:
 151              	.L6:
 116:lib/helix/real/huffman.c **** 			xy[i+1] = 0;
 152              		.loc 1 116 0 discriminator 3
 153 00a2 0022     		movs	r2, #0
 154 00a4 4EF82320 		str	r2, [lr, r3, lsl #2]
 117:lib/helix/real/huffman.c **** 		}
 155              		.loc 1 117 0 discriminator 3
 156 00a8 581C     		adds	r0, r3, #1
 157 00aa 4EF82020 		str	r2, [lr, r0, lsl #2]
 115:lib/helix/real/huffman.c **** 			xy[i+0] = 0;
 158              		.loc 1 115 0 discriminator 3
 159 00ae 0233     		adds	r3, r3, #2
 160              	.LVL24:
 161              	.L4:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 7


 115:lib/helix/real/huffman.c **** 			xy[i+0] = 0;
 162              		.loc 1 115 0 is_stmt 0 discriminator 1
 163 00b0 8B42     		cmp	r3, r1
 164 00b2 F6DB     		blt	.L6
 119:lib/helix/real/huffman.c **** 	} else if (tabType == oneShot) {
 165              		.loc 1 119 0 is_stmt 1
 166 00b4 0020     		movs	r0, #0
 167              	.LVL25:
 168              	.L1:
 178:lib/helix/real/huffman.c **** 			} else {
 179:lib/helix/real/huffman.c **** 				/* last time through, pad cache with zeros and drain cache */
 180:lib/helix/real/huffman.c **** 				if (cachedBits + bitsLeft <= 0)	return -1;
 181:lib/helix/real/huffman.c **** 				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 182:lib/helix/real/huffman.c **** 				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 183:lib/helix/real/huffman.c **** 				cachedBits += bitsLeft;
 184:lib/helix/real/huffman.c **** 				bitsLeft = 0;
 185:lib/helix/real/huffman.c **** 
 186:lib/helix/real/huffman.c **** 				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 187:lib/helix/real/huffman.c **** 				padBits = 11;
 188:lib/helix/real/huffman.c **** 				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 189:lib/helix/real/huffman.c **** 			}
 190:lib/helix/real/huffman.c **** 
 191:lib/helix/real/huffman.c **** 			/* largest maxBits = 9, plus 2 for sign bits, so make sure cache has at least 11 bits */
 192:lib/helix/real/huffman.c **** 			while (nVals > 0 && cachedBits >= 11 ) {
 193:lib/helix/real/huffman.c **** 				maxBits = GetMaxbits(tCurr[0]);
 194:lib/helix/real/huffman.c **** 				cw = tCurr[(cache >> (32 - maxBits)) + 1];
 195:lib/helix/real/huffman.c **** 				len = GetHLen(cw);
 196:lib/helix/real/huffman.c **** 				if (!len) {
 197:lib/helix/real/huffman.c **** 					cachedBits -= maxBits;
 198:lib/helix/real/huffman.c **** 					cache <<= maxBits;
 199:lib/helix/real/huffman.c **** 					tCurr += cw;
 200:lib/helix/real/huffman.c **** 					continue;
 201:lib/helix/real/huffman.c **** 				}
 202:lib/helix/real/huffman.c **** 				cachedBits -= len;
 203:lib/helix/real/huffman.c **** 				cache <<= len;
 204:lib/helix/real/huffman.c **** 			
 205:lib/helix/real/huffman.c **** 				x = GetCWX(cw);
 206:lib/helix/real/huffman.c **** 				y = GetCWY(cw);
 207:lib/helix/real/huffman.c **** 
 208:lib/helix/real/huffman.c **** 				if (x == 15 && tabType == loopLinbits) {
 209:lib/helix/real/huffman.c **** 					minBits = linBits + 1 + (y ? 1 : 0);
 210:lib/helix/real/huffman.c **** 					if (cachedBits + bitsLeft < minBits)
 211:lib/helix/real/huffman.c **** 						return -1;
 212:lib/helix/real/huffman.c **** 					while (cachedBits < minBits) {
 213:lib/helix/real/huffman.c **** 						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 214:lib/helix/real/huffman.c **** 						cachedBits += 8;
 215:lib/helix/real/huffman.c **** 						bitsLeft -= 8;
 216:lib/helix/real/huffman.c **** 					}
 217:lib/helix/real/huffman.c **** 					if (bitsLeft < 0) {
 218:lib/helix/real/huffman.c **** 						cachedBits += bitsLeft;
 219:lib/helix/real/huffman.c **** 						bitsLeft = 0;
 220:lib/helix/real/huffman.c **** 						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 221:lib/helix/real/huffman.c **** 					}
 222:lib/helix/real/huffman.c **** 					x += (int)(cache >> (32 - linBits));
 223:lib/helix/real/huffman.c **** 					cachedBits -= linBits;
 224:lib/helix/real/huffman.c **** 					cache <<= linBits;
 225:lib/helix/real/huffman.c **** 				}
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 8


 226:lib/helix/real/huffman.c **** 				if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 227:lib/helix/real/huffman.c **** 
 228:lib/helix/real/huffman.c **** 				if (y == 15 && tabType == loopLinbits) {
 229:lib/helix/real/huffman.c **** 					minBits = linBits + 1;
 230:lib/helix/real/huffman.c **** 					if (cachedBits + bitsLeft < minBits)
 231:lib/helix/real/huffman.c **** 						return -1;
 232:lib/helix/real/huffman.c **** 					while (cachedBits < minBits) {
 233:lib/helix/real/huffman.c **** 						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 234:lib/helix/real/huffman.c **** 						cachedBits += 8;
 235:lib/helix/real/huffman.c **** 						bitsLeft -= 8;
 236:lib/helix/real/huffman.c **** 					}
 237:lib/helix/real/huffman.c **** 					if (bitsLeft < 0) {
 238:lib/helix/real/huffman.c **** 						cachedBits += bitsLeft;
 239:lib/helix/real/huffman.c **** 						bitsLeft = 0;
 240:lib/helix/real/huffman.c **** 						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 241:lib/helix/real/huffman.c **** 					}
 242:lib/helix/real/huffman.c **** 					y += (int)(cache >> (32 - linBits));
 243:lib/helix/real/huffman.c **** 					cachedBits -= linBits;
 244:lib/helix/real/huffman.c **** 					cache <<= linBits;
 245:lib/helix/real/huffman.c **** 				}
 246:lib/helix/real/huffman.c **** 				if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 247:lib/helix/real/huffman.c **** 
 248:lib/helix/real/huffman.c **** 				/* ran out of bits - should never have consumed padBits */
 249:lib/helix/real/huffman.c **** 				if (cachedBits < padBits)
 250:lib/helix/real/huffman.c **** 					return -1;
 251:lib/helix/real/huffman.c **** 
 252:lib/helix/real/huffman.c **** 				*xy++ = x;
 253:lib/helix/real/huffman.c **** 				*xy++ = y;
 254:lib/helix/real/huffman.c **** 				nVals -= 2;
 255:lib/helix/real/huffman.c **** 				tCurr = tBase;
 256:lib/helix/real/huffman.c **** 			}
 257:lib/helix/real/huffman.c **** 		}
 258:lib/helix/real/huffman.c **** 		bitsLeft += (cachedBits - padBits);
 259:lib/helix/real/huffman.c **** 		return (startBits - bitsLeft);
 260:lib/helix/real/huffman.c **** 	}
 261:lib/helix/real/huffman.c **** 
 262:lib/helix/real/huffman.c **** 	/* error in bitstream - trying to access unused Huffman table */
 263:lib/helix/real/huffman.c **** 	return -1;
 264:lib/helix/real/huffman.c **** }
 169              		.loc 1 264 0
 170 00b6 05B0     		add	sp, sp, #20
 171              	.LCFI2:
 172              		.cfi_remember_state
 173              		.cfi_def_cfa_offset 36
 174              		@ sp needed
 175 00b8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 176              	.LVL26:
 177              	.L41:
 178              	.LCFI3:
 179              		.cfi_restore_state
 115:lib/helix/real/huffman.c **** 			xy[i+0] = 0;
 180              		.loc 1 115 0
 181 00bc 0023     		movs	r3, #0
 182              	.LVL27:
 183 00be F7E7     		b	.L4
 184              	.LVL28:
 185              	.L53:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 9


 122:lib/helix/real/huffman.c **** 		tBase++;
 186              		.loc 1 122 0
 187 00c0 30F81440 		ldrh	r4, [r0, r4, lsl #1]
 188 00c4 04F00F04 		and	r4, r4, #15
 189              	.LVL29:
 124:lib/helix/real/huffman.c **** 		while (nVals > 0) {
 190              		.loc 1 124 0
 191 00c8 0026     		movs	r6, #0
 192 00ca 019F     		ldr	r7, [sp, #4]
 193              	.LVL30:
 194              	.L8:
 125:lib/helix/real/huffman.c **** 			/* refill cache - assumes cachedBits <= 16 */
 195              		.loc 1 125 0
 196 00cc 0029     		cmp	r1, #0
 197 00ce 6BDD     		ble	.L56
 127:lib/helix/real/huffman.c **** 				/* load 2 new bytes into left-justified cache */
 198              		.loc 1 127 0
 199 00d0 BCF10F0F 		cmp	ip, #15
 200 00d4 11DD     		ble	.L9
 201              	.LVL31:
 129:lib/helix/real/huffman.c **** 				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 202              		.loc 1 129 0
 203 00d6 A846     		mov	r8, r5
 204 00d8 18F8020B 		ldrb	r0, [r8], #2	@ zero_extendqisi2
 205 00dc C3F11809 		rsb	r9, r3, #24
 206 00e0 00FA09F0 		lsl	r0, r0, r9
 207 00e4 0243     		orrs	r2, r2, r0
 208              	.LVL32:
 130:lib/helix/real/huffman.c **** 				cachedBits += 16;
 209              		.loc 1 130 0
 210 00e6 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 211 00e8 C3F11005 		rsb	r5, r3, #16
 212 00ec A840     		lsls	r0, r0, r5
 213 00ee 0243     		orrs	r2, r2, r0
 214              	.LVL33:
 131:lib/helix/real/huffman.c **** 				bitsLeft -= 16;
 215              		.loc 1 131 0
 216 00f0 1033     		adds	r3, r3, #16
 217              	.LVL34:
 132:lib/helix/real/huffman.c **** 			} else {
 218              		.loc 1 132 0
 219 00f2 ACF1100C 		sub	ip, ip, #16
 220              	.LVL35:
 130:lib/helix/real/huffman.c **** 				cachedBits += 16;
 221              		.loc 1 130 0
 222 00f6 4546     		mov	r5, r8
 223 00f8 2DE0     		b	.L15
 224              	.LVL36:
 225              	.L9:
 135:lib/helix/real/huffman.c **** 				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 226              		.loc 1 135 0
 227 00fa 0CEB0300 		add	r0, ip, r3
 228 00fe 0028     		cmp	r0, #0
 229 0100 40F33581 		ble	.L42
 136:lib/helix/real/huffman.c **** 				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 230              		.loc 1 136 0
 231 0104 BCF1000F 		cmp	ip, #0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 10


 232 0108 06DD     		ble	.L11
 233              	.LVL37:
 136:lib/helix/real/huffman.c **** 				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 234              		.loc 1 136 0 is_stmt 0 discriminator 1
 235 010a 2E78     		ldrb	r6, [r5]	@ zero_extendqisi2
 236              	.LVL38:
 237 010c C3F11808 		rsb	r8, r3, #24
 238 0110 06FA08F6 		lsl	r6, r6, r8
 239 0114 3243     		orrs	r2, r2, r6
 240              	.LVL39:
 241 0116 0135     		adds	r5, r5, #1
 242              	.LVL40:
 243              	.L11:
 137:lib/helix/real/huffman.c **** 				cachedBits += bitsLeft;
 244              		.loc 1 137 0 is_stmt 1
 245 0118 BCF1080F 		cmp	ip, #8
 246 011c 06DD     		ble	.L12
 247              	.LVL41:
 137:lib/helix/real/huffman.c **** 				cachedBits += bitsLeft;
 248              		.loc 1 137 0 is_stmt 0 discriminator 1
 249 011e 2E78     		ldrb	r6, [r5]	@ zero_extendqisi2
 250 0120 C3F11003 		rsb	r3, r3, #16
 251              	.LVL42:
 252 0124 06FA03F3 		lsl	r3, r6, r3
 253 0128 1A43     		orrs	r2, r2, r3
 254              	.LVL43:
 255 012a 0135     		adds	r5, r5, #1
 256              	.LVL44:
 257              	.L12:
 141:lib/helix/real/huffman.c **** 				padBits = 11;
 258              		.loc 1 141 0 is_stmt 1
 259 012c 461E     		subs	r6, r0, #1
 260 012e 4FF00043 		mov	r3, #-2147483648
 261 0132 3341     		asrs	r3, r3, r6
 262 0134 1A40     		ands	r2, r2, r3
 263              	.LVL45:
 143:lib/helix/real/huffman.c **** 			}
 264              		.loc 1 143 0
 265 0136 00F10B03 		add	r3, r0, #11
 266              	.LVL46:
 142:lib/helix/real/huffman.c **** 				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 267              		.loc 1 142 0
 268 013a 0B26     		movs	r6, #11
 139:lib/helix/real/huffman.c **** 
 269              		.loc 1 139 0
 270 013c 4FF0000C 		mov	ip, #0
 271 0140 09E0     		b	.L15
 272              	.LVL47:
 273              	.L14:
 157:lib/helix/real/huffman.c **** 					return -1;
 274              		.loc 1 157 0
 275 0142 B342     		cmp	r3, r6
 276 0144 C0F21681 		blt	.L43
 277              	.LVL48:
 160:lib/helix/real/huffman.c **** 				*xy++ = y;
 278              		.loc 1 160 0
 279 0148 7046     		mov	r0, lr
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 11


 280 014a 40F8089B 		str	r9, [r0], #8
 281              	.LVL49:
 161:lib/helix/real/huffman.c **** 				nVals -= 2;
 282              		.loc 1 161 0
 283 014e CEF80480 		str	r8, [lr, #4]
 162:lib/helix/real/huffman.c **** 			}
 284              		.loc 1 162 0
 285 0152 0239     		subs	r1, r1, #2
 286              	.LVL50:
 161:lib/helix/real/huffman.c **** 				nVals -= 2;
 287              		.loc 1 161 0
 288 0154 8646     		mov	lr, r0
 289              	.LVL51:
 290              	.L15:
 147:lib/helix/real/huffman.c **** 				cw = tBase[cache >> (32 - maxBits)];
 291              		.loc 1 147 0
 292 0156 0029     		cmp	r1, #0
 293 0158 C8BF     		it	gt
 294 015a 0A2B     		cmpgt	r3, #10
 295 015c B6DD     		ble	.L8
 148:lib/helix/real/huffman.c **** 				len = GetHLen(cw);
 296              		.loc 1 148 0
 297 015e C4F12000 		rsb	r0, r4, #32
 298 0162 22FA00F0 		lsr	r0, r2, r0
 299 0166 4000     		lsls	r0, r0, #1
 300 0168 0230     		adds	r0, r0, #2
 301 016a 385A     		ldrh	r0, [r7, r0]
 302              	.LVL52:
 149:lib/helix/real/huffman.c **** 				cachedBits -= len;
 303              		.loc 1 149 0
 304 016c 4FEA1038 		lsr	r8, r0, #12
 305              	.LVL53:
 150:lib/helix/real/huffman.c **** 				cache <<= len;
 306              		.loc 1 150 0
 307 0170 A3EB0803 		sub	r3, r3, r8
 308              	.LVL54:
 151:lib/helix/real/huffman.c **** 
 309              		.loc 1 151 0
 310 0174 02FA08F2 		lsl	r2, r2, r8
 311              	.LVL55:
 312 0178 C0F30318 		ubfx	r8, r0, #4, #4
 313              	.LVL56:
 153:lib/helix/real/huffman.c **** 				y = GetCWY(cw);		if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 314              		.loc 1 153 0
 315 017c C146     		mov	r9, r8
 316              	.LVL57:
 317 017e B8F1000F 		cmp	r8, #0
 318 0182 05D0     		beq	.L13
 153:lib/helix/real/huffman.c **** 				y = GetCWY(cw);		if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 319              		.loc 1 153 0 is_stmt 0 discriminator 1
 320 0184 02F00049 		and	r9, r2, #-2147483648
 321 0188 48EA0909 		orr	r9, r8, r9
 322              	.LVL58:
 323 018c 5200     		lsls	r2, r2, #1
 324              	.LVL59:
 325 018e 013B     		subs	r3, r3, #1
 326              	.LVL60:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 12


 327              	.L13:
 328 0190 C0F30320 		ubfx	r0, r0, #8, #4
 329              	.LVL61:
 154:lib/helix/real/huffman.c **** 
 330              		.loc 1 154 0 is_stmt 1
 331 0194 8046     		mov	r8, r0
 332              	.LVL62:
 333 0196 0028     		cmp	r0, #0
 334 0198 D3D0     		beq	.L14
 154:lib/helix/real/huffman.c **** 
 335              		.loc 1 154 0 is_stmt 0 discriminator 1
 336 019a 02F00048 		and	r8, r2, #-2147483648
 337 019e 40EA0808 		orr	r8, r0, r8
 338              	.LVL63:
 339 01a2 5200     		lsls	r2, r2, #1
 340              	.LVL64:
 341 01a4 013B     		subs	r3, r3, #1
 342              	.LVL65:
 343 01a6 CCE7     		b	.L14
 344              	.LVL66:
 345              	.L56:
 165:lib/helix/real/huffman.c **** 		return (startBits - bitsLeft);
 346              		.loc 1 165 0 is_stmt 1
 347 01a8 9B1B     		subs	r3, r3, r6
 348              	.LVL67:
 349 01aa 9C44     		add	ip, ip, r3
 350              	.LVL68:
 166:lib/helix/real/huffman.c **** 	} else if (tabType == loopLinbits || tabType == loopNoLinbits) {
 351              		.loc 1 166 0
 352 01ac 039B     		ldr	r3, [sp, #12]
 353 01ae A3EB0C00 		sub	r0, r3, ip
 354 01b2 80E7     		b	.L1
 355              	.LVL69:
 356              	.L54:
 263:lib/helix/real/huffman.c **** }
 357              		.loc 1 263 0
 358 01b4 4FF0FF30 		mov	r0, #-1
 359 01b8 7DE7     		b	.L1
 360              	.LVL70:
 361              	.L19:
 180:lib/helix/real/huffman.c **** 				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 362              		.loc 1 180 0
 363 01ba 0CEB0300 		add	r0, ip, r3
 364 01be 0028     		cmp	r0, #0
 365 01c0 40F3DB80 		ble	.L45
 181:lib/helix/real/huffman.c **** 				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 366              		.loc 1 181 0
 367 01c4 BCF1000F 		cmp	ip, #0
 368 01c8 05DD     		ble	.L21
 369              	.LVL71:
 181:lib/helix/real/huffman.c **** 				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 370              		.loc 1 181 0 is_stmt 0 discriminator 1
 371 01ca 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 372 01cc C3F11807 		rsb	r7, r3, #24
 373 01d0 BC40     		lsls	r4, r4, r7
 374 01d2 2243     		orrs	r2, r2, r4
 375              	.LVL72:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 13


 376 01d4 0135     		adds	r5, r5, #1
 377              	.LVL73:
 378              	.L21:
 182:lib/helix/real/huffman.c **** 				cachedBits += bitsLeft;
 379              		.loc 1 182 0 is_stmt 1
 380 01d6 BCF1080F 		cmp	ip, #8
 381 01da 06DD     		ble	.L22
 382              	.LVL74:
 182:lib/helix/real/huffman.c **** 				cachedBits += bitsLeft;
 383              		.loc 1 182 0 is_stmt 0 discriminator 1
 384 01dc 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 385 01de C3F11003 		rsb	r3, r3, #16
 386              	.LVL75:
 387 01e2 04FA03F3 		lsl	r3, r4, r3
 388 01e6 1A43     		orrs	r2, r2, r3
 389              	.LVL76:
 390 01e8 0135     		adds	r5, r5, #1
 391              	.LVL77:
 392              	.L22:
 186:lib/helix/real/huffman.c **** 				padBits = 11;
 393              		.loc 1 186 0 is_stmt 1
 394 01ea 441E     		subs	r4, r0, #1
 395 01ec 4FF00043 		mov	r3, #-2147483648
 396 01f0 2341     		asrs	r3, r3, r4
 397 01f2 1A40     		ands	r2, r2, r3
 398              	.LVL78:
 188:lib/helix/real/huffman.c **** 			}
 399              		.loc 1 188 0
 400 01f4 00F10B03 		add	r3, r0, #11
 401              	.LVL79:
 187:lib/helix/real/huffman.c **** 				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 402              		.loc 1 187 0
 403 01f8 0B20     		movs	r0, #11
 404 01fa 0290     		str	r0, [sp, #8]
 184:lib/helix/real/huffman.c **** 
 405              		.loc 1 184 0
 406 01fc 4FF0000C 		mov	ip, #0
 407 0200 6AE0     		b	.L35
 408              	.LVL80:
 409              	.L59:
 197:lib/helix/real/huffman.c **** 					cache <<= maxBits;
 410              		.loc 1 197 0
 411 0202 1B1B     		subs	r3, r3, r4
 412              	.LVL81:
 198:lib/helix/real/huffman.c **** 					tCurr += cw;
 413              		.loc 1 198 0
 414 0204 A240     		lsls	r2, r2, r4
 415              	.LVL82:
 199:lib/helix/real/huffman.c **** 					continue;
 416              		.loc 1 199 0
 417 0206 06EB4006 		add	r6, r6, r0, lsl #1
 418              	.LVL83:
 200:lib/helix/real/huffman.c **** 				}
 419              		.loc 1 200 0
 420 020a 65E0     		b	.L35
 421              	.LVL84:
 422              	.L60:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 14


 209:lib/helix/real/huffman.c **** 					if (cachedBits + bitsLeft < minBits)
 423              		.loc 1 209 0
 424 020c 0AF10108 		add	r8, r10, #1
 425 0210 0028     		cmp	r0, #0
 426 0212 18BF     		it	ne
 427 0214 08F10108 		addne	r8, r8, #1
 428              	.LVL85:
 210:lib/helix/real/huffman.c **** 						return -1;
 429              		.loc 1 210 0
 430 0218 0CEB0304 		add	r4, ip, r3
 431 021c 4445     		cmp	r4, r8
 432 021e 0CDA     		bge	.L26
 211:lib/helix/real/huffman.c **** 					while (cachedBits < minBits) {
 433              		.loc 1 211 0
 434 0220 4FF0FF30 		mov	r0, #-1
 435              	.LVL86:
 436 0224 47E7     		b	.L1
 437              	.LVL87:
 438              	.L27:
 213:lib/helix/real/huffman.c **** 						cachedBits += 8;
 439              		.loc 1 213 0
 440 0226 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 441 0228 C3F11809 		rsb	r9, r3, #24
 442 022c 04FA09F4 		lsl	r4, r4, r9
 443 0230 2243     		orrs	r2, r2, r4
 444              	.LVL88:
 214:lib/helix/real/huffman.c **** 						bitsLeft -= 8;
 445              		.loc 1 214 0
 446 0232 0833     		adds	r3, r3, #8
 447              	.LVL89:
 215:lib/helix/real/huffman.c **** 					}
 448              		.loc 1 215 0
 449 0234 ACF1080C 		sub	ip, ip, #8
 450              	.LVL90:
 213:lib/helix/real/huffman.c **** 						cachedBits += 8;
 451              		.loc 1 213 0
 452 0238 0135     		adds	r5, r5, #1
 453              	.LVL91:
 454              	.L26:
 212:lib/helix/real/huffman.c **** 						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 455              		.loc 1 212 0
 456 023a 4345     		cmp	r3, r8
 457 023c F3DB     		blt	.L27
 217:lib/helix/real/huffman.c **** 						cachedBits += bitsLeft;
 458              		.loc 1 217 0
 459 023e BCF1000F 		cmp	ip, #0
 460 0242 09DB     		blt	.L57
 461              	.LVL92:
 462              	.L28:
 222:lib/helix/real/huffman.c **** 					cachedBits -= linBits;
 463              		.loc 1 222 0
 464 0244 CAF12004 		rsb	r4, r10, #32
 465 0248 22FA04F4 		lsr	r4, r2, r4
 466 024c 2644     		add	r6, r6, r4
 467              	.LVL93:
 223:lib/helix/real/huffman.c **** 					cache <<= linBits;
 468              		.loc 1 223 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 15


 469 024e A3EB0A03 		sub	r3, r3, r10
 470              	.LVL94:
 224:lib/helix/real/huffman.c **** 				}
 471              		.loc 1 224 0
 472 0252 02FA0AF2 		lsl	r2, r2, r10
 473              	.LVL95:
 474 0256 63E0     		b	.L25
 475              	.L57:
 218:lib/helix/real/huffman.c **** 						bitsLeft = 0;
 476              		.loc 1 218 0
 477 0258 6344     		add	r3, r3, ip
 478              	.LVL96:
 220:lib/helix/real/huffman.c **** 					}
 479              		.loc 1 220 0
 480 025a 03F1FF3C 		add	ip, r3, #-1
 481 025e 4FF00044 		mov	r4, #-2147483648
 482 0262 44FA0CF4 		asr	r4, r4, ip
 483 0266 2240     		ands	r2, r2, r4
 484              	.LVL97:
 219:lib/helix/real/huffman.c **** 						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 485              		.loc 1 219 0
 486 0268 4FF0000C 		mov	ip, #0
 487 026c EAE7     		b	.L28
 488              	.LVL98:
 489              	.L61:
 229:lib/helix/real/huffman.c **** 					if (cachedBits + bitsLeft < minBits)
 490              		.loc 1 229 0
 491 026e 0AF10108 		add	r8, r10, #1
 492              	.LVL99:
 230:lib/helix/real/huffman.c **** 						return -1;
 493              		.loc 1 230 0
 494 0272 0CEB0304 		add	r4, ip, r3
 495 0276 4445     		cmp	r4, r8
 496 0278 0BDA     		bge	.L31
 231:lib/helix/real/huffman.c **** 					while (cachedBits < minBits) {
 497              		.loc 1 231 0
 498 027a 4FF0FF30 		mov	r0, #-1
 499              	.LVL100:
 500 027e 1AE7     		b	.L1
 501              	.LVL101:
 502              	.L32:
 233:lib/helix/real/huffman.c **** 						cachedBits += 8;
 503              		.loc 1 233 0
 504 0280 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 505 0282 C3F11807 		rsb	r7, r3, #24
 506 0286 BC40     		lsls	r4, r4, r7
 507 0288 2243     		orrs	r2, r2, r4
 508              	.LVL102:
 234:lib/helix/real/huffman.c **** 						bitsLeft -= 8;
 509              		.loc 1 234 0
 510 028a 0833     		adds	r3, r3, #8
 511              	.LVL103:
 235:lib/helix/real/huffman.c **** 					}
 512              		.loc 1 235 0
 513 028c ACF1080C 		sub	ip, ip, #8
 514              	.LVL104:
 233:lib/helix/real/huffman.c **** 						cachedBits += 8;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 16


 515              		.loc 1 233 0
 516 0290 0135     		adds	r5, r5, #1
 517              	.LVL105:
 518              	.L31:
 232:lib/helix/real/huffman.c **** 						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 519              		.loc 1 232 0
 520 0292 4345     		cmp	r3, r8
 521 0294 F4DB     		blt	.L32
 237:lib/helix/real/huffman.c **** 						cachedBits += bitsLeft;
 522              		.loc 1 237 0
 523 0296 BCF1000F 		cmp	ip, #0
 524 029a 09DB     		blt	.L58
 525              	.LVL106:
 526              	.L33:
 242:lib/helix/real/huffman.c **** 					cachedBits -= linBits;
 527              		.loc 1 242 0
 528 029c CAF12004 		rsb	r4, r10, #32
 529 02a0 22FA04F4 		lsr	r4, r2, r4
 530 02a4 2044     		add	r0, r0, r4
 531              	.LVL107:
 243:lib/helix/real/huffman.c **** 					cache <<= linBits;
 532              		.loc 1 243 0
 533 02a6 A3EB0A03 		sub	r3, r3, r10
 534              	.LVL108:
 244:lib/helix/real/huffman.c **** 				}
 535              		.loc 1 244 0
 536 02aa 02FA0AF2 		lsl	r2, r2, r10
 537              	.LVL109:
 538 02ae 44E0     		b	.L30
 539              	.L58:
 238:lib/helix/real/huffman.c **** 						bitsLeft = 0;
 540              		.loc 1 238 0
 541 02b0 6344     		add	r3, r3, ip
 542              	.LVL110:
 240:lib/helix/real/huffman.c **** 					}
 543              		.loc 1 240 0
 544 02b2 5F1E     		subs	r7, r3, #1
 545 02b4 4FF00044 		mov	r4, #-2147483648
 546 02b8 3C41     		asrs	r4, r4, r7
 547 02ba 2240     		ands	r2, r2, r4
 548              	.LVL111:
 239:lib/helix/real/huffman.c **** 						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 549              		.loc 1 239 0
 550 02bc 4FF0000C 		mov	ip, #0
 551 02c0 ECE7     		b	.L33
 552              	.LVL112:
 553              	.L34:
 249:lib/helix/real/huffman.c **** 					return -1;
 554              		.loc 1 249 0
 555 02c2 029C     		ldr	r4, [sp, #8]
 556 02c4 A342     		cmp	r3, r4
 557 02c6 5BDB     		blt	.L48
 558              	.LVL113:
 252:lib/helix/real/huffman.c **** 				*xy++ = y;
 559              		.loc 1 252 0
 560 02c8 7446     		mov	r4, lr
 561 02ca 44F8086B 		str	r6, [r4], #8
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 17


 562              	.LVL114:
 253:lib/helix/real/huffman.c **** 				nVals -= 2;
 563              		.loc 1 253 0
 564 02ce CEF80400 		str	r0, [lr, #4]
 254:lib/helix/real/huffman.c **** 				tCurr = tBase;
 565              		.loc 1 254 0
 566 02d2 0239     		subs	r1, r1, #2
 567              	.LVL115:
 255:lib/helix/real/huffman.c **** 			}
 568              		.loc 1 255 0
 569 02d4 019E     		ldr	r6, [sp, #4]
 570              	.LVL116:
 253:lib/helix/real/huffman.c **** 				nVals -= 2;
 571              		.loc 1 253 0
 572 02d6 A646     		mov	lr, r4
 573              	.LVL117:
 574              	.L35:
 192:lib/helix/real/huffman.c **** 				maxBits = GetMaxbits(tCurr[0]);
 575              		.loc 1 192 0
 576 02d8 0029     		cmp	r1, #0
 577 02da C8BF     		it	gt
 578 02dc 0A2B     		cmpgt	r3, #10
 579 02de 7FF7C6AE 		ble	.L18
 193:lib/helix/real/huffman.c **** 				cw = tCurr[(cache >> (32 - maxBits)) + 1];
 580              		.loc 1 193 0
 581 02e2 3488     		ldrh	r4, [r6]
 582 02e4 04F00F04 		and	r4, r4, #15
 583              	.LVL118:
 194:lib/helix/real/huffman.c **** 				len = GetHLen(cw);
 584              		.loc 1 194 0
 585 02e8 C4F12000 		rsb	r0, r4, #32
 586 02ec 22FA00F0 		lsr	r0, r2, r0
 587 02f0 0130     		adds	r0, r0, #1
 588 02f2 36F81000 		ldrh	r0, [r6, r0, lsl #1]
 589              	.LVL119:
 196:lib/helix/real/huffman.c **** 					cachedBits -= maxBits;
 590              		.loc 1 196 0
 591 02f6 070B     		lsrs	r7, r0, #12
 592              	.LVL120:
 593 02f8 83D0     		beq	.L59
 202:lib/helix/real/huffman.c **** 				cache <<= len;
 594              		.loc 1 202 0
 595 02fa DB1B     		subs	r3, r3, r7
 596              	.LVL121:
 203:lib/helix/real/huffman.c **** 			
 597              		.loc 1 203 0
 598 02fc BA40     		lsls	r2, r2, r7
 599              	.LVL122:
 205:lib/helix/real/huffman.c **** 				y = GetCWY(cw);
 600              		.loc 1 205 0
 601 02fe C0F30316 		ubfx	r6, r0, #4, #4
 602              	.LVL123:
 206:lib/helix/real/huffman.c **** 
 603              		.loc 1 206 0
 604 0302 C0F30320 		ubfx	r0, r0, #8, #4
 605              	.LVL124:
 208:lib/helix/real/huffman.c **** 					minBits = linBits + 1 + (y ? 1 : 0);
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 18


 606              		.loc 1 208 0
 607 0306 BBF1030F 		cmp	fp, #3
 608 030a 14BF     		ite	ne
 609 030c 0027     		movne	r7, #0
 610              	.LVL125:
 611 030e 0127     		moveq	r7, #1
 612 0310 0F2E     		cmp	r6, #15
 613 0312 14BF     		ite	ne
 614 0314 0024     		movne	r4, #0
 615 0316 07F00104 		andeq	r4, r7, #1
 616              	.LVL126:
 617 031a 002C     		cmp	r4, #0
 618 031c 7FF476AF 		bne	.L60
 619              	.L25:
 226:lib/helix/real/huffman.c **** 
 620              		.loc 1 226 0
 621 0320 26B1     		cbz	r6, .L29
 226:lib/helix/real/huffman.c **** 
 622              		.loc 1 226 0 is_stmt 0 discriminator 1
 623 0322 02F00044 		and	r4, r2, #-2147483648
 624 0326 2643     		orrs	r6, r6, r4
 625              	.LVL127:
 626 0328 5200     		lsls	r2, r2, #1
 627              	.LVL128:
 628 032a 013B     		subs	r3, r3, #1
 629              	.LVL129:
 630              	.L29:
 228:lib/helix/real/huffman.c **** 					minBits = linBits + 1;
 631              		.loc 1 228 0 is_stmt 1
 632 032c 0F28     		cmp	r0, #15
 633 032e 14BF     		ite	ne
 634 0330 0027     		movne	r7, #0
 635 0332 07F00107 		andeq	r7, r7, #1
 636 0336 002F     		cmp	r7, #0
 637 0338 99D1     		bne	.L61
 638              	.L30:
 246:lib/helix/real/huffman.c **** 
 639              		.loc 1 246 0
 640 033a 0028     		cmp	r0, #0
 641 033c C1D0     		beq	.L34
 246:lib/helix/real/huffman.c **** 
 642              		.loc 1 246 0 is_stmt 0 discriminator 1
 643 033e 02F00044 		and	r4, r2, #-2147483648
 644 0342 2043     		orrs	r0, r0, r4
 645              	.LVL130:
 646 0344 5200     		lsls	r2, r2, #1
 647              	.LVL131:
 648 0346 013B     		subs	r3, r3, #1
 649              	.LVL132:
 650 0348 BBE7     		b	.L34
 651              	.LVL133:
 652              	.L55:
 258:lib/helix/real/huffman.c **** 		return (startBits - bitsLeft);
 653              		.loc 1 258 0 is_stmt 1
 654 034a 029A     		ldr	r2, [sp, #8]
 655              	.LVL134:
 656 034c 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 19


 657              	.LVL135:
 658 034e 9C44     		add	ip, ip, r3
 659              	.LVL136:
 259:lib/helix/real/huffman.c **** 	}
 660              		.loc 1 259 0
 661 0350 039B     		ldr	r3, [sp, #12]
 662 0352 A3EB0C00 		sub	r0, r3, ip
 663 0356 AEE6     		b	.L1
 664              	.LVL137:
 665              	.L38:
  91:lib/helix/real/huffman.c **** 
 666              		.loc 1 91 0
 667 0358 0020     		movs	r0, #0
 668              	.LVL138:
 669 035a ACE6     		b	.L1
 670              	.L63:
 671              		.align	2
 672              	.L62:
 673 035c 00000000 		.word	xmp3fixpt_huffTabOffset
 674 0360 00000000 		.word	xmp3fixpt_huffTable
 675 0364 00000000 		.word	xmp3fixpt_huffTabLookup
 676              	.LVL139:
 677              	.L39:
  94:lib/helix/real/huffman.c **** 	startBits = bitsLeft;
 678              		.loc 1 94 0
 679 0368 4FF0FF30 		mov	r0, #-1
 680              	.LVL140:
 681 036c A3E6     		b	.L1
 682              	.LVL141:
 683              	.L42:
 135:lib/helix/real/huffman.c **** 				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 684              		.loc 1 135 0
 685 036e 4FF0FF30 		mov	r0, #-1
 686 0372 A0E6     		b	.L1
 687              	.LVL142:
 688              	.L43:
 158:lib/helix/real/huffman.c **** 
 689              		.loc 1 158 0
 690 0374 4FF0FF30 		mov	r0, #-1
 691 0378 9DE6     		b	.L1
 692              	.LVL143:
 693              	.L45:
 180:lib/helix/real/huffman.c **** 				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 694              		.loc 1 180 0
 695 037a 4FF0FF30 		mov	r0, #-1
 696 037e 9AE6     		b	.L1
 697              	.LVL144:
 698              	.L48:
 250:lib/helix/real/huffman.c **** 
 699              		.loc 1 250 0
 700 0380 4FF0FF30 		mov	r0, #-1
 701              	.LVL145:
 702 0384 97E6     		b	.L1
 703              		.cfi_endproc
 704              	.LFE0:
 706 0386 00BF     		.section	.text.DecodeHuffmanQuads,"ax",%progbits
 707              		.align	1
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 20


 708              		.syntax unified
 709              		.thumb
 710              		.thumb_func
 711              		.fpu fpv5-sp-d16
 713              	DecodeHuffmanQuads:
 714              	.LFB1:
 265:lib/helix/real/huffman.c **** 
 266:lib/helix/real/huffman.c **** /**************************************************************************************
 267:lib/helix/real/huffman.c ****  * Function:    DecodeHuffmanQuads
 268:lib/helix/real/huffman.c ****  *
 269:lib/helix/real/huffman.c ****  * Description: decode 4-way vector Huffman codes in the "count1" region of spectrum
 270:lib/helix/real/huffman.c ****  *
 271:lib/helix/real/huffman.c ****  * Inputs:      valid BitStreamInfo struct, pointing to start of quadword codes
 272:lib/helix/real/huffman.c ****  *              pointer to vwxy buffer to received decoded values
 273:lib/helix/real/huffman.c ****  *              maximum number of codewords to decode
 274:lib/helix/real/huffman.c ****  *              index of quadword table (0 = table A, 1 = table B)
 275:lib/helix/real/huffman.c ****  *              number of bits remaining in bitstream
 276:lib/helix/real/huffman.c ****  *
 277:lib/helix/real/huffman.c ****  * Outputs:     quadruples of decoded coefficients in vwxy
 278:lib/helix/real/huffman.c ****  *              updated BitStreamInfo struct
 279:lib/helix/real/huffman.c ****  *
 280:lib/helix/real/huffman.c ****  * Return:      index of the first "zero_part" value (index of the first sample 
 281:lib/helix/real/huffman.c ****  *                of the quad word after which all samples are 0)
 282:lib/helix/real/huffman.c ****  * 
 283:lib/helix/real/huffman.c ****  * Notes:        si_huff.bit tests every vwxy output in both quad tables
 284:lib/helix/real/huffman.c ****  **************************************************************************************/
 285:lib/helix/real/huffman.c **** static int DecodeHuffmanQuads(int *vwxy, int nVals, int tabIdx, int bitsLeft, unsigned char *buf, i
 286:lib/helix/real/huffman.c **** {
 715              		.loc 1 286 0
 716              		.cfi_startproc
 717              		@ args = 8, pretend = 0, frame = 8
 718              		@ frame_needed = 0, uses_anonymous_args = 0
 719              	.LVL146:
 720 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 721              	.LCFI4:
 722              		.cfi_def_cfa_offset 36
 723              		.cfi_offset 4, -36
 724              		.cfi_offset 5, -32
 725              		.cfi_offset 6, -28
 726              		.cfi_offset 7, -24
 727              		.cfi_offset 8, -20
 728              		.cfi_offset 9, -16
 729              		.cfi_offset 10, -12
 730              		.cfi_offset 11, -8
 731              		.cfi_offset 14, -4
 732 0004 83B0     		sub	sp, sp, #12
 733              	.LCFI5:
 734              		.cfi_def_cfa_offset 48
 735 0006 0191     		str	r1, [sp, #4]
 287:lib/helix/real/huffman.c **** 	int i, v, w, x, y;
 288:lib/helix/real/huffman.c **** 	int len, maxBits, cachedBits, padBits;
 289:lib/helix/real/huffman.c **** 	unsigned int cache;
 290:lib/helix/real/huffman.c **** 	unsigned char cw, *tBase;
 291:lib/helix/real/huffman.c **** 
 292:lib/helix/real/huffman.c **** 	if (bitsLeft <= 0)
 736              		.loc 1 292 0
 737 0008 002B     		cmp	r3, #0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 21


 738 000a 40F39F80 		ble	.L79
 293:lib/helix/real/huffman.c **** 		return 0;
 294:lib/helix/real/huffman.c **** 
 295:lib/helix/real/huffman.c **** 	tBase = (unsigned char *)quadTable + quadTabOffset[tabIdx];
 739              		.loc 1 295 0
 740 000e 5249     		ldr	r1, .L85
 741              	.LVL147:
 742 0010 51F82280 		ldr	r8, [r1, r2, lsl #2]
 743              	.LVL148:
 296:lib/helix/real/huffman.c **** 	maxBits = quadTabMaxBits[tabIdx];
 744              		.loc 1 296 0
 745 0014 5149     		ldr	r1, .L85+4
 746 0016 51F82290 		ldr	r9, [r1, r2, lsl #2]
 747              	.LVL149:
 297:lib/helix/real/huffman.c **** 
 298:lib/helix/real/huffman.c **** 	/* initially fill cache with any partial byte */
 299:lib/helix/real/huffman.c **** 	cache = 0;
 300:lib/helix/real/huffman.c **** 	cachedBits = (8 - bitOffset) & 0x07;
 748              		.loc 1 300 0
 749 001a 0D99     		ldr	r1, [sp, #52]
 750 001c 4942     		negs	r1, r1
 751              	.LVL150:
 301:lib/helix/real/huffman.c **** 	if (cachedBits)
 752              		.loc 1 301 0
 753 001e 11F00701 		ands	r1, r1, #7
 754              	.LVL151:
 755 0022 09D0     		beq	.L80
 756              	.LVL152:
 302:lib/helix/real/huffman.c **** 		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 757              		.loc 1 302 0
 758 0024 0C9A     		ldr	r2, [sp, #48]
 759              	.LVL153:
 760 0026 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
 761 0028 C1F12002 		rsb	r2, r1, #32
 762 002c 04FA02F2 		lsl	r2, r4, r2
 763              	.LVL154:
 764 0030 0C9C     		ldr	r4, [sp, #48]
 765 0032 0134     		adds	r4, r4, #1
 766              	.LVL155:
 767 0034 0C94     		str	r4, [sp, #48]
 768 0036 00E0     		b	.L66
 769              	.LVL156:
 770              	.L80:
 299:lib/helix/real/huffman.c **** 	cachedBits = (8 - bitOffset) & 0x07;
 771              		.loc 1 299 0
 772 0038 0022     		movs	r2, #0
 773              	.LVL157:
 774              	.L66:
 303:lib/helix/real/huffman.c **** 	bitsLeft -= cachedBits;
 775              		.loc 1 303 0
 776 003a A3EB010A 		sub	r10, r3, r1
 777              	.LVL158:
 304:lib/helix/real/huffman.c **** 
 305:lib/helix/real/huffman.c **** 	i = padBits = 0;
 778              		.loc 1 305 0
 779 003e 4FF0000E 		mov	lr, #0
 780 0042 7746     		mov	r7, lr
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 22


 781              	.LVL159:
 782              	.L67:
 306:lib/helix/real/huffman.c **** 	while (i < (nVals - 3)) {
 783              		.loc 1 306 0
 784 0044 019B     		ldr	r3, [sp, #4]
 785 0046 A3F1030C 		sub	ip, r3, #3
 786 004a BC45     		cmp	ip, r7
 787 004c 7FDD     		ble	.L64
 307:lib/helix/real/huffman.c **** 		/* refill cache - assumes cachedBits <= 16 */
 308:lib/helix/real/huffman.c **** 		if (bitsLeft >= 16) {
 788              		.loc 1 308 0
 789 004e BAF10F0F 		cmp	r10, #15
 790 0052 11DD     		ble	.L68
 791              	.LVL160:
 309:lib/helix/real/huffman.c **** 			/* load 2 new bytes into left-justified cache */
 310:lib/helix/real/huffman.c **** 			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 792              		.loc 1 310 0
 793 0054 0C9C     		ldr	r4, [sp, #48]
 794 0056 14F8023B 		ldrb	r3, [r4], #2	@ zero_extendqisi2
 795 005a C1F11805 		rsb	r5, r1, #24
 796 005e AB40     		lsls	r3, r3, r5
 797 0060 1A43     		orrs	r2, r2, r3
 798              	.LVL161:
 311:lib/helix/real/huffman.c **** 			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 799              		.loc 1 311 0
 800 0062 0C9B     		ldr	r3, [sp, #48]
 801 0064 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 802 0066 C1F11005 		rsb	r5, r1, #16
 803 006a AB40     		lsls	r3, r3, r5
 804 006c 1A43     		orrs	r2, r2, r3
 805              	.LVL162:
 312:lib/helix/real/huffman.c **** 			cachedBits += 16;
 806              		.loc 1 312 0
 807 006e 1031     		adds	r1, r1, #16
 808              	.LVL163:
 313:lib/helix/real/huffman.c **** 			bitsLeft -= 16;
 809              		.loc 1 313 0
 810 0070 AAF1100A 		sub	r10, r10, #16
 811              	.LVL164:
 311:lib/helix/real/huffman.c **** 			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 812              		.loc 1 311 0
 813 0074 0C94     		str	r4, [sp, #48]
 814 0076 31E0     		b	.L76
 815              	.LVL165:
 816              	.L68:
 314:lib/helix/real/huffman.c **** 		} else {
 315:lib/helix/real/huffman.c **** 			/* last time through, pad cache with zeros and drain cache */
 316:lib/helix/real/huffman.c **** 			if (cachedBits + bitsLeft <= 0) return i;
 817              		.loc 1 316 0
 818 0078 0AEB0103 		add	r3, r10, r1
 819 007c 002B     		cmp	r3, #0
 820 007e 66DD     		ble	.L64
 317:lib/helix/real/huffman.c **** 			if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 821              		.loc 1 317 0
 822 0080 BAF1000F 		cmp	r10, #0
 823 0084 08DD     		ble	.L70
 824              	.LVL166:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 23


 825              		.loc 1 317 0 is_stmt 0 discriminator 1
 826 0086 0C9C     		ldr	r4, [sp, #48]
 827 0088 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 828 008a C1F11805 		rsb	r5, r1, #24
 829 008e AC40     		lsls	r4, r4, r5
 830 0090 2243     		orrs	r2, r2, r4
 831              	.LVL167:
 832 0092 0C9C     		ldr	r4, [sp, #48]
 833 0094 0134     		adds	r4, r4, #1
 834              	.LVL168:
 835 0096 0C94     		str	r4, [sp, #48]
 836              	.LVL169:
 837              	.L70:
 318:lib/helix/real/huffman.c **** 			if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 838              		.loc 1 318 0 is_stmt 1
 839 0098 BAF1080F 		cmp	r10, #8
 840 009c 09DD     		ble	.L71
 841              	.LVL170:
 842              		.loc 1 318 0 is_stmt 0 discriminator 1
 843 009e 0C9C     		ldr	r4, [sp, #48]
 844 00a0 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 845 00a2 C1F11001 		rsb	r1, r1, #16
 846              	.LVL171:
 847 00a6 04FA01F1 		lsl	r1, r4, r1
 848 00aa 0A43     		orrs	r2, r2, r1
 849              	.LVL172:
 850 00ac 0C99     		ldr	r1, [sp, #48]
 851 00ae 0131     		adds	r1, r1, #1
 852              	.LVL173:
 853 00b0 0C91     		str	r1, [sp, #48]
 854              	.LVL174:
 855              	.L71:
 319:lib/helix/real/huffman.c **** 			cachedBits += bitsLeft;
 320:lib/helix/real/huffman.c **** 			bitsLeft = 0;
 321:lib/helix/real/huffman.c **** 
 322:lib/helix/real/huffman.c **** 			cache &= (signed int)0x80000000 >> (cachedBits - 1);
 856              		.loc 1 322 0 is_stmt 1
 857 00b2 5C1E     		subs	r4, r3, #1
 858 00b4 4FF00041 		mov	r1, #-2147483648
 859 00b8 2141     		asrs	r1, r1, r4
 860 00ba 0A40     		ands	r2, r2, r1
 861              	.LVL175:
 323:lib/helix/real/huffman.c **** 			padBits = 10;
 324:lib/helix/real/huffman.c **** 			cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 862              		.loc 1 324 0
 863 00bc 03F10A01 		add	r1, r3, #10
 864              	.LVL176:
 323:lib/helix/real/huffman.c **** 			padBits = 10;
 865              		.loc 1 323 0
 866 00c0 4FF00A0E 		mov	lr, #10
 320:lib/helix/real/huffman.c **** 
 867              		.loc 1 320 0
 868 00c4 4FF0000A 		mov	r10, #0
 869 00c8 08E0     		b	.L76
 870              	.LVL177:
 871              	.L75:
 325:lib/helix/real/huffman.c **** 		}
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 24


 326:lib/helix/real/huffman.c **** 
 327:lib/helix/real/huffman.c **** 		/* largest maxBits = 6, plus 4 for sign bits, so make sure cache has at least 10 bits */
 328:lib/helix/real/huffman.c **** 		while (i < (nVals - 3) && cachedBits >= 10 ) {
 329:lib/helix/real/huffman.c **** 			cw = tBase[cache >> (32 - maxBits)];
 330:lib/helix/real/huffman.c **** 			len = GetHLenQ(cw);
 331:lib/helix/real/huffman.c **** 			cachedBits -= len;
 332:lib/helix/real/huffman.c **** 			cache <<= len;
 333:lib/helix/real/huffman.c **** 
 334:lib/helix/real/huffman.c **** 			v = GetCWVQ(cw);	if(v) {ApplySign(v, cache); cache <<= 1; cachedBits--;}
 335:lib/helix/real/huffman.c **** 			w = GetCWWQ(cw);	if(w) {ApplySign(w, cache); cache <<= 1; cachedBits--;}
 336:lib/helix/real/huffman.c **** 			x = GetCWXQ(cw);	if(x) {ApplySign(x, cache); cache <<= 1; cachedBits--;}
 337:lib/helix/real/huffman.c **** 			y = GetCWYQ(cw);	if(y) {ApplySign(y, cache); cache <<= 1; cachedBits--;}
 338:lib/helix/real/huffman.c **** 
 339:lib/helix/real/huffman.c **** 			/* ran out of bits - okay (means we're done) */
 340:lib/helix/real/huffman.c **** 			if (cachedBits < padBits)
 872              		.loc 1 340 0
 873 00ca 7145     		cmp	r1, lr
 874 00cc 3FDB     		blt	.L64
 875              	.LVL178:
 341:lib/helix/real/huffman.c **** 				return i;
 342:lib/helix/real/huffman.c **** 
 343:lib/helix/real/huffman.c **** 			*vwxy++ = v;
 876              		.loc 1 343 0
 877 00ce 0660     		str	r6, [r0]
 878              	.LVL179:
 344:lib/helix/real/huffman.c **** 			*vwxy++ = w;
 879              		.loc 1 344 0
 880 00d0 4560     		str	r5, [r0, #4]
 881              	.LVL180:
 345:lib/helix/real/huffman.c **** 			*vwxy++ = x;
 882              		.loc 1 345 0
 883 00d2 8460     		str	r4, [r0, #8]
 884              	.LVL181:
 346:lib/helix/real/huffman.c **** 			*vwxy++ = y;
 885              		.loc 1 346 0
 886 00d4 C0F80CB0 		str	fp, [r0, #12]
 347:lib/helix/real/huffman.c **** 			i += 4;
 887              		.loc 1 347 0
 888 00d8 0437     		adds	r7, r7, #4
 889              	.LVL182:
 346:lib/helix/real/huffman.c **** 			*vwxy++ = y;
 890              		.loc 1 346 0
 891 00da 1030     		adds	r0, r0, #16
 892              	.LVL183:
 893              	.L76:
 328:lib/helix/real/huffman.c **** 			cw = tBase[cache >> (32 - maxBits)];
 894              		.loc 1 328 0
 895 00dc BC45     		cmp	ip, r7
 896 00de B1DD     		ble	.L67
 328:lib/helix/real/huffman.c **** 			cw = tBase[cache >> (32 - maxBits)];
 897              		.loc 1 328 0 is_stmt 0 discriminator 1
 898 00e0 0929     		cmp	r1, #9
 899 00e2 AFDD     		ble	.L67
 329:lib/helix/real/huffman.c **** 			len = GetHLenQ(cw);
 900              		.loc 1 329 0 is_stmt 1
 901 00e4 C9F12003 		rsb	r3, r9, #32
 902 00e8 22FA03F3 		lsr	r3, r2, r3
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 25


 903 00ec 4344     		add	r3, r3, r8
 904 00ee 1C4C     		ldr	r4, .L85+8
 905 00f0 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 906              	.LVL184:
 330:lib/helix/real/huffman.c **** 			cachedBits -= len;
 907              		.loc 1 330 0
 908 00f2 1C09     		lsrs	r4, r3, #4
 909              	.LVL185:
 331:lib/helix/real/huffman.c **** 			cache <<= len;
 910              		.loc 1 331 0
 911 00f4 091B     		subs	r1, r1, r4
 912              	.LVL186:
 332:lib/helix/real/huffman.c **** 
 913              		.loc 1 332 0
 914 00f6 A240     		lsls	r2, r2, r4
 915              	.LVL187:
 916 00f8 C3F3C004 		ubfx	r4, r3, #3, #1
 917              	.LVL188:
 334:lib/helix/real/huffman.c **** 			w = GetCWWQ(cw);	if(w) {ApplySign(w, cache); cache <<= 1; cachedBits--;}
 918              		.loc 1 334 0
 919 00fc 2646     		mov	r6, r4
 920              	.LVL189:
 921 00fe 24B1     		cbz	r4, .L72
 334:lib/helix/real/huffman.c **** 			w = GetCWWQ(cw);	if(w) {ApplySign(w, cache); cache <<= 1; cachedBits--;}
 922              		.loc 1 334 0 is_stmt 0 discriminator 1
 923 0100 02F00046 		and	r6, r2, #-2147483648
 924 0104 2643     		orrs	r6, r6, r4
 925              	.LVL190:
 926 0106 5200     		lsls	r2, r2, #1
 927              	.LVL191:
 928 0108 0139     		subs	r1, r1, #1
 929              	.LVL192:
 930              	.L72:
 931 010a C3F38004 		ubfx	r4, r3, #2, #1
 335:lib/helix/real/huffman.c **** 			x = GetCWXQ(cw);	if(x) {ApplySign(x, cache); cache <<= 1; cachedBits--;}
 932              		.loc 1 335 0 is_stmt 1
 933 010e 2546     		mov	r5, r4
 934              	.LVL193:
 935 0110 24B1     		cbz	r4, .L73
 335:lib/helix/real/huffman.c **** 			x = GetCWXQ(cw);	if(x) {ApplySign(x, cache); cache <<= 1; cachedBits--;}
 936              		.loc 1 335 0 is_stmt 0 discriminator 1
 937 0112 02F00045 		and	r5, r2, #-2147483648
 938 0116 2543     		orrs	r5, r5, r4
 939              	.LVL194:
 940 0118 5200     		lsls	r2, r2, #1
 941              	.LVL195:
 942 011a 0139     		subs	r1, r1, #1
 943              	.LVL196:
 944              	.L73:
 945 011c C3F3400B 		ubfx	fp, r3, #1, #1
 336:lib/helix/real/huffman.c **** 			y = GetCWYQ(cw);	if(y) {ApplySign(y, cache); cache <<= 1; cachedBits--;}
 946              		.loc 1 336 0 is_stmt 1
 947 0120 5C46     		mov	r4, fp
 948              	.LVL197:
 949 0122 BBF1000F 		cmp	fp, #0
 950 0126 05D0     		beq	.L74
 336:lib/helix/real/huffman.c **** 			y = GetCWYQ(cw);	if(y) {ApplySign(y, cache); cache <<= 1; cachedBits--;}
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 26


 951              		.loc 1 336 0 is_stmt 0 discriminator 1
 952 0128 02F00044 		and	r4, r2, #-2147483648
 953              	.LVL198:
 954 012c 4BEA0404 		orr	r4, fp, r4
 955              	.LVL199:
 956 0130 5200     		lsls	r2, r2, #1
 957              	.LVL200:
 958 0132 0139     		subs	r1, r1, #1
 959              	.LVL201:
 960              	.L74:
 961 0134 03F00103 		and	r3, r3, #1
 962              	.LVL202:
 337:lib/helix/real/huffman.c **** 
 963              		.loc 1 337 0 is_stmt 1
 964 0138 9B46     		mov	fp, r3
 965              	.LVL203:
 966 013a 002B     		cmp	r3, #0
 967 013c C5D0     		beq	.L75
 337:lib/helix/real/huffman.c **** 
 968              		.loc 1 337 0 is_stmt 0 discriminator 1
 969 013e 02F0004B 		and	fp, r2, #-2147483648
 970 0142 43EA0B0B 		orr	fp, r3, fp
 971              	.LVL204:
 972 0146 5200     		lsls	r2, r2, #1
 973              	.LVL205:
 974 0148 0139     		subs	r1, r1, #1
 975              	.LVL206:
 976 014a BEE7     		b	.L75
 977              	.LVL207:
 978              	.L79:
 293:lib/helix/real/huffman.c **** 
 979              		.loc 1 293 0 is_stmt 1
 980 014c 0027     		movs	r7, #0
 981              	.LVL208:
 982              	.L64:
 348:lib/helix/real/huffman.c **** 		}
 349:lib/helix/real/huffman.c **** 	}
 350:lib/helix/real/huffman.c **** 
 351:lib/helix/real/huffman.c **** 	/* decoded max number of quad values */
 352:lib/helix/real/huffman.c **** 	return i;
 353:lib/helix/real/huffman.c **** }
 983              		.loc 1 353 0
 984 014e 3846     		mov	r0, r7
 985              	.LVL209:
 986 0150 03B0     		add	sp, sp, #12
 987              	.LCFI6:
 988              		.cfi_def_cfa_offset 36
 989              		@ sp needed
 990 0152 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 991              	.LVL210:
 992              	.L86:
 993 0156 00BF     		.align	2
 994              	.L85:
 995 0158 00000000 		.word	xmp3fixpt_quadTabOffset
 996 015c 00000000 		.word	xmp3fixpt_quadTabMaxBits
 997 0160 00000000 		.word	xmp3fixpt_quadTable
 998              		.cfi_endproc
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 27


 999              	.LFE1:
 1001              		.section	.text.xmp3fixpt_DecodeHuffman,"ax",%progbits
 1002              		.align	1
 1003              		.global	xmp3fixpt_DecodeHuffman
 1004              		.syntax unified
 1005              		.thumb
 1006              		.thumb_func
 1007              		.fpu fpv5-sp-d16
 1009              	xmp3fixpt_DecodeHuffman:
 1010              	.LFB2:
 354:lib/helix/real/huffman.c **** 
 355:lib/helix/real/huffman.c **** /**************************************************************************************
 356:lib/helix/real/huffman.c ****  * Function:    DecodeHuffman
 357:lib/helix/real/huffman.c ****  *
 358:lib/helix/real/huffman.c ****  * Description: decode one granule, one channel worth of Huffman codes
 359:lib/helix/real/huffman.c ****  *
 360:lib/helix/real/huffman.c ****  * Inputs:      MP3DecInfo structure filled by UnpackFrameHeader(), UnpackSideInfo(),
 361:lib/helix/real/huffman.c ****  *                and UnpackScaleFactors() (for this granule)
 362:lib/helix/real/huffman.c ****  *              buffer pointing to start of Huffman data in MP3 frame
 363:lib/helix/real/huffman.c ****  *              pointer to bit offset (0-7) indicating starting bit in buf[0]
 364:lib/helix/real/huffman.c ****  *              number of bits in the Huffman data section of the frame
 365:lib/helix/real/huffman.c ****  *                (could include padding bits)
 366:lib/helix/real/huffman.c ****  *              index of current granule and channel
 367:lib/helix/real/huffman.c ****  *
 368:lib/helix/real/huffman.c ****  * Outputs:     decoded coefficients in hi->huffDecBuf[ch] (hi pointer in mp3DecInfo)
 369:lib/helix/real/huffman.c ****  *              updated bitOffset
 370:lib/helix/real/huffman.c ****  *
 371:lib/helix/real/huffman.c ****  * Return:      length (in bytes) of Huffman codes
 372:lib/helix/real/huffman.c ****  *              bitOffset also returned in parameter (0 = MSB, 7 = LSB of 
 373:lib/helix/real/huffman.c ****  *                byte located at buf + offset)
 374:lib/helix/real/huffman.c ****  *              -1 if null input pointers, huffBlockBits < 0, or decoder runs 
 375:lib/helix/real/huffman.c ****  *                out of bits prematurely (invalid bitstream)
 376:lib/helix/real/huffman.c ****  **************************************************************************************/
 377:lib/helix/real/huffman.c **** int DecodeHuffman(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int huffBlockBits, in
 378:lib/helix/real/huffman.c **** {
 1011              		.loc 1 378 0
 1012              		.cfi_startproc
 1013              		@ args = 8, pretend = 0, frame = 32
 1014              		@ frame_needed = 0, uses_anonymous_args = 0
 1015              	.LVL211:
 1016 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1017              	.LCFI7:
 1018              		.cfi_def_cfa_offset 36
 1019              		.cfi_offset 4, -36
 1020              		.cfi_offset 5, -32
 1021              		.cfi_offset 6, -28
 1022              		.cfi_offset 7, -24
 1023              		.cfi_offset 8, -20
 1024              		.cfi_offset 9, -16
 1025              		.cfi_offset 10, -12
 1026              		.cfi_offset 11, -8
 1027              		.cfi_offset 14, -4
 1028 0004 8BB0     		sub	sp, sp, #44
 1029              	.LCFI8:
 1030              		.cfi_def_cfa_offset 80
 1031 0006 0491     		str	r1, [sp, #16]
 1032 0008 149D     		ldr	r5, [sp, #80]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 28


 1033 000a 159C     		ldr	r4, [sp, #84]
 1034              	.LVL212:
 379:lib/helix/real/huffman.c **** 	int r1Start, r2Start, rEnd[4];	/* region boundaries */
 380:lib/helix/real/huffman.c **** 	int i, w, bitsUsed, bitsLeft;
 381:lib/helix/real/huffman.c **** 	unsigned char *startBuf = buf;
 382:lib/helix/real/huffman.c **** 
 383:lib/helix/real/huffman.c **** 	FrameHeader *fh;
 384:lib/helix/real/huffman.c **** 	SideInfo *si;
 385:lib/helix/real/huffman.c **** 	SideInfoSub *sis;
 386:lib/helix/real/huffman.c **** 	ScaleFactorInfo *sfi;
 387:lib/helix/real/huffman.c **** 	HuffmanInfo *hi;
 388:lib/helix/real/huffman.c **** 
 389:lib/helix/real/huffman.c **** 	/* validate pointers */
 390:lib/helix/real/huffman.c **** 	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFact
 1035              		.loc 1 390 0
 1036 000c 0028     		cmp	r0, #0
 1037 000e 00F02581 		beq	.L97
 1038 0012 9146     		mov	r9, r2
 1039 0014 1E46     		mov	r6, r3
 1040              		.loc 1 390 0 is_stmt 0 discriminator 1
 1041 0016 0268     		ldr	r2, [r0]
 1042              	.LVL213:
 1043 0018 002A     		cmp	r2, #0
 1044 001a 00F02281 		beq	.L98
 1045              		.loc 1 390 0 discriminator 2
 1046 001e D0F80480 		ldr	r8, [r0, #4]
 1047 0022 B8F1000F 		cmp	r8, #0
 1048 0026 00F01F81 		beq	.L99
 1049              		.loc 1 390 0 discriminator 3
 1050 002a 8168     		ldr	r1, [r0, #8]
 1051              	.LVL214:
 1052 002c 0029     		cmp	r1, #0
 1053 002e 00F01E81 		beq	.L100
 1054              		.loc 1 390 0 discriminator 4
 1055 0032 C768     		ldr	r7, [r0, #12]
 1056 0034 002F     		cmp	r7, #0
 1057 0036 00F01D81 		beq	.L101
 1058              	.LVL215:
 391:lib/helix/real/huffman.c **** 		return -1;
 392:lib/helix/real/huffman.c **** 
 393:lib/helix/real/huffman.c **** 	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
 394:lib/helix/real/huffman.c **** 	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
 395:lib/helix/real/huffman.c **** 	sis = &si->sis[gr][ch];
 396:lib/helix/real/huffman.c **** 	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));
 397:lib/helix/real/huffman.c **** 	hi = (HuffmanInfo*)(mp3DecInfo->HuffmanInfoPS);
 398:lib/helix/real/huffman.c **** 
 399:lib/helix/real/huffman.c **** 	if (huffBlockBits < 0)
 1059              		.loc 1 399 0 is_stmt 1
 1060 003a 002E     		cmp	r6, #0
 1061 003c C0F21D81 		blt	.L102
 400:lib/helix/real/huffman.c **** 		return -1;
 401:lib/helix/real/huffman.c **** 
 402:lib/helix/real/huffman.c **** 	/* figure out region boundaries (the first 2*bigVals coefficients divided into 3 regions) */
 403:lib/helix/real/huffman.c **** 	if (sis->winSwitchFlag && sis->blockType == 2) {
 1062              		.loc 1 403 0
 1063 0040 04EBC401 		add	r1, r4, r4, lsl #3
 1064              	.LVL216:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 29


 1065 0044 CB00     		lsls	r3, r1, #3
 1066              	.LVL217:
 1067 0046 05EBC500 		add	r0, r5, r5, lsl #3
 1068              	.LVL218:
 1069 004a 0101     		lsls	r1, r0, #4
 1070 004c 0B44     		add	r3, r3, r1
 1071 004e 4344     		add	r3, r3, r8
 1072 0050 9B6B     		ldr	r3, [r3, #56]
 1073 0052 53B1     		cbz	r3, .L89
 1074              		.loc 1 403 0 is_stmt 0 discriminator 1
 1075 0054 04EBC401 		add	r1, r4, r4, lsl #3
 1076 0058 CB00     		lsls	r3, r1, #3
 1077 005a 05EBC500 		add	r0, r5, r5, lsl #3
 1078 005e 0101     		lsls	r1, r0, #4
 1079 0060 0B44     		add	r3, r3, r1
 1080 0062 4344     		add	r3, r3, r8
 1081 0064 DB6B     		ldr	r3, [r3, #60]
 1082 0066 022B     		cmp	r3, #2
 1083 0068 78D0     		beq	.L105
 1084              	.L89:
 404:lib/helix/real/huffman.c **** 		if (sis->mixedBlock == 0) {
 405:lib/helix/real/huffman.c **** 			r1Start = fh->sfBand->s[(sis->region0Count + 1)/3] * 3;
 406:lib/helix/real/huffman.c **** 		} else {
 407:lib/helix/real/huffman.c **** 			if (fh->ver == MPEG1) {
 408:lib/helix/real/huffman.c **** 				r1Start = fh->sfBand->l[sis->region0Count + 1];
 409:lib/helix/real/huffman.c **** 			} else {
 410:lib/helix/real/huffman.c **** 				/* see MPEG2 spec for explanation */
 411:lib/helix/real/huffman.c **** 				w = fh->sfBand->s[4] - fh->sfBand->s[3];
 412:lib/helix/real/huffman.c **** 				r1Start = fh->sfBand->l[6] + 2*w;
 413:lib/helix/real/huffman.c **** 			}
 414:lib/helix/real/huffman.c **** 		}
 415:lib/helix/real/huffman.c **** 		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 416:lib/helix/real/huffman.c **** 	} else {
 417:lib/helix/real/huffman.c **** 		r1Start = fh->sfBand->l[sis->region0Count + 1];
 1085              		.loc 1 417 0 is_stmt 1
 1086 006a 506B     		ldr	r0, [r2, #52]
 1087 006c E300     		lsls	r3, r4, #3
 1088 006e 2344     		add	r3, r3, r4
 1089 0070 D900     		lsls	r1, r3, #3
 1090 0072 EB00     		lsls	r3, r5, #3
 1091 0074 2B44     		add	r3, r3, r5
 1092 0076 1A01     		lsls	r2, r3, #4
 1093              	.LVL219:
 1094 0078 1144     		add	r1, r1, r2
 1095 007a 4144     		add	r1, r1, r8
 1096 007c CB6D     		ldr	r3, [r1, #92]
 1097 007e 0133     		adds	r3, r3, #1
 1098 0080 30F91320 		ldrsh	r2, [r0, r3, lsl #1]
 1099              	.LVL220:
 418:lib/helix/real/huffman.c **** 		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 1100              		.loc 1 418 0
 1101 0084 096E     		ldr	r1, [r1, #96]
 1102 0086 0B44     		add	r3, r3, r1
 1103 0088 0133     		adds	r3, r3, #1
 1104 008a 30F91310 		ldrsh	r1, [r0, r3, lsl #1]
 1105              	.LVL221:
 1106              	.L91:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 30


 419:lib/helix/real/huffman.c **** 	}
 420:lib/helix/real/huffman.c **** 
 421:lib/helix/real/huffman.c **** 	/* offset rEnd index by 1 so first region = rEnd[1] - rEnd[0], etc. */
 422:lib/helix/real/huffman.c **** 	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 1107              		.loc 1 422 0
 1108 008e 04EBC400 		add	r0, r4, r4, lsl #3
 1109 0092 C300     		lsls	r3, r0, #3
 1110 0094 05EBC50C 		add	ip, r5, r5, lsl #3
 1111 0098 4FEA0C10 		lsl	r0, ip, #4
 1112 009c 0344     		add	r3, r3, r0
 1113 009e 4344     		add	r3, r3, r8
 1114 00a0 DB6A     		ldr	r3, [r3, #44]
 1115 00a2 5B00     		lsls	r3, r3, #1
 1116 00a4 B3F5107F 		cmp	r3, #576
 1117 00a8 A8BF     		it	ge
 1118 00aa 4FF41073 		movge	r3, #576
 1119 00ae 9B46     		mov	fp, r3
 1120 00b0 0993     		str	r3, [sp, #36]
 423:lib/helix/real/huffman.c **** 	rEnd[2] = MIN(r2Start, rEnd[3]);
 1121              		.loc 1 423 0
 1122 00b2 9942     		cmp	r1, r3
 1123 00b4 A8BF     		it	ge
 1124 00b6 1946     		movge	r1, r3
 1125              	.LVL222:
 1126 00b8 0891     		str	r1, [sp, #32]
 424:lib/helix/real/huffman.c **** 	rEnd[1] = MIN(r1Start, rEnd[3]);
 1127              		.loc 1 424 0
 1128 00ba 9A42     		cmp	r2, r3
 1129 00bc A8BF     		it	ge
 1130 00be 1A46     		movge	r2, r3
 1131              	.LVL223:
 1132 00c0 0792     		str	r2, [sp, #28]
 425:lib/helix/real/huffman.c **** 	rEnd[0] = 0;
 1133              		.loc 1 425 0
 1134 00c2 0023     		movs	r3, #0
 1135 00c4 0693     		str	r3, [sp, #24]
 426:lib/helix/real/huffman.c **** 
 427:lib/helix/real/huffman.c **** 	/* rounds up to first all-zero pair (we don't check last pair for (x,y) == (non-zero, zero)) */
 428:lib/helix/real/huffman.c **** 	hi->nonZeroBound[ch] = rEnd[3];
 1136              		.loc 1 428 0
 1137 00c6 04F59062 		add	r2, r4, #1152
 1138 00ca 47F822B0 		str	fp, [r7, r2, lsl #2]
 1139              	.LVL224:
 429:lib/helix/real/huffman.c **** 
 430:lib/helix/real/huffman.c **** 	/* decode Huffman pairs (rEnd[i] are always even numbers) */
 431:lib/helix/real/huffman.c **** 	bitsLeft = huffBlockBits;
 432:lib/helix/real/huffman.c **** 	for (i = 0; i < 3; i++) {
 1140              		.loc 1 432 0
 1141 00ce DDF810A0 		ldr	r10, [sp, #16]
 1142 00d2 0397     		str	r7, [sp, #12]
 1143 00d4 CDF814B0 		str	fp, [sp, #20]
 1144              	.LVL225:
 1145              	.L93:
 1146              		.loc 1 432 0 is_stmt 0 discriminator 1
 1147 00d8 022B     		cmp	r3, #2
 1148 00da 00F38280 		bgt	.L106
 433:lib/helix/real/huffman.c **** 		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 31


 1149              		.loc 1 433 0 is_stmt 1
 1150 00de 4FEAC40E 		lsl	lr, r4, #3
 1151 00e2 0EEB0402 		add	r2, lr, r4
 1152 00e6 1002     		lsls	r0, r2, #8
 1153 00e8 039A     		ldr	r2, [sp, #12]
 1154 00ea 1044     		add	r0, r0, r2
 1155 00ec 0AAA     		add	r2, sp, #40
 1156 00ee 02EB8302 		add	r2, r2, r3, lsl #2
 1157 00f2 52F810CC 		ldr	ip, [r2, #-16]
 1158 00f6 5F1C     		adds	r7, r3, #1
 1159 00f8 0AAA     		add	r2, sp, #40
 1160 00fa 02EB8702 		add	r2, r2, r7, lsl #2
 1161 00fe 52F8101C 		ldr	r1, [r2, #-16]
 1162 0102 A644     		add	lr, lr, r4
 1163 0104 4FEA4E02 		lsl	r2, lr, #1
 1164 0108 05EBC50B 		add	fp, r5, r5, lsl #3
 1165 010c 4FEA8B0E 		lsl	lr, fp, #2
 1166 0110 7244     		add	r2, r2, lr
 1167 0112 1344     		add	r3, r3, r2
 1168              	.LVL226:
 1169 0114 1033     		adds	r3, r3, #16
 1170 0116 08EB8303 		add	r3, r8, r3, lsl #2
 1171 011a 5A68     		ldr	r2, [r3, #4]
 1172 011c D9F80030 		ldr	r3, [r9]
 1173 0120 0193     		str	r3, [sp, #4]
 1174 0122 CDF800A0 		str	r10, [sp]
 1175 0126 3346     		mov	r3, r6
 1176 0128 A1EB0C01 		sub	r1, r1, ip
 1177 012c 00EB8C00 		add	r0, r0, ip, lsl #2
 1178 0130 FFF7FEFF 		bl	DecodeHuffmanPairs
 1179              	.LVL227:
 434:lib/helix/real/huffman.c **** 		if (bitsUsed < 0 || bitsUsed > bitsLeft)	/* error - overran end of bitstream */
 1180              		.loc 1 434 0
 1181 0134 8642     		cmp	r6, r0
 1182 0136 ACBF     		ite	ge
 1183 0138 0023     		movge	r3, #0
 1184 013a 0123     		movlt	r3, #1
 1185 013c 53EAD073 		orrs	r3, r3, r0, lsr #31
 1186 0140 40F09E80 		bne	.L103
 435:lib/helix/real/huffman.c **** 			return -1;
 436:lib/helix/real/huffman.c **** 
 437:lib/helix/real/huffman.c **** 		/* update bitstream position */
 438:lib/helix/real/huffman.c **** 		buf += (bitsUsed + *bitOffset) >> 3;
 1187              		.loc 1 438 0 discriminator 2
 1188 0144 D9F80030 		ldr	r3, [r9]
 1189 0148 0344     		add	r3, r3, r0
 1190 014a 0AEBE30A 		add	r10, r10, r3, asr #3
 1191              	.LVL228:
 439:lib/helix/real/huffman.c **** 		*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 1192              		.loc 1 439 0 discriminator 2
 1193 014e 03F00703 		and	r3, r3, #7
 1194 0152 C9F80030 		str	r3, [r9]
 440:lib/helix/real/huffman.c **** 		bitsLeft -= bitsUsed;
 1195              		.loc 1 440 0 discriminator 2
 1196 0156 361A     		subs	r6, r6, r0
 1197              	.LVL229:
 432:lib/helix/real/huffman.c **** 		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 32


 1198              		.loc 1 432 0 discriminator 2
 1199 0158 3B46     		mov	r3, r7
 1200 015a BDE7     		b	.L93
 1201              	.LVL230:
 1202              	.L105:
 404:lib/helix/real/huffman.c **** 			r1Start = fh->sfBand->s[(sis->region0Count + 1)/3] * 3;
 1203              		.loc 1 404 0
 1204 015c 04EBC401 		add	r1, r4, r4, lsl #3
 1205 0160 CB00     		lsls	r3, r1, #3
 1206 0162 05EBC500 		add	r0, r5, r5, lsl #3
 1207 0166 0101     		lsls	r1, r0, #4
 1208 0168 0B44     		add	r3, r3, r1
 1209 016a 4344     		add	r3, r3, r8
 1210 016c 1B6C     		ldr	r3, [r3, #64]
 1211 016e CBB9     		cbnz	r3, .L90
 405:lib/helix/real/huffman.c **** 		} else {
 1212              		.loc 1 405 0
 1213 0170 526B     		ldr	r2, [r2, #52]
 1214              	.LVL231:
 1215 0172 04EBC401 		add	r1, r4, r4, lsl #3
 1216 0176 CB00     		lsls	r3, r1, #3
 1217 0178 05EBC500 		add	r0, r5, r5, lsl #3
 1218 017c 0101     		lsls	r1, r0, #4
 1219 017e 0B44     		add	r3, r3, r1
 1220 0180 4344     		add	r3, r3, r8
 1221 0182 D96D     		ldr	r1, [r3, #92]
 1222 0184 0131     		adds	r1, r1, #1
 1223 0186 404B     		ldr	r3, .L107
 1224 0188 83FB0103 		smull	r0, r3, r3, r1
 1225 018c A3EBE173 		sub	r3, r3, r1, asr #31
 1226 0190 1433     		adds	r3, r3, #20
 1227 0192 02EB4303 		add	r3, r2, r3, lsl #1
 1228 0196 B3F90620 		ldrsh	r2, [r3, #6]
 1229 019a 02EB4202 		add	r2, r2, r2, lsl #1
 1230              	.LVL232:
 415:lib/helix/real/huffman.c **** 	} else {
 1231              		.loc 1 415 0
 1232 019e 4FF41071 		mov	r1, #576
 1233 01a2 74E7     		b	.L91
 1234              	.LVL233:
 1235              	.L90:
 407:lib/helix/real/huffman.c **** 				r1Start = fh->sfBand->l[sis->region0Count + 1];
 1236              		.loc 1 407 0
 1237 01a4 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1238 01a6 7BB9     		cbnz	r3, .L92
 408:lib/helix/real/huffman.c **** 			} else {
 1239              		.loc 1 408 0
 1240 01a8 516B     		ldr	r1, [r2, #52]
 1241 01aa 04EBC402 		add	r2, r4, r4, lsl #3
 1242              	.LVL234:
 1243 01ae D300     		lsls	r3, r2, #3
 1244 01b0 05EBC500 		add	r0, r5, r5, lsl #3
 1245 01b4 0201     		lsls	r2, r0, #4
 1246 01b6 1344     		add	r3, r3, r2
 1247 01b8 4344     		add	r3, r3, r8
 1248 01ba DB6D     		ldr	r3, [r3, #92]
 1249 01bc 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 33


 1250 01be 31F91320 		ldrsh	r2, [r1, r3, lsl #1]
 1251              	.LVL235:
 415:lib/helix/real/huffman.c **** 	} else {
 1252              		.loc 1 415 0
 1253 01c2 4FF41071 		mov	r1, #576
 1254 01c6 62E7     		b	.L91
 1255              	.LVL236:
 1256              	.L92:
 411:lib/helix/real/huffman.c **** 				r1Start = fh->sfBand->l[6] + 2*w;
 1257              		.loc 1 411 0
 1258 01c8 526B     		ldr	r2, [r2, #52]
 1259              	.LVL237:
 1260 01ca B2F93630 		ldrsh	r3, [r2, #54]
 1261 01ce B2F93410 		ldrsh	r1, [r2, #52]
 1262 01d2 5B1A     		subs	r3, r3, r1
 1263              	.LVL238:
 412:lib/helix/real/huffman.c **** 			}
 1264              		.loc 1 412 0
 1265 01d4 B2F90C20 		ldrsh	r2, [r2, #12]
 1266 01d8 02EB4302 		add	r2, r2, r3, lsl #1
 1267              	.LVL239:
 415:lib/helix/real/huffman.c **** 	} else {
 1268              		.loc 1 415 0
 1269 01dc 4FF41071 		mov	r1, #576
 1270 01e0 55E7     		b	.L91
 1271              	.LVL240:
 1272              	.L106:
 1273 01e2 039F     		ldr	r7, [sp, #12]
 1274 01e4 DDF814B0 		ldr	fp, [sp, #20]
 441:lib/helix/real/huffman.c **** 	}
 442:lib/helix/real/huffman.c **** 
 443:lib/helix/real/huffman.c **** 	/* decode Huffman quads (if any) */
 444:lib/helix/real/huffman.c **** 	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis-
 1275              		.loc 1 444 0
 1276 01e8 E300     		lsls	r3, r4, #3
 1277              	.LVL241:
 1278 01ea 1A19     		adds	r2, r3, r4
 1279 01ec 1002     		lsls	r0, r2, #8
 1280 01ee 3844     		add	r0, r0, r7
 1281 01f0 2344     		add	r3, r3, r4
 1282 01f2 DA00     		lsls	r2, r3, #3
 1283 01f4 05EBC505 		add	r5, r5, r5, lsl #3
 1284              	.LVL242:
 1285 01f8 2B01     		lsls	r3, r5, #4
 1286 01fa 1A44     		add	r2, r2, r3
 1287 01fc 9044     		add	r8, r8, r2
 1288              	.LVL243:
 1289 01fe D8F86C20 		ldr	r2, [r8, #108]
 1290 0202 D9F80030 		ldr	r3, [r9]
 1291 0206 0193     		str	r3, [sp, #4]
 1292 0208 CDF800A0 		str	r10, [sp]
 1293 020c 3346     		mov	r3, r6
 1294 020e CBF51071 		rsb	r1, fp, #576
 1295 0212 00EB8B00 		add	r0, r0, fp, lsl #2
 1296 0216 FFF7FEFF 		bl	DecodeHuffmanQuads
 1297              	.LVL244:
 1298 021a 04F59062 		add	r2, r4, #1152
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 34


 1299 021e 57F82230 		ldr	r3, [r7, r2, lsl #2]
 1300 0222 1844     		add	r0, r0, r3
 1301 0224 47F82200 		str	r0, [r7, r2, lsl #2]
 1302              	.LVL245:
 445:lib/helix/real/huffman.c **** 
 446:lib/helix/real/huffman.c **** 	ASSERT(hi->nonZeroBound[ch] <= MAX_NSAMP);
 447:lib/helix/real/huffman.c **** 	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 1303              		.loc 1 447 0
 1304 0228 07E0     		b	.L95
 1305              	.L96:
 448:lib/helix/real/huffman.c **** 		hi->huffDecBuf[ch][i] = 0;
 1306              		.loc 1 448 0 discriminator 3
 1307 022a 04EBC402 		add	r2, r4, r4, lsl #3
 1308 022e 9301     		lsls	r3, r2, #6
 1309 0230 0344     		add	r3, r3, r0
 1310 0232 0022     		movs	r2, #0
 1311 0234 47F82320 		str	r2, [r7, r3, lsl #2]
 447:lib/helix/real/huffman.c **** 		hi->huffDecBuf[ch][i] = 0;
 1312              		.loc 1 447 0 discriminator 3
 1313 0238 0130     		adds	r0, r0, #1
 1314              	.LVL246:
 1315              	.L95:
 447:lib/helix/real/huffman.c **** 		hi->huffDecBuf[ch][i] = 0;
 1316              		.loc 1 447 0 is_stmt 0 discriminator 1
 1317 023a B0F5107F 		cmp	r0, #576
 1318 023e F4DB     		blt	.L96
 449:lib/helix/real/huffman.c **** 	
 450:lib/helix/real/huffman.c **** 	/* If bits used for 576 samples < huffBlockBits, then the extras are considered
 451:lib/helix/real/huffman.c **** 	 *  to be stuffing bits (throw away, but need to return correct bitstream position) 
 452:lib/helix/real/huffman.c **** 	 */
 453:lib/helix/real/huffman.c **** 	buf += (bitsLeft + *bitOffset) >> 3;
 1319              		.loc 1 453 0 is_stmt 1
 1320 0240 D9F80030 		ldr	r3, [r9]
 1321 0244 1E44     		add	r6, r6, r3
 1322              	.LVL247:
 1323 0246 0AEBE600 		add	r0, r10, r6, asr #3
 1324              	.LVL248:
 454:lib/helix/real/huffman.c **** 	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
 1325              		.loc 1 454 0
 1326 024a 06F00706 		and	r6, r6, #7
 1327 024e C9F80060 		str	r6, [r9]
 455:lib/helix/real/huffman.c **** 	
 456:lib/helix/real/huffman.c **** 	return (buf - startBuf);
 1328              		.loc 1 456 0
 1329 0252 049B     		ldr	r3, [sp, #16]
 1330 0254 C01A     		subs	r0, r0, r3
 1331              	.LVL249:
 1332              	.L87:
 457:lib/helix/real/huffman.c **** }
 1333              		.loc 1 457 0
 1334 0256 0BB0     		add	sp, sp, #44
 1335              	.LCFI9:
 1336              		.cfi_remember_state
 1337              		.cfi_def_cfa_offset 36
 1338              		@ sp needed
 1339 0258 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1340              	.LVL250:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 35


 1341              	.L97:
 1342              	.LCFI10:
 1343              		.cfi_restore_state
 391:lib/helix/real/huffman.c **** 
 1344              		.loc 1 391 0
 1345 025c 4FF0FF30 		mov	r0, #-1
 1346              	.LVL251:
 1347 0260 F9E7     		b	.L87
 1348              	.LVL252:
 1349              	.L98:
 1350 0262 4FF0FF30 		mov	r0, #-1
 1351              	.LVL253:
 1352 0266 F6E7     		b	.L87
 1353              	.LVL254:
 1354              	.L99:
 1355 0268 4FF0FF30 		mov	r0, #-1
 1356              	.LVL255:
 1357 026c F3E7     		b	.L87
 1358              	.LVL256:
 1359              	.L100:
 1360 026e 4FF0FF30 		mov	r0, #-1
 1361              	.LVL257:
 1362 0272 F0E7     		b	.L87
 1363              	.LVL258:
 1364              	.L101:
 1365 0274 4FF0FF30 		mov	r0, #-1
 1366              	.LVL259:
 1367 0278 EDE7     		b	.L87
 1368              	.LVL260:
 1369              	.L102:
 400:lib/helix/real/huffman.c **** 
 1370              		.loc 1 400 0
 1371 027a 4FF0FF30 		mov	r0, #-1
 1372              	.LVL261:
 1373 027e EAE7     		b	.L87
 1374              	.LVL262:
 1375              	.L103:
 435:lib/helix/real/huffman.c **** 
 1376              		.loc 1 435 0
 1377 0280 4FF0FF30 		mov	r0, #-1
 1378              	.LVL263:
 1379 0284 E7E7     		b	.L87
 1380              	.L108:
 1381 0286 00BF     		.align	2
 1382              	.L107:
 1383 0288 56555555 		.word	1431655766
 1384              		.cfi_endproc
 1385              	.LFE2:
 1387              		.text
 1388              	.Letext0:
 1389              		.file 2 "lib/helix/real/../pub/mp3common.h"
 1390              		.file 3 "lib/helix/real/../pub/mp3dec.h"
 1391              		.file 4 "lib/helix/real/coder.h"
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s 			page 36


DEFINED SYMBOLS
                            *ABS*:00000000 huffman.c
C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s:18     .text.DecodeHuffmanPairs:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s:24     .text.DecodeHuffmanPairs:00000000 DecodeHuffmanPairs
C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s:673    .text.DecodeHuffmanPairs:0000035c $d
C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s:679    .text.DecodeHuffmanPairs:00000368 $t
C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s:707    .text.DecodeHuffmanQuads:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s:713    .text.DecodeHuffmanQuads:00000000 DecodeHuffmanQuads
C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s:995    .text.DecodeHuffmanQuads:00000158 $d
C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s:1002   .text.xmp3fixpt_DecodeHuffman:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s:1009   .text.xmp3fixpt_DecodeHuffman:00000000 xmp3fixpt_DecodeHuffman
C:\Users\Patryk\AppData\Local\Temp\ccxDnL2g.s:1383   .text.xmp3fixpt_DecodeHuffman:00000288 $d

UNDEFINED SYMBOLS
xmp3fixpt_huffTabOffset
xmp3fixpt_huffTable
xmp3fixpt_huffTabLookup
xmp3fixpt_quadTabOffset
xmp3fixpt_quadTabMaxBits
xmp3fixpt_quadTable

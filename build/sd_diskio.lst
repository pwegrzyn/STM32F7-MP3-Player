ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"sd_diskio.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SD_CheckStatus,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	SD_CheckStatus:
  25              	.LFB143:
  26              		.file 1 "Src/sd_diskio.c"
   1:Src/sd_diskio.c **** /**
   2:Src/sd_diskio.c ****   ******************************************************************************
   3:Src/sd_diskio.c ****   * @file    sd_diskio.c (based on sd_diskio_dma_rtos_template.c v2.0.2 as FreeRTOS is enabled)
   4:Src/sd_diskio.c ****   * @brief   SD Disk I/O driver
   5:Src/sd_diskio.c ****   ******************************************************************************
   6:Src/sd_diskio.c ****   * This notice applies to any and all portions of this file
   7:Src/sd_diskio.c ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/sd_diskio.c ****   * USER CODE END. Other portions of this file, whether 
   9:Src/sd_diskio.c ****   * inserted by the user or by software development tools
  10:Src/sd_diskio.c ****   * are owned by their respective copyright owners.
  11:Src/sd_diskio.c ****   *
  12:Src/sd_diskio.c ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  13:Src/sd_diskio.c ****   * All rights reserved.
  14:Src/sd_diskio.c ****   *
  15:Src/sd_diskio.c ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/sd_diskio.c ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/sd_diskio.c ****   *
  18:Src/sd_diskio.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/sd_diskio.c ****   *    this list of conditions and the following disclaimer.
  20:Src/sd_diskio.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/sd_diskio.c ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/sd_diskio.c ****   *    and/or other materials provided with the distribution.
  23:Src/sd_diskio.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Src/sd_diskio.c ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/sd_diskio.c ****   *    derived from this software without specific written permission.
  26:Src/sd_diskio.c ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/sd_diskio.c ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/sd_diskio.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/sd_diskio.c ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Src/sd_diskio.c ****   *    this license is void and will automatically terminate your rights under 
  31:Src/sd_diskio.c ****   *    this license. 
  32:Src/sd_diskio.c ****   *
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 2


  33:Src/sd_diskio.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/sd_diskio.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/sd_diskio.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/sd_diskio.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/sd_diskio.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/sd_diskio.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/sd_diskio.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/sd_diskio.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/sd_diskio.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Src/sd_diskio.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/sd_diskio.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/sd_diskio.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/sd_diskio.c ****   *
  46:Src/sd_diskio.c ****   ******************************************************************************
  47:Src/sd_diskio.c ****   */ 
  48:Src/sd_diskio.c **** /* USER CODE BEGIN firstSection */
  49:Src/sd_diskio.c **** /* can be used to modify / undefine following code or add new definitions */
  50:Src/sd_diskio.c **** /* USER CODE END firstSection*/
  51:Src/sd_diskio.c **** 
  52:Src/sd_diskio.c **** /* Includes ------------------------------------------------------------------*/
  53:Src/sd_diskio.c **** #include "ff_gen_drv.h"
  54:Src/sd_diskio.c **** #include "sd_diskio.h"
  55:Src/sd_diskio.c **** 
  56:Src/sd_diskio.c **** /* Private typedef -----------------------------------------------------------*/
  57:Src/sd_diskio.c **** /* Private define ------------------------------------------------------------*/
  58:Src/sd_diskio.c **** 
  59:Src/sd_diskio.c **** #define QUEUE_SIZE         (uint32_t) 10
  60:Src/sd_diskio.c **** #define READ_CPLT_MSG      (uint32_t) 1
  61:Src/sd_diskio.c **** #define WRITE_CPLT_MSG     (uint32_t) 2
  62:Src/sd_diskio.c **** /*
  63:Src/sd_diskio.c ****  * the following Timeout is useful to give the control back to the applications
  64:Src/sd_diskio.c ****  * in case of errors in either BSP_SD_ReadCpltCallback() or BSP_SD_WriteCpltCallback()
  65:Src/sd_diskio.c ****  * the value by default is as defined in the BSP platform driver otherwise 30 secs
  66:Src/sd_diskio.c ****  */
  67:Src/sd_diskio.c **** #define SD_TIMEOUT 30 * 1000
  68:Src/sd_diskio.c **** 
  69:Src/sd_diskio.c **** #define SD_DEFAULT_BLOCK_SIZE 512
  70:Src/sd_diskio.c **** 
  71:Src/sd_diskio.c **** /*
  72:Src/sd_diskio.c ****  * Depending on the use case, the SD card initialization could be done at the
  73:Src/sd_diskio.c ****  * application level: if it is the case define the flag below to disable
  74:Src/sd_diskio.c ****  * the BSP_SD_Init() call in the SD_Initialize() and add a call to 
  75:Src/sd_diskio.c ****  * BSP_SD_Init() elsewhere in the application.
  76:Src/sd_diskio.c ****  */
  77:Src/sd_diskio.c **** /* USER CODE BEGIN disableSDInit */
  78:Src/sd_diskio.c **** /* #define DISABLE_SD_INIT */
  79:Src/sd_diskio.c **** /* USER CODE END disableSDInit */
  80:Src/sd_diskio.c **** 
  81:Src/sd_diskio.c **** /* 
  82:Src/sd_diskio.c ****  * when using cachable memory region, it may be needed to maintain the cache
  83:Src/sd_diskio.c ****  * validity. Enable the define below to activate a cache maintenance at each
  84:Src/sd_diskio.c ****  * read and write operation.
  85:Src/sd_diskio.c ****  * Notice: This is applicable only for cortex M7 based platform.
  86:Src/sd_diskio.c ****  */
  87:Src/sd_diskio.c **** /* USER CODE BEGIN enableSDDmaCacheMaintenance */
  88:Src/sd_diskio.c **** /* #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 */
  89:Src/sd_diskio.c **** /* USER CODE BEGIN enableSDDmaCacheMaintenance */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 3


  90:Src/sd_diskio.c **** 
  91:Src/sd_diskio.c **** /* Private variables ---------------------------------------------------------*/
  92:Src/sd_diskio.c **** /* Disk status */
  93:Src/sd_diskio.c **** static volatile DSTATUS Stat = STA_NOINIT;
  94:Src/sd_diskio.c **** 
  95:Src/sd_diskio.c **** static osMessageQId SDQueueID;
  96:Src/sd_diskio.c **** /* Private function prototypes -----------------------------------------------*/
  97:Src/sd_diskio.c **** static DSTATUS SD_CheckStatus(BYTE lun);
  98:Src/sd_diskio.c **** DSTATUS SD_initialize (BYTE);
  99:Src/sd_diskio.c **** DSTATUS SD_status (BYTE);
 100:Src/sd_diskio.c **** DRESULT SD_read (BYTE, BYTE*, DWORD, UINT);
 101:Src/sd_diskio.c **** #if _USE_WRITE == 1
 102:Src/sd_diskio.c ****   DRESULT SD_write (BYTE, const BYTE*, DWORD, UINT);
 103:Src/sd_diskio.c **** #endif /* _USE_WRITE == 1 */
 104:Src/sd_diskio.c **** #if _USE_IOCTL == 1
 105:Src/sd_diskio.c ****   DRESULT SD_ioctl (BYTE, BYTE, void*);
 106:Src/sd_diskio.c **** #endif  /* _USE_IOCTL == 1 */
 107:Src/sd_diskio.c **** 
 108:Src/sd_diskio.c **** const Diskio_drvTypeDef  SD_Driver =
 109:Src/sd_diskio.c **** {
 110:Src/sd_diskio.c ****   SD_initialize,
 111:Src/sd_diskio.c ****   SD_status,
 112:Src/sd_diskio.c ****   SD_read,
 113:Src/sd_diskio.c **** #if  _USE_WRITE == 1
 114:Src/sd_diskio.c ****   SD_write,
 115:Src/sd_diskio.c **** #endif /* _USE_WRITE == 1 */
 116:Src/sd_diskio.c **** 
 117:Src/sd_diskio.c **** #if  _USE_IOCTL == 1
 118:Src/sd_diskio.c ****   SD_ioctl,
 119:Src/sd_diskio.c **** #endif /* _USE_IOCTL == 1 */
 120:Src/sd_diskio.c **** };
 121:Src/sd_diskio.c **** 
 122:Src/sd_diskio.c **** /* USER CODE BEGIN beforeFunctionSection */
 123:Src/sd_diskio.c **** /* can be used to modify / undefine following code or add new code */
 124:Src/sd_diskio.c **** /* USER CODE END beforeFunctionSection */
 125:Src/sd_diskio.c **** 
 126:Src/sd_diskio.c **** /* Private functions ---------------------------------------------------------*/
 127:Src/sd_diskio.c **** static DSTATUS SD_CheckStatus(BYTE lun)
 128:Src/sd_diskio.c **** {
  27              		.loc 1 128 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 129:Src/sd_diskio.c ****   Stat = STA_NOINIT;
  37              		.loc 1 129 0
  38 0002 074B     		ldr	r3, .L4
  39 0004 0122     		movs	r2, #1
  40 0006 1A70     		strb	r2, [r3]
 130:Src/sd_diskio.c **** 
 131:Src/sd_diskio.c ****   if(BSP_SD_GetCardState() == MSD_OK)
  41              		.loc 1 131 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 4


  42 0008 FFF7FEFF 		bl	BSP_SD_GetCardState
  43              	.LVL1:
  44 000c 20B9     		cbnz	r0, .L2
 132:Src/sd_diskio.c ****   {
 133:Src/sd_diskio.c ****     Stat &= ~STA_NOINIT;
  45              		.loc 1 133 0
  46 000e 044A     		ldr	r2, .L4
  47 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  48 0012 03F0FE03 		and	r3, r3, #254
  49 0016 1370     		strb	r3, [r2]
  50              	.L2:
 134:Src/sd_diskio.c ****   }
 135:Src/sd_diskio.c **** 
 136:Src/sd_diskio.c ****   return Stat;
  51              		.loc 1 136 0
  52 0018 014B     		ldr	r3, .L4
  53 001a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 137:Src/sd_diskio.c **** }
  54              		.loc 1 137 0
  55 001c 08BD     		pop	{r3, pc}
  56              	.L5:
  57 001e 00BF     		.align	2
  58              	.L4:
  59 0020 00000000 		.word	.LANCHOR0
  60              		.cfi_endproc
  61              	.LFE143:
  63              		.section	.text.SD_initialize,"ax",%progbits
  64              		.align	1
  65              		.global	SD_initialize
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu fpv5-sp-d16
  71              	SD_initialize:
  72              	.LFB144:
 138:Src/sd_diskio.c **** 
 139:Src/sd_diskio.c **** /**
 140:Src/sd_diskio.c ****   * @brief  Initializes a Drive
 141:Src/sd_diskio.c ****   * @param  lun : not used
 142:Src/sd_diskio.c ****   * @retval DSTATUS: Operation status
 143:Src/sd_diskio.c ****   */
 144:Src/sd_diskio.c **** DSTATUS SD_initialize(BYTE lun)
 145:Src/sd_diskio.c **** {
  73              		.loc 1 145 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 8
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              	.LVL2:
  78 0000 10B5     		push	{r4, lr}
  79              	.LCFI1:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 4, -8
  82              		.cfi_offset 14, -4
  83 0002 82B0     		sub	sp, sp, #8
  84              	.LCFI2:
  85              		.cfi_def_cfa_offset 16
  86 0004 0446     		mov	r4, r0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 5


 146:Src/sd_diskio.c ****   Stat = STA_NOINIT;
  87              		.loc 1 146 0
  88 0006 124B     		ldr	r3, .L12
  89 0008 0122     		movs	r2, #1
  90 000a 1A70     		strb	r2, [r3]
 147:Src/sd_diskio.c ****   /*
 148:Src/sd_diskio.c ****    * check that the kernel has been started before continuing
 149:Src/sd_diskio.c ****    * as the osMessage API will fail otherwise
 150:Src/sd_diskio.c ****    */
 151:Src/sd_diskio.c ****   if(osKernelRunning())
  91              		.loc 1 151 0
  92 000c FFF7FEFF 		bl	osKernelRunning
  93              	.LVL3:
  94 0010 18B9     		cbnz	r0, .L10
  95              	.L7:
 152:Src/sd_diskio.c ****   {
 153:Src/sd_diskio.c **** #if !defined(DISABLE_SD_INIT)
 154:Src/sd_diskio.c **** 
 155:Src/sd_diskio.c ****     if(BSP_SD_Init() == MSD_OK)
 156:Src/sd_diskio.c ****     {
 157:Src/sd_diskio.c ****       Stat = SD_CheckStatus(lun);
 158:Src/sd_diskio.c ****     }
 159:Src/sd_diskio.c **** 
 160:Src/sd_diskio.c **** #else
 161:Src/sd_diskio.c ****     Stat = SD_CheckStatus(lun);
 162:Src/sd_diskio.c **** #endif
 163:Src/sd_diskio.c **** 
 164:Src/sd_diskio.c ****     /*
 165:Src/sd_diskio.c ****      * if the SD is correctly initialized, create the operation queue
 166:Src/sd_diskio.c ****      */
 167:Src/sd_diskio.c **** 
 168:Src/sd_diskio.c ****     if (Stat != STA_NOINIT)
 169:Src/sd_diskio.c ****     {
 170:Src/sd_diskio.c ****       osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 171:Src/sd_diskio.c ****       SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 172:Src/sd_diskio.c ****     }
 173:Src/sd_diskio.c ****   }
 174:Src/sd_diskio.c ****   return Stat;
  96              		.loc 1 174 0
  97 0012 0F4B     		ldr	r3, .L12
  98 0014 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 175:Src/sd_diskio.c **** }
  99              		.loc 1 175 0
 100 0016 02B0     		add	sp, sp, #8
 101              	.LCFI3:
 102              		.cfi_remember_state
 103              		.cfi_def_cfa_offset 8
 104              		@ sp needed
 105 0018 10BD     		pop	{r4, pc}
 106              	.L10:
 107              	.LCFI4:
 108              		.cfi_restore_state
 155:Src/sd_diskio.c ****     {
 109              		.loc 1 155 0
 110 001a FFF7FEFF 		bl	BSP_SD_Init
 111              	.LVL4:
 112 001e 88B1     		cbz	r0, .L11
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 6


 113              	.L8:
 168:Src/sd_diskio.c ****     {
 114              		.loc 1 168 0
 115 0020 0B4B     		ldr	r3, .L12
 116 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 117 0024 DBB2     		uxtb	r3, r3
 118 0026 012B     		cmp	r3, #1
 119 0028 F3D0     		beq	.L7
 120              	.LBB2:
 170:Src/sd_diskio.c ****       SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 121              		.loc 1 170 0
 122 002a 0A4A     		ldr	r2, .L12+4
 123 002c 6B46     		mov	r3, sp
 124 002e 92E80300 		ldm	r2, {r0, r1}
 125 0032 83E80300 		stm	r3, {r0, r1}
 171:Src/sd_diskio.c ****     }
 126              		.loc 1 171 0
 127 0036 0021     		movs	r1, #0
 128 0038 1846     		mov	r0, r3
 129 003a FFF7FEFF 		bl	osMessageCreate
 130              	.LVL5:
 131 003e 064B     		ldr	r3, .L12+8
 132 0040 1860     		str	r0, [r3]
 133 0042 E6E7     		b	.L7
 134              	.L11:
 135              	.LBE2:
 157:Src/sd_diskio.c ****     }
 136              		.loc 1 157 0
 137 0044 2046     		mov	r0, r4
 138 0046 FFF7FEFF 		bl	SD_CheckStatus
 139              	.LVL6:
 140 004a 014B     		ldr	r3, .L12
 141 004c 1870     		strb	r0, [r3]
 142 004e E7E7     		b	.L8
 143              	.L13:
 144              		.align	2
 145              	.L12:
 146 0050 00000000 		.word	.LANCHOR0
 147 0054 00000000 		.word	.LANCHOR1
 148 0058 00000000 		.word	.LANCHOR2
 149              		.cfi_endproc
 150              	.LFE144:
 152              		.section	.text.SD_status,"ax",%progbits
 153              		.align	1
 154              		.global	SD_status
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 158              		.fpu fpv5-sp-d16
 160              	SD_status:
 161              	.LFB145:
 176:Src/sd_diskio.c **** 
 177:Src/sd_diskio.c **** /**
 178:Src/sd_diskio.c ****   * @brief  Gets Disk Status
 179:Src/sd_diskio.c ****   * @param  lun : not used
 180:Src/sd_diskio.c ****   * @retval DSTATUS: Operation status
 181:Src/sd_diskio.c ****   */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 7


 182:Src/sd_diskio.c **** DSTATUS SD_status(BYTE lun)
 183:Src/sd_diskio.c **** {
 162              		.loc 1 183 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 0
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 166              	.LVL7:
 167 0000 08B5     		push	{r3, lr}
 168              	.LCFI5:
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 3, -8
 171              		.cfi_offset 14, -4
 184:Src/sd_diskio.c ****   return SD_CheckStatus(lun);
 172              		.loc 1 184 0
 173 0002 FFF7FEFF 		bl	SD_CheckStatus
 174              	.LVL8:
 185:Src/sd_diskio.c **** }
 175              		.loc 1 185 0
 176 0006 08BD     		pop	{r3, pc}
 177              		.cfi_endproc
 178              	.LFE145:
 180              		.section	.text.SD_read,"ax",%progbits
 181              		.align	1
 182              		.global	SD_read
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu fpv5-sp-d16
 188              	SD_read:
 189              	.LFB146:
 186:Src/sd_diskio.c **** 
 187:Src/sd_diskio.c **** /* USER CODE BEGIN beforeReadSection */
 188:Src/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 189:Src/sd_diskio.c **** /* USER CODE END beforeReadSection */
 190:Src/sd_diskio.c **** /**
 191:Src/sd_diskio.c ****   * @brief  Reads Sector(s)
 192:Src/sd_diskio.c ****   * @param  lun : not used
 193:Src/sd_diskio.c ****   * @param  *buff: Data buffer to store read data
 194:Src/sd_diskio.c ****   * @param  sector: Sector address (LBA)
 195:Src/sd_diskio.c ****   * @param  count: Number of sectors to read (1..128)
 196:Src/sd_diskio.c ****   * @retval DRESULT: Operation result
 197:Src/sd_diskio.c ****   */
 198:Src/sd_diskio.c **** DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
 199:Src/sd_diskio.c **** {
 190              		.loc 1 199 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 16
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              	.LVL9:
 195 0000 10B5     		push	{r4, lr}
 196              	.LCFI6:
 197              		.cfi_def_cfa_offset 8
 198              		.cfi_offset 4, -8
 199              		.cfi_offset 14, -4
 200 0002 84B0     		sub	sp, sp, #16
 201              	.LCFI7:
 202              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 8


 203 0004 0846     		mov	r0, r1
 204              	.LVL10:
 205 0006 1146     		mov	r1, r2
 206              	.LVL11:
 200:Src/sd_diskio.c ****   DRESULT res = RES_ERROR;
 201:Src/sd_diskio.c ****   osEvent event;
 202:Src/sd_diskio.c ****   uint32_t timer;
 203:Src/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 204:Src/sd_diskio.c ****   uint32_t alignedAddr;
 205:Src/sd_diskio.c **** #endif
 206:Src/sd_diskio.c **** 
 207:Src/sd_diskio.c ****   if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 207              		.loc 1 207 0
 208 0008 1A46     		mov	r2, r3
 209              	.LVL12:
 210 000a FFF7FEFF 		bl	BSP_SD_ReadBlocks_DMA
 211              	.LVL13:
 212 000e 10B1     		cbz	r0, .L25
 200:Src/sd_diskio.c ****   DRESULT res = RES_ERROR;
 213              		.loc 1 200 0
 214 0010 0120     		movs	r0, #1
 215              	.L17:
 216              	.LVL14:
 208:Src/sd_diskio.c ****                            (uint32_t) (sector),
 209:Src/sd_diskio.c ****                            count) == MSD_OK)
 210:Src/sd_diskio.c ****   {
 211:Src/sd_diskio.c ****     /* wait for a message from the queue or a timeout */
 212:Src/sd_diskio.c ****     event = osMessageGet(SDQueueID, SD_TIMEOUT);
 213:Src/sd_diskio.c **** 
 214:Src/sd_diskio.c ****     if (event.status == osEventMessage)
 215:Src/sd_diskio.c ****     {
 216:Src/sd_diskio.c ****       if (event.value.v == READ_CPLT_MSG)
 217:Src/sd_diskio.c ****       {
 218:Src/sd_diskio.c ****         timer = osKernelSysTick() + SD_TIMEOUT;
 219:Src/sd_diskio.c ****         /* block until SDIO IP is ready or a timeout occur */
 220:Src/sd_diskio.c ****         while(timer > osKernelSysTick())
 221:Src/sd_diskio.c ****         {
 222:Src/sd_diskio.c ****           if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 223:Src/sd_diskio.c ****           {
 224:Src/sd_diskio.c ****             res = RES_OK;
 225:Src/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 226:Src/sd_diskio.c ****             /*
 227:Src/sd_diskio.c ****                the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned address,
 228:Src/sd_diskio.c ****                adjust the address and the D-Cache size to invalidate accordingly.
 229:Src/sd_diskio.c ****              */
 230:Src/sd_diskio.c ****             alignedAddr = (uint32_t)buff & ~0x1F;
 231:Src/sd_diskio.c ****             SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff 
 232:Src/sd_diskio.c **** #endif
 233:Src/sd_diskio.c ****             break;
 234:Src/sd_diskio.c ****           }
 235:Src/sd_diskio.c ****         }
 236:Src/sd_diskio.c ****       }
 237:Src/sd_diskio.c ****     }
 238:Src/sd_diskio.c ****   }
 239:Src/sd_diskio.c **** 
 240:Src/sd_diskio.c ****   return res;
 241:Src/sd_diskio.c **** }
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 9


 217              		.loc 1 241 0
 218 0012 04B0     		add	sp, sp, #16
 219              	.LCFI8:
 220              		.cfi_remember_state
 221              		.cfi_def_cfa_offset 8
 222              		@ sp needed
 223 0014 10BD     		pop	{r4, pc}
 224              	.LVL15:
 225              	.L25:
 226              	.LCFI9:
 227              		.cfi_restore_state
 212:Src/sd_diskio.c **** 
 228              		.loc 1 212 0
 229 0016 47F23052 		movw	r2, #30000
 230 001a 104B     		ldr	r3, .L29
 231 001c 1968     		ldr	r1, [r3]
 232 001e 01A8     		add	r0, sp, #4
 233 0020 FFF7FEFF 		bl	osMessageGet
 234              	.LVL16:
 214:Src/sd_diskio.c ****     {
 235              		.loc 1 214 0
 236 0024 019B     		ldr	r3, [sp, #4]
 237 0026 102B     		cmp	r3, #16
 238 0028 01D0     		beq	.L26
 200:Src/sd_diskio.c ****   osEvent event;
 239              		.loc 1 200 0
 240 002a 0120     		movs	r0, #1
 241 002c F1E7     		b	.L17
 242              	.L26:
 216:Src/sd_diskio.c ****       {
 243              		.loc 1 216 0
 244 002e 029B     		ldr	r3, [sp, #8]
 245 0030 012B     		cmp	r3, #1
 246 0032 01D0     		beq	.L27
 200:Src/sd_diskio.c ****   osEvent event;
 247              		.loc 1 200 0
 248 0034 0120     		movs	r0, #1
 249 0036 ECE7     		b	.L17
 250              	.L27:
 218:Src/sd_diskio.c ****         /* block until SDIO IP is ready or a timeout occur */
 251              		.loc 1 218 0
 252 0038 FFF7FEFF 		bl	osKernelSysTick
 253              	.LVL17:
 254 003c 47F23054 		movw	r4, #30000
 255 0040 0444     		add	r4, r4, r0
 256              	.LVL18:
 257              	.L18:
 220:Src/sd_diskio.c ****         {
 258              		.loc 1 220 0
 259 0042 FFF7FEFF 		bl	osKernelSysTick
 260              	.LVL19:
 261 0046 A042     		cmp	r0, r4
 262 0048 05D2     		bcs	.L28
 222:Src/sd_diskio.c ****           {
 263              		.loc 1 222 0
 264 004a FFF7FEFF 		bl	BSP_SD_GetCardState
 265              	.LVL20:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 10


 266 004e 0028     		cmp	r0, #0
 267 0050 F7D1     		bne	.L18
 224:Src/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 268              		.loc 1 224 0
 269 0052 0020     		movs	r0, #0
 270 0054 DDE7     		b	.L17
 271              	.L28:
 200:Src/sd_diskio.c ****   osEvent event;
 272              		.loc 1 200 0
 273 0056 0120     		movs	r0, #1
 274 0058 DBE7     		b	.L17
 275              	.L30:
 276 005a 00BF     		.align	2
 277              	.L29:
 278 005c 00000000 		.word	.LANCHOR2
 279              		.cfi_endproc
 280              	.LFE146:
 282              		.section	.text.SD_write,"ax",%progbits
 283              		.align	1
 284              		.global	SD_write
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 288              		.fpu fpv5-sp-d16
 290              	SD_write:
 291              	.LFB147:
 242:Src/sd_diskio.c **** 
 243:Src/sd_diskio.c **** /* USER CODE BEGIN beforeWriteSection */
 244:Src/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 245:Src/sd_diskio.c **** /* USER CODE END beforeWriteSection */
 246:Src/sd_diskio.c **** /**
 247:Src/sd_diskio.c ****   * @brief  Writes Sector(s)
 248:Src/sd_diskio.c ****   * @param  lun : not used
 249:Src/sd_diskio.c ****   * @param  *buff: Data to be written
 250:Src/sd_diskio.c ****   * @param  sector: Sector address (LBA)
 251:Src/sd_diskio.c ****   * @param  count: Number of sectors to write (1..128)
 252:Src/sd_diskio.c ****   * @retval DRESULT: Operation result
 253:Src/sd_diskio.c ****   */
 254:Src/sd_diskio.c **** #if _USE_WRITE == 1
 255:Src/sd_diskio.c **** DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
 256:Src/sd_diskio.c **** {
 292              		.loc 1 256 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 16
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              	.LVL21:
 297 0000 10B5     		push	{r4, lr}
 298              	.LCFI10:
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 4, -8
 301              		.cfi_offset 14, -4
 302 0002 84B0     		sub	sp, sp, #16
 303              	.LCFI11:
 304              		.cfi_def_cfa_offset 24
 305 0004 0846     		mov	r0, r1
 306              	.LVL22:
 307 0006 1146     		mov	r1, r2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 11


 308              	.LVL23:
 257:Src/sd_diskio.c ****   DRESULT res = RES_ERROR;
 258:Src/sd_diskio.c ****   osEvent event;
 259:Src/sd_diskio.c ****   uint32_t timer;
 260:Src/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 261:Src/sd_diskio.c ****   uint32_t alignedAddr;
 262:Src/sd_diskio.c ****   /*
 263:Src/sd_diskio.c ****    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
 264:Src/sd_diskio.c ****    adjust the address and the D-Cache size to clean accordingly.
 265:Src/sd_diskio.c ****    */
 266:Src/sd_diskio.c ****   alignedAddr = (uint32_t)buff &  ~0x1F;
 267:Src/sd_diskio.c ****   SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr))
 268:Src/sd_diskio.c **** #endif
 269:Src/sd_diskio.c **** 
 270:Src/sd_diskio.c ****   if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 309              		.loc 1 270 0
 310 0008 1A46     		mov	r2, r3
 311              	.LVL24:
 312 000a FFF7FEFF 		bl	BSP_SD_WriteBlocks_DMA
 313              	.LVL25:
 314 000e 10B1     		cbz	r0, .L40
 257:Src/sd_diskio.c ****   DRESULT res = RES_ERROR;
 315              		.loc 1 257 0
 316 0010 0120     		movs	r0, #1
 317              	.L32:
 318              	.LVL26:
 271:Src/sd_diskio.c ****                             (uint32_t) (sector),
 272:Src/sd_diskio.c ****                             count) == MSD_OK)
 273:Src/sd_diskio.c ****   {
 274:Src/sd_diskio.c ****     /* Get the message from the queue */
 275:Src/sd_diskio.c ****     event = osMessageGet(SDQueueID, SD_TIMEOUT);
 276:Src/sd_diskio.c **** 
 277:Src/sd_diskio.c ****     if (event.status == osEventMessage)
 278:Src/sd_diskio.c ****     {
 279:Src/sd_diskio.c ****       if (event.value.v == WRITE_CPLT_MSG)
 280:Src/sd_diskio.c ****       {
 281:Src/sd_diskio.c ****         timer = osKernelSysTick() + SD_TIMEOUT;
 282:Src/sd_diskio.c ****         /* block until SDIO IP is ready or a timeout occur */
 283:Src/sd_diskio.c ****         while(timer > osKernelSysTick())
 284:Src/sd_diskio.c ****         {
 285:Src/sd_diskio.c ****           if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 286:Src/sd_diskio.c ****           {
 287:Src/sd_diskio.c ****             res = RES_OK;
 288:Src/sd_diskio.c ****             break;
 289:Src/sd_diskio.c ****           }
 290:Src/sd_diskio.c ****         }
 291:Src/sd_diskio.c ****       }
 292:Src/sd_diskio.c ****     }
 293:Src/sd_diskio.c ****   }
 294:Src/sd_diskio.c **** 
 295:Src/sd_diskio.c ****   return res;
 296:Src/sd_diskio.c **** }
 319              		.loc 1 296 0
 320 0012 04B0     		add	sp, sp, #16
 321              	.LCFI12:
 322              		.cfi_remember_state
 323              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 12


 324              		@ sp needed
 325 0014 10BD     		pop	{r4, pc}
 326              	.LVL27:
 327              	.L40:
 328              	.LCFI13:
 329              		.cfi_restore_state
 275:Src/sd_diskio.c **** 
 330              		.loc 1 275 0
 331 0016 47F23052 		movw	r2, #30000
 332 001a 104B     		ldr	r3, .L44
 333 001c 1968     		ldr	r1, [r3]
 334 001e 01A8     		add	r0, sp, #4
 335 0020 FFF7FEFF 		bl	osMessageGet
 336              	.LVL28:
 277:Src/sd_diskio.c ****     {
 337              		.loc 1 277 0
 338 0024 019B     		ldr	r3, [sp, #4]
 339 0026 102B     		cmp	r3, #16
 340 0028 01D0     		beq	.L41
 257:Src/sd_diskio.c ****   osEvent event;
 341              		.loc 1 257 0
 342 002a 0120     		movs	r0, #1
 343 002c F1E7     		b	.L32
 344              	.L41:
 279:Src/sd_diskio.c ****       {
 345              		.loc 1 279 0
 346 002e 029B     		ldr	r3, [sp, #8]
 347 0030 022B     		cmp	r3, #2
 348 0032 01D0     		beq	.L42
 257:Src/sd_diskio.c ****   osEvent event;
 349              		.loc 1 257 0
 350 0034 0120     		movs	r0, #1
 351 0036 ECE7     		b	.L32
 352              	.L42:
 281:Src/sd_diskio.c ****         /* block until SDIO IP is ready or a timeout occur */
 353              		.loc 1 281 0
 354 0038 FFF7FEFF 		bl	osKernelSysTick
 355              	.LVL29:
 356 003c 47F23054 		movw	r4, #30000
 357 0040 0444     		add	r4, r4, r0
 358              	.LVL30:
 359              	.L33:
 283:Src/sd_diskio.c ****         {
 360              		.loc 1 283 0
 361 0042 FFF7FEFF 		bl	osKernelSysTick
 362              	.LVL31:
 363 0046 A042     		cmp	r0, r4
 364 0048 05D2     		bcs	.L43
 285:Src/sd_diskio.c ****           {
 365              		.loc 1 285 0
 366 004a FFF7FEFF 		bl	BSP_SD_GetCardState
 367              	.LVL32:
 368 004e 0028     		cmp	r0, #0
 369 0050 F7D1     		bne	.L33
 287:Src/sd_diskio.c ****             break;
 370              		.loc 1 287 0
 371 0052 0020     		movs	r0, #0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 13


 372 0054 DDE7     		b	.L32
 373              	.L43:
 257:Src/sd_diskio.c ****   osEvent event;
 374              		.loc 1 257 0
 375 0056 0120     		movs	r0, #1
 376 0058 DBE7     		b	.L32
 377              	.L45:
 378 005a 00BF     		.align	2
 379              	.L44:
 380 005c 00000000 		.word	.LANCHOR2
 381              		.cfi_endproc
 382              	.LFE147:
 384              		.section	.text.SD_ioctl,"ax",%progbits
 385              		.align	1
 386              		.global	SD_ioctl
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 390              		.fpu fpv5-sp-d16
 392              	SD_ioctl:
 393              	.LFB148:
 297:Src/sd_diskio.c **** #endif /* _USE_WRITE == 1 */
 298:Src/sd_diskio.c **** 
 299:Src/sd_diskio.c **** /* USER CODE BEGIN beforeIoctlSection */
 300:Src/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 301:Src/sd_diskio.c **** /* USER CODE END beforeIoctlSection */
 302:Src/sd_diskio.c **** /**
 303:Src/sd_diskio.c ****   * @brief  I/O control operation
 304:Src/sd_diskio.c ****   * @param  lun : not used
 305:Src/sd_diskio.c ****   * @param  cmd: Control code
 306:Src/sd_diskio.c ****   * @param  *buff: Buffer to send/receive control data
 307:Src/sd_diskio.c ****   * @retval DRESULT: Operation result
 308:Src/sd_diskio.c ****   */
 309:Src/sd_diskio.c **** #if _USE_IOCTL == 1
 310:Src/sd_diskio.c **** DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
 311:Src/sd_diskio.c **** {
 394              		.loc 1 311 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 32
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              	.LVL33:
 312:Src/sd_diskio.c ****   DRESULT res = RES_ERROR;
 313:Src/sd_diskio.c ****   BSP_SD_CardInfo CardInfo;
 314:Src/sd_diskio.c **** 
 315:Src/sd_diskio.c ****   if (Stat & STA_NOINIT) return RES_NOTRDY;
 399              		.loc 1 315 0
 400 0000 154B     		ldr	r3, .L59
 401 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 402 0004 13F0010F 		tst	r3, #1
 403 0008 21D1     		bne	.L53
 311:Src/sd_diskio.c ****   DRESULT res = RES_ERROR;
 404              		.loc 1 311 0
 405 000a 10B5     		push	{r4, lr}
 406              	.LCFI14:
 407              		.cfi_def_cfa_offset 8
 408              		.cfi_offset 4, -8
 409              		.cfi_offset 14, -4
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 14


 410 000c 88B0     		sub	sp, sp, #32
 411              	.LCFI15:
 412              		.cfi_def_cfa_offset 40
 413 000e 1446     		mov	r4, r2
 316:Src/sd_diskio.c **** 
 317:Src/sd_diskio.c ****   switch (cmd)
 414              		.loc 1 317 0
 415 0010 0329     		cmp	r1, #3
 416 0012 1ED8     		bhi	.L54
 417 0014 DFE801F0 		tbb	[pc, r1]
 418              	.L49:
 419 0018 02       		.byte	(.L48-.L49)/2
 420 0019 05       		.byte	(.L50-.L49)/2
 421 001a 0C       		.byte	(.L51-.L49)/2
 422 001b 13       		.byte	(.L52-.L49)/2
 423              		.p2align 1
 424              	.L48:
 318:Src/sd_diskio.c ****   {
 319:Src/sd_diskio.c ****   /* Make sure that no pending write process */
 320:Src/sd_diskio.c ****   case CTRL_SYNC :
 321:Src/sd_diskio.c ****     res = RES_OK;
 425              		.loc 1 321 0
 426 001c 0020     		movs	r0, #0
 427              	.LVL34:
 428              	.L47:
 322:Src/sd_diskio.c ****     break;
 323:Src/sd_diskio.c **** 
 324:Src/sd_diskio.c ****   /* Get number of sectors on the disk (DWORD) */
 325:Src/sd_diskio.c ****   case GET_SECTOR_COUNT :
 326:Src/sd_diskio.c ****     BSP_SD_GetCardInfo(&CardInfo);
 327:Src/sd_diskio.c ****     *(DWORD*)buff = CardInfo.LogBlockNbr;
 328:Src/sd_diskio.c ****     res = RES_OK;
 329:Src/sd_diskio.c ****     break;
 330:Src/sd_diskio.c **** 
 331:Src/sd_diskio.c ****   /* Get R/W sector size (WORD) */
 332:Src/sd_diskio.c ****   case GET_SECTOR_SIZE :
 333:Src/sd_diskio.c ****     BSP_SD_GetCardInfo(&CardInfo);
 334:Src/sd_diskio.c ****     *(WORD*)buff = CardInfo.LogBlockSize;
 335:Src/sd_diskio.c ****     res = RES_OK;
 336:Src/sd_diskio.c ****     break;
 337:Src/sd_diskio.c **** 
 338:Src/sd_diskio.c ****   /* Get erase block size in unit of sector (DWORD) */
 339:Src/sd_diskio.c ****   case GET_BLOCK_SIZE :
 340:Src/sd_diskio.c ****     BSP_SD_GetCardInfo(&CardInfo);
 341:Src/sd_diskio.c ****     *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 342:Src/sd_diskio.c ****     res = RES_OK;
 343:Src/sd_diskio.c ****     break;
 344:Src/sd_diskio.c **** 
 345:Src/sd_diskio.c ****   default:
 346:Src/sd_diskio.c ****     res = RES_PARERR;
 347:Src/sd_diskio.c ****   }
 348:Src/sd_diskio.c **** 
 349:Src/sd_diskio.c ****   return res;
 350:Src/sd_diskio.c **** }
 429              		.loc 1 350 0
 430 001e 08B0     		add	sp, sp, #32
 431              	.LCFI16:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 15


 432              		.cfi_remember_state
 433              		.cfi_def_cfa_offset 8
 434              		@ sp needed
 435 0020 10BD     		pop	{r4, pc}
 436              	.LVL35:
 437              	.L50:
 438              	.LCFI17:
 439              		.cfi_restore_state
 326:Src/sd_diskio.c ****     *(DWORD*)buff = CardInfo.LogBlockNbr;
 440              		.loc 1 326 0
 441 0022 6846     		mov	r0, sp
 442              	.LVL36:
 443 0024 FFF7FEFF 		bl	BSP_SD_GetCardInfo
 444              	.LVL37:
 327:Src/sd_diskio.c ****     res = RES_OK;
 445              		.loc 1 327 0
 446 0028 069B     		ldr	r3, [sp, #24]
 447 002a 2360     		str	r3, [r4]
 448              	.LVL38:
 328:Src/sd_diskio.c ****     break;
 449              		.loc 1 328 0
 450 002c 0020     		movs	r0, #0
 329:Src/sd_diskio.c **** 
 451              		.loc 1 329 0
 452 002e F6E7     		b	.L47
 453              	.LVL39:
 454              	.L51:
 333:Src/sd_diskio.c ****     *(WORD*)buff = CardInfo.LogBlockSize;
 455              		.loc 1 333 0
 456 0030 6846     		mov	r0, sp
 457              	.LVL40:
 458 0032 FFF7FEFF 		bl	BSP_SD_GetCardInfo
 459              	.LVL41:
 334:Src/sd_diskio.c ****     res = RES_OK;
 460              		.loc 1 334 0
 461 0036 079B     		ldr	r3, [sp, #28]
 462 0038 2380     		strh	r3, [r4]	@ movhi
 463              	.LVL42:
 335:Src/sd_diskio.c ****     break;
 464              		.loc 1 335 0
 465 003a 0020     		movs	r0, #0
 336:Src/sd_diskio.c **** 
 466              		.loc 1 336 0
 467 003c EFE7     		b	.L47
 468              	.LVL43:
 469              	.L52:
 340:Src/sd_diskio.c ****     *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 470              		.loc 1 340 0
 471 003e 6846     		mov	r0, sp
 472              	.LVL44:
 473 0040 FFF7FEFF 		bl	BSP_SD_GetCardInfo
 474              	.LVL45:
 341:Src/sd_diskio.c ****     res = RES_OK;
 475              		.loc 1 341 0
 476 0044 079B     		ldr	r3, [sp, #28]
 477 0046 5B0A     		lsrs	r3, r3, #9
 478 0048 2360     		str	r3, [r4]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 16


 479              	.LVL46:
 342:Src/sd_diskio.c ****     break;
 480              		.loc 1 342 0
 481 004a 0020     		movs	r0, #0
 343:Src/sd_diskio.c **** 
 482              		.loc 1 343 0
 483 004c E7E7     		b	.L47
 484              	.LVL47:
 485              	.L53:
 486              	.LCFI18:
 487              		.cfi_def_cfa_offset 0
 488              		.cfi_restore 4
 489              		.cfi_restore 14
 315:Src/sd_diskio.c **** 
 490              		.loc 1 315 0
 491 004e 0320     		movs	r0, #3
 492              	.LVL48:
 493              		.loc 1 350 0
 494 0050 7047     		bx	lr
 495              	.LVL49:
 496              	.L54:
 346:Src/sd_diskio.c ****   }
 497              		.loc 1 346 0
 498 0052 0420     		movs	r0, #4
 499              	.LVL50:
 500 0054 E3E7     		b	.L47
 501              	.L60:
 502 0056 00BF     		.align	2
 503              	.L59:
 504 0058 00000000 		.word	.LANCHOR0
 505              		.cfi_endproc
 506              	.LFE148:
 508              		.section	.text.BSP_SD_WriteCpltCallback,"ax",%progbits
 509              		.align	1
 510              		.global	BSP_SD_WriteCpltCallback
 511              		.syntax unified
 512              		.thumb
 513              		.thumb_func
 514              		.fpu fpv5-sp-d16
 516              	BSP_SD_WriteCpltCallback:
 517              	.LFB149:
 351:Src/sd_diskio.c **** #endif /* _USE_IOCTL == 1 */
 352:Src/sd_diskio.c **** 
 353:Src/sd_diskio.c **** /* USER CODE BEGIN afterIoctlSection */
 354:Src/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 355:Src/sd_diskio.c **** /* USER CODE END afterIoctlSection */
 356:Src/sd_diskio.c **** 
 357:Src/sd_diskio.c **** /* USER CODE BEGIN callbackSection */ 
 358:Src/sd_diskio.c **** /* can be used to modify / following code or add new code */
 359:Src/sd_diskio.c **** /* USER CODE END callbackSection */
 360:Src/sd_diskio.c **** /**
 361:Src/sd_diskio.c ****   * @brief Tx Transfer completed callbacks
 362:Src/sd_diskio.c ****   * @param hsd: SD handle
 363:Src/sd_diskio.c ****   * @retval None
 364:Src/sd_diskio.c ****   */
 365:Src/sd_diskio.c **** 
 366:Src/sd_diskio.c ****  /*
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 17


 367:Src/sd_diskio.c ****    ===============================================================================
 368:Src/sd_diskio.c ****     Select the correct function signature depending on your platform.
 369:Src/sd_diskio.c ****     please refer to the file "stm32xxxx_eval_sd.h" to verify the correct function
 370:Src/sd_diskio.c ****     prototype
 371:Src/sd_diskio.c ****    ===============================================================================
 372:Src/sd_diskio.c ****   */
 373:Src/sd_diskio.c **** //void BSP_SD_WriteCpltCallback(uint32_t SdCard)
 374:Src/sd_diskio.c **** void BSP_SD_WriteCpltCallback(void)
 375:Src/sd_diskio.c **** {
 518              		.loc 1 375 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 0
 521              		@ frame_needed = 0, uses_anonymous_args = 0
 522 0000 08B5     		push	{r3, lr}
 523              	.LCFI19:
 524              		.cfi_def_cfa_offset 8
 525              		.cfi_offset 3, -8
 526              		.cfi_offset 14, -4
 376:Src/sd_diskio.c ****   /*
 377:Src/sd_diskio.c ****    * No need to add an "osKernelRunning()" check here, as the SD_initialize()
 378:Src/sd_diskio.c ****    * is always called before any SD_Read()/SD_Write() call
 379:Src/sd_diskio.c ****    */
 380:Src/sd_diskio.c ****   osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 527              		.loc 1 380 0
 528 0002 4FF0FF32 		mov	r2, #-1
 529 0006 0221     		movs	r1, #2
 530 0008 024B     		ldr	r3, .L63
 531 000a 1868     		ldr	r0, [r3]
 532 000c FFF7FEFF 		bl	osMessagePut
 533              	.LVL51:
 381:Src/sd_diskio.c **** }
 534              		.loc 1 381 0
 535 0010 08BD     		pop	{r3, pc}
 536              	.L64:
 537 0012 00BF     		.align	2
 538              	.L63:
 539 0014 00000000 		.word	.LANCHOR2
 540              		.cfi_endproc
 541              	.LFE149:
 543              		.section	.text.BSP_SD_ReadCpltCallback,"ax",%progbits
 544              		.align	1
 545              		.global	BSP_SD_ReadCpltCallback
 546              		.syntax unified
 547              		.thumb
 548              		.thumb_func
 549              		.fpu fpv5-sp-d16
 551              	BSP_SD_ReadCpltCallback:
 552              	.LFB150:
 382:Src/sd_diskio.c **** 
 383:Src/sd_diskio.c **** /**
 384:Src/sd_diskio.c ****   * @brief Rx Transfer completed callbacks
 385:Src/sd_diskio.c ****   * @param hsd: SD handle
 386:Src/sd_diskio.c ****   * @retval None
 387:Src/sd_diskio.c ****   */
 388:Src/sd_diskio.c **** 
 389:Src/sd_diskio.c ****   /*
 390:Src/sd_diskio.c ****    ===============================================================================
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 18


 391:Src/sd_diskio.c ****     Select the correct function signature depending on your platform.
 392:Src/sd_diskio.c ****     please refer to the file "stm32xxxx_eval_sd.h" to verify the correct function
 393:Src/sd_diskio.c ****     prototype
 394:Src/sd_diskio.c ****    ===============================================================================
 395:Src/sd_diskio.c ****   */
 396:Src/sd_diskio.c **** //void BSP_SD_ReadCpltCallback(uint32_t SdCard)
 397:Src/sd_diskio.c **** void BSP_SD_ReadCpltCallback(void)
 398:Src/sd_diskio.c **** {
 553              		.loc 1 398 0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 0
 556              		@ frame_needed = 0, uses_anonymous_args = 0
 557 0000 08B5     		push	{r3, lr}
 558              	.LCFI20:
 559              		.cfi_def_cfa_offset 8
 560              		.cfi_offset 3, -8
 561              		.cfi_offset 14, -4
 399:Src/sd_diskio.c ****   /*
 400:Src/sd_diskio.c ****    * No need to add an "osKernelRunning()" check here, as the SD_initialize()
 401:Src/sd_diskio.c ****    * is always called before any SD_Read()/SD_Write() call
 402:Src/sd_diskio.c ****    */
 403:Src/sd_diskio.c ****   osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 562              		.loc 1 403 0
 563 0002 4FF0FF32 		mov	r2, #-1
 564 0006 0121     		movs	r1, #1
 565 0008 024B     		ldr	r3, .L67
 566 000a 1868     		ldr	r0, [r3]
 567 000c FFF7FEFF 		bl	osMessagePut
 568              	.LVL52:
 404:Src/sd_diskio.c **** }
 569              		.loc 1 404 0
 570 0010 08BD     		pop	{r3, pc}
 571              	.L68:
 572 0012 00BF     		.align	2
 573              	.L67:
 574 0014 00000000 		.word	.LANCHOR2
 575              		.cfi_endproc
 576              	.LFE150:
 578              		.global	SD_Driver
 579              		.section	.rodata
 580              		.align	2
 581              		.set	.LANCHOR1,. + 0
 582              	.LC0:
 583 0000 0A000000 		.word	10
 584 0004 02000000 		.word	2
 585              		.section	.bss.SDQueueID,"aw",%nobits
 586              		.align	2
 587              		.set	.LANCHOR2,. + 0
 590              	SDQueueID:
 591 0000 00000000 		.space	4
 592              		.section	.data.Stat,"aw",%progbits
 593              		.set	.LANCHOR0,. + 0
 596              	Stat:
 597 0000 01       		.byte	1
 598              		.section	.rodata.SD_Driver,"a",%progbits
 599              		.align	2
 602              	SD_Driver:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 19


 603 0000 00000000 		.word	SD_initialize
 604 0004 00000000 		.word	SD_status
 605 0008 00000000 		.word	SD_read
 606 000c 00000000 		.word	SD_write
 607 0010 00000000 		.word	SD_ioctl
 608              		.text
 609              	.Letext0:
 610              		.file 2 "Middlewares/Third_Party/FatFs/src/integer.h"
 611              		.file 3 "Middlewares/Third_Party/FatFs/src/diskio.h"
 612              		.file 4 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\machine\\_default
 613              		.file 5 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 614              		.file 6 "Drivers/CMSIS/Include/core_cm7.h"
 615              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 616              		.file 8 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 617              		.file 9 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 618              		.file 10 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\lib\\gcc\\arm-none-eabi\\7.3.1\\include\
 619              		.file 11 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 620              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sd.h"
 621              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 622              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 623              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 624              		.file 16 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\stdlib.h"
 625              		.file 17 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_def.h"
 626              		.file 18 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_ctlreq.h"
 627              		.file 19 "Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc/usbh_msc.h"
 628              		.file 20 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 629              		.file 21 "Inc/sd_diskio.h"
 630              		.file 22 "Inc/bsp_driver_sd.h"
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s 			page 20


DEFINED SYMBOLS
                            *ABS*:00000000 sd_diskio.c
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:18     .text.SD_CheckStatus:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:24     .text.SD_CheckStatus:00000000 SD_CheckStatus
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:59     .text.SD_CheckStatus:00000020 $d
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:64     .text.SD_initialize:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:71     .text.SD_initialize:00000000 SD_initialize
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:146    .text.SD_initialize:00000050 $d
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:153    .text.SD_status:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:160    .text.SD_status:00000000 SD_status
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:181    .text.SD_read:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:188    .text.SD_read:00000000 SD_read
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:278    .text.SD_read:0000005c $d
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:283    .text.SD_write:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:290    .text.SD_write:00000000 SD_write
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:380    .text.SD_write:0000005c $d
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:385    .text.SD_ioctl:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:392    .text.SD_ioctl:00000000 SD_ioctl
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:419    .text.SD_ioctl:00000018 $d
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:423    .text.SD_ioctl:0000001c $t
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:504    .text.SD_ioctl:00000058 $d
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:509    .text.BSP_SD_WriteCpltCallback:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:516    .text.BSP_SD_WriteCpltCallback:00000000 BSP_SD_WriteCpltCallback
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:539    .text.BSP_SD_WriteCpltCallback:00000014 $d
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:544    .text.BSP_SD_ReadCpltCallback:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:551    .text.BSP_SD_ReadCpltCallback:00000000 BSP_SD_ReadCpltCallback
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:574    .text.BSP_SD_ReadCpltCallback:00000014 $d
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:602    .rodata.SD_Driver:00000000 SD_Driver
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:580    .rodata:00000000 $d
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:586    .bss.SDQueueID:00000000 $d
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:590    .bss.SDQueueID:00000000 SDQueueID
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:596    .data.Stat:00000000 Stat
C:\Users\Patryk\AppData\Local\Temp\ccAkZNyV.s:599    .rodata.SD_Driver:00000000 $d

UNDEFINED SYMBOLS
BSP_SD_GetCardState
osKernelRunning
BSP_SD_Init
osMessageCreate
BSP_SD_ReadBlocks_DMA
osMessageGet
osKernelSysTick
BSP_SD_WriteBlocks_DMA
BSP_SD_GetCardInfo
osMessagePut

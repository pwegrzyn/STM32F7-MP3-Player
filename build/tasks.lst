ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	prvTaskIsTaskSuspended:
  25              	.LFB14:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFA
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a t
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of e
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask );
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvInitialiseTaskLists( void );
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static void prvDeleteTCB( TCB_t *pxTCB );
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvCheckTasksWaitingTermination( void );
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const Base
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArr
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcN
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte );
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static TickType_t prvGetExpectedIdleTime( void );
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ); /*lint !e971 Unqualified char types are allowed f
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB );
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const uint16_t usStackDepth,
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the	top of stack variable is updated. */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1657 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1665 0
  34 0000 0246     		mov	r2, r0
  35 0002 70B1     		cbz	r0, .L12
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  36              		.loc 1 1668 0
  37 0004 4169     		ldr	r1, [r0, #20]
  38 0006 104B     		ldr	r3, .L15
  39 0008 9942     		cmp	r1, r3
  40 000a 15D0     		beq	.L13
  41 000c 0023     		movs	r3, #0
  42              	.L4:
  43              		.loc 1 1668 0 is_stmt 0 discriminator 4
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 31


  44 000e BBB1     		cbz	r3, .L8
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  45              		.loc 1 1671 0 is_stmt 1
  46 0010 926A     		ldr	r2, [r2, #40]
  47 0012 0E49     		ldr	r1, .L15+4
  48 0014 8A42     		cmp	r2, r1
  49 0016 15D0     		beq	.L9
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  50              		.loc 1 1675 0
  51 0018 02B1     		cbz	r2, .L6
  52 001a 0023     		movs	r3, #0
  53              	.L6:
  54              		.loc 1 1675 0 is_stmt 0 discriminator 4
  55 001c 73B1     		cbz	r3, .L14
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  56              		.loc 1 1677 0 is_stmt 1
  57 001e 0120     		movs	r0, #1
  58              	.LVL1:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  59              		.loc 1 1695 0
  60 0020 7047     		bx	lr
  61              	.LVL2:
  62              	.L12:
  63              	.LBB91:
  64              	.LBB92:
  65              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 32


   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     mission critical applications that require provable dependability.
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 33


  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {																				\
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 34


 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 35


 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 36


 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
  66              		.loc 2 237 0
  67              		.syntax unified
  68              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
  69 0022 4FF05003 			mov r3, #80												
  70 0026 72B6     		cpsid i													
  71 0028 83F31188 		msr basepri, r3											
  72 002c BFF36F8F 		isb														
  73 0030 BFF34F8F 		dsb														
  74 0034 62B6     		cpsie i													
  75              	
  76              	@ 0 "" 2
  77              	.LVL3:
  78              		.thumb
  79              		.syntax unified
  80              	.L3:
  81 0036 FEE7     		b	.L3
  82              	.L13:
  83              	.LBE92:
  84              	.LBE91:
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
  85              		.loc 1 1668 0
  86 0038 0123     		movs	r3, #1
  87 003a E8E7     		b	.L4
  88              	.L14:
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  89              		.loc 1 1658 0
  90 003c 0020     		movs	r0, #0
  91              	.LVL4:
  92 003e 7047     		bx	lr
  93              	.LVL5:
  94              	.L8:
  95 0040 0020     		movs	r0, #0
  96              	.LVL6:
  97 0042 7047     		bx	lr
  98              	.LVL7:
  99              	.L9:
 100 0044 0020     		movs	r0, #0
 101              	.LVL8:
 102 0046 7047     		bx	lr
 103              	.L16:
 104              		.align	2
 105              	.L15:
 106 0048 00000000 		.word	.LANCHOR0
 107 004c 00000000 		.word	.LANCHOR1
 108              		.cfi_endproc
 109              	.LFE14:
 111              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 112              		.align	1
 113              		.syntax unified
 114              		.thumb
 115              		.thumb_func
 116              		.fpu fpv5-sp-d16
 118              	prvResetNextTaskUnblockTime:
 119              	.LFB41:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 37


1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 38


1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 39


1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												"IDLE",
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL,
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 40


1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 41


1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 42


1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 43


2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 44


2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 45


2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 46


2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 47


2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 48


2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 49


2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 50


2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 51


2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 52


2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 53


2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 54


2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 55


2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 56


2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 57


2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 58


2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 59


2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch now. */
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 60


3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 61


3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 62


3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 63


3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 64


3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 65


3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 66


3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 67


3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being in the Blocked state. */
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xTaskResumeAll();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 68


3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		just set to whatever is passed in. */
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 69


3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 70


3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 71


3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 120              		.loc 1 3636 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 125              		.loc 1 3639 0
 126 0000 0A4B     		ldr	r3, .L23
 127 0002 1B68     		ldr	r3, [r3]
 128 0004 1B68     		ldr	r3, [r3]
 129 0006 4BB9     		cbnz	r3, .L21
 130 0008 0123     		movs	r3, #1
 131              	.L18:
 132              		.loc 1 3639 0 is_stmt 0 discriminator 4
 133 000a 4BB9     		cbnz	r3, .L22
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 134              		.loc 1 3653 0 is_stmt 1
 135 000c 074B     		ldr	r3, .L23
 136 000e 1B68     		ldr	r3, [r3]
 137 0010 DB68     		ldr	r3, [r3, #12]
 138 0012 DB68     		ldr	r3, [r3, #12]
 139              	.LVL9:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 140              		.loc 1 3654 0
 141 0014 5A68     		ldr	r2, [r3, #4]
 142 0016 064B     		ldr	r3, .L23+4
 143              	.LVL10:
 144 0018 1A60     		str	r2, [r3]
 145 001a 7047     		bx	lr
 146              	.L21:
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 147              		.loc 1 3639 0
 148 001c 0023     		movs	r3, #0
 149 001e F4E7     		b	.L18
 150              	.L22:
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 151              		.loc 1 3645 0
 152 0020 4FF0FF32 		mov	r2, #-1
 153 0024 024B     		ldr	r3, .L23+4
 154 0026 1A60     		str	r2, [r3]
 155 0028 7047     		bx	lr
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 72


 156              	.L24:
 157 002a 00BF     		.align	2
 158              	.L23:
 159 002c 00000000 		.word	.LANCHOR2
 160 0030 00000000 		.word	.LANCHOR3
 161              		.cfi_endproc
 162              	.LFE41:
 164              		.section	.text.prvDeleteTCB,"ax",%progbits
 165              		.align	1
 166              		.syntax unified
 167              		.thumb
 168              		.thumb_func
 169              		.fpu fpv5-sp-d16
 171              	prvDeleteTCB:
 172              	.LFB40:
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 173              		.loc 1 3582 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177              	.LVL11:
 178 0000 10B5     		push	{r4, lr}
 179              	.LCFI0:
 180              		.cfi_def_cfa_offset 8
 181              		.cfi_offset 4, -8
 182              		.cfi_offset 14, -4
 183 0002 0446     		mov	r4, r0
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 184              		.loc 1 3600 0
 185 0004 006B     		ldr	r0, [r0, #48]
 186              	.LVL12:
 187 0006 FFF7FEFF 		bl	vPortFree
 188              	.LVL13:
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 189              		.loc 1 3601 0
 190 000a 2046     		mov	r0, r4
 191 000c FFF7FEFF 		bl	vPortFree
 192              	.LVL14:
 193 0010 10BD     		pop	{r4, pc}
 194              		.cfi_endproc
 195              	.LFE40:
 197              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 198              		.align	1
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu fpv5-sp-d16
 204              	prvInitialiseNewTask:
 205              	.LFB6:
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 206              		.loc 1 775 0
 207              		.cfi_startproc
 208              		@ args = 16, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              	.LVL15:
 211 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 212              	.LCFI1:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 73


 213              		.cfi_def_cfa_offset 40
 214              		.cfi_offset 3, -40
 215              		.cfi_offset 4, -36
 216              		.cfi_offset 5, -32
 217              		.cfi_offset 6, -28
 218              		.cfi_offset 7, -24
 219              		.cfi_offset 8, -20
 220              		.cfi_offset 9, -16
 221              		.cfi_offset 10, -12
 222              		.cfi_offset 11, -8
 223              		.cfi_offset 14, -4
 224 0004 8146     		mov	r9, r0
 225 0006 0D46     		mov	r5, r1
 226 0008 9346     		mov	fp, r2
 227 000a 9A46     		mov	r10, r3
 228 000c 0A9E     		ldr	r6, [sp, #40]
 229 000e DDF82C80 		ldr	r8, [sp, #44]
 230 0012 0C9C     		ldr	r4, [sp, #48]
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 231              		.loc 1 797 0
 232 0014 9200     		lsls	r2, r2, #2
 233              	.LVL16:
 234 0016 A521     		movs	r1, #165
 235              	.LVL17:
 236 0018 206B     		ldr	r0, [r4, #48]
 237              	.LVL18:
 238 001a FFF7FEFF 		bl	memset
 239              	.LVL19:
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 240              		.loc 1 807 0
 241 001e 276B     		ldr	r7, [r4, #48]
 242 0020 6FF04043 		mvn	r3, #-1073741824
 243 0024 5B44     		add	r3, r3, fp
 244 0026 07EB8307 		add	r7, r7, r3, lsl #2
 245              	.LVL20:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 246              		.loc 1 808 0
 247 002a 27F00707 		bic	r7, r7, #7
 248              	.LVL21:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 249              		.loc 1 827 0
 250 002e 0023     		movs	r3, #0
 251              	.LVL22:
 252              	.L28:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 253              		.loc 1 827 0 is_stmt 0 discriminator 1
 254 0030 0F2B     		cmp	r3, #15
 255 0032 07D8     		bhi	.L29
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256              		.loc 1 829 0 is_stmt 1
 257 0034 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 258 0036 E218     		adds	r2, r4, r3
 259 0038 82F83410 		strb	r1, [r2, #52]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 260              		.loc 1 834 0
 261 003c EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 262 003e 0AB1     		cbz	r2, .L29
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 74


 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 263              		.loc 1 827 0 discriminator 2
 264 0040 0133     		adds	r3, r3, #1
 265              	.LVL23:
 266 0042 F5E7     		b	.L28
 267              	.L29:
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 268              		.loc 1 846 0
 269 0044 0023     		movs	r3, #0
 270              	.LVL24:
 271 0046 84F84330 		strb	r3, [r4, #67]
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 272              		.loc 1 850 0
 273 004a 062E     		cmp	r6, #6
 274 004c 00D9     		bls	.L31
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 275              		.loc 1 852 0
 276 004e 0626     		movs	r6, #6
 277              	.L31:
 278              	.LVL25:
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 279              		.loc 1 859 0
 280 0050 E662     		str	r6, [r4, #44]
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 281              		.loc 1 862 0
 282 0052 6664     		str	r6, [r4, #68]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 283              		.loc 1 863 0
 284 0054 0025     		movs	r5, #0
 285              	.LVL26:
 286 0056 A564     		str	r5, [r4, #72]
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 287              		.loc 1 867 0
 288 0058 201D     		adds	r0, r4, #4
 289 005a FFF7FEFF 		bl	vListInitialiseItem
 290              	.LVL27:
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291              		.loc 1 868 0
 292 005e 04F11800 		add	r0, r4, #24
 293 0062 FFF7FEFF 		bl	vListInitialiseItem
 294              	.LVL28:
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 295              		.loc 1 872 0
 296 0066 2461     		str	r4, [r4, #16]
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 297              		.loc 1 875 0
 298 0068 C6F10706 		rsb	r6, r6, #7
 299              	.LVL29:
 300 006c A661     		str	r6, [r4, #24]
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301              		.loc 1 876 0
 302 006e 6462     		str	r4, [r4, #36]
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 303              		.loc 1 886 0
 304 0070 E564     		str	r5, [r4, #76]
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 305              		.loc 1 918 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 75


 306 0072 2565     		str	r5, [r4, #80]
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 307              		.loc 1 919 0
 308 0074 84F85450 		strb	r5, [r4, #84]
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 309              		.loc 1 946 0
 310 0078 5246     		mov	r2, r10
 311 007a 4946     		mov	r1, r9
 312 007c 3846     		mov	r0, r7
 313 007e FFF7FEFF 		bl	pxPortInitialiseStack
 314              	.LVL30:
 315 0082 2060     		str	r0, [r4]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 316              		.loc 1 950 0
 317 0084 B8F1000F 		cmp	r8, #0
 318 0088 01D0     		beq	.L27
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 319              		.loc 1 954 0
 320 008a C8F80040 		str	r4, [r8]
 321              	.L27:
 322 008e BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 323              		.cfi_endproc
 324              	.LFE6:
 326              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 327              		.align	1
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu fpv5-sp-d16
 333              	prvInitialiseTaskLists:
 334              	.LFB38:
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 335              		.loc 1 3334 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339 0000 38B5     		push	{r3, r4, r5, lr}
 340              	.LCFI2:
 341              		.cfi_def_cfa_offset 16
 342              		.cfi_offset 3, -16
 343              		.cfi_offset 4, -12
 344              		.cfi_offset 5, -8
 345              		.cfi_offset 14, -4
 346              	.LVL31:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 347              		.loc 1 3337 0
 348 0002 0024     		movs	r4, #0
 349 0004 07E0     		b	.L36
 350              	.LVL32:
 351              	.L37:
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 352              		.loc 1 3339 0 discriminator 3
 353 0006 04EB8402 		add	r2, r4, r4, lsl #2
 354 000a 9300     		lsls	r3, r2, #2
 355 000c 0E48     		ldr	r0, .L39
 356 000e 1844     		add	r0, r0, r3
 357 0010 FFF7FEFF 		bl	vListInitialise
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 76


 358              	.LVL33:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 359              		.loc 1 3337 0 discriminator 3
 360 0014 0134     		adds	r4, r4, #1
 361              	.LVL34:
 362              	.L36:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 363              		.loc 1 3337 0 is_stmt 0 discriminator 1
 364 0016 062C     		cmp	r4, #6
 365 0018 F5D9     		bls	.L37
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 366              		.loc 1 3342 0 is_stmt 1
 367 001a 0C4D     		ldr	r5, .L39+4
 368 001c 2846     		mov	r0, r5
 369 001e FFF7FEFF 		bl	vListInitialise
 370              	.LVL35:
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 371              		.loc 1 3343 0
 372 0022 0B4C     		ldr	r4, .L39+8
 373              	.LVL36:
 374 0024 2046     		mov	r0, r4
 375 0026 FFF7FEFF 		bl	vListInitialise
 376              	.LVL37:
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 377              		.loc 1 3344 0
 378 002a 0A48     		ldr	r0, .L39+12
 379 002c FFF7FEFF 		bl	vListInitialise
 380              	.LVL38:
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 381              		.loc 1 3348 0
 382 0030 0948     		ldr	r0, .L39+16
 383 0032 FFF7FEFF 		bl	vListInitialise
 384              	.LVL39:
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 385              		.loc 1 3354 0
 386 0036 0948     		ldr	r0, .L39+20
 387 0038 FFF7FEFF 		bl	vListInitialise
 388              	.LVL40:
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 389              		.loc 1 3360 0
 390 003c 084B     		ldr	r3, .L39+24
 391 003e 1D60     		str	r5, [r3]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 392              		.loc 1 3361 0
 393 0040 084B     		ldr	r3, .L39+28
 394 0042 1C60     		str	r4, [r3]
 395 0044 38BD     		pop	{r3, r4, r5, pc}
 396              	.L40:
 397 0046 00BF     		.align	2
 398              	.L39:
 399 0048 00000000 		.word	.LANCHOR4
 400 004c 00000000 		.word	.LANCHOR5
 401 0050 00000000 		.word	.LANCHOR6
 402 0054 00000000 		.word	.LANCHOR1
 403 0058 00000000 		.word	.LANCHOR7
 404 005c 00000000 		.word	.LANCHOR0
 405 0060 00000000 		.word	.LANCHOR2
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 77


 406 0064 00000000 		.word	.LANCHOR8
 407              		.cfi_endproc
 408              	.LFE38:
 410              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 411              		.align	1
 412              		.syntax unified
 413              		.thumb
 414              		.thumb_func
 415              		.fpu fpv5-sp-d16
 417              	prvAddNewTaskToReadyList:
 418              	.LFB7:
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 419              		.loc 1 964 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 0, uses_anonymous_args = 0
 423              	.LVL41:
 424 0000 10B5     		push	{r4, lr}
 425              	.LCFI3:
 426              		.cfi_def_cfa_offset 8
 427              		.cfi_offset 4, -8
 428              		.cfi_offset 14, -4
 429 0002 0446     		mov	r4, r0
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 430              		.loc 1 967 0
 431 0004 FFF7FEFF 		bl	vPortEnterCritical
 432              	.LVL42:
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 433              		.loc 1 969 0
 434 0008 204A     		ldr	r2, .L47
 435 000a 1368     		ldr	r3, [r2]
 436 000c 0133     		adds	r3, r3, #1
 437 000e 1360     		str	r3, [r2]
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 438              		.loc 1 970 0
 439 0010 1F4B     		ldr	r3, .L47+4
 440 0012 1B68     		ldr	r3, [r3]
 441 0014 002B     		cmp	r3, #0
 442 0016 31D0     		beq	.L46
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 443              		.loc 1 993 0
 444 0018 1E4B     		ldr	r3, .L47+8
 445 001a 1B68     		ldr	r3, [r3]
 446 001c 3BB9     		cbnz	r3, .L43
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 447              		.loc 1 995 0
 448 001e 1C4B     		ldr	r3, .L47+4
 449 0020 1B68     		ldr	r3, [r3]
 450 0022 DA6A     		ldr	r2, [r3, #44]
 451 0024 E36A     		ldr	r3, [r4, #44]
 452 0026 9A42     		cmp	r2, r3
 453 0028 01D8     		bhi	.L43
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 454              		.loc 1 997 0
 455 002a 194B     		ldr	r3, .L47+4
 456 002c 1C60     		str	r4, [r3]
 457              	.L43:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 78


1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458              		.loc 1 1010 0
 459 002e 1A4A     		ldr	r2, .L47+12
 460 0030 1368     		ldr	r3, [r2]
 461 0032 0133     		adds	r3, r3, #1
 462 0034 1360     		str	r3, [r2]
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 463              		.loc 1 1020 0
 464 0036 E36A     		ldr	r3, [r4, #44]
 465 0038 0122     		movs	r2, #1
 466 003a 9A40     		lsls	r2, r2, r3
 467 003c 1749     		ldr	r1, .L47+16
 468 003e 0868     		ldr	r0, [r1]
 469 0040 0243     		orrs	r2, r2, r0
 470 0042 0A60     		str	r2, [r1]
 471 0044 03EB8303 		add	r3, r3, r3, lsl #2
 472 0048 9A00     		lsls	r2, r3, #2
 473 004a 211D     		adds	r1, r4, #4
 474 004c 1448     		ldr	r0, .L47+20
 475 004e 1044     		add	r0, r0, r2
 476 0050 FFF7FEFF 		bl	vListInsertEnd
 477              	.LVL43:
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 478              		.loc 1 1024 0
 479 0054 FFF7FEFF 		bl	vPortExitCritical
 480              	.LVL44:
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 481              		.loc 1 1026 0
 482 0058 0E4B     		ldr	r3, .L47+8
 483 005a 1B68     		ldr	r3, [r3]
 484 005c 6BB1     		cbz	r3, .L41
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 485              		.loc 1 1030 0
 486 005e 0C4B     		ldr	r3, .L47+4
 487 0060 1B68     		ldr	r3, [r3]
 488 0062 DA6A     		ldr	r2, [r3, #44]
 489 0064 E36A     		ldr	r3, [r4, #44]
 490 0066 9A42     		cmp	r2, r3
 491 0068 07D2     		bcs	.L41
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 492              		.loc 1 1032 0
 493 006a 4FF08052 		mov	r2, #268435456
 494 006e 0D4B     		ldr	r3, .L47+24
 495 0070 1A60     		str	r2, [r3]
 496              		.syntax unified
 497              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 498 0072 BFF34F8F 		dsb
 499              	@ 0 "" 2
 500              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 501 0076 BFF36F8F 		isb
 502              	@ 0 "" 2
 503              		.thumb
 504              		.syntax unified
 505              	.L41:
 506 007a 10BD     		pop	{r4, pc}
 507              	.LVL45:
 508              	.L46:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 79


 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509              		.loc 1 974 0
 510 007c 044B     		ldr	r3, .L47+4
 511 007e 1C60     		str	r4, [r3]
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 512              		.loc 1 976 0
 513 0080 1368     		ldr	r3, [r2]
 514 0082 012B     		cmp	r3, #1
 515 0084 D3D1     		bne	.L43
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 516              		.loc 1 981 0
 517 0086 FFF7FEFF 		bl	prvInitialiseTaskLists
 518              	.LVL46:
 519 008a D0E7     		b	.L43
 520              	.L48:
 521              		.align	2
 522              	.L47:
 523 008c 00000000 		.word	.LANCHOR9
 524 0090 00000000 		.word	.LANCHOR10
 525 0094 00000000 		.word	.LANCHOR11
 526 0098 00000000 		.word	.LANCHOR12
 527 009c 00000000 		.word	.LANCHOR13
 528 00a0 00000000 		.word	.LANCHOR4
 529 00a4 04ED00E0 		.word	-536810236
 530              		.cfi_endproc
 531              	.LFE7:
 533              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 534              		.align	1
 535              		.syntax unified
 536              		.thumb
 537              		.thumb_func
 538              		.fpu fpv5-sp-d16
 540              	prvAddCurrentTaskToDelayedList:
 541              	.LFB54:
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 80


3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 81


3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 82


3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 83


3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 84


3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 85


3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 86


4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 87


4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 88


4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 89


4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 90


4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 91


4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 92


4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 93


4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 94


4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 95


4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 96


4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 97


4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 542              		.loc 1 4693 0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 0
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 546              	.LVL47:
 547 0000 70B5     		push	{r4, r5, r6, lr}
 548              	.LCFI4:
 549              		.cfi_def_cfa_offset 16
 550              		.cfi_offset 4, -16
 551              		.cfi_offset 5, -12
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 98


 552              		.cfi_offset 6, -8
 553              		.cfi_offset 14, -4
 554 0002 0446     		mov	r4, r0
 555 0004 0E46     		mov	r6, r1
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 556              		.loc 1 4695 0
 557 0006 1F4B     		ldr	r3, .L57
 558 0008 1D68     		ldr	r5, [r3]
 559              	.LVL48:
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 560              		.loc 1 4708 0
 561 000a 1F4B     		ldr	r3, .L57+4
 562 000c 1868     		ldr	r0, [r3]
 563              	.LVL49:
 564 000e 0430     		adds	r0, r0, #4
 565 0010 FFF7FEFF 		bl	uxListRemove
 566              	.LVL50:
 567 0014 50B9     		cbnz	r0, .L50
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 568              		.loc 1 4712 0
 569 0016 1C4B     		ldr	r3, .L57+4
 570 0018 1B68     		ldr	r3, [r3]
 571 001a DA6A     		ldr	r2, [r3, #44]
 572 001c 0123     		movs	r3, #1
 573 001e 03FA02F2 		lsl	r2, r3, r2
 574 0022 1A49     		ldr	r1, .L57+8
 575 0024 0B68     		ldr	r3, [r1]
 576 0026 23EA0203 		bic	r3, r3, r2
 577 002a 0B60     		str	r3, [r1]
 578              	.L50:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 579              		.loc 1 4721 0
 580 002c B4F1FF3F 		cmp	r4, #-1
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 99


 581 0030 14BF     		ite	ne
 582 0032 0023     		movne	r3, #0
 583 0034 0123     		moveq	r3, #1
 584 0036 002E     		cmp	r6, #0
 585 0038 08BF     		it	eq
 586 003a 0023     		moveq	r3, #0
 587 003c 9BB9     		cbnz	r3, .L55
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 588              		.loc 1 4733 0
 589 003e 2C44     		add	r4, r4, r5
 590              	.LVL51:
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 591              		.loc 1 4736 0
 592 0040 114B     		ldr	r3, .L57+4
 593 0042 1B68     		ldr	r3, [r3]
 594 0044 5C60     		str	r4, [r3, #4]
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 595              		.loc 1 4738 0
 596 0046 A542     		cmp	r5, r4
 597 0048 14D8     		bhi	.L56
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 598              		.loc 1 4748 0
 599 004a 114B     		ldr	r3, .L57+12
 600 004c 1868     		ldr	r0, [r3]
 601 004e 0E4B     		ldr	r3, .L57+4
 602 0050 1968     		ldr	r1, [r3]
 603 0052 0431     		adds	r1, r1, #4
 604 0054 FFF7FEFF 		bl	vListInsert
 605              	.LVL52:
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 100


 606              		.loc 1 4753 0
 607 0058 0E4B     		ldr	r3, .L57+16
 608 005a 1B68     		ldr	r3, [r3]
 609 005c 9C42     		cmp	r4, r3
 610 005e 01D2     		bcs	.L49
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 611              		.loc 1 4755 0
 612 0060 0C4B     		ldr	r3, .L57+16
 613 0062 1C60     		str	r4, [r3]
 614              	.L49:
 615 0064 70BD     		pop	{r4, r5, r6, pc}
 616              	.LVL53:
 617              	.L55:
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618              		.loc 1 4726 0
 619 0066 084B     		ldr	r3, .L57+4
 620 0068 1968     		ldr	r1, [r3]
 621 006a 0431     		adds	r1, r1, #4
 622 006c 0A48     		ldr	r0, .L57+20
 623 006e FFF7FEFF 		bl	vListInsertEnd
 624              	.LVL54:
 625 0072 70BD     		pop	{r4, r5, r6, pc}
 626              	.LVL55:
 627              	.L56:
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 628              		.loc 1 4742 0
 629 0074 094B     		ldr	r3, .L57+24
 630 0076 1868     		ldr	r0, [r3]
 631 0078 034B     		ldr	r3, .L57+4
 632 007a 1968     		ldr	r1, [r3]
 633 007c 0431     		adds	r1, r1, #4
 634 007e FFF7FEFF 		bl	vListInsert
 635              	.LVL56:
 636 0082 70BD     		pop	{r4, r5, r6, pc}
 637              	.LVL57:
 638              	.L58:
 639              		.align	2
 640              	.L57:
 641 0084 00000000 		.word	.LANCHOR14
 642 0088 00000000 		.word	.LANCHOR10
 643 008c 00000000 		.word	.LANCHOR13
 644 0090 00000000 		.word	.LANCHOR2
 645 0094 00000000 		.word	.LANCHOR3
 646 0098 00000000 		.word	.LANCHOR0
 647 009c 00000000 		.word	.LANCHOR8
 648              		.cfi_endproc
 649              	.LFE54:
 651              		.section	.text.xTaskCreate,"ax",%progbits
 652              		.align	1
 653              		.global	xTaskCreate
 654              		.syntax unified
 655              		.thumb
 656              		.thumb_func
 657              		.fpu fpv5-sp-d16
 659              	xTaskCreate:
 660              	.LFB5:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 101


 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 661              		.loc 1 682 0
 662              		.cfi_startproc
 663              		@ args = 8, pretend = 0, frame = 0
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 665              	.LVL58:
 666 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 667              	.LCFI5:
 668              		.cfi_def_cfa_offset 28
 669              		.cfi_offset 4, -28
 670              		.cfi_offset 5, -24
 671              		.cfi_offset 6, -20
 672              		.cfi_offset 7, -16
 673              		.cfi_offset 8, -12
 674              		.cfi_offset 9, -8
 675              		.cfi_offset 14, -4
 676 0004 85B0     		sub	sp, sp, #20
 677              	.LCFI6:
 678              		.cfi_def_cfa_offset 48
 679 0006 0646     		mov	r6, r0
 680 0008 0F46     		mov	r7, r1
 681 000a 1546     		mov	r5, r2
 682 000c 9846     		mov	r8, r3
 683              	.LBB93:
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684              		.loc 1 716 0
 685 000e 9000     		lsls	r0, r2, #2
 686              	.LVL59:
 687 0010 FFF7FEFF 		bl	pvPortMalloc
 688              	.LVL60:
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 689              		.loc 1 718 0
 690 0014 00B3     		cbz	r0, .L63
 691 0016 8146     		mov	r9, r0
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 692              		.loc 1 721 0
 693 0018 5820     		movs	r0, #88
 694              	.LVL61:
 695 001a FFF7FEFF 		bl	pvPortMalloc
 696              	.LVL62:
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 697              		.loc 1 723 0
 698 001e 0446     		mov	r4, r0
 699 0020 B0B1     		cbz	r0, .L61
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 700              		.loc 1 726 0
 701 0022 C0F83090 		str	r9, [r0, #48]
 702              	.LVL63:
 703              	.L60:
 704              	.LBE93:
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 705              		.loc 1 742 0
 706 0026 CCB1     		cbz	r4, .L64
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 707              		.loc 1 752 0
 708 0028 0023     		movs	r3, #0
 709 002a 0393     		str	r3, [sp, #12]
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 102


 710 002c 0294     		str	r4, [sp, #8]
 711 002e 0D9B     		ldr	r3, [sp, #52]
 712 0030 0193     		str	r3, [sp, #4]
 713 0032 0C9B     		ldr	r3, [sp, #48]
 714 0034 0093     		str	r3, [sp]
 715 0036 4346     		mov	r3, r8
 716 0038 2A46     		mov	r2, r5
 717 003a 3946     		mov	r1, r7
 718 003c 3046     		mov	r0, r6
 719 003e FFF7FEFF 		bl	prvInitialiseNewTask
 720              	.LVL64:
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 721              		.loc 1 753 0
 722 0042 2046     		mov	r0, r4
 723 0044 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 724              	.LVL65:
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 725              		.loc 1 754 0
 726 0048 0120     		movs	r0, #1
 727              	.LVL66:
 728              	.L59:
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 729              		.loc 1 762 0
 730 004a 05B0     		add	sp, sp, #20
 731              	.LCFI7:
 732              		.cfi_remember_state
 733              		.cfi_def_cfa_offset 28
 734              		@ sp needed
 735 004c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 736              	.LVL67:
 737              	.L61:
 738              	.LCFI8:
 739              		.cfi_restore_state
 740              	.LBB94:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 741              		.loc 1 732 0
 742 0050 4846     		mov	r0, r9
 743              	.LVL68:
 744 0052 FFF7FEFF 		bl	vPortFree
 745              	.LVL69:
 746 0056 E6E7     		b	.L60
 747              	.LVL70:
 748              	.L63:
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 749              		.loc 1 737 0
 750 0058 0024     		movs	r4, #0
 751 005a E4E7     		b	.L60
 752              	.LVL71:
 753              	.L64:
 754              	.LBE94:
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 755              		.loc 1 758 0
 756 005c 4FF0FF30 		mov	r0, #-1
 757              	.LVL72:
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 758              		.loc 1 761 0
 759 0060 F3E7     		b	.L59
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 103


 760              		.cfi_endproc
 761              	.LFE5:
 763              		.section	.text.vTaskDelete,"ax",%progbits
 764              		.align	1
 765              		.global	vTaskDelete
 766              		.syntax unified
 767              		.thumb
 768              		.thumb_func
 769              		.fpu fpv5-sp-d16
 771              	vTaskDelete:
 772              	.LFB8:
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 773              		.loc 1 1049 0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 0
 776              		@ frame_needed = 0, uses_anonymous_args = 0
 777              	.LVL73:
 778 0000 38B5     		push	{r3, r4, r5, lr}
 779              	.LCFI9:
 780              		.cfi_def_cfa_offset 16
 781              		.cfi_offset 3, -16
 782              		.cfi_offset 4, -12
 783              		.cfi_offset 5, -8
 784              		.cfi_offset 14, -4
 785 0002 0446     		mov	r4, r0
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 786              		.loc 1 1052 0
 787 0004 FFF7FEFF 		bl	vPortEnterCritical
 788              	.LVL74:
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 789              		.loc 1 1056 0
 790 0008 002C     		cmp	r4, #0
 791 000a 34D0     		beq	.L77
 792              	.LVL75:
 793              	.L67:
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794              		.loc 1 1059 0 discriminator 4
 795 000c 251D     		adds	r5, r4, #4
 796 000e 2846     		mov	r0, r5
 797 0010 FFF7FEFF 		bl	uxListRemove
 798              	.LVL76:
 799 0014 70B9     		cbnz	r0, .L68
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 800              		.loc 1 1061 0
 801 0016 E26A     		ldr	r2, [r4, #44]
 802 0018 02EB8201 		add	r1, r2, r2, lsl #2
 803 001c 8B00     		lsls	r3, r1, #2
 804 001e 2749     		ldr	r1, .L80
 805 0020 CB58     		ldr	r3, [r1, r3]
 806 0022 3BB9     		cbnz	r3, .L68
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807              		.loc 1 1061 0 is_stmt 0 discriminator 1
 808 0024 0123     		movs	r3, #1
 809 0026 03FA02F2 		lsl	r2, r3, r2
 810 002a 2549     		ldr	r1, .L80+4
 811 002c 0B68     		ldr	r3, [r1]
 812 002e 23EA0203 		bic	r3, r3, r2
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 104


 813 0032 0B60     		str	r3, [r1]
 814              	.L68:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 815              		.loc 1 1069 0 is_stmt 1
 816 0034 A36A     		ldr	r3, [r4, #40]
 817 0036 1BB1     		cbz	r3, .L69
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 818              		.loc 1 1071 0
 819 0038 04F11800 		add	r0, r4, #24
 820 003c FFF7FEFF 		bl	uxListRemove
 821              	.LVL77:
 822              	.L69:
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 823              		.loc 1 1082 0
 824 0040 204A     		ldr	r2, .L80+8
 825 0042 1368     		ldr	r3, [r2]
 826 0044 0133     		adds	r3, r3, #1
 827 0046 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 828              		.loc 1 1084 0
 829 0048 1F4B     		ldr	r3, .L80+12
 830 004a 1B68     		ldr	r3, [r3]
 831 004c 9C42     		cmp	r4, r3
 832 004e 15D0     		beq	.L78
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 833              		.loc 1 1107 0
 834 0050 1E4A     		ldr	r2, .L80+16
 835 0052 1368     		ldr	r3, [r2]
 836 0054 013B     		subs	r3, r3, #1
 837 0056 1360     		str	r3, [r2]
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 838              		.loc 1 1108 0
 839 0058 2046     		mov	r0, r4
 840 005a FFF7FEFF 		bl	prvDeleteTCB
 841              	.LVL78:
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 842              		.loc 1 1112 0
 843 005e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 844              	.LVL79:
 845              	.L71:
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 846              		.loc 1 1117 0
 847 0062 FFF7FEFF 		bl	vPortExitCritical
 848              	.LVL80:
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 849              		.loc 1 1121 0
 850 0066 1A4B     		ldr	r3, .L80+20
 851 0068 1B68     		ldr	r3, [r3]
 852 006a 1BB1     		cbz	r3, .L66
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 853              		.loc 1 1123 0
 854 006c 164B     		ldr	r3, .L80+12
 855 006e 1B68     		ldr	r3, [r3]
 856 0070 9C42     		cmp	r4, r3
 857 0072 0CD0     		beq	.L79
 858              	.L66:
 859 0074 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 105


 860              	.LVL81:
 861              	.L77:
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 862              		.loc 1 1056 0 discriminator 1
 863 0076 144B     		ldr	r3, .L80+12
 864 0078 1C68     		ldr	r4, [r3]
 865              	.LVL82:
 866 007a C7E7     		b	.L67
 867              	.LVL83:
 868              	.L78:
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 869              		.loc 1 1091 0
 870 007c 2946     		mov	r1, r5
 871 007e 1548     		ldr	r0, .L80+24
 872 0080 FFF7FEFF 		bl	vListInsertEnd
 873              	.LVL84:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 874              		.loc 1 1096 0
 875 0084 144A     		ldr	r2, .L80+28
 876 0086 1368     		ldr	r3, [r2]
 877 0088 0133     		adds	r3, r3, #1
 878 008a 1360     		str	r3, [r2]
 879 008c E9E7     		b	.L71
 880              	.L79:
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 881              		.loc 1 1125 0
 882 008e 134B     		ldr	r3, .L80+32
 883 0090 1B68     		ldr	r3, [r3]
 884 0092 53B1     		cbz	r3, .L73
 885              	.LBB95:
 886              	.LBB96:
 887              		.loc 2 237 0
 888              		.syntax unified
 889              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 890 0094 4FF05003 			mov r3, #80												
 891 0098 72B6     		cpsid i													
 892 009a 83F31188 		msr basepri, r3											
 893 009e BFF36F8F 		isb														
 894 00a2 BFF34F8F 		dsb														
 895 00a6 62B6     		cpsie i													
 896              	
 897              	@ 0 "" 2
 898              	.LVL85:
 899              		.thumb
 900              		.syntax unified
 901              	.L74:
 902 00a8 FEE7     		b	.L74
 903              	.L73:
 904              	.LBE96:
 905              	.LBE95:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 906              		.loc 1 1126 0
 907 00aa 4FF08052 		mov	r2, #268435456
 908 00ae 0C4B     		ldr	r3, .L80+36
 909 00b0 1A60     		str	r2, [r3]
 910              		.syntax unified
 911              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 106


 912 00b2 BFF34F8F 		dsb
 913              	@ 0 "" 2
 914              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 915 00b6 BFF36F8F 		isb
 916              	@ 0 "" 2
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 917              		.loc 1 1133 0
 918              		.thumb
 919              		.syntax unified
 920 00ba DBE7     		b	.L66
 921              	.L81:
 922              		.align	2
 923              	.L80:
 924 00bc 00000000 		.word	.LANCHOR4
 925 00c0 00000000 		.word	.LANCHOR13
 926 00c4 00000000 		.word	.LANCHOR12
 927 00c8 00000000 		.word	.LANCHOR10
 928 00cc 00000000 		.word	.LANCHOR9
 929 00d0 00000000 		.word	.LANCHOR11
 930 00d4 00000000 		.word	.LANCHOR7
 931 00d8 00000000 		.word	.LANCHOR15
 932 00dc 00000000 		.word	.LANCHOR16
 933 00e0 04ED00E0 		.word	-536810236
 934              		.cfi_endproc
 935              	.LFE8:
 937              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 938              		.align	1
 939              		.global	uxTaskPriorityGet
 940              		.syntax unified
 941              		.thumb
 942              		.thumb_func
 943              		.fpu fpv5-sp-d16
 945              	uxTaskPriorityGet:
 946              	.LFB10:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 947              		.loc 1 1341 0
 948              		.cfi_startproc
 949              		@ args = 0, pretend = 0, frame = 0
 950              		@ frame_needed = 0, uses_anonymous_args = 0
 951              	.LVL86:
 952 0000 10B5     		push	{r4, lr}
 953              	.LCFI10:
 954              		.cfi_def_cfa_offset 8
 955              		.cfi_offset 4, -8
 956              		.cfi_offset 14, -4
 957 0002 0446     		mov	r4, r0
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 958              		.loc 1 1345 0
 959 0004 FFF7FEFF 		bl	vPortEnterCritical
 960              	.LVL87:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 961              		.loc 1 1349 0
 962 0008 24B1     		cbz	r4, .L86
 963              	.LVL88:
 964              	.L83:
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 965              		.loc 1 1350 0 discriminator 4
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 107


 966 000a E46A     		ldr	r4, [r4, #44]
 967              	.LVL89:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 968              		.loc 1 1352 0 discriminator 4
 969 000c FFF7FEFF 		bl	vPortExitCritical
 970              	.LVL90:
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 971              		.loc 1 1355 0 discriminator 4
 972 0010 2046     		mov	r0, r4
 973 0012 10BD     		pop	{r4, pc}
 974              	.LVL91:
 975              	.L86:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 976              		.loc 1 1349 0 discriminator 1
 977 0014 014B     		ldr	r3, .L87
 978 0016 1C68     		ldr	r4, [r3]
 979              	.LVL92:
 980 0018 F7E7     		b	.L83
 981              	.L88:
 982 001a 00BF     		.align	2
 983              	.L87:
 984 001c 00000000 		.word	.LANCHOR10
 985              		.cfi_endproc
 986              	.LFE10:
 988              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 989              		.align	1
 990              		.global	uxTaskPriorityGetFromISR
 991              		.syntax unified
 992              		.thumb
 993              		.thumb_func
 994              		.fpu fpv5-sp-d16
 996              	uxTaskPriorityGetFromISR:
 997              	.LFB11:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 998              		.loc 1 1363 0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 0
 1001              		@ frame_needed = 0, uses_anonymous_args = 0
 1002              	.LVL93:
 1003 0000 10B5     		push	{r4, lr}
 1004              	.LCFI11:
 1005              		.cfi_def_cfa_offset 8
 1006              		.cfi_offset 4, -8
 1007              		.cfi_offset 14, -4
 1008 0002 0446     		mov	r4, r0
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1009              		.loc 1 1383 0
 1010 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1011              	.LVL94:
 1012              	.LBB97:
 1013              	.LBB98:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %0											\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 108


 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 1014              		.loc 2 255 0
 1015              		.syntax unified
 1016              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1017 0008 EFF31183 			mrs r3, basepri											
 1018 000c 4FF05002 		mov r2, #80												
 1019 0010 72B6     		cpsid i													
 1020 0012 82F31188 		msr basepri, r2											
 1021 0016 BFF36F8F 		isb														
 1022 001a BFF34F8F 		dsb														
 1023 001e 62B6     		cpsie i													
 1024              	
 1025              	@ 0 "" 2
 1026              		.thumb
 1027              		.syntax unified
 1028              	.LBE98:
 1029              	.LBE97:
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1030              		.loc 1 1389 0
 1031 0020 1CB1     		cbz	r4, .L93
 1032              	.LVL95:
 1033              	.L90:
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1034              		.loc 1 1390 0 discriminator 4
 1035 0022 E06A     		ldr	r0, [r4, #44]
 1036              	.LVL96:
 1037              	.LBB99:
 1038              	.LBB100:
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mrs %0, basepri											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %1, %2												\n"	\
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %1											\n" \
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	warnings. */
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return ulOriginalBASEPRI;
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 272:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 273:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 109


 274:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 275:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 1039              		.loc 2 275 0 discriminator 4
 1040              		.syntax unified
 1041              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1042 0024 83F31188 			msr basepri, r3	
 1043              	@ 0 "" 2
 1044              	.LVL97:
 1045              		.thumb
 1046              		.syntax unified
 1047              	.LBE100:
 1048              	.LBE99:
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1049              		.loc 1 1395 0 discriminator 4
 1050 0028 10BD     		pop	{r4, pc}
 1051              	.LVL98:
 1052              	.L93:
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1053              		.loc 1 1389 0 discriminator 1
 1054 002a 014A     		ldr	r2, .L94
 1055 002c 1468     		ldr	r4, [r2]
 1056              	.LVL99:
 1057 002e F8E7     		b	.L90
 1058              	.L95:
 1059              		.align	2
 1060              	.L94:
 1061 0030 00000000 		.word	.LANCHOR10
 1062              		.cfi_endproc
 1063              	.LFE11:
 1065              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1066              		.align	1
 1067              		.global	vTaskPrioritySet
 1068              		.syntax unified
 1069              		.thumb
 1070              		.thumb_func
 1071              		.fpu fpv5-sp-d16
 1073              	vTaskPrioritySet:
 1074              	.LFB12:
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1075              		.loc 1 1403 0
 1076              		.cfi_startproc
 1077              		@ args = 0, pretend = 0, frame = 0
 1078              		@ frame_needed = 0, uses_anonymous_args = 0
 1079              	.LVL100:
 1080 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1081              	.LCFI12:
 1082              		.cfi_def_cfa_offset 24
 1083              		.cfi_offset 3, -24
 1084              		.cfi_offset 4, -20
 1085              		.cfi_offset 5, -16
 1086              		.cfi_offset 6, -12
 1087              		.cfi_offset 7, -8
 1088              		.cfi_offset 14, -4
 1089              	.LVL101:
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1090              		.loc 1 1408 0
 1091 0002 0629     		cmp	r1, #6
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 110


 1092 0004 0AD9     		bls	.L97
 1093              	.LBB101:
 1094              	.LBB102:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1095              		.loc 2 237 0
 1096              		.syntax unified
 1097              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1098 0006 4FF05003 			mov r3, #80												
 1099 000a 72B6     		cpsid i													
 1100 000c 83F31188 		msr basepri, r3											
 1101 0010 BFF36F8F 		isb														
 1102 0014 BFF34F8F 		dsb														
 1103 0018 62B6     		cpsie i													
 1104              	
 1105              	@ 0 "" 2
 1106              	.LVL102:
 1107              		.thumb
 1108              		.syntax unified
 1109              	.L98:
 1110 001a FEE7     		b	.L98
 1111              	.L97:
 1112 001c 0D46     		mov	r5, r1
 1113 001e 0446     		mov	r4, r0
 1114              	.LVL103:
 1115              	.LBE102:
 1116              	.LBE101:
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1117              		.loc 1 1420 0
 1118 0020 FFF7FEFF 		bl	vPortEnterCritical
 1119              	.LVL104:
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1120              		.loc 1 1424 0
 1121 0024 0CB9     		cbnz	r4, .L99
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1122              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1123 0026 2D4B     		ldr	r3, .L114
 1124 0028 1C68     		ldr	r4, [r3]
 1125              	.LVL105:
 1126              	.L99:
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1127              		.loc 1 1430 0 is_stmt 1 discriminator 4
 1128 002a 636C     		ldr	r3, [r4, #68]
 1129              	.LVL106:
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1130              		.loc 1 1438 0 discriminator 4
 1131 002c 9D42     		cmp	r5, r3
 1132 002e 44D0     		beq	.L100
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1133              		.loc 1 1442 0
 1134 0030 46D9     		bls	.L101
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1135              		.loc 1 1444 0
 1136 0032 2A4A     		ldr	r2, .L114
 1137 0034 1268     		ldr	r2, [r2]
 1138 0036 9442     		cmp	r4, r2
 1139 0038 48D0     		beq	.L109
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 111


 1140              		.loc 1 1449 0
 1141 003a 284A     		ldr	r2, .L114
 1142 003c 1268     		ldr	r2, [r2]
 1143 003e D26A     		ldr	r2, [r2, #44]
 1144 0040 9542     		cmp	r5, r2
 1145 0042 45D2     		bcs	.L110
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1146              		.loc 1 1406 0
 1147 0044 0026     		movs	r6, #0
 1148              	.L102:
 1149              	.LVL107:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1150              		.loc 1 1482 0
 1151 0046 E76A     		ldr	r7, [r4, #44]
 1152              	.LVL108:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1153              		.loc 1 1488 0
 1154 0048 BB42     		cmp	r3, r7
 1155 004a 00D1     		bne	.L103
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1156              		.loc 1 1490 0
 1157 004c E562     		str	r5, [r4, #44]
 1158              	.L103:
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1159              		.loc 1 1498 0
 1160 004e 6564     		str	r5, [r4, #68]
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1161              		.loc 1 1508 0
 1162 0050 A369     		ldr	r3, [r4, #24]
 1163              	.LVL109:
 1164 0052 002B     		cmp	r3, #0
 1165 0054 02DB     		blt	.L104
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1166              		.loc 1 1510 0
 1167 0056 C5F10705 		rsb	r5, r5, #7
 1168              	.LVL110:
 1169 005a A561     		str	r5, [r4, #24]
 1170              	.L104:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1171              		.loc 1 1521 0
 1172 005c 6169     		ldr	r1, [r4, #20]
 1173 005e 07EB8703 		add	r3, r7, r7, lsl #2
 1174 0062 9A00     		lsls	r2, r3, #2
 1175 0064 1E4B     		ldr	r3, .L114+4
 1176 0066 1344     		add	r3, r3, r2
 1177 0068 9942     		cmp	r1, r3
 1178 006a 35D1     		bne	.L112
 1179 006c 0123     		movs	r3, #1
 1180              	.L105:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1181              		.loc 1 1521 0 is_stmt 0 discriminator 4
 1182 006e DBB1     		cbz	r3, .L106
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1183              		.loc 1 1526 0 is_stmt 1
 1184 0070 251D     		adds	r5, r4, #4
 1185 0072 2846     		mov	r0, r5
 1186 0074 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 112


 1187              	.LVL111:
 1188 0078 38B9     		cbnz	r0, .L107
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1189              		.loc 1 1531 0
 1190 007a 0123     		movs	r3, #1
 1191 007c 03FA07F7 		lsl	r7, r3, r7
 1192              	.LVL112:
 1193 0080 184A     		ldr	r2, .L114+8
 1194 0082 1368     		ldr	r3, [r2]
 1195 0084 23EA0703 		bic	r3, r3, r7
 1196 0088 1360     		str	r3, [r2]
 1197              	.L107:
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1198              		.loc 1 1537 0
 1199 008a E36A     		ldr	r3, [r4, #44]
 1200 008c 0122     		movs	r2, #1
 1201 008e 9A40     		lsls	r2, r2, r3
 1202 0090 1449     		ldr	r1, .L114+8
 1203 0092 0868     		ldr	r0, [r1]
 1204 0094 0243     		orrs	r2, r2, r0
 1205 0096 0A60     		str	r2, [r1]
 1206 0098 03EB8303 		add	r3, r3, r3, lsl #2
 1207 009c 9A00     		lsls	r2, r3, #2
 1208 009e 2946     		mov	r1, r5
 1209 00a0 0F48     		ldr	r0, .L114+4
 1210 00a2 1044     		add	r0, r0, r2
 1211 00a4 FFF7FEFF 		bl	vListInsertEnd
 1212              	.LVL113:
 1213              	.L106:
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1214              		.loc 1 1544 0
 1215 00a8 3EB1     		cbz	r6, .L100
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1216              		.loc 1 1546 0
 1217 00aa 4FF08052 		mov	r2, #268435456
 1218 00ae 0E4B     		ldr	r3, .L114+12
 1219 00b0 1A60     		str	r2, [r3]
 1220              		.syntax unified
 1221              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1222 00b2 BFF34F8F 		dsb
 1223              	@ 0 "" 2
 1224              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1225 00b6 BFF36F8F 		isb
 1226              	@ 0 "" 2
 1227              	.LVL114:
 1228              		.thumb
 1229              		.syntax unified
 1230              	.L100:
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1231              		.loc 1 1558 0
 1232 00ba FFF7FEFF 		bl	vPortExitCritical
 1233              	.LVL115:
 1234 00be F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1235              	.LVL116:
 1236              	.L101:
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1237              		.loc 1 1465 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 113


 1238 00c0 064A     		ldr	r2, .L114
 1239 00c2 1268     		ldr	r2, [r2]
 1240 00c4 9442     		cmp	r4, r2
 1241 00c6 05D0     		beq	.L111
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1242              		.loc 1 1406 0
 1243 00c8 0026     		movs	r6, #0
 1244 00ca BCE7     		b	.L102
 1245              	.L109:
 1246 00cc 0026     		movs	r6, #0
 1247 00ce BAE7     		b	.L102
 1248              	.L110:
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1249              		.loc 1 1451 0
 1250 00d0 0126     		movs	r6, #1
 1251 00d2 B8E7     		b	.L102
 1252              	.L111:
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1253              		.loc 1 1470 0
 1254 00d4 0126     		movs	r6, #1
 1255 00d6 B6E7     		b	.L102
 1256              	.LVL117:
 1257              	.L112:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1258              		.loc 1 1521 0
 1259 00d8 0023     		movs	r3, #0
 1260 00da C8E7     		b	.L105
 1261              	.L115:
 1262              		.align	2
 1263              	.L114:
 1264 00dc 00000000 		.word	.LANCHOR10
 1265 00e0 00000000 		.word	.LANCHOR4
 1266 00e4 00000000 		.word	.LANCHOR13
 1267 00e8 04ED00E0 		.word	-536810236
 1268              		.cfi_endproc
 1269              	.LFE12:
 1271              		.section	.text.vTaskResume,"ax",%progbits
 1272              		.align	1
 1273              		.global	vTaskResume
 1274              		.syntax unified
 1275              		.thumb
 1276              		.thumb_func
 1277              		.fpu fpv5-sp-d16
 1279              	vTaskResume:
 1280              	.LFB15:
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1281              		.loc 1 1703 0
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 0
 1284              		@ frame_needed = 0, uses_anonymous_args = 0
 1285              	.LVL118:
 1286 0000 38B5     		push	{r3, r4, r5, lr}
 1287              	.LCFI13:
 1288              		.cfi_def_cfa_offset 16
 1289              		.cfi_offset 3, -16
 1290              		.cfi_offset 4, -12
 1291              		.cfi_offset 5, -8
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 114


 1292              		.cfi_offset 14, -4
 1293              	.LVL119:
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1294              		.loc 1 1707 0
 1295 0002 68B1     		cbz	r0, .L122
 1296 0004 0446     		mov	r4, r0
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1297              		.loc 1 1711 0 discriminator 1
 1298 0006 1D4B     		ldr	r3, .L124
 1299 0008 1B68     		ldr	r3, [r3]
 1300 000a 9842     		cmp	r0, r3
 1301 000c 07D0     		beq	.L116
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1302              		.loc 1 1713 0
 1303 000e FFF7FEFF 		bl	vPortEnterCritical
 1304              	.LVL120:
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1305              		.loc 1 1715 0
 1306 0012 2046     		mov	r0, r4
 1307 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1308              	.LVL121:
 1309 0018 68B9     		cbnz	r0, .L123
 1310              	.L120:
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1311              		.loc 1 1742 0
 1312 001a FFF7FEFF 		bl	vPortExitCritical
 1313              	.LVL122:
 1314              	.L116:
 1315 001e 38BD     		pop	{r3, r4, r5, pc}
 1316              	.LVL123:
 1317              	.L122:
 1318              	.LBB103:
 1319              	.LBB104:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1320              		.loc 2 237 0
 1321              		.syntax unified
 1322              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1323 0020 4FF05003 			mov r3, #80												
 1324 0024 72B6     		cpsid i													
 1325 0026 83F31188 		msr basepri, r3											
 1326 002a BFF36F8F 		isb														
 1327 002e BFF34F8F 		dsb														
 1328 0032 62B6     		cpsie i													
 1329              	
 1330              	@ 0 "" 2
 1331              	.LVL124:
 1332              		.thumb
 1333              		.syntax unified
 1334              	.L118:
 1335 0034 FEE7     		b	.L118
 1336              	.LVL125:
 1337              	.L123:
 1338              	.LBE104:
 1339              	.LBE103:
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1340              		.loc 1 1721 0
 1341 0036 251D     		adds	r5, r4, #4
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 115


 1342 0038 2846     		mov	r0, r5
 1343 003a FFF7FEFF 		bl	uxListRemove
 1344              	.LVL126:
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1345              		.loc 1 1722 0
 1346 003e E36A     		ldr	r3, [r4, #44]
 1347 0040 0122     		movs	r2, #1
 1348 0042 9A40     		lsls	r2, r2, r3
 1349 0044 0E49     		ldr	r1, .L124+4
 1350 0046 0868     		ldr	r0, [r1]
 1351 0048 0243     		orrs	r2, r2, r0
 1352 004a 0A60     		str	r2, [r1]
 1353 004c 03EB8303 		add	r3, r3, r3, lsl #2
 1354 0050 9A00     		lsls	r2, r3, #2
 1355 0052 2946     		mov	r1, r5
 1356 0054 0B48     		ldr	r0, .L124+8
 1357 0056 1044     		add	r0, r0, r2
 1358 0058 FFF7FEFF 		bl	vListInsertEnd
 1359              	.LVL127:
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1360              		.loc 1 1725 0
 1361 005c E26A     		ldr	r2, [r4, #44]
 1362 005e 074B     		ldr	r3, .L124
 1363 0060 1B68     		ldr	r3, [r3]
 1364 0062 DB6A     		ldr	r3, [r3, #44]
 1365 0064 9A42     		cmp	r2, r3
 1366 0066 D8D3     		bcc	.L120
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1367              		.loc 1 1730 0
 1368 0068 4FF08052 		mov	r2, #268435456
 1369 006c 064B     		ldr	r3, .L124+12
 1370 006e 1A60     		str	r2, [r3]
 1371              		.syntax unified
 1372              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1373 0070 BFF34F8F 		dsb
 1374              	@ 0 "" 2
 1375              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1376 0074 BFF36F8F 		isb
 1377              	@ 0 "" 2
 1378              		.thumb
 1379              		.syntax unified
 1380 0078 CFE7     		b	.L120
 1381              	.L125:
 1382 007a 00BF     		.align	2
 1383              	.L124:
 1384 007c 00000000 		.word	.LANCHOR10
 1385 0080 00000000 		.word	.LANCHOR13
 1386 0084 00000000 		.word	.LANCHOR4
 1387 0088 04ED00E0 		.word	-536810236
 1388              		.cfi_endproc
 1389              	.LFE15:
 1391              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1392              		.align	1
 1393              		.global	xTaskResumeFromISR
 1394              		.syntax unified
 1395              		.thumb
 1396              		.thumb_func
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 116


 1397              		.fpu fpv5-sp-d16
 1399              	xTaskResumeFromISR:
 1400              	.LFB16:
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1401              		.loc 1 1757 0
 1402              		.cfi_startproc
 1403              		@ args = 0, pretend = 0, frame = 0
 1404              		@ frame_needed = 0, uses_anonymous_args = 0
 1405              	.LVL128:
 1406 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1407              	.LCFI14:
 1408              		.cfi_def_cfa_offset 24
 1409              		.cfi_offset 3, -24
 1410              		.cfi_offset 4, -20
 1411              		.cfi_offset 5, -16
 1412              		.cfi_offset 6, -12
 1413              		.cfi_offset 7, -8
 1414              		.cfi_offset 14, -4
 1415              	.LVL129:
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1416              		.loc 1 1762 0
 1417 0002 0028     		cmp	r0, #0
 1418 0004 34D0     		beq	.L135
 1419 0006 0446     		mov	r4, r0
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1420              		.loc 1 1780 0
 1421 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1422              	.LVL130:
 1423              	.LBB105:
 1424              	.LBB106:
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1425              		.loc 2 255 0
 1426              		.syntax unified
 1427              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1428 000c EFF31187 			mrs r7, basepri											
 1429 0010 4FF05003 		mov r3, #80												
 1430 0014 72B6     		cpsid i													
 1431 0016 83F31188 		msr basepri, r3											
 1432 001a BFF36F8F 		isb														
 1433 001e BFF34F8F 		dsb														
 1434 0022 62B6     		cpsie i													
 1435              	
 1436              	@ 0 "" 2
 1437              		.thumb
 1438              		.syntax unified
 1439              	.LBE106:
 1440              	.LBE105:
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1441              		.loc 1 1784 0
 1442 0024 2046     		mov	r0, r4
 1443 0026 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1444              	.LVL131:
 1445 002a 0028     		cmp	r0, #0
 1446 002c 34D0     		beq	.L132
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1447              		.loc 1 1789 0
 1448 002e 1B4B     		ldr	r3, .L137
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 117


 1449 0030 1B68     		ldr	r3, [r3]
 1450 0032 53BB     		cbnz	r3, .L130
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1451              		.loc 1 1793 0
 1452 0034 E26A     		ldr	r2, [r4, #44]
 1453 0036 1A4B     		ldr	r3, .L137+4
 1454 0038 1B68     		ldr	r3, [r3]
 1455 003a DB6A     		ldr	r3, [r3, #44]
 1456 003c 9A42     		cmp	r2, r3
 1457 003e 22D3     		bcc	.L136
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1458              		.loc 1 1795 0
 1459 0040 0125     		movs	r5, #1
 1460              	.L131:
 1461              	.LVL132:
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1462              		.loc 1 1802 0
 1463 0042 261D     		adds	r6, r4, #4
 1464 0044 3046     		mov	r0, r6
 1465 0046 FFF7FEFF 		bl	uxListRemove
 1466              	.LVL133:
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1467              		.loc 1 1803 0
 1468 004a E36A     		ldr	r3, [r4, #44]
 1469 004c 0122     		movs	r2, #1
 1470 004e 9A40     		lsls	r2, r2, r3
 1471 0050 1449     		ldr	r1, .L137+8
 1472 0052 0868     		ldr	r0, [r1]
 1473 0054 0243     		orrs	r2, r2, r0
 1474 0056 0A60     		str	r2, [r1]
 1475 0058 03EB8303 		add	r3, r3, r3, lsl #2
 1476 005c 9A00     		lsls	r2, r3, #2
 1477 005e 3146     		mov	r1, r6
 1478 0060 1148     		ldr	r0, .L137+12
 1479 0062 1044     		add	r0, r0, r2
 1480 0064 FFF7FEFF 		bl	vListInsertEnd
 1481              	.LVL134:
 1482              	.L129:
 1483              	.LBB107:
 1484              	.LBB108:
 1485              		.loc 2 275 0
 1486              		.syntax unified
 1487              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1488 0068 87F31188 			msr basepri, r7	
 1489              	@ 0 "" 2
 1490              	.LVL135:
 1491              		.thumb
 1492              		.syntax unified
 1493              	.LBE108:
 1494              	.LBE107:
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1495              		.loc 1 1821 0
 1496 006c 2846     		mov	r0, r5
 1497 006e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1498              	.LVL136:
 1499              	.L135:
 1500              	.LBB109:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 118


 1501              	.LBB110:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1502              		.loc 2 237 0
 1503              		.syntax unified
 1504              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1505 0070 4FF05003 			mov r3, #80												
 1506 0074 72B6     		cpsid i													
 1507 0076 83F31188 		msr basepri, r3											
 1508 007a BFF36F8F 		isb														
 1509 007e BFF34F8F 		dsb														
 1510 0082 62B6     		cpsie i													
 1511              	
 1512              	@ 0 "" 2
 1513              	.LVL137:
 1514              		.thumb
 1515              		.syntax unified
 1516              	.L128:
 1517 0084 FEE7     		b	.L128
 1518              	.LVL138:
 1519              	.L136:
 1520              	.LBE110:
 1521              	.LBE109:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1522              		.loc 1 1758 0
 1523 0086 0025     		movs	r5, #0
 1524 0088 DBE7     		b	.L131
 1525              	.L130:
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1526              		.loc 1 1810 0
 1527 008a 04F11801 		add	r1, r4, #24
 1528 008e 0748     		ldr	r0, .L137+16
 1529 0090 FFF7FEFF 		bl	vListInsertEnd
 1530              	.LVL139:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1531              		.loc 1 1758 0
 1532 0094 0025     		movs	r5, #0
 1533 0096 E7E7     		b	.L129
 1534              	.L132:
 1535 0098 0025     		movs	r5, #0
 1536 009a E5E7     		b	.L129
 1537              	.L138:
 1538              		.align	2
 1539              	.L137:
 1540 009c 00000000 		.word	.LANCHOR16
 1541 00a0 00000000 		.word	.LANCHOR10
 1542 00a4 00000000 		.word	.LANCHOR13
 1543 00a8 00000000 		.word	.LANCHOR4
 1544 00ac 00000000 		.word	.LANCHOR1
 1545              		.cfi_endproc
 1546              	.LFE16:
 1548              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1549              		.align	1
 1550              		.global	vTaskStartScheduler
 1551              		.syntax unified
 1552              		.thumb
 1553              		.thumb_func
 1554              		.fpu fpv5-sp-d16
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 119


 1556              	vTaskStartScheduler:
 1557              	.LFB17:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1558              		.loc 1 1827 0
 1559              		.cfi_startproc
 1560              		@ args = 0, pretend = 0, frame = 0
 1561              		@ frame_needed = 0, uses_anonymous_args = 0
 1562 0000 00B5     		push	{lr}
 1563              	.LCFI15:
 1564              		.cfi_def_cfa_offset 4
 1565              		.cfi_offset 14, -4
 1566 0002 83B0     		sub	sp, sp, #12
 1567              	.LCFI16:
 1568              		.cfi_def_cfa_offset 16
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 1569              		.loc 1 1860 0
 1570 0004 194B     		ldr	r3, .L146
 1571 0006 0193     		str	r3, [sp, #4]
 1572 0008 0023     		movs	r3, #0
 1573 000a 0093     		str	r3, [sp]
 1574 000c 8022     		movs	r2, #128
 1575 000e 1849     		ldr	r1, .L146+4
 1576 0010 1848     		ldr	r0, .L146+8
 1577 0012 FFF7FEFF 		bl	xTaskCreate
 1578              	.LVL140:
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1579              		.loc 1 1881 0
 1580 0016 0128     		cmp	r0, #1
 1581 0018 05D0     		beq	.L144
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1582              		.loc 1 1924 0
 1583 001a B0F1FF3F 		cmp	r0, #-1
 1584 001e 19D0     		beq	.L145
 1585              	.LVL141:
 1586              	.L139:
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1587              		.loc 1 1930 0
 1588 0020 03B0     		add	sp, sp, #12
 1589              	.LCFI17:
 1590              		.cfi_remember_state
 1591              		.cfi_def_cfa_offset 4
 1592              		@ sp needed
 1593 0022 5DF804FB 		ldr	pc, [sp], #4
 1594              	.LVL142:
 1595              	.L144:
 1596              	.LCFI18:
 1597              		.cfi_restore_state
 1598              	.LBB111:
 1599              	.LBB112:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1600              		.loc 2 237 0
 1601              		.syntax unified
 1602              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1603 0026 4FF05003 			mov r3, #80												
 1604 002a 72B6     		cpsid i													
 1605 002c 83F31188 		msr basepri, r3											
 1606 0030 BFF36F8F 		isb														
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 120


 1607 0034 BFF34F8F 		dsb														
 1608 0038 62B6     		cpsie i													
 1609              	
 1610              	@ 0 "" 2
 1611              		.thumb
 1612              		.syntax unified
 1613              	.LBE112:
 1614              	.LBE111:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1615              		.loc 1 1898 0
 1616 003a 4FF0FF32 		mov	r2, #-1
 1617 003e 0E4B     		ldr	r3, .L146+12
 1618 0040 1A60     		str	r2, [r3]
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1619              		.loc 1 1899 0
 1620 0042 0122     		movs	r2, #1
 1621 0044 0D4B     		ldr	r3, .L146+16
 1622 0046 1A60     		str	r2, [r3]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1623              		.loc 1 1900 0
 1624 0048 0022     		movs	r2, #0
 1625 004a 0D4B     		ldr	r3, .L146+20
 1626 004c 1A60     		str	r2, [r3]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1627              		.loc 1 1909 0
 1628 004e FFF7FEFF 		bl	xPortStartScheduler
 1629              	.LVL143:
 1630 0052 E5E7     		b	.L139
 1631              	.LVL144:
 1632              	.L145:
 1633              	.LBB113:
 1634              	.LBB114:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1635              		.loc 2 237 0
 1636              		.syntax unified
 1637              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1638 0054 4FF05003 			mov r3, #80												
 1639 0058 72B6     		cpsid i													
 1640 005a 83F31188 		msr basepri, r3											
 1641 005e BFF36F8F 		isb														
 1642 0062 BFF34F8F 		dsb														
 1643 0066 62B6     		cpsie i													
 1644              	
 1645              	@ 0 "" 2
 1646              	.LVL145:
 1647              		.thumb
 1648              		.syntax unified
 1649              	.L142:
 1650 0068 FEE7     		b	.L142
 1651              	.L147:
 1652 006a 00BF     		.align	2
 1653              	.L146:
 1654 006c 00000000 		.word	.LANCHOR17
 1655 0070 00000000 		.word	.LC0
 1656 0074 00000000 		.word	prvIdleTask
 1657 0078 00000000 		.word	.LANCHOR3
 1658 007c 00000000 		.word	.LANCHOR11
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 121


 1659 0080 00000000 		.word	.LANCHOR14
 1660              	.LBE114:
 1661              	.LBE113:
 1662              		.cfi_endproc
 1663              	.LFE17:
 1665              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1666              		.align	1
 1667              		.global	vTaskEndScheduler
 1668              		.syntax unified
 1669              		.thumb
 1670              		.thumb_func
 1671              		.fpu fpv5-sp-d16
 1673              	vTaskEndScheduler:
 1674              	.LFB18:
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1675              		.loc 1 1934 0
 1676              		.cfi_startproc
 1677              		@ args = 0, pretend = 0, frame = 0
 1678              		@ frame_needed = 0, uses_anonymous_args = 0
 1679 0000 08B5     		push	{r3, lr}
 1680              	.LCFI19:
 1681              		.cfi_def_cfa_offset 8
 1682              		.cfi_offset 3, -8
 1683              		.cfi_offset 14, -4
 1684              	.LBB115:
 1685              	.LBB116:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1686              		.loc 2 237 0
 1687              		.syntax unified
 1688              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1689 0002 4FF05003 			mov r3, #80												
 1690 0006 72B6     		cpsid i													
 1691 0008 83F31188 		msr basepri, r3											
 1692 000c BFF36F8F 		isb														
 1693 0010 BFF34F8F 		dsb														
 1694 0014 62B6     		cpsie i													
 1695              	
 1696              	@ 0 "" 2
 1697              		.thumb
 1698              		.syntax unified
 1699              	.LBE116:
 1700              	.LBE115:
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1701              		.loc 1 1939 0
 1702 0016 0022     		movs	r2, #0
 1703 0018 024B     		ldr	r3, .L150
 1704 001a 1A60     		str	r2, [r3]
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1705              		.loc 1 1940 0
 1706 001c FFF7FEFF 		bl	vPortEndScheduler
 1707              	.LVL146:
 1708 0020 08BD     		pop	{r3, pc}
 1709              	.L151:
 1710 0022 00BF     		.align	2
 1711              	.L150:
 1712 0024 00000000 		.word	.LANCHOR11
 1713              		.cfi_endproc
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 122


 1714              	.LFE18:
 1716              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1717              		.align	1
 1718              		.global	vTaskSuspendAll
 1719              		.syntax unified
 1720              		.thumb
 1721              		.thumb_func
 1722              		.fpu fpv5-sp-d16
 1724              	vTaskSuspendAll:
 1725              	.LFB19:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1726              		.loc 1 1945 0
 1727              		.cfi_startproc
 1728              		@ args = 0, pretend = 0, frame = 0
 1729              		@ frame_needed = 0, uses_anonymous_args = 0
 1730              		@ link register save eliminated.
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1731              		.loc 1 1950 0
 1732 0000 024A     		ldr	r2, .L153
 1733 0002 1368     		ldr	r3, [r2]
 1734 0004 0133     		adds	r3, r3, #1
 1735 0006 1360     		str	r3, [r2]
 1736 0008 7047     		bx	lr
 1737              	.L154:
 1738 000a 00BF     		.align	2
 1739              	.L153:
 1740 000c 00000000 		.word	.LANCHOR16
 1741              		.cfi_endproc
 1742              	.LFE19:
 1744              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1745              		.align	1
 1746              		.global	xTaskGetTickCount
 1747              		.syntax unified
 1748              		.thumb
 1749              		.thumb_func
 1750              		.fpu fpv5-sp-d16
 1752              	xTaskGetTickCount:
 1753              	.LFB21:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1754              		.loc 1 2128 0
 1755              		.cfi_startproc
 1756              		@ args = 0, pretend = 0, frame = 0
 1757              		@ frame_needed = 0, uses_anonymous_args = 0
 1758              		@ link register save eliminated.
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1759              		.loc 1 2134 0
 1760 0000 014B     		ldr	r3, .L156
 1761 0002 1868     		ldr	r0, [r3]
 1762              	.LVL147:
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1763              		.loc 1 2139 0
 1764 0004 7047     		bx	lr
 1765              	.L157:
 1766 0006 00BF     		.align	2
 1767              	.L156:
 1768 0008 00000000 		.word	.LANCHOR14
 1769              		.cfi_endproc
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 123


 1770              	.LFE21:
 1772              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1773              		.align	1
 1774              		.global	xTaskGetTickCountFromISR
 1775              		.syntax unified
 1776              		.thumb
 1777              		.thumb_func
 1778              		.fpu fpv5-sp-d16
 1780              	xTaskGetTickCountFromISR:
 1781              	.LFB22:
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1782              		.loc 1 2143 0
 1783              		.cfi_startproc
 1784              		@ args = 0, pretend = 0, frame = 0
 1785              		@ frame_needed = 0, uses_anonymous_args = 0
 1786 0000 08B5     		push	{r3, lr}
 1787              	.LCFI20:
 1788              		.cfi_def_cfa_offset 8
 1789              		.cfi_offset 3, -8
 1790              		.cfi_offset 14, -4
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1791              		.loc 1 2161 0
 1792 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1793              	.LVL148:
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1794              		.loc 1 2165 0
 1795 0006 014B     		ldr	r3, .L160
 1796 0008 1868     		ldr	r0, [r3]
 1797              	.LVL149:
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1798              		.loc 1 2170 0
 1799 000a 08BD     		pop	{r3, pc}
 1800              	.L161:
 1801              		.align	2
 1802              	.L160:
 1803 000c 00000000 		.word	.LANCHOR14
 1804              		.cfi_endproc
 1805              	.LFE22:
 1807              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1808              		.align	1
 1809              		.global	uxTaskGetNumberOfTasks
 1810              		.syntax unified
 1811              		.thumb
 1812              		.thumb_func
 1813              		.fpu fpv5-sp-d16
 1815              	uxTaskGetNumberOfTasks:
 1816              	.LFB23:
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1817              		.loc 1 2174 0
 1818              		.cfi_startproc
 1819              		@ args = 0, pretend = 0, frame = 0
 1820              		@ frame_needed = 0, uses_anonymous_args = 0
 1821              		@ link register save eliminated.
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1822              		.loc 1 2177 0
 1823 0000 014B     		ldr	r3, .L163
 1824 0002 1868     		ldr	r0, [r3]
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 124


2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1825              		.loc 1 2178 0
 1826 0004 7047     		bx	lr
 1827              	.L164:
 1828 0006 00BF     		.align	2
 1829              	.L163:
 1830 0008 00000000 		.word	.LANCHOR9
 1831              		.cfi_endproc
 1832              	.LFE23:
 1834              		.section	.text.pcTaskGetName,"ax",%progbits
 1835              		.align	1
 1836              		.global	pcTaskGetName
 1837              		.syntax unified
 1838              		.thumb
 1839              		.thumb_func
 1840              		.fpu fpv5-sp-d16
 1842              	pcTaskGetName:
 1843              	.LFB24:
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 1844              		.loc 1 2182 0
 1845              		.cfi_startproc
 1846              		@ args = 0, pretend = 0, frame = 0
 1847              		@ frame_needed = 0, uses_anonymous_args = 0
 1848              		@ link register save eliminated.
 1849              	.LVL150:
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1850              		.loc 1 2187 0
 1851 0000 10B1     		cbz	r0, .L170
 1852              	.LVL151:
 1853              	.L166:
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1854              		.loc 1 2188 0 discriminator 4
 1855 0002 20B1     		cbz	r0, .L171
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1856              		.loc 1 2190 0
 1857 0004 3430     		adds	r0, r0, #52
 1858              	.LVL152:
 1859 0006 7047     		bx	lr
 1860              	.LVL153:
 1861              	.L170:
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1862              		.loc 1 2187 0 discriminator 1
 1863 0008 064B     		ldr	r3, .L172
 1864 000a 1868     		ldr	r0, [r3]
 1865              	.LVL154:
 1866 000c F9E7     		b	.L166
 1867              	.LVL155:
 1868              	.L171:
 1869              	.LBB117:
 1870              	.LBB118:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1871              		.loc 2 237 0
 1872              		.syntax unified
 1873              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1874 000e 4FF05003 			mov r3, #80												
 1875 0012 72B6     		cpsid i													
 1876 0014 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 125


 1877 0018 BFF36F8F 		isb														
 1878 001c BFF34F8F 		dsb														
 1879 0020 62B6     		cpsie i													
 1880              	
 1881              	@ 0 "" 2
 1882              	.LVL156:
 1883              		.thumb
 1884              		.syntax unified
 1885              	.L168:
 1886 0022 FEE7     		b	.L168
 1887              	.L173:
 1888              		.align	2
 1889              	.L172:
 1890 0024 00000000 		.word	.LANCHOR10
 1891              	.LBE118:
 1892              	.LBE117:
 1893              		.cfi_endproc
 1894              	.LFE24:
 1896              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1897              		.align	1
 1898              		.global	xTaskIncrementTick
 1899              		.syntax unified
 1900              		.thumb
 1901              		.thumb_func
 1902              		.fpu fpv5-sp-d16
 1904              	xTaskIncrementTick:
 1905              	.LFB25:
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 1906              		.loc 1 2500 0
 1907              		.cfi_startproc
 1908              		@ args = 0, pretend = 0, frame = 0
 1909              		@ frame_needed = 0, uses_anonymous_args = 0
 1910 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1911              	.LCFI21:
 1912              		.cfi_def_cfa_offset 24
 1913              		.cfi_offset 3, -24
 1914              		.cfi_offset 4, -20
 1915              		.cfi_offset 5, -16
 1916              		.cfi_offset 6, -12
 1917              		.cfi_offset 7, -8
 1918              		.cfi_offset 14, -4
 1919              	.LVL157:
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1920              		.loc 1 2509 0
 1921 0002 3D4B     		ldr	r3, .L198
 1922 0004 1B68     		ldr	r3, [r3]
 1923 0006 002B     		cmp	r3, #0
 1924 0008 6AD1     		bne	.L175
 1925              	.LBB119:
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1926              		.loc 1 2513 0
 1927 000a 3C4B     		ldr	r3, .L198+4
 1928 000c 1D68     		ldr	r5, [r3]
 1929 000e 0135     		adds	r5, r5, #1
 1930              	.LVL158:
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1931              		.loc 1 2517 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 126


 1932 0010 1D60     		str	r5, [r3]
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1933              		.loc 1 2519 0
 1934 0012 D5B9     		cbnz	r5, .L176
 1935              	.LBB120:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1936              		.loc 1 2521 0
 1937 0014 3A4B     		ldr	r3, .L198+8
 1938 0016 1B68     		ldr	r3, [r3]
 1939 0018 1B68     		ldr	r3, [r3]
 1940 001a 53B1     		cbz	r3, .L177
 1941              	.LBB121:
 1942              	.LBB122:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1943              		.loc 2 237 0
 1944              		.syntax unified
 1945              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1946 001c 4FF05003 			mov r3, #80												
 1947 0020 72B6     		cpsid i													
 1948 0022 83F31188 		msr basepri, r3											
 1949 0026 BFF36F8F 		isb														
 1950 002a BFF34F8F 		dsb														
 1951 002e 62B6     		cpsie i													
 1952              	
 1953              	@ 0 "" 2
 1954              	.LVL159:
 1955              		.thumb
 1956              		.syntax unified
 1957              	.L178:
 1958 0030 FEE7     		b	.L178
 1959              	.L177:
 1960              	.LBE122:
 1961              	.LBE121:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1962              		.loc 1 2521 0 discriminator 2
 1963 0032 334A     		ldr	r2, .L198+8
 1964 0034 1168     		ldr	r1, [r2]
 1965              	.LVL160:
 1966 0036 334B     		ldr	r3, .L198+12
 1967 0038 1868     		ldr	r0, [r3]
 1968 003a 1060     		str	r0, [r2]
 1969 003c 1960     		str	r1, [r3]
 1970 003e 324A     		ldr	r2, .L198+16
 1971 0040 1368     		ldr	r3, [r2]
 1972 0042 0133     		adds	r3, r3, #1
 1973 0044 1360     		str	r3, [r2]
 1974 0046 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1975              	.LVL161:
 1976              	.L176:
 1977              	.LBE120:
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1978              		.loc 1 2532 0
 1979 004a 304B     		ldr	r3, .L198+20
 1980 004c 1B68     		ldr	r3, [r3]
 1981 004e 9D42     		cmp	r5, r3
 1982 0050 3AD2     		bcs	.L189
 1983              	.LBE119:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 127


2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1984              		.loc 1 2503 0
 1985 0052 0024     		movs	r4, #0
 1986              	.LVL162:
 1987              	.L180:
 1988              	.LBB123:
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1989              		.loc 1 2615 0
 1990 0054 2E4B     		ldr	r3, .L198+24
 1991 0056 1B68     		ldr	r3, [r3]
 1992 0058 DB6A     		ldr	r3, [r3, #44]
 1993 005a 03EB8303 		add	r3, r3, r3, lsl #2
 1994 005e 9A00     		lsls	r2, r3, #2
 1995 0060 2C4B     		ldr	r3, .L198+28
 1996 0062 9B58     		ldr	r3, [r3, r2]
 1997 0064 012B     		cmp	r3, #1
 1998 0066 40D9     		bls	.L187
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1999              		.loc 1 2617 0
 2000 0068 0124     		movs	r4, #1
 2001              	.LVL163:
 2002 006a 3EE0     		b	.L187
 2003              	.LVL164:
 2004              	.L191:
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2005              		.loc 1 2598 0
 2006 006c 0124     		movs	r4, #1
 2007              	.LVL165:
 2008              	.L179:
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2009              		.loc 1 2536 0
 2010 006e 244B     		ldr	r3, .L198+8
 2011 0070 1B68     		ldr	r3, [r3]
 2012 0072 1B68     		ldr	r3, [r3]
 2013 0074 53B3     		cbz	r3, .L195
 2014 0076 0023     		movs	r3, #0
 2015              	.L181:
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2016              		.loc 1 2536 0 is_stmt 0 discriminator 4
 2017 0078 53BB     		cbnz	r3, .L196
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2018              		.loc 1 2552 0 is_stmt 1
 2019 007a 214B     		ldr	r3, .L198+8
 2020 007c 1B68     		ldr	r3, [r3]
 2021 007e DB68     		ldr	r3, [r3, #12]
 2022 0080 DE68     		ldr	r6, [r3, #12]
 2023              	.LVL166:
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2024              		.loc 1 2553 0
 2025 0082 7368     		ldr	r3, [r6, #4]
 2026              	.LVL167:
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2027              		.loc 1 2555 0
 2028 0084 9D42     		cmp	r5, r3
 2029 0086 28D3     		bcc	.L197
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2030              		.loc 1 2571 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 128


 2031 0088 371D     		adds	r7, r6, #4
 2032 008a 3846     		mov	r0, r7
 2033 008c FFF7FEFF 		bl	uxListRemove
 2034              	.LVL168:
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2035              		.loc 1 2575 0
 2036 0090 B36A     		ldr	r3, [r6, #40]
 2037 0092 1BB1     		cbz	r3, .L184
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2038              		.loc 1 2577 0
 2039 0094 06F11800 		add	r0, r6, #24
 2040 0098 FFF7FEFF 		bl	uxListRemove
 2041              	.LVL169:
 2042              	.L184:
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2043              		.loc 1 2586 0
 2044 009c F36A     		ldr	r3, [r6, #44]
 2045 009e 0122     		movs	r2, #1
 2046 00a0 9A40     		lsls	r2, r2, r3
 2047 00a2 1D49     		ldr	r1, .L198+32
 2048 00a4 0868     		ldr	r0, [r1]
 2049 00a6 0243     		orrs	r2, r2, r0
 2050 00a8 0A60     		str	r2, [r1]
 2051 00aa 03EB8303 		add	r3, r3, r3, lsl #2
 2052 00ae 9A00     		lsls	r2, r3, #2
 2053 00b0 3946     		mov	r1, r7
 2054 00b2 1848     		ldr	r0, .L198+28
 2055 00b4 1044     		add	r0, r0, r2
 2056 00b6 FFF7FEFF 		bl	vListInsertEnd
 2057              	.LVL170:
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2058              		.loc 1 2596 0
 2059 00ba F26A     		ldr	r2, [r6, #44]
 2060 00bc 144B     		ldr	r3, .L198+24
 2061 00be 1B68     		ldr	r3, [r3]
 2062 00c0 DB6A     		ldr	r3, [r3, #44]
 2063 00c2 9A42     		cmp	r2, r3
 2064 00c4 D2D2     		bcs	.L191
 2065 00c6 D2E7     		b	.L179
 2066              	.LVL171:
 2067              	.L189:
 2068 00c8 0024     		movs	r4, #0
 2069 00ca D0E7     		b	.L179
 2070              	.LVL172:
 2071              	.L195:
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2072              		.loc 1 2536 0
 2073 00cc 0123     		movs	r3, #1
 2074 00ce D3E7     		b	.L181
 2075              	.L196:
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2076              		.loc 1 2543 0
 2077 00d0 4FF0FF32 		mov	r2, #-1
 2078 00d4 0D4B     		ldr	r3, .L198+20
 2079 00d6 1A60     		str	r2, [r3]
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2080              		.loc 1 2544 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 129


 2081 00d8 BCE7     		b	.L180
 2082              	.LVL173:
 2083              	.L197:
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 2084              		.loc 1 2562 0
 2085 00da 0C4A     		ldr	r2, .L198+20
 2086 00dc 1360     		str	r3, [r2]
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2087              		.loc 1 2563 0
 2088 00de B9E7     		b	.L180
 2089              	.LVL174:
 2090              	.L175:
 2091              	.LBE123:
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2092              		.loc 1 2643 0
 2093 00e0 0E4A     		ldr	r2, .L198+36
 2094 00e2 1368     		ldr	r3, [r2]
 2095 00e4 0133     		adds	r3, r3, #1
 2096 00e6 1360     		str	r3, [r2]
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2097              		.loc 1 2503 0
 2098 00e8 0024     		movs	r4, #0
 2099              	.LVL175:
 2100              	.L187:
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2101              		.loc 1 2656 0
 2102 00ea 0D4B     		ldr	r3, .L198+40
 2103 00ec 1B68     		ldr	r3, [r3]
 2104 00ee 03B1     		cbz	r3, .L174
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2105              		.loc 1 2658 0
 2106 00f0 0124     		movs	r4, #1
 2107              	.LVL176:
 2108              	.L174:
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2109              		.loc 1 2668 0
 2110 00f2 2046     		mov	r0, r4
 2111 00f4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2112              	.L199:
 2113 00f6 00BF     		.align	2
 2114              	.L198:
 2115 00f8 00000000 		.word	.LANCHOR16
 2116 00fc 00000000 		.word	.LANCHOR14
 2117 0100 00000000 		.word	.LANCHOR2
 2118 0104 00000000 		.word	.LANCHOR8
 2119 0108 00000000 		.word	.LANCHOR18
 2120 010c 00000000 		.word	.LANCHOR3
 2121 0110 00000000 		.word	.LANCHOR10
 2122 0114 00000000 		.word	.LANCHOR4
 2123 0118 00000000 		.word	.LANCHOR13
 2124 011c 00000000 		.word	.LANCHOR19
 2125 0120 00000000 		.word	.LANCHOR20
 2126              		.cfi_endproc
 2127              	.LFE25:
 2129              		.section	.text.xTaskResumeAll,"ax",%progbits
 2130              		.align	1
 2131              		.global	xTaskResumeAll
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 130


 2132              		.syntax unified
 2133              		.thumb
 2134              		.thumb_func
 2135              		.fpu fpv5-sp-d16
 2137              	xTaskResumeAll:
 2138              	.LFB20:
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2139              		.loc 1 2018 0
 2140              		.cfi_startproc
 2141              		@ args = 0, pretend = 0, frame = 0
 2142              		@ frame_needed = 0, uses_anonymous_args = 0
 2143 0000 38B5     		push	{r3, r4, r5, lr}
 2144              	.LCFI22:
 2145              		.cfi_def_cfa_offset 16
 2146              		.cfi_offset 3, -16
 2147              		.cfi_offset 4, -12
 2148              		.cfi_offset 5, -8
 2149              		.cfi_offset 14, -4
 2150              	.LVL177:
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2151              		.loc 1 2024 0
 2152 0002 364B     		ldr	r3, .L217
 2153 0004 1B68     		ldr	r3, [r3]
 2154 0006 53B9     		cbnz	r3, .L201
 2155              	.LBB124:
 2156              	.LBB125:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2157              		.loc 2 237 0
 2158              		.syntax unified
 2159              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2160 0008 4FF05003 			mov r3, #80												
 2161 000c 72B6     		cpsid i													
 2162 000e 83F31188 		msr basepri, r3											
 2163 0012 BFF36F8F 		isb														
 2164 0016 BFF34F8F 		dsb														
 2165 001a 62B6     		cpsie i													
 2166              	
 2167              	@ 0 "" 2
 2168              	.LVL178:
 2169              		.thumb
 2170              		.syntax unified
 2171              	.L202:
 2172 001c FEE7     		b	.L202
 2173              	.L201:
 2174              	.LBE125:
 2175              	.LBE124:
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2176              		.loc 1 2031 0
 2177 001e FFF7FEFF 		bl	vPortEnterCritical
 2178              	.LVL179:
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2179              		.loc 1 2033 0
 2180 0022 2E4B     		ldr	r3, .L217
 2181 0024 1A68     		ldr	r2, [r3]
 2182 0026 013A     		subs	r2, r2, #1
 2183 0028 1A60     		str	r2, [r3]
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 131


 2184              		.loc 1 2035 0
 2185 002a 1B68     		ldr	r3, [r3]
 2186 002c 002B     		cmp	r3, #0
 2187 002e 50D1     		bne	.L211
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2188              		.loc 1 2037 0
 2189 0030 2B4B     		ldr	r3, .L217+4
 2190 0032 1B68     		ldr	r3, [r3]
 2191 0034 23B9     		cbnz	r3, .L212
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2192              		.loc 1 2020 0
 2193 0036 0024     		movs	r4, #0
 2194              	.LVL180:
 2195              	.L203:
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2196              		.loc 1 2121 0
 2197 0038 FFF7FEFF 		bl	vPortExitCritical
 2198              	.LVL181:
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2199              		.loc 1 2124 0
 2200 003c 2046     		mov	r0, r4
 2201 003e 38BD     		pop	{r3, r4, r5, pc}
 2202              	.LVL182:
 2203              	.L212:
 2204 0040 0024     		movs	r4, #0
 2205              	.LVL183:
 2206              	.L204:
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2207              		.loc 1 2041 0
 2208 0042 284B     		ldr	r3, .L217+8
 2209 0044 1B68     		ldr	r3, [r3]
 2210 0046 1BB3     		cbz	r3, .L215
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2211              		.loc 1 2043 0
 2212 0048 264B     		ldr	r3, .L217+8
 2213 004a DB68     		ldr	r3, [r3, #12]
 2214 004c DC68     		ldr	r4, [r3, #12]
 2215              	.LVL184:
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2216              		.loc 1 2044 0
 2217 004e 04F11800 		add	r0, r4, #24
 2218 0052 FFF7FEFF 		bl	uxListRemove
 2219              	.LVL185:
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2220              		.loc 1 2045 0
 2221 0056 251D     		adds	r5, r4, #4
 2222 0058 2846     		mov	r0, r5
 2223 005a FFF7FEFF 		bl	uxListRemove
 2224              	.LVL186:
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2225              		.loc 1 2046 0
 2226 005e E36A     		ldr	r3, [r4, #44]
 2227 0060 0122     		movs	r2, #1
 2228 0062 9A40     		lsls	r2, r2, r3
 2229 0064 2049     		ldr	r1, .L217+12
 2230 0066 0868     		ldr	r0, [r1]
 2231 0068 0243     		orrs	r2, r2, r0
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 132


 2232 006a 0A60     		str	r2, [r1]
 2233 006c 03EB8303 		add	r3, r3, r3, lsl #2
 2234 0070 9A00     		lsls	r2, r3, #2
 2235 0072 2946     		mov	r1, r5
 2236 0074 1D48     		ldr	r0, .L217+16
 2237 0076 1044     		add	r0, r0, r2
 2238 0078 FFF7FEFF 		bl	vListInsertEnd
 2239              	.LVL187:
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2240              		.loc 1 2050 0
 2241 007c E26A     		ldr	r2, [r4, #44]
 2242 007e 1C4B     		ldr	r3, .L217+20
 2243 0080 1B68     		ldr	r3, [r3]
 2244 0082 DB6A     		ldr	r3, [r3, #44]
 2245 0084 9A42     		cmp	r2, r3
 2246 0086 DCD3     		bcc	.L204
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2247              		.loc 1 2052 0
 2248 0088 0122     		movs	r2, #1
 2249 008a 1A4B     		ldr	r3, .L217+24
 2250 008c 1A60     		str	r2, [r3]
 2251 008e D8E7     		b	.L204
 2252              	.L215:
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2253              		.loc 1 2060 0
 2254 0090 0CB1     		cbz	r4, .L207
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2255              		.loc 1 2068 0
 2256 0092 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2257              	.LVL188:
 2258              	.L207:
 2259              	.LBB126:
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2260              		.loc 1 2076 0
 2261 0096 184B     		ldr	r3, .L217+28
 2262 0098 1C68     		ldr	r4, [r3]
 2263              	.LVL189:
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2264              		.loc 1 2078 0
 2265 009a 74B9     		cbnz	r4, .L210
 2266              	.L208:
 2267              	.LBE126:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2268              		.loc 1 2101 0
 2269 009c 154B     		ldr	r3, .L217+24
 2270 009e 1B68     		ldr	r3, [r3]
 2271 00a0 CBB1     		cbz	r3, .L213
 2272              	.LVL190:
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2273              		.loc 1 2108 0
 2274 00a2 4FF08052 		mov	r2, #268435456
 2275 00a6 154B     		ldr	r3, .L217+32
 2276 00a8 1A60     		str	r2, [r3]
 2277              		.syntax unified
 2278              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2279 00aa BFF34F8F 		dsb
 2280              	@ 0 "" 2
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 133


 2281              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2282 00ae BFF36F8F 		isb
 2283              	@ 0 "" 2
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2284              		.loc 1 2105 0
 2285              		.thumb
 2286              		.syntax unified
 2287 00b2 0124     		movs	r4, #1
 2288              	.LVL191:
 2289 00b4 C0E7     		b	.L203
 2290              	.LVL192:
 2291              	.L209:
 2292              	.LBB127:
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2293              		.loc 1 2091 0
 2294 00b6 013C     		subs	r4, r4, #1
 2295              	.LVL193:
 2296 00b8 07D0     		beq	.L216
 2297              	.L210:
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2298              		.loc 1 2082 0
 2299 00ba FFF7FEFF 		bl	xTaskIncrementTick
 2300              	.LVL194:
 2301 00be 0028     		cmp	r0, #0
 2302 00c0 F9D0     		beq	.L209
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2303              		.loc 1 2084 0
 2304 00c2 0122     		movs	r2, #1
 2305 00c4 0B4B     		ldr	r3, .L217+24
 2306 00c6 1A60     		str	r2, [r3]
 2307 00c8 F5E7     		b	.L209
 2308              	.L216:
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2309              		.loc 1 2093 0
 2310 00ca 0022     		movs	r2, #0
 2311 00cc 0A4B     		ldr	r3, .L217+28
 2312 00ce 1A60     		str	r2, [r3]
 2313 00d0 E4E7     		b	.L208
 2314              	.LVL195:
 2315              	.L211:
 2316              	.LBE127:
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2317              		.loc 1 2020 0
 2318 00d2 0024     		movs	r4, #0
 2319 00d4 B0E7     		b	.L203
 2320              	.LVL196:
 2321              	.L213:
 2322 00d6 0024     		movs	r4, #0
 2323              	.LVL197:
 2324 00d8 AEE7     		b	.L203
 2325              	.L218:
 2326 00da 00BF     		.align	2
 2327              	.L217:
 2328 00dc 00000000 		.word	.LANCHOR16
 2329 00e0 00000000 		.word	.LANCHOR9
 2330 00e4 00000000 		.word	.LANCHOR1
 2331 00e8 00000000 		.word	.LANCHOR13
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 134


 2332 00ec 00000000 		.word	.LANCHOR4
 2333 00f0 00000000 		.word	.LANCHOR10
 2334 00f4 00000000 		.word	.LANCHOR20
 2335 00f8 00000000 		.word	.LANCHOR19
 2336 00fc 04ED00E0 		.word	-536810236
 2337              		.cfi_endproc
 2338              	.LFE20:
 2340              		.section	.text.vTaskDelay,"ax",%progbits
 2341              		.align	1
 2342              		.global	vTaskDelay
 2343              		.syntax unified
 2344              		.thumb
 2345              		.thumb_func
 2346              		.fpu fpv5-sp-d16
 2348              	vTaskDelay:
 2349              	.LFB9:
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2350              		.loc 1 1225 0
 2351              		.cfi_startproc
 2352              		@ args = 0, pretend = 0, frame = 0
 2353              		@ frame_needed = 0, uses_anonymous_args = 0
 2354              	.LVL198:
 2355 0000 10B5     		push	{r4, lr}
 2356              	.LCFI23:
 2357              		.cfi_def_cfa_offset 8
 2358              		.cfi_offset 4, -8
 2359              		.cfi_offset 14, -4
 2360              	.LVL199:
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2361              		.loc 1 1229 0
 2362 0002 B8B1     		cbz	r0, .L224
 2363 0004 0446     		mov	r4, r0
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2364              		.loc 1 1231 0
 2365 0006 114B     		ldr	r3, .L226
 2366 0008 1B68     		ldr	r3, [r3]
 2367 000a 53B1     		cbz	r3, .L221
 2368              	.LBB128:
 2369              	.LBB129:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2370              		.loc 2 237 0
 2371              		.syntax unified
 2372              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2373 000c 4FF05003 			mov r3, #80												
 2374 0010 72B6     		cpsid i													
 2375 0012 83F31188 		msr basepri, r3											
 2376 0016 BFF36F8F 		isb														
 2377 001a BFF34F8F 		dsb														
 2378 001e 62B6     		cpsie i													
 2379              	
 2380              	@ 0 "" 2
 2381              	.LVL200:
 2382              		.thumb
 2383              		.syntax unified
 2384              	.L222:
 2385 0020 FEE7     		b	.L222
 2386              	.L221:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 135


 2387              	.LBE129:
 2388              	.LBE128:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2389              		.loc 1 1232 0
 2390 0022 FFF7FEFF 		bl	vTaskSuspendAll
 2391              	.LVL201:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2392              		.loc 1 1243 0
 2393 0026 0021     		movs	r1, #0
 2394 0028 2046     		mov	r0, r4
 2395 002a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2396              	.LVL202:
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2397              		.loc 1 1245 0
 2398 002e FFF7FEFF 		bl	xTaskResumeAll
 2399              	.LVL203:
 2400 0032 00E0     		b	.L220
 2401              	.LVL204:
 2402              	.L224:
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2403              		.loc 1 1226 0
 2404 0034 0020     		movs	r0, #0
 2405              	.LVL205:
 2406              	.L220:
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2407              		.loc 1 1254 0
 2408 0036 38B9     		cbnz	r0, .L219
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2409              		.loc 1 1256 0
 2410 0038 4FF08052 		mov	r2, #268435456
 2411 003c 044B     		ldr	r3, .L226+4
 2412 003e 1A60     		str	r2, [r3]
 2413              		.syntax unified
 2414              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2415 0040 BFF34F8F 		dsb
 2416              	@ 0 "" 2
 2417              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2418 0044 BFF36F8F 		isb
 2419              	@ 0 "" 2
 2420              		.thumb
 2421              		.syntax unified
 2422              	.L219:
 2423 0048 10BD     		pop	{r4, pc}
 2424              	.L227:
 2425 004a 00BF     		.align	2
 2426              	.L226:
 2427 004c 00000000 		.word	.LANCHOR16
 2428 0050 04ED00E0 		.word	-536810236
 2429              		.cfi_endproc
 2430              	.LFE9:
 2432              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 2433              		.align	1
 2434              		.syntax unified
 2435              		.thumb
 2436              		.thumb_func
 2437              		.fpu fpv5-sp-d16
 2439              	prvCheckTasksWaitingTermination:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 136


 2440              	.LFB39:
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2441              		.loc 1 3366 0
 2442              		.cfi_startproc
 2443              		@ args = 0, pretend = 0, frame = 0
 2444              		@ frame_needed = 0, uses_anonymous_args = 0
 2445              	.LBB130:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2446              		.loc 1 3376 0
 2447 0000 134B     		ldr	r3, .L237
 2448 0002 1B68     		ldr	r3, [r3]
 2449 0004 13B3     		cbz	r3, .L235
 2450              	.LBE130:
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2451              		.loc 1 3366 0
 2452 0006 10B5     		push	{r4, lr}
 2453              	.LCFI24:
 2454              		.cfi_def_cfa_offset 8
 2455              		.cfi_offset 4, -8
 2456              		.cfi_offset 14, -4
 2457              	.L231:
 2458              	.LBB132:
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2459              		.loc 1 3378 0
 2460 0008 FFF7FEFF 		bl	vTaskSuspendAll
 2461              	.LVL206:
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2462              		.loc 1 3380 0
 2463 000c 114B     		ldr	r3, .L237+4
 2464 000e 1C68     		ldr	r4, [r3]
 2465              	.LVL207:
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2466              		.loc 1 3382 0
 2467 0010 FFF7FEFF 		bl	xTaskResumeAll
 2468              	.LVL208:
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2469              		.loc 1 3384 0
 2470 0014 24B9     		cbnz	r4, .L236
 2471              	.LVL209:
 2472              	.L230:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2473              		.loc 1 3376 0
 2474 0016 0E4B     		ldr	r3, .L237
 2475 0018 1B68     		ldr	r3, [r3]
 2476 001a 002B     		cmp	r3, #0
 2477 001c F4D1     		bne	.L231
 2478              	.LBE132:
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2479              		.loc 1 3406 0
 2480 001e 10BD     		pop	{r4, pc}
 2481              	.LVL210:
 2482              	.L236:
 2483              	.LBB133:
 2484              	.LBB131:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2485              		.loc 1 3388 0
 2486 0020 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 137


 2487              	.LVL211:
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2488              		.loc 1 3390 0
 2489 0024 0B4B     		ldr	r3, .L237+4
 2490 0026 DB68     		ldr	r3, [r3, #12]
 2491 0028 DC68     		ldr	r4, [r3, #12]
 2492              	.LVL212:
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 2493              		.loc 1 3391 0
 2494 002a 201D     		adds	r0, r4, #4
 2495 002c FFF7FEFF 		bl	uxListRemove
 2496              	.LVL213:
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 2497              		.loc 1 3392 0
 2498 0030 094A     		ldr	r2, .L237+8
 2499 0032 1368     		ldr	r3, [r2]
 2500 0034 013B     		subs	r3, r3, #1
 2501 0036 1360     		str	r3, [r2]
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2502              		.loc 1 3393 0
 2503 0038 054A     		ldr	r2, .L237
 2504 003a 1368     		ldr	r3, [r2]
 2505 003c 013B     		subs	r3, r3, #1
 2506 003e 1360     		str	r3, [r2]
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2507              		.loc 1 3395 0
 2508 0040 FFF7FEFF 		bl	vPortExitCritical
 2509              	.LVL214:
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2510              		.loc 1 3397 0
 2511 0044 2046     		mov	r0, r4
 2512 0046 FFF7FEFF 		bl	prvDeleteTCB
 2513              	.LVL215:
 2514              	.LBE131:
 2515 004a E4E7     		b	.L230
 2516              	.LVL216:
 2517              	.L235:
 2518              	.LCFI25:
 2519              		.cfi_def_cfa_offset 0
 2520              		.cfi_restore 4
 2521              		.cfi_restore 14
 2522 004c 7047     		bx	lr
 2523              	.L238:
 2524 004e 00BF     		.align	2
 2525              	.L237:
 2526 0050 00000000 		.word	.LANCHOR15
 2527 0054 00000000 		.word	.LANCHOR7
 2528 0058 00000000 		.word	.LANCHOR9
 2529              	.LBE133:
 2530              		.cfi_endproc
 2531              	.LFE39:
 2533              		.section	.text.prvIdleTask,"ax",%progbits
 2534              		.align	1
 2535              		.syntax unified
 2536              		.thumb
 2537              		.thumb_func
 2538              		.fpu fpv5-sp-d16
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 138


 2540              	prvIdleTask:
 2541              	.LFB37:
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 2542              		.loc 1 3132 0
 2543              		.cfi_startproc
 2544              		@ Volatile: function does not return.
 2545              		@ args = 0, pretend = 0, frame = 0
 2546              		@ frame_needed = 0, uses_anonymous_args = 0
 2547              	.LVL217:
 2548 0000 08B5     		push	{r3, lr}
 2549              	.LCFI26:
 2550              		.cfi_def_cfa_offset 8
 2551              		.cfi_offset 3, -8
 2552              		.cfi_offset 14, -4
 2553 0002 01E0     		b	.L241
 2554              	.LVL218:
 2555              	.L240:
 2556              	.LBB134:
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2557              		.loc 1 3186 0
 2558 0004 FFF7FEFF 		bl	vApplicationIdleHook
 2559              	.LVL219:
 2560              	.L241:
 2561              	.LBE134:
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2562              		.loc 1 3143 0
 2563 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 2564              	.LVL220:
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2565              		.loc 1 3166 0
 2566 000c 064B     		ldr	r3, .L243
 2567 000e 1B68     		ldr	r3, [r3]
 2568 0010 012B     		cmp	r3, #1
 2569 0012 F7D9     		bls	.L240
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2570              		.loc 1 3168 0
 2571 0014 4FF08052 		mov	r2, #268435456
 2572 0018 044B     		ldr	r3, .L243+4
 2573 001a 1A60     		str	r2, [r3]
 2574              		.syntax unified
 2575              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2576 001c BFF34F8F 		dsb
 2577              	@ 0 "" 2
 2578              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2579 0020 BFF36F8F 		isb
 2580              	@ 0 "" 2
 2581              		.thumb
 2582              		.syntax unified
 2583 0024 EEE7     		b	.L240
 2584              	.L244:
 2585 0026 00BF     		.align	2
 2586              	.L243:
 2587 0028 00000000 		.word	.LANCHOR4
 2588 002c 04ED00E0 		.word	-536810236
 2589              		.cfi_endproc
 2590              	.LFE37:
 2592              		.section	.text.vTaskSetApplicationTaskTag,"ax",%progbits
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 139


 2593              		.align	1
 2594              		.global	vTaskSetApplicationTaskTag
 2595              		.syntax unified
 2596              		.thumb
 2597              		.thumb_func
 2598              		.fpu fpv5-sp-d16
 2600              	vTaskSetApplicationTaskTag:
 2601              	.LFB26:
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
 2602              		.loc 1 2674 0
 2603              		.cfi_startproc
 2604              		@ args = 0, pretend = 0, frame = 0
 2605              		@ frame_needed = 0, uses_anonymous_args = 0
 2606              	.LVL221:
 2607 0000 38B5     		push	{r3, r4, r5, lr}
 2608              	.LCFI27:
 2609              		.cfi_def_cfa_offset 16
 2610              		.cfi_offset 3, -16
 2611              		.cfi_offset 4, -12
 2612              		.cfi_offset 5, -8
 2613              		.cfi_offset 14, -4
 2614 0002 0D46     		mov	r5, r1
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2615              		.loc 1 2679 0
 2616 0004 0446     		mov	r4, r0
 2617 0006 28B1     		cbz	r0, .L249
 2618              	.L246:
 2619              	.LVL222:
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
 2620              		.loc 1 2690 0
 2621 0008 FFF7FEFF 		bl	vPortEnterCritical
 2622              	.LVL223:
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 2623              		.loc 1 2691 0
 2624 000c E564     		str	r5, [r4, #76]
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2625              		.loc 1 2692 0
 2626 000e FFF7FEFF 		bl	vPortExitCritical
 2627              	.LVL224:
 2628 0012 38BD     		pop	{r3, r4, r5, pc}
 2629              	.LVL225:
 2630              	.L249:
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2631              		.loc 1 2681 0
 2632 0014 014B     		ldr	r3, .L250
 2633 0016 1C68     		ldr	r4, [r3]
 2634              	.LVL226:
 2635 0018 F6E7     		b	.L246
 2636              	.L251:
 2637 001a 00BF     		.align	2
 2638              	.L250:
 2639 001c 00000000 		.word	.LANCHOR10
 2640              		.cfi_endproc
 2641              	.LFE26:
 2643              		.section	.text.xTaskGetApplicationTaskTag,"ax",%progbits
 2644              		.align	1
 2645              		.global	xTaskGetApplicationTaskTag
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 140


 2646              		.syntax unified
 2647              		.thumb
 2648              		.thumb_func
 2649              		.fpu fpv5-sp-d16
 2651              	xTaskGetApplicationTaskTag:
 2652              	.LFB27:
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
 2653              		.loc 1 2701 0
 2654              		.cfi_startproc
 2655              		@ args = 0, pretend = 0, frame = 0
 2656              		@ frame_needed = 0, uses_anonymous_args = 0
 2657              	.LVL227:
 2658 0000 10B5     		push	{r4, lr}
 2659              	.LCFI28:
 2660              		.cfi_def_cfa_offset 8
 2661              		.cfi_offset 4, -8
 2662              		.cfi_offset 14, -4
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2663              		.loc 1 2706 0
 2664 0002 0446     		mov	r4, r0
 2665 0004 30B1     		cbz	r0, .L256
 2666              	.L253:
 2667              	.LVL228:
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2668              		.loc 1 2717 0
 2669 0006 FFF7FEFF 		bl	vPortEnterCritical
 2670              	.LVL229:
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2671              		.loc 1 2719 0
 2672 000a E46C     		ldr	r4, [r4, #76]
 2673              	.LVL230:
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2674              		.loc 1 2721 0
 2675 000c FFF7FEFF 		bl	vPortExitCritical
 2676              	.LVL231:
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2677              		.loc 1 2724 0
 2678 0010 2046     		mov	r0, r4
 2679 0012 10BD     		pop	{r4, pc}
 2680              	.LVL232:
 2681              	.L256:
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2682              		.loc 1 2708 0
 2683 0014 014B     		ldr	r3, .L257
 2684 0016 1C68     		ldr	r4, [r3]
 2685              	.LVL233:
 2686 0018 F5E7     		b	.L253
 2687              	.L258:
 2688 001a 00BF     		.align	2
 2689              	.L257:
 2690 001c 00000000 		.word	.LANCHOR10
 2691              		.cfi_endproc
 2692              	.LFE27:
 2694              		.section	.text.xTaskCallApplicationTaskHook,"ax",%progbits
 2695              		.align	1
 2696              		.global	xTaskCallApplicationTaskHook
 2697              		.syntax unified
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 141


 2698              		.thumb
 2699              		.thumb_func
 2700              		.fpu fpv5-sp-d16
 2702              	xTaskCallApplicationTaskHook:
 2703              	.LFB28:
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
 2704              		.loc 1 2732 0
 2705              		.cfi_startproc
 2706              		@ args = 0, pretend = 0, frame = 0
 2707              		@ frame_needed = 0, uses_anonymous_args = 0
 2708              	.LVL234:
 2709 0000 08B5     		push	{r3, lr}
 2710              	.LCFI29:
 2711              		.cfi_def_cfa_offset 8
 2712              		.cfi_offset 3, -8
 2713              		.cfi_offset 14, -4
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2714              		.loc 1 2737 0
 2715 0002 0346     		mov	r3, r0
 2716 0004 20B1     		cbz	r0, .L265
 2717              	.L260:
 2718              	.LVL235:
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2719              		.loc 1 2746 0
 2720 0006 DB6C     		ldr	r3, [r3, #76]
 2721              	.LVL236:
 2722 0008 2BB1     		cbz	r3, .L263
 2723 000a 0846     		mov	r0, r1
 2724              	.LVL237:
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2725              		.loc 1 2748 0
 2726 000c 9847     		blx	r3
 2727              	.LVL238:
 2728 000e 08BD     		pop	{r3, pc}
 2729              	.LVL239:
 2730              	.L265:
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2731              		.loc 1 2739 0
 2732 0010 024B     		ldr	r3, .L266
 2733 0012 1B68     		ldr	r3, [r3]
 2734              	.LVL240:
 2735 0014 F7E7     		b	.L260
 2736              	.LVL241:
 2737              	.L263:
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2738              		.loc 1 2752 0
 2739 0016 0020     		movs	r0, #0
 2740              	.LVL242:
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2741              		.loc 1 2756 0
 2742 0018 08BD     		pop	{r3, pc}
 2743              	.L267:
 2744 001a 00BF     		.align	2
 2745              	.L266:
 2746 001c 00000000 		.word	.LANCHOR10
 2747              		.cfi_endproc
 2748              	.LFE28:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 142


 2750              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2751              		.align	1
 2752              		.global	vTaskSwitchContext
 2753              		.syntax unified
 2754              		.thumb
 2755              		.thumb_func
 2756              		.fpu fpv5-sp-d16
 2758              	vTaskSwitchContext:
 2759              	.LFB29:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2760              		.loc 1 2762 0
 2761              		.cfi_startproc
 2762              		@ args = 0, pretend = 0, frame = 0
 2763              		@ frame_needed = 0, uses_anonymous_args = 0
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2764              		.loc 1 2763 0
 2765 0000 2E4B     		ldr	r3, .L282
 2766 0002 1B68     		ldr	r3, [r3]
 2767 0004 63BB     		cbnz	r3, .L279
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2768              		.loc 1 2762 0
 2769 0006 10B5     		push	{r4, lr}
 2770              	.LCFI30:
 2771              		.cfi_def_cfa_offset 8
 2772              		.cfi_offset 4, -8
 2773              		.cfi_offset 14, -4
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2774              		.loc 1 2771 0
 2775 0008 0022     		movs	r2, #0
 2776 000a 2D4B     		ldr	r3, .L282+4
 2777 000c 1A60     		str	r2, [r3]
 2778              	.LBB135:
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2779              		.loc 1 2802 0
 2780 000e 2D4B     		ldr	r3, .L282+8
 2781 0010 1B68     		ldr	r3, [r3]
 2782 0012 1B6B     		ldr	r3, [r3, #48]
 2783              	.LVL243:
 2784 0014 1A68     		ldr	r2, [r3]
 2785 0016 B2F1A53F 		cmp	r2, #-1515870811
 2786 001a 03D1     		bne	.L271
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2787              		.loc 1 2802 0 is_stmt 0 discriminator 2
 2788 001c 5A68     		ldr	r2, [r3, #4]
 2789 001e B2F1A53F 		cmp	r2, #-1515870811
 2790 0022 21D0     		beq	.L280
 2791              	.LVL244:
 2792              	.L271:
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2793              		.loc 1 2802 0 discriminator 7
 2794 0024 274B     		ldr	r3, .L282+8
 2795 0026 1868     		ldr	r0, [r3]
 2796 0028 1968     		ldr	r1, [r3]
 2797 002a 3431     		adds	r1, r1, #52
 2798 002c FFF7FEFF 		bl	vApplicationStackOverflowHook
 2799              	.LVL245:
 2800              	.L272:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 143


 2801              	.LBE135:
 2802              	.LBB136:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2803              		.loc 1 2806 0 is_stmt 1
 2804 0030 254B     		ldr	r3, .L282+12
 2805 0032 1B68     		ldr	r3, [r3]
 2806              	.LVL246:
 2807              	.LBB137:
 2808              	.LBB138:
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 2809              		.loc 2 176 0
 2810              		.syntax unified
 2811              	@ 176 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2812 0034 B3FA83F3 		clz r3, r3
 2813              	@ 0 "" 2
 2814              	.LVL247:
 2815              		.thumb
 2816              		.syntax unified
 2817 0038 DBB2     		uxtb	r3, r3
 2818              	.LBE138:
 2819              	.LBE137:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2820              		.loc 1 2806 0
 2821 003a C3F11F03 		rsb	r3, r3, #31
 2822              	.LVL248:
 2823 003e 03EB8301 		add	r1, r3, r3, lsl #2
 2824 0042 8A00     		lsls	r2, r1, #2
 2825 0044 2149     		ldr	r1, .L282+16
 2826 0046 8A58     		ldr	r2, [r1, r2]
 2827 0048 BAB9     		cbnz	r2, .L273
 2828              	.LBB139:
 2829              	.LBB140:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2830              		.loc 2 237 0
 2831              		.syntax unified
 2832              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2833 004a 4FF05003 			mov r3, #80												
 2834 004e 72B6     		cpsid i													
 2835 0050 83F31188 		msr basepri, r3											
 2836 0054 BFF36F8F 		isb														
 2837 0058 BFF34F8F 		dsb														
 2838 005c 62B6     		cpsie i													
 2839              	
 2840              	@ 0 "" 2
 2841              	.LVL249:
 2842              		.thumb
 2843              		.syntax unified
 2844              	.L274:
 2845 005e FEE7     		b	.L274
 2846              	.LVL250:
 2847              	.L279:
 2848              	.LCFI31:
 2849              		.cfi_def_cfa_offset 0
 2850              		.cfi_restore 4
 2851              		.cfi_restore 14
 2852              	.LBE140:
 2853              	.LBE139:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 144


 2854              	.LBE136:
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2855              		.loc 1 2767 0
 2856 0060 0122     		movs	r2, #1
 2857 0062 174B     		ldr	r3, .L282+4
 2858 0064 1A60     		str	r2, [r3]
 2859 0066 7047     		bx	lr
 2860              	.LVL251:
 2861              	.L280:
 2862              	.LCFI32:
 2863              		.cfi_def_cfa_offset 8
 2864              		.cfi_offset 4, -8
 2865              		.cfi_offset 14, -4
 2866              	.LBB142:
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2867              		.loc 1 2802 0 discriminator 4
 2868 0068 9A68     		ldr	r2, [r3, #8]
 2869 006a B2F1A53F 		cmp	r2, #-1515870811
 2870 006e D9D1     		bne	.L271
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2871              		.loc 1 2802 0 is_stmt 0 discriminator 6
 2872 0070 DB68     		ldr	r3, [r3, #12]
 2873              	.LVL252:
 2874 0072 B3F1A53F 		cmp	r3, #-1515870811
 2875 0076 D5D1     		bne	.L271
 2876 0078 DAE7     		b	.L272
 2877              	.LVL253:
 2878              	.L273:
 2879              	.LBE142:
 2880              	.LBB143:
 2881              	.LBB141:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2882              		.loc 1 2806 0 is_stmt 1 discriminator 2
 2883 007a 1448     		ldr	r0, .L282+16
 2884 007c 9A00     		lsls	r2, r3, #2
 2885 007e D418     		adds	r4, r2, r3
 2886 0080 A100     		lsls	r1, r4, #2
 2887 0082 0144     		add	r1, r1, r0
 2888 0084 4C68     		ldr	r4, [r1, #4]
 2889 0086 6468     		ldr	r4, [r4, #4]
 2890 0088 4C60     		str	r4, [r1, #4]
 2891 008a 1A44     		add	r2, r2, r3
 2892 008c 9100     		lsls	r1, r2, #2
 2893 008e 0831     		adds	r1, r1, #8
 2894 0090 0844     		add	r0, r0, r1
 2895 0092 8442     		cmp	r4, r0
 2896 0094 09D0     		beq	.L281
 2897              	.L275:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2898              		.loc 1 2806 0 is_stmt 0 discriminator 5
 2899 0096 03EB8303 		add	r3, r3, r3, lsl #2
 2900              	.LVL254:
 2901 009a 9A00     		lsls	r2, r3, #2
 2902 009c 0B4B     		ldr	r3, .L282+16
 2903 009e 1344     		add	r3, r3, r2
 2904 00a0 5B68     		ldr	r3, [r3, #4]
 2905 00a2 DA68     		ldr	r2, [r3, #12]
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 145


 2906 00a4 074B     		ldr	r3, .L282+8
 2907 00a6 1A60     		str	r2, [r3]
 2908 00a8 10BD     		pop	{r4, pc}
 2909              	.LVL255:
 2910              	.L281:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2911              		.loc 1 2806 0 discriminator 3
 2912 00aa 6068     		ldr	r0, [r4, #4]
 2913 00ac 03EB8302 		add	r2, r3, r3, lsl #2
 2914 00b0 9100     		lsls	r1, r2, #2
 2915 00b2 064A     		ldr	r2, .L282+16
 2916 00b4 0A44     		add	r2, r2, r1
 2917 00b6 5060     		str	r0, [r2, #4]
 2918 00b8 EDE7     		b	.L275
 2919              	.L283:
 2920 00ba 00BF     		.align	2
 2921              	.L282:
 2922 00bc 00000000 		.word	.LANCHOR16
 2923 00c0 00000000 		.word	.LANCHOR20
 2924 00c4 00000000 		.word	.LANCHOR10
 2925 00c8 00000000 		.word	.LANCHOR13
 2926 00cc 00000000 		.word	.LANCHOR4
 2927              	.LBE141:
 2928              	.LBE143:
 2929              		.cfi_endproc
 2930              	.LFE29:
 2932              		.section	.text.vTaskSuspend,"ax",%progbits
 2933              		.align	1
 2934              		.global	vTaskSuspend
 2935              		.syntax unified
 2936              		.thumb
 2937              		.thumb_func
 2938              		.fpu fpv5-sp-d16
 2940              	vTaskSuspend:
 2941              	.LFB13:
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2942              		.loc 1 1567 0 is_stmt 1
 2943              		.cfi_startproc
 2944              		@ args = 0, pretend = 0, frame = 0
 2945              		@ frame_needed = 0, uses_anonymous_args = 0
 2946              	.LVL256:
 2947 0000 38B5     		push	{r3, r4, r5, lr}
 2948              	.LCFI33:
 2949              		.cfi_def_cfa_offset 16
 2950              		.cfi_offset 3, -16
 2951              		.cfi_offset 4, -12
 2952              		.cfi_offset 5, -8
 2953              		.cfi_offset 14, -4
 2954 0002 0446     		mov	r4, r0
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2955              		.loc 1 1570 0
 2956 0004 FFF7FEFF 		bl	vPortEnterCritical
 2957              	.LVL257:
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2958              		.loc 1 1574 0
 2959 0008 3CB3     		cbz	r4, .L296
 2960              	.LVL258:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 146


 2961              	.L285:
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2962              		.loc 1 1580 0 discriminator 4
 2963 000a 251D     		adds	r5, r4, #4
 2964 000c 2846     		mov	r0, r5
 2965 000e FFF7FEFF 		bl	uxListRemove
 2966              	.LVL259:
 2967 0012 70B9     		cbnz	r0, .L286
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2968              		.loc 1 1582 0
 2969 0014 E26A     		ldr	r2, [r4, #44]
 2970 0016 02EB8201 		add	r1, r2, r2, lsl #2
 2971 001a 8B00     		lsls	r3, r1, #2
 2972 001c 2749     		ldr	r1, .L299
 2973 001e CB58     		ldr	r3, [r1, r3]
 2974 0020 3BB9     		cbnz	r3, .L286
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2975              		.loc 1 1582 0 is_stmt 0 discriminator 1
 2976 0022 0123     		movs	r3, #1
 2977 0024 03FA02F2 		lsl	r2, r3, r2
 2978 0028 2549     		ldr	r1, .L299+4
 2979 002a 0B68     		ldr	r3, [r1]
 2980 002c 23EA0203 		bic	r3, r3, r2
 2981 0030 0B60     		str	r3, [r1]
 2982              	.L286:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2983              		.loc 1 1590 0 is_stmt 1
 2984 0032 A36A     		ldr	r3, [r4, #40]
 2985 0034 1BB1     		cbz	r3, .L287
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2986              		.loc 1 1592 0
 2987 0036 04F11800 		add	r0, r4, #24
 2988 003a FFF7FEFF 		bl	uxListRemove
 2989              	.LVL260:
 2990              	.L287:
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2991              		.loc 1 1599 0
 2992 003e 2946     		mov	r1, r5
 2993 0040 2048     		ldr	r0, .L299+8
 2994 0042 FFF7FEFF 		bl	vListInsertEnd
 2995              	.LVL261:
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2996              		.loc 1 1601 0
 2997 0046 FFF7FEFF 		bl	vPortExitCritical
 2998              	.LVL262:
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2999              		.loc 1 1603 0
 3000 004a 1F4B     		ldr	r3, .L299+12
 3001 004c 1B68     		ldr	r3, [r3]
 3002 004e 3BB9     		cbnz	r3, .L297
 3003              	.L288:
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3004              		.loc 1 1618 0
 3005 0050 1E4B     		ldr	r3, .L299+16
 3006 0052 1B68     		ldr	r3, [r3]
 3007 0054 9C42     		cmp	r4, r3
 3008 0056 0AD0     		beq	.L298
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 147


 3009              	.L284:
 3010 0058 38BD     		pop	{r3, r4, r5, pc}
 3011              	.LVL263:
 3012              	.L296:
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3013              		.loc 1 1574 0 discriminator 1
 3014 005a 1C4B     		ldr	r3, .L299+16
 3015 005c 1C68     		ldr	r4, [r3]
 3016              	.LVL264:
 3017 005e D4E7     		b	.L285
 3018              	.LVL265:
 3019              	.L297:
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3020              		.loc 1 1607 0
 3021 0060 FFF7FEFF 		bl	vPortEnterCritical
 3022              	.LVL266:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3023              		.loc 1 1609 0
 3024 0064 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3025              	.LVL267:
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3026              		.loc 1 1611 0
 3027 0068 FFF7FEFF 		bl	vPortExitCritical
 3028              	.LVL268:
 3029 006c F0E7     		b	.L288
 3030              	.L298:
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3031              		.loc 1 1620 0
 3032 006e 164B     		ldr	r3, .L299+12
 3033 0070 1B68     		ldr	r3, [r3]
 3034 0072 B3B1     		cbz	r3, .L290
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3035              		.loc 1 1623 0
 3036 0074 164B     		ldr	r3, .L299+20
 3037 0076 1B68     		ldr	r3, [r3]
 3038 0078 53B1     		cbz	r3, .L291
 3039              	.LBB144:
 3040              	.LBB145:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3041              		.loc 2 237 0
 3042              		.syntax unified
 3043              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3044 007a 4FF05003 			mov r3, #80												
 3045 007e 72B6     		cpsid i													
 3046 0080 83F31188 		msr basepri, r3											
 3047 0084 BFF36F8F 		isb														
 3048 0088 BFF34F8F 		dsb														
 3049 008c 62B6     		cpsie i													
 3050              	
 3051              	@ 0 "" 2
 3052              	.LVL269:
 3053              		.thumb
 3054              		.syntax unified
 3055              	.L292:
 3056 008e FEE7     		b	.L292
 3057              	.L291:
 3058              	.LBE145:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 148


 3059              	.LBE144:
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3060              		.loc 1 1624 0
 3061 0090 4FF08052 		mov	r2, #268435456
 3062 0094 0F4B     		ldr	r3, .L299+24
 3063 0096 1A60     		str	r2, [r3]
 3064              		.syntax unified
 3065              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3066 0098 BFF34F8F 		dsb
 3067              	@ 0 "" 2
 3068              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3069 009c BFF36F8F 		isb
 3070              	@ 0 "" 2
 3071              		.thumb
 3072              		.syntax unified
 3073 00a0 38BD     		pop	{r3, r4, r5, pc}
 3074              	.LVL270:
 3075              	.L290:
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3076              		.loc 1 1631 0
 3077 00a2 084B     		ldr	r3, .L299+8
 3078 00a4 1A68     		ldr	r2, [r3]
 3079 00a6 0C4B     		ldr	r3, .L299+28
 3080 00a8 1B68     		ldr	r3, [r3]
 3081 00aa 9A42     		cmp	r2, r3
 3082 00ac 03D1     		bne	.L293
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3083              		.loc 1 1637 0
 3084 00ae 0022     		movs	r2, #0
 3085 00b0 064B     		ldr	r3, .L299+16
 3086 00b2 1A60     		str	r2, [r3]
 3087 00b4 38BD     		pop	{r3, r4, r5, pc}
 3088              	.LVL271:
 3089              	.L293:
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3090              		.loc 1 1641 0
 3091 00b6 FFF7FEFF 		bl	vTaskSwitchContext
 3092              	.LVL272:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3093              		.loc 1 1649 0
 3094 00ba CDE7     		b	.L284
 3095              	.L300:
 3096              		.align	2
 3097              	.L299:
 3098 00bc 00000000 		.word	.LANCHOR4
 3099 00c0 00000000 		.word	.LANCHOR13
 3100 00c4 00000000 		.word	.LANCHOR0
 3101 00c8 00000000 		.word	.LANCHOR11
 3102 00cc 00000000 		.word	.LANCHOR10
 3103 00d0 00000000 		.word	.LANCHOR16
 3104 00d4 04ED00E0 		.word	-536810236
 3105 00d8 00000000 		.word	.LANCHOR9
 3106              		.cfi_endproc
 3107              	.LFE13:
 3109              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3110              		.align	1
 3111              		.global	vTaskPlaceOnEventList
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 149


 3112              		.syntax unified
 3113              		.thumb
 3114              		.thumb_func
 3115              		.fpu fpv5-sp-d16
 3117              	vTaskPlaceOnEventList:
 3118              	.LFB30:
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3119              		.loc 1 2821 0
 3120              		.cfi_startproc
 3121              		@ args = 0, pretend = 0, frame = 0
 3122              		@ frame_needed = 0, uses_anonymous_args = 0
 3123              	.LVL273:
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3124              		.loc 1 2822 0
 3125 0000 50B9     		cbnz	r0, .L302
 3126              	.LBB146:
 3127              	.LBB147:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3128              		.loc 2 237 0
 3129              		.syntax unified
 3130              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3131 0002 4FF05003 			mov r3, #80												
 3132 0006 72B6     		cpsid i													
 3133 0008 83F31188 		msr basepri, r3											
 3134 000c BFF36F8F 		isb														
 3135 0010 BFF34F8F 		dsb														
 3136 0014 62B6     		cpsie i													
 3137              	
 3138              	@ 0 "" 2
 3139              	.LVL274:
 3140              		.thumb
 3141              		.syntax unified
 3142              	.L303:
 3143 0016 FEE7     		b	.L303
 3144              	.L302:
 3145              	.LBE147:
 3146              	.LBE146:
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3147              		.loc 1 2821 0
 3148 0018 10B5     		push	{r4, lr}
 3149              	.LCFI34:
 3150              		.cfi_def_cfa_offset 8
 3151              		.cfi_offset 4, -8
 3152              		.cfi_offset 14, -4
 3153 001a 0C46     		mov	r4, r1
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3154              		.loc 1 2831 0
 3155 001c 044B     		ldr	r3, .L306
 3156 001e 1968     		ldr	r1, [r3]
 3157              	.LVL275:
 3158 0020 1831     		adds	r1, r1, #24
 3159 0022 FFF7FEFF 		bl	vListInsert
 3160              	.LVL276:
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3161              		.loc 1 2833 0
 3162 0026 0121     		movs	r1, #1
 3163 0028 2046     		mov	r0, r4
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 150


 3164 002a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3165              	.LVL277:
 3166 002e 10BD     		pop	{r4, pc}
 3167              	.LVL278:
 3168              	.L307:
 3169              		.align	2
 3170              	.L306:
 3171 0030 00000000 		.word	.LANCHOR10
 3172              		.cfi_endproc
 3173              	.LFE30:
 3175              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3176              		.align	1
 3177              		.global	vTaskPlaceOnUnorderedEventList
 3178              		.syntax unified
 3179              		.thumb
 3180              		.thumb_func
 3181              		.fpu fpv5-sp-d16
 3183              	vTaskPlaceOnUnorderedEventList:
 3184              	.LFB31:
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3185              		.loc 1 2838 0
 3186              		.cfi_startproc
 3187              		@ args = 0, pretend = 0, frame = 0
 3188              		@ frame_needed = 0, uses_anonymous_args = 0
 3189              	.LVL279:
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3190              		.loc 1 2839 0
 3191 0000 70B1     		cbz	r0, .L315
 3192 0002 0346     		mov	r3, r0
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3193              		.loc 1 2843 0
 3194 0004 1548     		ldr	r0, .L316
 3195              	.LVL280:
 3196 0006 0068     		ldr	r0, [r0]
 3197 0008 A8B9     		cbnz	r0, .L311
 3198              	.LBB148:
 3199              	.LBB149:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3200              		.loc 2 237 0
 3201              		.syntax unified
 3202              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3203 000a 4FF05003 			mov r3, #80												
 3204 000e 72B6     		cpsid i													
 3205 0010 83F31188 		msr basepri, r3											
 3206 0014 BFF36F8F 		isb														
 3207 0018 BFF34F8F 		dsb														
 3208 001c 62B6     		cpsie i													
 3209              	
 3210              	@ 0 "" 2
 3211              	.LVL281:
 3212              		.thumb
 3213              		.syntax unified
 3214              	.L312:
 3215 001e FEE7     		b	.L312
 3216              	.LVL282:
 3217              	.L315:
 3218              	.LBE149:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 151


 3219              	.LBE148:
 3220              	.LBB150:
 3221              	.LBB151:
 3222              		.syntax unified
 3223              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3224 0020 4FF05003 			mov r3, #80												
 3225 0024 72B6     		cpsid i													
 3226 0026 83F31188 		msr basepri, r3											
 3227 002a BFF36F8F 		isb														
 3228 002e BFF34F8F 		dsb														
 3229 0032 62B6     		cpsie i													
 3230              	
 3231              	@ 0 "" 2
 3232              	.LVL283:
 3233              		.thumb
 3234              		.syntax unified
 3235              	.L310:
 3236 0034 FEE7     		b	.L310
 3237              	.LVL284:
 3238              	.L311:
 3239              	.LBE151:
 3240              	.LBE150:
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3241              		.loc 1 2838 0
 3242 0036 10B5     		push	{r4, lr}
 3243              	.LCFI35:
 3244              		.cfi_def_cfa_offset 8
 3245              		.cfi_offset 4, -8
 3246              		.cfi_offset 14, -4
 3247 0038 1846     		mov	r0, r3
 3248 003a 1446     		mov	r4, r2
 3249 003c 0B46     		mov	r3, r1
 3250              	.LVL285:
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3251              		.loc 1 2848 0
 3252 003e 084A     		ldr	r2, .L316+4
 3253              	.LVL286:
 3254 0040 1168     		ldr	r1, [r2]
 3255              	.LVL287:
 3256 0042 43F00043 		orr	r3, r3, #-2147483648
 3257              	.LVL288:
 3258 0046 8B61     		str	r3, [r1, #24]
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3259              		.loc 1 2855 0
 3260 0048 1168     		ldr	r1, [r2]
 3261 004a 1831     		adds	r1, r1, #24
 3262 004c FFF7FEFF 		bl	vListInsertEnd
 3263              	.LVL289:
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3264              		.loc 1 2857 0
 3265 0050 0121     		movs	r1, #1
 3266 0052 2046     		mov	r0, r4
 3267 0054 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3268              	.LVL290:
 3269 0058 10BD     		pop	{r4, pc}
 3270              	.LVL291:
 3271              	.L317:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 152


 3272 005a 00BF     		.align	2
 3273              	.L316:
 3274 005c 00000000 		.word	.LANCHOR16
 3275 0060 00000000 		.word	.LANCHOR10
 3276              		.cfi_endproc
 3277              	.LFE31:
 3279              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3280              		.align	1
 3281              		.global	xTaskRemoveFromEventList
 3282              		.syntax unified
 3283              		.thumb
 3284              		.thumb_func
 3285              		.fpu fpv5-sp-d16
 3287              	xTaskRemoveFromEventList:
 3288              	.LFB32:
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3289              		.loc 1 2895 0
 3290              		.cfi_startproc
 3291              		@ args = 0, pretend = 0, frame = 0
 3292              		@ frame_needed = 0, uses_anonymous_args = 0
 3293              	.LVL292:
 3294 0000 38B5     		push	{r3, r4, r5, lr}
 3295              	.LCFI36:
 3296              		.cfi_def_cfa_offset 16
 3297              		.cfi_offset 3, -16
 3298              		.cfi_offset 4, -12
 3299              		.cfi_offset 5, -8
 3300              		.cfi_offset 14, -4
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3301              		.loc 1 2912 0
 3302 0002 C368     		ldr	r3, [r0, #12]
 3303 0004 DC68     		ldr	r4, [r3, #12]
 3304              	.LVL293:
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3305              		.loc 1 2913 0
 3306 0006 24B3     		cbz	r4, .L326
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3307              		.loc 1 2914 0
 3308 0008 04F11805 		add	r5, r4, #24
 3309 000c 2846     		mov	r0, r5
 3310              	.LVL294:
 3311 000e FFF7FEFF 		bl	uxListRemove
 3312              	.LVL295:
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3313              		.loc 1 2916 0
 3314 0012 194B     		ldr	r3, .L327
 3315 0014 1B68     		ldr	r3, [r3]
 3316 0016 3BBB     		cbnz	r3, .L321
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3317              		.loc 1 2918 0
 3318 0018 251D     		adds	r5, r4, #4
 3319 001a 2846     		mov	r0, r5
 3320 001c FFF7FEFF 		bl	uxListRemove
 3321              	.LVL296:
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3322              		.loc 1 2919 0
 3323 0020 E36A     		ldr	r3, [r4, #44]
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 153


 3324 0022 0122     		movs	r2, #1
 3325 0024 9A40     		lsls	r2, r2, r3
 3326 0026 1549     		ldr	r1, .L327+4
 3327 0028 0868     		ldr	r0, [r1]
 3328 002a 0243     		orrs	r2, r2, r0
 3329 002c 0A60     		str	r2, [r1]
 3330 002e 03EB8303 		add	r3, r3, r3, lsl #2
 3331 0032 9A00     		lsls	r2, r3, #2
 3332 0034 2946     		mov	r1, r5
 3333 0036 1248     		ldr	r0, .L327+8
 3334 0038 1044     		add	r0, r0, r2
 3335 003a FFF7FEFF 		bl	vListInsertEnd
 3336              	.LVL297:
 3337              	.L322:
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3338              		.loc 1 2928 0
 3339 003e E26A     		ldr	r2, [r4, #44]
 3340 0040 104B     		ldr	r3, .L327+12
 3341 0042 1B68     		ldr	r3, [r3]
 3342 0044 DB6A     		ldr	r3, [r3, #44]
 3343 0046 9A42     		cmp	r2, r3
 3344 0048 13D9     		bls	.L324
 3345              	.LVL298:
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3346              		.loc 1 2937 0
 3347 004a 0120     		movs	r0, #1
 3348 004c 0E4B     		ldr	r3, .L327+16
 3349 004e 1860     		str	r0, [r3]
 3350 0050 38BD     		pop	{r3, r4, r5, pc}
 3351              	.LVL299:
 3352              	.L326:
 3353              	.LBB152:
 3354              	.LBB153:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3355              		.loc 2 237 0
 3356              		.syntax unified
 3357              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3358 0052 4FF05003 			mov r3, #80												
 3359 0056 72B6     		cpsid i													
 3360 0058 83F31188 		msr basepri, r3											
 3361 005c BFF36F8F 		isb														
 3362 0060 BFF34F8F 		dsb														
 3363 0064 62B6     		cpsie i													
 3364              	
 3365              	@ 0 "" 2
 3366              	.LVL300:
 3367              		.thumb
 3368              		.syntax unified
 3369              	.L320:
 3370 0066 FEE7     		b	.L320
 3371              	.LVL301:
 3372              	.L321:
 3373              	.LBE153:
 3374              	.LBE152:
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3375              		.loc 1 2925 0
 3376 0068 2946     		mov	r1, r5
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 154


 3377 006a 0848     		ldr	r0, .L327+20
 3378 006c FFF7FEFF 		bl	vListInsertEnd
 3379              	.LVL302:
 3380 0070 E5E7     		b	.L322
 3381              	.L324:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3382              		.loc 1 2941 0
 3383 0072 0020     		movs	r0, #0
 3384              	.LVL303:
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3385              		.loc 1 2959 0
 3386 0074 38BD     		pop	{r3, r4, r5, pc}
 3387              	.LVL304:
 3388              	.L328:
 3389 0076 00BF     		.align	2
 3390              	.L327:
 3391 0078 00000000 		.word	.LANCHOR16
 3392 007c 00000000 		.word	.LANCHOR13
 3393 0080 00000000 		.word	.LANCHOR4
 3394 0084 00000000 		.word	.LANCHOR10
 3395 0088 00000000 		.word	.LANCHOR20
 3396 008c 00000000 		.word	.LANCHOR1
 3397              		.cfi_endproc
 3398              	.LFE32:
 3400              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3401              		.align	1
 3402              		.global	xTaskRemoveFromUnorderedEventList
 3403              		.syntax unified
 3404              		.thumb
 3405              		.thumb_func
 3406              		.fpu fpv5-sp-d16
 3408              	xTaskRemoveFromUnorderedEventList:
 3409              	.LFB33:
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3410              		.loc 1 2963 0
 3411              		.cfi_startproc
 3412              		@ args = 0, pretend = 0, frame = 0
 3413              		@ frame_needed = 0, uses_anonymous_args = 0
 3414              	.LVL305:
 3415 0000 38B5     		push	{r3, r4, r5, lr}
 3416              	.LCFI37:
 3417              		.cfi_def_cfa_offset 16
 3418              		.cfi_offset 3, -16
 3419              		.cfi_offset 4, -12
 3420              		.cfi_offset 5, -8
 3421              		.cfi_offset 14, -4
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3422              		.loc 1 2969 0
 3423 0002 1F4B     		ldr	r3, .L338
 3424 0004 1B68     		ldr	r3, [r3]
 3425 0006 53B9     		cbnz	r3, .L330
 3426              	.LBB154:
 3427              	.LBB155:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3428              		.loc 2 237 0
 3429              		.syntax unified
 3430              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 155


 3431 0008 4FF05003 			mov r3, #80												
 3432 000c 72B6     		cpsid i													
 3433 000e 83F31188 		msr basepri, r3											
 3434 0012 BFF36F8F 		isb														
 3435 0016 BFF34F8F 		dsb														
 3436 001a 62B6     		cpsie i													
 3437              	
 3438              	@ 0 "" 2
 3439              	.LVL306:
 3440              		.thumb
 3441              		.syntax unified
 3442              	.L331:
 3443 001c FEE7     		b	.L331
 3444              	.L330:
 3445              	.LBE155:
 3446              	.LBE154:
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3447              		.loc 1 2972 0
 3448 001e 41F00041 		orr	r1, r1, #-2147483648
 3449              	.LVL307:
 3450 0022 0160     		str	r1, [r0]
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3451              		.loc 1 2976 0
 3452 0024 C468     		ldr	r4, [r0, #12]
 3453              	.LVL308:
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3454              		.loc 1 2977 0
 3455 0026 F4B1     		cbz	r4, .L337
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3456              		.loc 1 2978 0
 3457 0028 FFF7FEFF 		bl	uxListRemove
 3458              	.LVL309:
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3459              		.loc 1 2983 0
 3460 002c 251D     		adds	r5, r4, #4
 3461 002e 2846     		mov	r0, r5
 3462 0030 FFF7FEFF 		bl	uxListRemove
 3463              	.LVL310:
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3464              		.loc 1 2984 0
 3465 0034 E36A     		ldr	r3, [r4, #44]
 3466 0036 0122     		movs	r2, #1
 3467 0038 9A40     		lsls	r2, r2, r3
 3468 003a 1249     		ldr	r1, .L338+4
 3469 003c 0868     		ldr	r0, [r1]
 3470 003e 0243     		orrs	r2, r2, r0
 3471 0040 0A60     		str	r2, [r1]
 3472 0042 03EB8303 		add	r3, r3, r3, lsl #2
 3473 0046 9A00     		lsls	r2, r3, #2
 3474 0048 2946     		mov	r1, r5
 3475 004a 0F48     		ldr	r0, .L338+8
 3476 004c 1044     		add	r0, r0, r2
 3477 004e FFF7FEFF 		bl	vListInsertEnd
 3478              	.LVL311:
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3479              		.loc 1 2986 0
 3480 0052 E26A     		ldr	r2, [r4, #44]
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 156


 3481 0054 0D4B     		ldr	r3, .L338+12
 3482 0056 1B68     		ldr	r3, [r3]
 3483 0058 DB6A     		ldr	r3, [r3, #44]
 3484 005a 9A42     		cmp	r2, r3
 3485 005c 0ED9     		bls	.L335
 3486              	.LVL312:
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3487              		.loc 1 2996 0
 3488 005e 0120     		movs	r0, #1
 3489 0060 0B4B     		ldr	r3, .L338+16
 3490 0062 1860     		str	r0, [r3]
 3491 0064 38BD     		pop	{r3, r4, r5, pc}
 3492              	.LVL313:
 3493              	.L337:
 3494              	.LBB156:
 3495              	.LBB157:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3496              		.loc 2 237 0
 3497              		.syntax unified
 3498              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3499 0066 4FF05003 			mov r3, #80												
 3500 006a 72B6     		cpsid i													
 3501 006c 83F31188 		msr basepri, r3											
 3502 0070 BFF36F8F 		isb														
 3503 0074 BFF34F8F 		dsb														
 3504 0078 62B6     		cpsie i													
 3505              	
 3506              	@ 0 "" 2
 3507              	.LVL314:
 3508              		.thumb
 3509              		.syntax unified
 3510              	.L333:
 3511 007a FEE7     		b	.L333
 3512              	.LVL315:
 3513              	.L335:
 3514              	.LBE157:
 3515              	.LBE156:
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3516              		.loc 1 3000 0
 3517 007c 0020     		movs	r0, #0
 3518              	.LVL316:
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3519              		.loc 1 3004 0
 3520 007e 38BD     		pop	{r3, r4, r5, pc}
 3521              	.LVL317:
 3522              	.L339:
 3523              		.align	2
 3524              	.L338:
 3525 0080 00000000 		.word	.LANCHOR16
 3526 0084 00000000 		.word	.LANCHOR13
 3527 0088 00000000 		.word	.LANCHOR4
 3528 008c 00000000 		.word	.LANCHOR10
 3529 0090 00000000 		.word	.LANCHOR20
 3530              		.cfi_endproc
 3531              	.LFE33:
 3533              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3534              		.align	1
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 157


 3535              		.global	vTaskSetTimeOutState
 3536              		.syntax unified
 3537              		.thumb
 3538              		.thumb_func
 3539              		.fpu fpv5-sp-d16
 3541              	vTaskSetTimeOutState:
 3542              	.LFB34:
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3543              		.loc 1 3008 0
 3544              		.cfi_startproc
 3545              		@ args = 0, pretend = 0, frame = 0
 3546              		@ frame_needed = 0, uses_anonymous_args = 0
 3547              		@ link register save eliminated.
 3548              	.LVL318:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3549              		.loc 1 3009 0
 3550 0000 30B1     		cbz	r0, .L343
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3551              		.loc 1 3010 0
 3552 0002 094A     		ldr	r2, .L344
 3553 0004 1268     		ldr	r2, [r2]
 3554 0006 0260     		str	r2, [r0]
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3555              		.loc 1 3011 0
 3556 0008 084A     		ldr	r2, .L344+4
 3557 000a 1268     		ldr	r2, [r2]
 3558 000c 4260     		str	r2, [r0, #4]
 3559 000e 7047     		bx	lr
 3560              	.L343:
 3561              	.LBB158:
 3562              	.LBB159:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3563              		.loc 2 237 0
 3564              		.syntax unified
 3565              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3566 0010 4FF05003 			mov r3, #80												
 3567 0014 72B6     		cpsid i													
 3568 0016 83F31188 		msr basepri, r3											
 3569 001a BFF36F8F 		isb														
 3570 001e BFF34F8F 		dsb														
 3571 0022 62B6     		cpsie i													
 3572              	
 3573              	@ 0 "" 2
 3574              	.LVL319:
 3575              		.thumb
 3576              		.syntax unified
 3577              	.L342:
 3578 0024 FEE7     		b	.L342
 3579              	.L345:
 3580 0026 00BF     		.align	2
 3581              	.L344:
 3582 0028 00000000 		.word	.LANCHOR18
 3583 002c 00000000 		.word	.LANCHOR14
 3584              	.LBE159:
 3585              	.LBE158:
 3586              		.cfi_endproc
 3587              	.LFE34:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 158


 3589              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3590              		.align	1
 3591              		.global	xTaskCheckForTimeOut
 3592              		.syntax unified
 3593              		.thumb
 3594              		.thumb_func
 3595              		.fpu fpv5-sp-d16
 3597              	xTaskCheckForTimeOut:
 3598              	.LFB35:
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3599              		.loc 1 3016 0
 3600              		.cfi_startproc
 3601              		@ args = 0, pretend = 0, frame = 0
 3602              		@ frame_needed = 0, uses_anonymous_args = 0
 3603              	.LVL320:
 3604 0000 38B5     		push	{r3, r4, r5, lr}
 3605              	.LCFI38:
 3606              		.cfi_def_cfa_offset 16
 3607              		.cfi_offset 3, -16
 3608              		.cfi_offset 4, -12
 3609              		.cfi_offset 5, -8
 3610              		.cfi_offset 14, -4
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3611              		.loc 1 3019 0
 3612 0002 C0B1     		cbz	r0, .L357
 3613 0004 0446     		mov	r4, r0
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3614              		.loc 1 3020 0
 3615 0006 09B3     		cbz	r1, .L358
 3616 0008 0D46     		mov	r5, r1
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3617              		.loc 1 3022 0
 3618 000a FFF7FEFF 		bl	vPortEnterCritical
 3619              	.LVL321:
 3620              	.LBB160:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3621              		.loc 1 3025 0
 3622 000e 1C4B     		ldr	r3, .L360
 3623 0010 1968     		ldr	r1, [r3]
 3624              	.LVL322:
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3625              		.loc 1 3039 0
 3626 0012 2B68     		ldr	r3, [r5]
 3627 0014 B3F1FF3F 		cmp	r3, #-1
 3628 0018 2ED0     		beq	.L353
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3629              		.loc 1 3049 0
 3630 001a 2068     		ldr	r0, [r4]
 3631 001c 194A     		ldr	r2, .L360+4
 3632 001e 1268     		ldr	r2, [r2]
 3633 0020 9042     		cmp	r0, r2
 3634 0022 02D0     		beq	.L352
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3635              		.loc 1 3049 0 is_stmt 0 discriminator 1
 3636 0024 6268     		ldr	r2, [r4, #4]
 3637 0026 9142     		cmp	r1, r2
 3638 0028 28D2     		bcs	.L354
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 159


 3639              	.L352:
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3640              		.loc 1 3058 0 is_stmt 1
 3641 002a 6268     		ldr	r2, [r4, #4]
 3642 002c 881A     		subs	r0, r1, r2
 3643 002e 8342     		cmp	r3, r0
 3644 0030 17D8     		bhi	.L359
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3645              		.loc 1 3067 0
 3646 0032 0124     		movs	r4, #1
 3647              	.LVL323:
 3648 0034 1CE0     		b	.L351
 3649              	.LVL324:
 3650              	.L357:
 3651              	.LBE160:
 3652              	.LBB161:
 3653              	.LBB162:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3654              		.loc 2 237 0
 3655              		.syntax unified
 3656              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3657 0036 4FF05003 			mov r3, #80												
 3658 003a 72B6     		cpsid i													
 3659 003c 83F31188 		msr basepri, r3											
 3660 0040 BFF36F8F 		isb														
 3661 0044 BFF34F8F 		dsb														
 3662 0048 62B6     		cpsie i													
 3663              	
 3664              	@ 0 "" 2
 3665              	.LVL325:
 3666              		.thumb
 3667              		.syntax unified
 3668              	.L348:
 3669 004a FEE7     		b	.L348
 3670              	.L358:
 3671              	.LBE162:
 3672              	.LBE161:
 3673              	.LBB163:
 3674              	.LBB164:
 3675              		.syntax unified
 3676              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3677 004c 4FF05003 			mov r3, #80												
 3678 0050 72B6     		cpsid i													
 3679 0052 83F31188 		msr basepri, r3											
 3680 0056 BFF36F8F 		isb														
 3681 005a BFF34F8F 		dsb														
 3682 005e 62B6     		cpsie i													
 3683              	
 3684              	@ 0 "" 2
 3685              	.LVL326:
 3686              		.thumb
 3687              		.syntax unified
 3688              	.L350:
 3689 0060 FEE7     		b	.L350
 3690              	.LVL327:
 3691              	.L359:
 3692              	.LBE164:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 160


 3693              	.LBE163:
 3694              	.LBB165:
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3695              		.loc 1 3061 0
 3696 0062 521A     		subs	r2, r2, r1
 3697 0064 1344     		add	r3, r3, r2
 3698 0066 2B60     		str	r3, [r5]
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3699              		.loc 1 3062 0
 3700 0068 2046     		mov	r0, r4
 3701 006a FFF7FEFF 		bl	vTaskSetTimeOutState
 3702              	.LVL328:
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3703              		.loc 1 3063 0
 3704 006e 0024     		movs	r4, #0
 3705              	.LVL329:
 3706              	.L351:
 3707              	.LBE165:
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3708              		.loc 1 3070 0
 3709 0070 FFF7FEFF 		bl	vPortExitCritical
 3710              	.LVL330:
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3711              		.loc 1 3073 0
 3712 0074 2046     		mov	r0, r4
 3713 0076 38BD     		pop	{r3, r4, r5, pc}
 3714              	.LVL331:
 3715              	.L353:
 3716              	.LBB166:
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3717              		.loc 1 3044 0
 3718 0078 0024     		movs	r4, #0
 3719              	.LVL332:
 3720 007a F9E7     		b	.L351
 3721              	.LVL333:
 3722              	.L354:
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3723              		.loc 1 3056 0
 3724 007c 0124     		movs	r4, #1
 3725              	.LVL334:
 3726 007e F7E7     		b	.L351
 3727              	.L361:
 3728              		.align	2
 3729              	.L360:
 3730 0080 00000000 		.word	.LANCHOR14
 3731 0084 00000000 		.word	.LANCHOR18
 3732              	.LBE166:
 3733              		.cfi_endproc
 3734              	.LFE35:
 3736              		.section	.text.vTaskMissedYield,"ax",%progbits
 3737              		.align	1
 3738              		.global	vTaskMissedYield
 3739              		.syntax unified
 3740              		.thumb
 3741              		.thumb_func
 3742              		.fpu fpv5-sp-d16
 3744              	vTaskMissedYield:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 161


 3745              	.LFB36:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3746              		.loc 1 3077 0
 3747              		.cfi_startproc
 3748              		@ args = 0, pretend = 0, frame = 0
 3749              		@ frame_needed = 0, uses_anonymous_args = 0
 3750              		@ link register save eliminated.
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3751              		.loc 1 3078 0
 3752 0000 0122     		movs	r2, #1
 3753 0002 014B     		ldr	r3, .L363
 3754 0004 1A60     		str	r2, [r3]
 3755 0006 7047     		bx	lr
 3756              	.L364:
 3757              		.align	2
 3758              	.L363:
 3759 0008 00000000 		.word	.LANCHOR20
 3760              		.cfi_endproc
 3761              	.LFE36:
 3763              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3764              		.align	1
 3765              		.global	xTaskGetCurrentTaskHandle
 3766              		.syntax unified
 3767              		.thumb
 3768              		.thumb_func
 3769              		.fpu fpv5-sp-d16
 3771              	xTaskGetCurrentTaskHandle:
 3772              	.LFB42:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 3773              		.loc 1 3662 0
 3774              		.cfi_startproc
 3775              		@ args = 0, pretend = 0, frame = 0
 3776              		@ frame_needed = 0, uses_anonymous_args = 0
 3777              		@ link register save eliminated.
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3778              		.loc 1 3668 0
 3779 0000 014B     		ldr	r3, .L366
 3780 0002 1868     		ldr	r0, [r3]
 3781              	.LVL335:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3782              		.loc 1 3671 0
 3783 0004 7047     		bx	lr
 3784              	.L367:
 3785 0006 00BF     		.align	2
 3786              	.L366:
 3787 0008 00000000 		.word	.LANCHOR10
 3788              		.cfi_endproc
 3789              	.LFE42:
 3791              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3792              		.align	1
 3793              		.global	xTaskGetSchedulerState
 3794              		.syntax unified
 3795              		.thumb
 3796              		.thumb_func
 3797              		.fpu fpv5-sp-d16
 3799              	xTaskGetSchedulerState:
 3800              	.LFB43:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 162


3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3801              		.loc 1 3679 0
 3802              		.cfi_startproc
 3803              		@ args = 0, pretend = 0, frame = 0
 3804              		@ frame_needed = 0, uses_anonymous_args = 0
 3805              		@ link register save eliminated.
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3806              		.loc 1 3682 0
 3807 0000 054B     		ldr	r3, .L372
 3808 0002 1B68     		ldr	r3, [r3]
 3809 0004 23B1     		cbz	r3, .L370
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3810              		.loc 1 3688 0
 3811 0006 054B     		ldr	r3, .L372+4
 3812 0008 1B68     		ldr	r3, [r3]
 3813 000a 1BB9     		cbnz	r3, .L371
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3814              		.loc 1 3690 0
 3815 000c 0220     		movs	r0, #2
 3816 000e 7047     		bx	lr
 3817              	.L370:
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3818              		.loc 1 3684 0
 3819 0010 0120     		movs	r0, #1
 3820 0012 7047     		bx	lr
 3821              	.L371:
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3822              		.loc 1 3694 0
 3823 0014 0020     		movs	r0, #0
 3824              	.LVL336:
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3825              		.loc 1 3699 0
 3826 0016 7047     		bx	lr
 3827              	.L373:
 3828              		.align	2
 3829              	.L372:
 3830 0018 00000000 		.word	.LANCHOR11
 3831 001c 00000000 		.word	.LANCHOR16
 3832              		.cfi_endproc
 3833              	.LFE43:
 3835              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 3836              		.align	1
 3837              		.global	vTaskPriorityInherit
 3838              		.syntax unified
 3839              		.thumb
 3840              		.thumb_func
 3841              		.fpu fpv5-sp-d16
 3843              	vTaskPriorityInherit:
 3844              	.LFB44:
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3845              		.loc 1 3707 0
 3846              		.cfi_startproc
 3847              		@ args = 0, pretend = 0, frame = 0
 3848              		@ frame_needed = 0, uses_anonymous_args = 0
 3849              	.LVL337:
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3850              		.loc 1 3712 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 163


 3851 0000 0028     		cmp	r0, #0
 3852 0002 47D0     		beq	.L382
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3853              		.loc 1 3707 0
 3854 0004 38B5     		push	{r3, r4, r5, lr}
 3855              	.LCFI39:
 3856              		.cfi_def_cfa_offset 16
 3857              		.cfi_offset 3, -16
 3858              		.cfi_offset 4, -12
 3859              		.cfi_offset 5, -8
 3860              		.cfi_offset 14, -4
 3861 0006 0446     		mov	r4, r0
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3862              		.loc 1 3717 0
 3863 0008 C36A     		ldr	r3, [r0, #44]
 3864 000a 2349     		ldr	r1, .L387
 3865 000c 0968     		ldr	r1, [r1]
 3866 000e C96A     		ldr	r1, [r1, #44]
 3867 0010 8B42     		cmp	r3, r1
 3868 0012 16D2     		bcs	.L374
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3869              		.loc 1 3722 0
 3870 0014 8169     		ldr	r1, [r0, #24]
 3871 0016 0029     		cmp	r1, #0
 3872 0018 05DB     		blt	.L376
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3873              		.loc 1 3724 0
 3874 001a 1F49     		ldr	r1, .L387
 3875 001c 0968     		ldr	r1, [r1]
 3876 001e C96A     		ldr	r1, [r1, #44]
 3877 0020 C1F10701 		rsb	r1, r1, #7
 3878 0024 8161     		str	r1, [r0, #24]
 3879              	.L376:
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3880              		.loc 1 3733 0
 3881 0026 6069     		ldr	r0, [r4, #20]
 3882              	.LVL338:
 3883 0028 03EB8303 		add	r3, r3, r3, lsl #2
 3884 002c 9900     		lsls	r1, r3, #2
 3885 002e 1B4B     		ldr	r3, .L387+4
 3886 0030 0B44     		add	r3, r3, r1
 3887 0032 9842     		cmp	r0, r3
 3888 0034 06D0     		beq	.L385
 3889 0036 0023     		movs	r3, #0
 3890              	.L377:
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3891              		.loc 1 3733 0 is_stmt 0 discriminator 4
 3892 0038 33B9     		cbnz	r3, .L386
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3893              		.loc 1 3751 0 is_stmt 1
 3894 003a 174B     		ldr	r3, .L387
 3895 003c 1B68     		ldr	r3, [r3]
 3896 003e DB6A     		ldr	r3, [r3, #44]
 3897 0040 E362     		str	r3, [r4, #44]
 3898              	.L374:
 3899 0042 38BD     		pop	{r3, r4, r5, pc}
 3900              	.LVL339:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 164


 3901              	.L385:
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3902              		.loc 1 3733 0
 3903 0044 0123     		movs	r3, #1
 3904 0046 F7E7     		b	.L377
 3905              	.L386:
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3906              		.loc 1 3735 0
 3907 0048 251D     		adds	r5, r4, #4
 3908 004a 2846     		mov	r0, r5
 3909 004c FFF7FEFF 		bl	uxListRemove
 3910              	.LVL340:
 3911 0050 68B9     		cbnz	r0, .L379
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3912              		.loc 1 3737 0
 3913 0052 E36A     		ldr	r3, [r4, #44]
 3914 0054 03EB8301 		add	r1, r3, r3, lsl #2
 3915 0058 8A00     		lsls	r2, r1, #2
 3916 005a 1049     		ldr	r1, .L387+4
 3917 005c 8A58     		ldr	r2, [r1, r2]
 3918 005e 32B9     		cbnz	r2, .L379
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3919              		.loc 1 3737 0 is_stmt 0 discriminator 1
 3920 0060 0122     		movs	r2, #1
 3921 0062 9A40     		lsls	r2, r2, r3
 3922 0064 0E49     		ldr	r1, .L387+8
 3923 0066 0B68     		ldr	r3, [r1]
 3924 0068 23EA0203 		bic	r3, r3, r2
 3925 006c 0B60     		str	r3, [r1]
 3926              	.L379:
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3927              		.loc 1 3745 0 is_stmt 1
 3928 006e 0A4B     		ldr	r3, .L387
 3929 0070 1B68     		ldr	r3, [r3]
 3930 0072 DB6A     		ldr	r3, [r3, #44]
 3931 0074 E362     		str	r3, [r4, #44]
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3932              		.loc 1 3746 0
 3933 0076 0122     		movs	r2, #1
 3934 0078 9A40     		lsls	r2, r2, r3
 3935 007a 0949     		ldr	r1, .L387+8
 3936 007c 0868     		ldr	r0, [r1]
 3937 007e 0243     		orrs	r2, r2, r0
 3938 0080 0A60     		str	r2, [r1]
 3939 0082 03EB8303 		add	r3, r3, r3, lsl #2
 3940 0086 9A00     		lsls	r2, r3, #2
 3941 0088 2946     		mov	r1, r5
 3942 008a 0448     		ldr	r0, .L387+4
 3943 008c 1044     		add	r0, r0, r2
 3944 008e FFF7FEFF 		bl	vListInsertEnd
 3945              	.LVL341:
 3946 0092 38BD     		pop	{r3, r4, r5, pc}
 3947              	.LVL342:
 3948              	.L382:
 3949              	.LCFI40:
 3950              		.cfi_def_cfa_offset 0
 3951              		.cfi_restore 3
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 165


 3952              		.cfi_restore 4
 3953              		.cfi_restore 5
 3954              		.cfi_restore 14
 3955 0094 7047     		bx	lr
 3956              	.L388:
 3957 0096 00BF     		.align	2
 3958              	.L387:
 3959 0098 00000000 		.word	.LANCHOR10
 3960 009c 00000000 		.word	.LANCHOR4
 3961 00a0 00000000 		.word	.LANCHOR13
 3962              		.cfi_endproc
 3963              	.LFE44:
 3965              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3966              		.align	1
 3967              		.global	xTaskPriorityDisinherit
 3968              		.syntax unified
 3969              		.thumb
 3970              		.thumb_func
 3971              		.fpu fpv5-sp-d16
 3973              	xTaskPriorityDisinherit:
 3974              	.LFB45:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3975              		.loc 1 3773 0
 3976              		.cfi_startproc
 3977              		@ args = 0, pretend = 0, frame = 0
 3978              		@ frame_needed = 0, uses_anonymous_args = 0
 3979              	.LVL343:
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3980              		.loc 1 3777 0
 3981 0000 0028     		cmp	r0, #0
 3982 0002 4ED0     		beq	.L396
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3983              		.loc 1 3773 0
 3984 0004 38B5     		push	{r3, r4, r5, lr}
 3985              	.LCFI41:
 3986              		.cfi_def_cfa_offset 16
 3987              		.cfi_offset 3, -16
 3988              		.cfi_offset 4, -12
 3989              		.cfi_offset 5, -8
 3990              		.cfi_offset 14, -4
 3991 0006 0446     		mov	r4, r0
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3992              		.loc 1 3783 0
 3993 0008 294A     		ldr	r2, .L403
 3994 000a 1268     		ldr	r2, [r2]
 3995 000c 9042     		cmp	r0, r2
 3996 000e 0AD0     		beq	.L391
 3997              	.LBB167:
 3998              	.LBB168:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3999              		.loc 2 237 0
 4000              		.syntax unified
 4001              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4002 0010 4FF05003 			mov r3, #80												
 4003 0014 72B6     		cpsid i													
 4004 0016 83F31188 		msr basepri, r3											
 4005 001a BFF36F8F 		isb														
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 166


 4006 001e BFF34F8F 		dsb														
 4007 0022 62B6     		cpsie i													
 4008              	
 4009              	@ 0 "" 2
 4010              	.LVL344:
 4011              		.thumb
 4012              		.syntax unified
 4013              	.L392:
 4014 0024 FEE7     		b	.L392
 4015              	.L391:
 4016              	.LBE168:
 4017              	.LBE167:
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4018              		.loc 1 3785 0
 4019 0026 826C     		ldr	r2, [r0, #72]
 4020 0028 52B9     		cbnz	r2, .L393
 4021              	.LBB169:
 4022              	.LBB170:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4023              		.loc 2 237 0
 4024              		.syntax unified
 4025              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4026 002a 4FF05003 			mov r3, #80												
 4027 002e 72B6     		cpsid i													
 4028 0030 83F31188 		msr basepri, r3											
 4029 0034 BFF36F8F 		isb														
 4030 0038 BFF34F8F 		dsb														
 4031 003c 62B6     		cpsie i													
 4032              	
 4033              	@ 0 "" 2
 4034              	.LVL345:
 4035              		.thumb
 4036              		.syntax unified
 4037              	.L394:
 4038 003e FEE7     		b	.L394
 4039              	.L393:
 4040              	.LBE170:
 4041              	.LBE169:
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4042              		.loc 1 3786 0
 4043 0040 013A     		subs	r2, r2, #1
 4044 0042 8264     		str	r2, [r0, #72]
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4045              		.loc 1 3790 0
 4046 0044 C06A     		ldr	r0, [r0, #44]
 4047              	.LVL346:
 4048 0046 616C     		ldr	r1, [r4, #68]
 4049 0048 8842     		cmp	r0, r1
 4050 004a 2CD0     		beq	.L397
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4051              		.loc 1 3793 0
 4052 004c 6ABB     		cbnz	r2, .L398
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4053              		.loc 1 3800 0
 4054 004e 251D     		adds	r5, r4, #4
 4055 0050 2846     		mov	r0, r5
 4056 0052 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 167


 4057              	.LVL347:
 4058 0056 70B9     		cbnz	r0, .L395
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4059              		.loc 1 3802 0
 4060 0058 E26A     		ldr	r2, [r4, #44]
 4061 005a 02EB8201 		add	r1, r2, r2, lsl #2
 4062 005e 8B00     		lsls	r3, r1, #2
 4063 0060 1449     		ldr	r1, .L403+4
 4064 0062 CB58     		ldr	r3, [r1, r3]
 4065 0064 3BB9     		cbnz	r3, .L395
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4066              		.loc 1 3802 0 is_stmt 0 discriminator 1
 4067 0066 0123     		movs	r3, #1
 4068 0068 03FA02F2 		lsl	r2, r3, r2
 4069 006c 1249     		ldr	r1, .L403+8
 4070 006e 0B68     		ldr	r3, [r1]
 4071 0070 23EA0203 		bic	r3, r3, r2
 4072 0074 0B60     		str	r3, [r1]
 4073              	.L395:
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4074              		.loc 1 3812 0 is_stmt 1
 4075 0076 636C     		ldr	r3, [r4, #68]
 4076 0078 E362     		str	r3, [r4, #44]
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4077              		.loc 1 3817 0
 4078 007a C3F10702 		rsb	r2, r3, #7
 4079 007e A261     		str	r2, [r4, #24]
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4080              		.loc 1 3818 0
 4081 0080 0124     		movs	r4, #1
 4082              	.LVL348:
 4083 0082 04FA03F2 		lsl	r2, r4, r3
 4084 0086 0C49     		ldr	r1, .L403+8
 4085 0088 0868     		ldr	r0, [r1]
 4086 008a 0243     		orrs	r2, r2, r0
 4087 008c 0A60     		str	r2, [r1]
 4088 008e 03EB8303 		add	r3, r3, r3, lsl #2
 4089 0092 9A00     		lsls	r2, r3, #2
 4090 0094 2946     		mov	r1, r5
 4091 0096 0748     		ldr	r0, .L403+4
 4092 0098 1044     		add	r0, r0, r2
 4093 009a FFF7FEFF 		bl	vListInsertEnd
 4094              	.LVL349:
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4095              		.loc 1 3828 0
 4096 009e 2046     		mov	r0, r4
 4097 00a0 38BD     		pop	{r3, r4, r5, pc}
 4098              	.LVL350:
 4099              	.L396:
 4100              	.LCFI42:
 4101              		.cfi_def_cfa_offset 0
 4102              		.cfi_restore 3
 4103              		.cfi_restore 4
 4104              		.cfi_restore 5
 4105              		.cfi_restore 14
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4106              		.loc 1 3775 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 168


 4107 00a2 0020     		movs	r0, #0
 4108              	.LVL351:
 4109 00a4 7047     		bx	lr
 4110              	.LVL352:
 4111              	.L397:
 4112              	.LCFI43:
 4113              		.cfi_def_cfa_offset 16
 4114              		.cfi_offset 3, -16
 4115              		.cfi_offset 4, -12
 4116              		.cfi_offset 5, -8
 4117              		.cfi_offset 14, -4
 4118 00a6 0020     		movs	r0, #0
 4119 00a8 38BD     		pop	{r3, r4, r5, pc}
 4120              	.LVL353:
 4121              	.L398:
 4122 00aa 0020     		movs	r0, #0
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4123              		.loc 1 3846 0
 4124 00ac 38BD     		pop	{r3, r4, r5, pc}
 4125              	.LVL354:
 4126              	.L404:
 4127 00ae 00BF     		.align	2
 4128              	.L403:
 4129 00b0 00000000 		.word	.LANCHOR10
 4130 00b4 00000000 		.word	.LANCHOR4
 4131 00b8 00000000 		.word	.LANCHOR13
 4132              		.cfi_endproc
 4133              	.LFE45:
 4135              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4136              		.align	1
 4137              		.global	uxTaskResetEventItemValue
 4138              		.syntax unified
 4139              		.thumb
 4140              		.thumb_func
 4141              		.fpu fpv5-sp-d16
 4143              	uxTaskResetEventItemValue:
 4144              	.LFB46:
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 4145              		.loc 1 4163 0
 4146              		.cfi_startproc
 4147              		@ args = 0, pretend = 0, frame = 0
 4148              		@ frame_needed = 0, uses_anonymous_args = 0
 4149              		@ link register save eliminated.
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4150              		.loc 1 4166 0
 4151 0000 044B     		ldr	r3, .L406
 4152 0002 1A68     		ldr	r2, [r3]
 4153 0004 9069     		ldr	r0, [r2, #24]
 4154              	.LVL355:
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4155              		.loc 1 4170 0
 4156 0006 1A68     		ldr	r2, [r3]
 4157 0008 1B68     		ldr	r3, [r3]
 4158 000a DB6A     		ldr	r3, [r3, #44]
 4159 000c C3F10703 		rsb	r3, r3, #7
 4160 0010 9361     		str	r3, [r2, #24]
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 169


 4161              		.loc 1 4173 0
 4162 0012 7047     		bx	lr
 4163              	.L407:
 4164              		.align	2
 4165              	.L406:
 4166 0014 00000000 		.word	.LANCHOR10
 4167              		.cfi_endproc
 4168              	.LFE46:
 4170              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4171              		.align	1
 4172              		.global	pvTaskIncrementMutexHeldCount
 4173              		.syntax unified
 4174              		.thumb
 4175              		.thumb_func
 4176              		.fpu fpv5-sp-d16
 4178              	pvTaskIncrementMutexHeldCount:
 4179              	.LFB47:
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4180              		.loc 1 4179 0
 4181              		.cfi_startproc
 4182              		@ args = 0, pretend = 0, frame = 0
 4183              		@ frame_needed = 0, uses_anonymous_args = 0
 4184              		@ link register save eliminated.
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4185              		.loc 1 4182 0
 4186 0000 054B     		ldr	r3, .L410
 4187 0002 1B68     		ldr	r3, [r3]
 4188 0004 23B1     		cbz	r3, .L409
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4189              		.loc 1 4184 0
 4190 0006 044B     		ldr	r3, .L410
 4191 0008 1A68     		ldr	r2, [r3]
 4192 000a 936C     		ldr	r3, [r2, #72]
 4193 000c 0133     		adds	r3, r3, #1
 4194 000e 9364     		str	r3, [r2, #72]
 4195              	.L409:
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4196              		.loc 1 4187 0
 4197 0010 014B     		ldr	r3, .L410
 4198 0012 1868     		ldr	r0, [r3]
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4199              		.loc 1 4188 0
 4200 0014 7047     		bx	lr
 4201              	.L411:
 4202 0016 00BF     		.align	2
 4203              	.L410:
 4204 0018 00000000 		.word	.LANCHOR10
 4205              		.cfi_endproc
 4206              	.LFE47:
 4208              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4209              		.align	1
 4210              		.global	ulTaskNotifyTake
 4211              		.syntax unified
 4212              		.thumb
 4213              		.thumb_func
 4214              		.fpu fpv5-sp-d16
 4216              	ulTaskNotifyTake:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 170


 4217              	.LFB48:
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 4218              		.loc 1 4196 0
 4219              		.cfi_startproc
 4220              		@ args = 0, pretend = 0, frame = 0
 4221              		@ frame_needed = 0, uses_anonymous_args = 0
 4222              	.LVL356:
 4223 0000 38B5     		push	{r3, r4, r5, lr}
 4224              	.LCFI44:
 4225              		.cfi_def_cfa_offset 16
 4226              		.cfi_offset 3, -16
 4227              		.cfi_offset 4, -12
 4228              		.cfi_offset 5, -8
 4229              		.cfi_offset 14, -4
 4230 0002 0546     		mov	r5, r0
 4231 0004 0C46     		mov	r4, r1
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4232              		.loc 1 4199 0
 4233 0006 FFF7FEFF 		bl	vPortEnterCritical
 4234              	.LVL357:
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4235              		.loc 1 4202 0
 4236 000a 194B     		ldr	r3, .L419
 4237 000c 1B68     		ldr	r3, [r3]
 4238 000e 1B6D     		ldr	r3, [r3, #80]
 4239 0010 2BB9     		cbnz	r3, .L413
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4240              		.loc 1 4205 0
 4241 0012 174B     		ldr	r3, .L419
 4242 0014 1B68     		ldr	r3, [r3]
 4243 0016 0122     		movs	r2, #1
 4244 0018 83F85420 		strb	r2, [r3, #84]
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4245              		.loc 1 4207 0
 4246 001c ACB9     		cbnz	r4, .L417
 4247              	.L413:
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4248              		.loc 1 4228 0
 4249 001e FFF7FEFF 		bl	vPortExitCritical
 4250              	.LVL358:
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4251              		.loc 1 4230 0
 4252 0022 FFF7FEFF 		bl	vPortEnterCritical
 4253              	.LVL359:
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4254              		.loc 1 4233 0
 4255 0026 124B     		ldr	r3, .L419
 4256 0028 1B68     		ldr	r3, [r3]
 4257 002a 1C6D     		ldr	r4, [r3, #80]
 4258              	.LVL360:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4259              		.loc 1 4235 0
 4260 002c 24B1     		cbz	r4, .L414
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4261              		.loc 1 4237 0
 4262 002e CDB9     		cbnz	r5, .L418
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 171


 4263              		.loc 1 4243 0
 4264 0030 0F4B     		ldr	r3, .L419
 4265 0032 1B68     		ldr	r3, [r3]
 4266 0034 621E     		subs	r2, r4, #1
 4267 0036 1A65     		str	r2, [r3, #80]
 4268              	.L414:
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4269              		.loc 1 4251 0
 4270 0038 0D4B     		ldr	r3, .L419
 4271 003a 1B68     		ldr	r3, [r3]
 4272 003c 0022     		movs	r2, #0
 4273 003e 83F85420 		strb	r2, [r3, #84]
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4274              		.loc 1 4253 0
 4275 0042 FFF7FEFF 		bl	vPortExitCritical
 4276              	.LVL361:
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4277              		.loc 1 4256 0
 4278 0046 2046     		mov	r0, r4
 4279 0048 38BD     		pop	{r3, r4, r5, pc}
 4280              	.LVL362:
 4281              	.L417:
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4282              		.loc 1 4209 0
 4283 004a 1146     		mov	r1, r2
 4284 004c 2046     		mov	r0, r4
 4285 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4286              	.LVL363:
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4287              		.loc 1 4216 0
 4288 0052 4FF08052 		mov	r2, #268435456
 4289 0056 074B     		ldr	r3, .L419+4
 4290 0058 1A60     		str	r2, [r3]
 4291              		.syntax unified
 4292              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4293 005a BFF34F8F 		dsb
 4294              	@ 0 "" 2
 4295              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4296 005e BFF36F8F 		isb
 4297              	@ 0 "" 2
 4298              		.thumb
 4299              		.syntax unified
 4300 0062 DCE7     		b	.L413
 4301              	.LVL364:
 4302              	.L418:
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4303              		.loc 1 4239 0
 4304 0064 024B     		ldr	r3, .L419
 4305 0066 1B68     		ldr	r3, [r3]
 4306 0068 0022     		movs	r2, #0
 4307 006a 1A65     		str	r2, [r3, #80]
 4308 006c E4E7     		b	.L414
 4309              	.L420:
 4310 006e 00BF     		.align	2
 4311              	.L419:
 4312 0070 00000000 		.word	.LANCHOR10
 4313 0074 04ED00E0 		.word	-536810236
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 172


 4314              		.cfi_endproc
 4315              	.LFE48:
 4317              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4318              		.align	1
 4319              		.global	xTaskNotifyWait
 4320              		.syntax unified
 4321              		.thumb
 4322              		.thumb_func
 4323              		.fpu fpv5-sp-d16
 4325              	xTaskNotifyWait:
 4326              	.LFB49:
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4327              		.loc 1 4264 0
 4328              		.cfi_startproc
 4329              		@ args = 0, pretend = 0, frame = 0
 4330              		@ frame_needed = 0, uses_anonymous_args = 0
 4331              	.LVL365:
 4332 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4333              	.LCFI45:
 4334              		.cfi_def_cfa_offset 24
 4335              		.cfi_offset 3, -24
 4336              		.cfi_offset 4, -20
 4337              		.cfi_offset 5, -16
 4338              		.cfi_offset 6, -12
 4339              		.cfi_offset 7, -8
 4340              		.cfi_offset 14, -4
 4341 0002 0746     		mov	r7, r0
 4342 0004 0C46     		mov	r4, r1
 4343 0006 1546     		mov	r5, r2
 4344 0008 1E46     		mov	r6, r3
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4345              		.loc 1 4267 0
 4346 000a FFF7FEFF 		bl	vPortEnterCritical
 4347              	.LVL366:
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4348              		.loc 1 4270 0
 4349 000e 204B     		ldr	r3, .L428
 4350 0010 1B68     		ldr	r3, [r3]
 4351 0012 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 4352 0016 DBB2     		uxtb	r3, r3
 4353 0018 022B     		cmp	r3, #2
 4354 001a 0AD0     		beq	.L422
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4355              		.loc 1 4275 0
 4356 001c 1C4B     		ldr	r3, .L428
 4357 001e 1A68     		ldr	r2, [r3]
 4358 0020 106D     		ldr	r0, [r2, #80]
 4359 0022 20EA0700 		bic	r0, r0, r7
 4360 0026 1065     		str	r0, [r2, #80]
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4361              		.loc 1 4278 0
 4362 0028 1B68     		ldr	r3, [r3]
 4363 002a 0122     		movs	r2, #1
 4364 002c 83F85420 		strb	r2, [r3, #84]
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4365              		.loc 1 4280 0
 4366 0030 FEB9     		cbnz	r6, .L427
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 173


 4367              	.L422:
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4368              		.loc 1 4301 0
 4369 0032 FFF7FEFF 		bl	vPortExitCritical
 4370              	.LVL367:
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4371              		.loc 1 4303 0
 4372 0036 FFF7FEFF 		bl	vPortEnterCritical
 4373              	.LVL368:
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4374              		.loc 1 4307 0
 4375 003a 1DB1     		cbz	r5, .L423
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4376              		.loc 1 4311 0
 4377 003c 144B     		ldr	r3, .L428
 4378 003e 1B68     		ldr	r3, [r3]
 4379 0040 1B6D     		ldr	r3, [r3, #80]
 4380 0042 2B60     		str	r3, [r5]
 4381              	.L423:
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4382              		.loc 1 4318 0
 4383 0044 124B     		ldr	r3, .L428
 4384 0046 1B68     		ldr	r3, [r3]
 4385 0048 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 4386 004c DBB2     		uxtb	r3, r3
 4387 004e 012B     		cmp	r3, #1
 4388 0050 1CD0     		beq	.L425
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 4389              		.loc 1 4327 0
 4390 0052 0F4B     		ldr	r3, .L428
 4391 0054 1B68     		ldr	r3, [r3]
 4392 0056 196D     		ldr	r1, [r3, #80]
 4393 0058 21EA0401 		bic	r1, r1, r4
 4394 005c 1965     		str	r1, [r3, #80]
 4395              	.LVL369:
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4396              		.loc 1 4328 0
 4397 005e 0124     		movs	r4, #1
 4398              	.LVL370:
 4399              	.L424:
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4400              		.loc 1 4331 0
 4401 0060 0B4B     		ldr	r3, .L428
 4402 0062 1B68     		ldr	r3, [r3]
 4403 0064 0022     		movs	r2, #0
 4404 0066 83F85420 		strb	r2, [r3, #84]
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4405              		.loc 1 4333 0
 4406 006a FFF7FEFF 		bl	vPortExitCritical
 4407              	.LVL371:
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4408              		.loc 1 4336 0
 4409 006e 2046     		mov	r0, r4
 4410 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4411              	.LVL372:
 4412              	.L427:
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 174


 4413              		.loc 1 4282 0
 4414 0072 1146     		mov	r1, r2
 4415 0074 3046     		mov	r0, r6
 4416 0076 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4417              	.LVL373:
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4418              		.loc 1 4289 0
 4419 007a 4FF08052 		mov	r2, #268435456
 4420 007e 054B     		ldr	r3, .L428+4
 4421 0080 1A60     		str	r2, [r3]
 4422              		.syntax unified
 4423              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4424 0082 BFF34F8F 		dsb
 4425              	@ 0 "" 2
 4426              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4427 0086 BFF36F8F 		isb
 4428              	@ 0 "" 2
 4429              		.thumb
 4430              		.syntax unified
 4431 008a D2E7     		b	.L422
 4432              	.L425:
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4433              		.loc 1 4321 0
 4434 008c 0024     		movs	r4, #0
 4435              	.LVL374:
 4436 008e E7E7     		b	.L424
 4437              	.L429:
 4438              		.align	2
 4439              	.L428:
 4440 0090 00000000 		.word	.LANCHOR10
 4441 0094 04ED00E0 		.word	-536810236
 4442              		.cfi_endproc
 4443              	.LFE49:
 4445              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4446              		.align	1
 4447              		.global	xTaskGenericNotify
 4448              		.syntax unified
 4449              		.thumb
 4450              		.thumb_func
 4451              		.fpu fpv5-sp-d16
 4453              	xTaskGenericNotify:
 4454              	.LFB50:
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4455              		.loc 1 4344 0
 4456              		.cfi_startproc
 4457              		@ args = 0, pretend = 0, frame = 0
 4458              		@ frame_needed = 0, uses_anonymous_args = 0
 4459              	.LVL375:
 4460 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4461              	.LCFI46:
 4462              		.cfi_def_cfa_offset 24
 4463              		.cfi_offset 3, -24
 4464              		.cfi_offset 4, -20
 4465              		.cfi_offset 5, -16
 4466              		.cfi_offset 6, -12
 4467              		.cfi_offset 7, -8
 4468              		.cfi_offset 14, -4
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 175


 4469              	.LVL376:
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4470              		.loc 1 4349 0
 4471 0002 A8B1     		cbz	r0, .L446
 4472 0004 0446     		mov	r4, r0
 4473 0006 1F46     		mov	r7, r3
 4474 0008 1546     		mov	r5, r2
 4475 000a 0E46     		mov	r6, r1
 4476              	.LVL377:
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4477              		.loc 1 4352 0
 4478 000c FFF7FEFF 		bl	vPortEnterCritical
 4479              	.LVL378:
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4480              		.loc 1 4354 0
 4481 0010 0FB1     		cbz	r7, .L433
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4482              		.loc 1 4356 0
 4483 0012 236D     		ldr	r3, [r4, #80]
 4484 0014 3B60     		str	r3, [r7]
 4485              	.L433:
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4486              		.loc 1 4359 0
 4487 0016 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 4488 001a DBB2     		uxtb	r3, r3
 4489              	.LVL379:
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4490              		.loc 1 4361 0
 4491 001c 0222     		movs	r2, #2
 4492 001e 84F85420 		strb	r2, [r4, #84]
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4493              		.loc 1 4363 0
 4494 0022 6A1E     		subs	r2, r5, #1
 4495 0024 032A     		cmp	r2, #3
 4496 0026 41D8     		bhi	.L443
 4497 0028 DFE802F0 		tbb	[pc, r2]
 4498              	.L436:
 4499 002c 0D       		.byte	(.L435-.L436)/2
 4500 002d 33       		.byte	(.L437-.L436)/2
 4501 002e 38       		.byte	(.L438-.L436)/2
 4502 002f 3B       		.byte	(.L439-.L436)/2
 4503              	.LVL380:
 4504              		.p2align 1
 4505              	.L446:
 4506              	.LBB171:
 4507              	.LBB172:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4508              		.loc 2 237 0
 4509              		.syntax unified
 4510              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4511 0030 4FF05003 			mov r3, #80												
 4512 0034 72B6     		cpsid i													
 4513 0036 83F31188 		msr basepri, r3											
 4514 003a BFF36F8F 		isb														
 4515 003e BFF34F8F 		dsb														
 4516 0042 62B6     		cpsie i													
 4517              	
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 176


 4518              	@ 0 "" 2
 4519              	.LVL381:
 4520              		.thumb
 4521              		.syntax unified
 4522              	.L432:
 4523 0044 FEE7     		b	.L432
 4524              	.LVL382:
 4525              	.L435:
 4526              	.LBE172:
 4527              	.LBE171:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4528              		.loc 1 4366 0
 4529 0046 226D     		ldr	r2, [r4, #80]
 4530 0048 1643     		orrs	r6, r6, r2
 4531              	.LVL383:
 4532 004a 2665     		str	r6, [r4, #80]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4533              		.loc 1 4346 0
 4534 004c 0125     		movs	r5, #1
 4535              	.L434:
 4536              	.LVL384:
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4537              		.loc 1 4399 0
 4538 004e 012B     		cmp	r3, #1
 4539 0050 3ED1     		bne	.L440
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4540              		.loc 1 4401 0
 4541 0052 261D     		adds	r6, r4, #4
 4542 0054 3046     		mov	r0, r6
 4543 0056 FFF7FEFF 		bl	uxListRemove
 4544              	.LVL385:
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4545              		.loc 1 4402 0
 4546 005a E36A     		ldr	r3, [r4, #44]
 4547 005c 0122     		movs	r2, #1
 4548 005e 9A40     		lsls	r2, r2, r3
 4549 0060 1D49     		ldr	r1, .L447
 4550 0062 0868     		ldr	r0, [r1]
 4551 0064 0243     		orrs	r2, r2, r0
 4552 0066 0A60     		str	r2, [r1]
 4553 0068 03EB8303 		add	r3, r3, r3, lsl #2
 4554 006c 9A00     		lsls	r2, r3, #2
 4555 006e 3146     		mov	r1, r6
 4556 0070 1A48     		ldr	r0, .L447+4
 4557 0072 1044     		add	r0, r0, r2
 4558 0074 FFF7FEFF 		bl	vListInsertEnd
 4559              	.LVL386:
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4560              		.loc 1 4405 0
 4561 0078 A36A     		ldr	r3, [r4, #40]
 4562 007a DBB1     		cbz	r3, .L441
 4563              	.LBB173:
 4564              	.LBB174:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4565              		.loc 2 237 0
 4566              		.syntax unified
 4567              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 177


 4568 007c 4FF05003 			mov r3, #80												
 4569 0080 72B6     		cpsid i													
 4570 0082 83F31188 		msr basepri, r3											
 4571 0086 BFF36F8F 		isb														
 4572 008a BFF34F8F 		dsb														
 4573 008e 62B6     		cpsie i													
 4574              	
 4575              	@ 0 "" 2
 4576              	.LVL387:
 4577              		.thumb
 4578              		.syntax unified
 4579              	.L442:
 4580 0090 FEE7     		b	.L442
 4581              	.LVL388:
 4582              	.L437:
 4583              	.LBE174:
 4584              	.LBE173:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4585              		.loc 1 4370 0
 4586 0092 226D     		ldr	r2, [r4, #80]
 4587 0094 0132     		adds	r2, r2, #1
 4588 0096 2265     		str	r2, [r4, #80]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4589              		.loc 1 4346 0
 4590 0098 0125     		movs	r5, #1
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4591              		.loc 1 4371 0
 4592 009a D8E7     		b	.L434
 4593              	.L438:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4594              		.loc 1 4374 0
 4595 009c 2665     		str	r6, [r4, #80]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4596              		.loc 1 4346 0
 4597 009e 0125     		movs	r5, #1
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4598              		.loc 1 4375 0
 4599 00a0 D5E7     		b	.L434
 4600              	.L439:
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4601              		.loc 1 4378 0
 4602 00a2 022B     		cmp	r3, #2
 4603 00a4 04D0     		beq	.L444
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4604              		.loc 1 4380 0
 4605 00a6 2665     		str	r6, [r4, #80]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4606              		.loc 1 4346 0
 4607 00a8 0125     		movs	r5, #1
 4608 00aa D0E7     		b	.L434
 4609              	.L443:
 4610 00ac 0125     		movs	r5, #1
 4611 00ae CEE7     		b	.L434
 4612              	.L444:
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4613              		.loc 1 4385 0
 4614 00b0 0025     		movs	r5, #0
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 178


 4615 00b2 CCE7     		b	.L434
 4616              	.LVL389:
 4617              	.L441:
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4618              		.loc 1 4423 0
 4619 00b4 E26A     		ldr	r2, [r4, #44]
 4620 00b6 0A4B     		ldr	r3, .L447+8
 4621 00b8 1B68     		ldr	r3, [r3]
 4622 00ba DB6A     		ldr	r3, [r3, #44]
 4623 00bc 9A42     		cmp	r2, r3
 4624 00be 07D9     		bls	.L440
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4625              		.loc 1 4427 0
 4626 00c0 4FF08052 		mov	r2, #268435456
 4627 00c4 074B     		ldr	r3, .L447+12
 4628 00c6 1A60     		str	r2, [r3]
 4629              		.syntax unified
 4630              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4631 00c8 BFF34F8F 		dsb
 4632              	@ 0 "" 2
 4633              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4634 00cc BFF36F8F 		isb
 4635              	@ 0 "" 2
 4636              		.thumb
 4637              		.syntax unified
 4638              	.L440:
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4639              		.loc 1 4439 0
 4640 00d0 FFF7FEFF 		bl	vPortExitCritical
 4641              	.LVL390:
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4642              		.loc 1 4442 0
 4643 00d4 2846     		mov	r0, r5
 4644 00d6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4645              	.LVL391:
 4646              	.L448:
 4647              		.align	2
 4648              	.L447:
 4649 00d8 00000000 		.word	.LANCHOR13
 4650 00dc 00000000 		.word	.LANCHOR4
 4651 00e0 00000000 		.word	.LANCHOR10
 4652 00e4 04ED00E0 		.word	-536810236
 4653              		.cfi_endproc
 4654              	.LFE50:
 4656              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4657              		.align	1
 4658              		.global	xTaskGenericNotifyFromISR
 4659              		.syntax unified
 4660              		.thumb
 4661              		.thumb_func
 4662              		.fpu fpv5-sp-d16
 4664              	xTaskGenericNotifyFromISR:
 4665              	.LFB51:
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4666              		.loc 1 4450 0
 4667              		.cfi_startproc
 4668              		@ args = 4, pretend = 0, frame = 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 179


 4669              		@ frame_needed = 0, uses_anonymous_args = 0
 4670              	.LVL392:
 4671 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4672              	.LCFI47:
 4673              		.cfi_def_cfa_offset 32
 4674              		.cfi_offset 3, -32
 4675              		.cfi_offset 4, -28
 4676              		.cfi_offset 5, -24
 4677              		.cfi_offset 6, -20
 4678              		.cfi_offset 7, -16
 4679              		.cfi_offset 8, -12
 4680              		.cfi_offset 9, -8
 4681              		.cfi_offset 14, -4
 4682 0004 089E     		ldr	r6, [sp, #32]
 4683              	.LVL393:
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4684              		.loc 1 4456 0
 4685 0006 20B3     		cbz	r0, .L468
 4686 0008 0446     		mov	r4, r0
 4687 000a 9946     		mov	r9, r3
 4688 000c 1546     		mov	r5, r2
 4689 000e 0F46     		mov	r7, r1
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4690              		.loc 1 4474 0
 4691 0010 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4692              	.LVL394:
 4693              	.LBB175:
 4694              	.LBB176:
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4695              		.loc 2 255 0
 4696              		.syntax unified
 4697              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4698 0014 EFF31188 			mrs r8, basepri											
 4699 0018 4FF05003 		mov r3, #80												
 4700 001c 72B6     		cpsid i													
 4701 001e 83F31188 		msr basepri, r3											
 4702 0022 BFF36F8F 		isb														
 4703 0026 BFF34F8F 		dsb														
 4704 002a 62B6     		cpsie i													
 4705              	
 4706              	@ 0 "" 2
 4707              		.thumb
 4708              		.syntax unified
 4709              	.LBE176:
 4710              	.LBE175:
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4711              		.loc 1 4480 0
 4712 002c B9F1000F 		cmp	r9, #0
 4713 0030 02D0     		beq	.L452
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4714              		.loc 1 4482 0
 4715 0032 236D     		ldr	r3, [r4, #80]
 4716 0034 C9F80030 		str	r3, [r9]
 4717              	.L452:
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4718              		.loc 1 4485 0
 4719 0038 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 180


 4720 003c DBB2     		uxtb	r3, r3
 4721              	.LVL395:
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4722              		.loc 1 4486 0
 4723 003e 0222     		movs	r2, #2
 4724 0040 84F85420 		strb	r2, [r4, #84]
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4725              		.loc 1 4488 0
 4726 0044 6A1E     		subs	r2, r5, #1
 4727 0046 032A     		cmp	r2, #3
 4728 0048 2ED8     		bhi	.L465
 4729 004a DFE802F0 		tbb	[pc, r2]
 4730              	.L455:
 4731 004e 0D       		.byte	(.L454-.L455)/2
 4732 004f 20       		.byte	(.L456-.L455)/2
 4733 0050 25       		.byte	(.L457-.L455)/2
 4734 0051 28       		.byte	(.L458-.L455)/2
 4735              	.LVL396:
 4736              		.p2align 1
 4737              	.L468:
 4738              	.LBB177:
 4739              	.LBB178:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4740              		.loc 2 237 0
 4741              		.syntax unified
 4742              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4743 0052 4FF05003 			mov r3, #80												
 4744 0056 72B6     		cpsid i													
 4745 0058 83F31188 		msr basepri, r3											
 4746 005c BFF36F8F 		isb														
 4747 0060 BFF34F8F 		dsb														
 4748 0064 62B6     		cpsie i													
 4749              	
 4750              	@ 0 "" 2
 4751              	.LVL397:
 4752              		.thumb
 4753              		.syntax unified
 4754              	.L451:
 4755 0066 FEE7     		b	.L451
 4756              	.LVL398:
 4757              	.L454:
 4758              	.LBE178:
 4759              	.LBE177:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4760              		.loc 1 4491 0
 4761 0068 226D     		ldr	r2, [r4, #80]
 4762 006a 1743     		orrs	r7, r7, r2
 4763              	.LVL399:
 4764 006c 2765     		str	r7, [r4, #80]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4765              		.loc 1 4453 0
 4766 006e 0125     		movs	r5, #1
 4767              	.L453:
 4768              	.LVL400:
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4769              		.loc 1 4524 0
 4770 0070 012B     		cmp	r3, #1
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 181


 4771 0072 3CD1     		bne	.L459
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4772              		.loc 1 4527 0
 4773 0074 A36A     		ldr	r3, [r4, #40]
 4774              	.LVL401:
 4775 0076 DBB1     		cbz	r3, .L460
 4776              	.LBB179:
 4777              	.LBB180:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4778              		.loc 2 237 0
 4779              		.syntax unified
 4780              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4781 0078 4FF05003 			mov r3, #80												
 4782 007c 72B6     		cpsid i													
 4783 007e 83F31188 		msr basepri, r3											
 4784 0082 BFF36F8F 		isb														
 4785 0086 BFF34F8F 		dsb														
 4786 008a 62B6     		cpsie i													
 4787              	
 4788              	@ 0 "" 2
 4789              	.LVL402:
 4790              		.thumb
 4791              		.syntax unified
 4792              	.L461:
 4793 008c FEE7     		b	.L461
 4794              	.LVL403:
 4795              	.L456:
 4796              	.LBE180:
 4797              	.LBE179:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4798              		.loc 1 4495 0
 4799 008e 226D     		ldr	r2, [r4, #80]
 4800 0090 0132     		adds	r2, r2, #1
 4801 0092 2265     		str	r2, [r4, #80]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4802              		.loc 1 4453 0
 4803 0094 0125     		movs	r5, #1
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4804              		.loc 1 4496 0
 4805 0096 EBE7     		b	.L453
 4806              	.L457:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4807              		.loc 1 4499 0
 4808 0098 2765     		str	r7, [r4, #80]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4809              		.loc 1 4453 0
 4810 009a 0125     		movs	r5, #1
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4811              		.loc 1 4500 0
 4812 009c E8E7     		b	.L453
 4813              	.L458:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4814              		.loc 1 4503 0
 4815 009e 022B     		cmp	r3, #2
 4816 00a0 04D0     		beq	.L466
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4817              		.loc 1 4505 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 182


 4818 00a2 2765     		str	r7, [r4, #80]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4819              		.loc 1 4453 0
 4820 00a4 0125     		movs	r5, #1
 4821 00a6 E3E7     		b	.L453
 4822              	.L465:
 4823 00a8 0125     		movs	r5, #1
 4824 00aa E1E7     		b	.L453
 4825              	.L466:
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4826              		.loc 1 4510 0
 4827 00ac 0025     		movs	r5, #0
 4828 00ae DFE7     		b	.L453
 4829              	.LVL404:
 4830              	.L460:
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4831              		.loc 1 4529 0
 4832 00b0 164B     		ldr	r3, .L469
 4833 00b2 1B68     		ldr	r3, [r3]
 4834 00b4 03BB     		cbnz	r3, .L462
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4835              		.loc 1 4531 0
 4836 00b6 271D     		adds	r7, r4, #4
 4837 00b8 3846     		mov	r0, r7
 4838 00ba FFF7FEFF 		bl	uxListRemove
 4839              	.LVL405:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4840              		.loc 1 4532 0
 4841 00be E36A     		ldr	r3, [r4, #44]
 4842 00c0 0122     		movs	r2, #1
 4843 00c2 9A40     		lsls	r2, r2, r3
 4844 00c4 1249     		ldr	r1, .L469+4
 4845 00c6 0868     		ldr	r0, [r1]
 4846 00c8 0243     		orrs	r2, r2, r0
 4847 00ca 0A60     		str	r2, [r1]
 4848 00cc 03EB8303 		add	r3, r3, r3, lsl #2
 4849 00d0 9A00     		lsls	r2, r3, #2
 4850 00d2 3946     		mov	r1, r7
 4851 00d4 0F48     		ldr	r0, .L469+8
 4852 00d6 1044     		add	r0, r0, r2
 4853 00d8 FFF7FEFF 		bl	vListInsertEnd
 4854              	.LVL406:
 4855              	.L463:
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4856              		.loc 1 4541 0
 4857 00dc E26A     		ldr	r2, [r4, #44]
 4858 00de 0E4B     		ldr	r3, .L469+12
 4859 00e0 1B68     		ldr	r3, [r3]
 4860 00e2 DB6A     		ldr	r3, [r3, #44]
 4861 00e4 9A42     		cmp	r2, r3
 4862 00e6 02D9     		bls	.L459
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4863              		.loc 1 4545 0
 4864 00e8 66B1     		cbz	r6, .L464
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4865              		.loc 1 4547 0
 4866 00ea 0123     		movs	r3, #1
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 183


 4867 00ec 3360     		str	r3, [r6]
 4868              	.L459:
 4869              	.LVL407:
 4870              	.LBB181:
 4871              	.LBB182:
 4872              		.loc 2 275 0
 4873              		.syntax unified
 4874              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4875 00ee 88F31188 			msr basepri, r8	
 4876              	@ 0 "" 2
 4877              	.LVL408:
 4878              		.thumb
 4879              		.syntax unified
 4880              	.LBE182:
 4881              	.LBE181:
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4882              		.loc 1 4566 0
 4883 00f2 2846     		mov	r0, r5
 4884 00f4 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4885              	.LVL409:
 4886              	.L462:
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4887              		.loc 1 4538 0
 4888 00f8 04F11801 		add	r1, r4, #24
 4889 00fc 0748     		ldr	r0, .L469+16
 4890 00fe FFF7FEFF 		bl	vListInsertEnd
 4891              	.LVL410:
 4892 0102 EBE7     		b	.L463
 4893              	.L464:
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4894              		.loc 1 4554 0
 4895 0104 0122     		movs	r2, #1
 4896 0106 064B     		ldr	r3, .L469+20
 4897 0108 1A60     		str	r2, [r3]
 4898 010a F0E7     		b	.L459
 4899              	.L470:
 4900              		.align	2
 4901              	.L469:
 4902 010c 00000000 		.word	.LANCHOR16
 4903 0110 00000000 		.word	.LANCHOR13
 4904 0114 00000000 		.word	.LANCHOR4
 4905 0118 00000000 		.word	.LANCHOR10
 4906 011c 00000000 		.word	.LANCHOR1
 4907 0120 00000000 		.word	.LANCHOR20
 4908              		.cfi_endproc
 4909              	.LFE51:
 4911              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4912              		.align	1
 4913              		.global	vTaskNotifyGiveFromISR
 4914              		.syntax unified
 4915              		.thumb
 4916              		.thumb_func
 4917              		.fpu fpv5-sp-d16
 4919              	vTaskNotifyGiveFromISR:
 4920              	.LFB52:
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4921              		.loc 1 4574 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 184


 4922              		.cfi_startproc
 4923              		@ args = 0, pretend = 0, frame = 0
 4924              		@ frame_needed = 0, uses_anonymous_args = 0
 4925              	.LVL411:
 4926 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4927              	.LCFI48:
 4928              		.cfi_def_cfa_offset 24
 4929              		.cfi_offset 3, -24
 4930              		.cfi_offset 4, -20
 4931              		.cfi_offset 5, -16
 4932              		.cfi_offset 6, -12
 4933              		.cfi_offset 7, -8
 4934              		.cfi_offset 14, -4
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4935              		.loc 1 4579 0
 4936 0002 38B3     		cbz	r0, .L481
 4937 0004 0446     		mov	r4, r0
 4938 0006 0D46     		mov	r5, r1
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4939              		.loc 1 4597 0
 4940 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4941              	.LVL412:
 4942              	.LBB183:
 4943              	.LBB184:
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4944              		.loc 2 255 0
 4945              		.syntax unified
 4946              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4947 000c EFF31187 			mrs r7, basepri											
 4948 0010 4FF05003 		mov r3, #80												
 4949 0014 72B6     		cpsid i													
 4950 0016 83F31188 		msr basepri, r3											
 4951 001a BFF36F8F 		isb														
 4952 001e BFF34F8F 		dsb														
 4953 0022 62B6     		cpsie i													
 4954              	
 4955              	@ 0 "" 2
 4956              		.thumb
 4957              		.syntax unified
 4958              	.LBE184:
 4959              	.LBE183:
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4960              		.loc 1 4603 0
 4961 0024 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 4962 0028 DBB2     		uxtb	r3, r3
 4963              	.LVL413:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4964              		.loc 1 4604 0
 4965 002a 0222     		movs	r2, #2
 4966 002c 84F85420 		strb	r2, [r4, #84]
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4967              		.loc 1 4608 0
 4968 0030 226D     		ldr	r2, [r4, #80]
 4969 0032 0132     		adds	r2, r2, #1
 4970 0034 2265     		str	r2, [r4, #80]
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4971              		.loc 1 4614 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 185


 4972 0036 012B     		cmp	r3, #1
 4973 0038 36D1     		bne	.L474
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4974              		.loc 1 4617 0
 4975 003a A36A     		ldr	r3, [r4, #40]
 4976              	.LVL414:
 4977 003c ABB1     		cbz	r3, .L475
 4978              	.LBB185:
 4979              	.LBB186:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4980              		.loc 2 237 0
 4981              		.syntax unified
 4982              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4983 003e 4FF05003 			mov r3, #80												
 4984 0042 72B6     		cpsid i													
 4985 0044 83F31188 		msr basepri, r3											
 4986 0048 BFF36F8F 		isb														
 4987 004c BFF34F8F 		dsb														
 4988 0050 62B6     		cpsie i													
 4989              	
 4990              	@ 0 "" 2
 4991              	.LVL415:
 4992              		.thumb
 4993              		.syntax unified
 4994              	.L476:
 4995 0052 FEE7     		b	.L476
 4996              	.LVL416:
 4997              	.L481:
 4998              	.LBE186:
 4999              	.LBE185:
 5000              	.LBB187:
 5001              	.LBB188:
 5002              		.syntax unified
 5003              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5004 0054 4FF05003 			mov r3, #80												
 5005 0058 72B6     		cpsid i													
 5006 005a 83F31188 		msr basepri, r3											
 5007 005e BFF36F8F 		isb														
 5008 0062 BFF34F8F 		dsb														
 5009 0066 62B6     		cpsie i													
 5010              	
 5011              	@ 0 "" 2
 5012              	.LVL417:
 5013              		.thumb
 5014              		.syntax unified
 5015              	.L473:
 5016 0068 FEE7     		b	.L473
 5017              	.LVL418:
 5018              	.L475:
 5019              	.LBE188:
 5020              	.LBE187:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5021              		.loc 1 4619 0
 5022 006a 164B     		ldr	r3, .L482
 5023 006c 1B68     		ldr	r3, [r3]
 5024 006e F3B9     		cbnz	r3, .L477
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 186


 5025              		.loc 1 4621 0
 5026 0070 261D     		adds	r6, r4, #4
 5027 0072 3046     		mov	r0, r6
 5028 0074 FFF7FEFF 		bl	uxListRemove
 5029              	.LVL419:
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5030              		.loc 1 4622 0
 5031 0078 E36A     		ldr	r3, [r4, #44]
 5032 007a 0122     		movs	r2, #1
 5033 007c 9A40     		lsls	r2, r2, r3
 5034 007e 1249     		ldr	r1, .L482+4
 5035 0080 0868     		ldr	r0, [r1]
 5036 0082 0243     		orrs	r2, r2, r0
 5037 0084 0A60     		str	r2, [r1]
 5038 0086 03EB8303 		add	r3, r3, r3, lsl #2
 5039 008a 9A00     		lsls	r2, r3, #2
 5040 008c 3146     		mov	r1, r6
 5041 008e 0F48     		ldr	r0, .L482+8
 5042 0090 1044     		add	r0, r0, r2
 5043 0092 FFF7FEFF 		bl	vListInsertEnd
 5044              	.LVL420:
 5045              	.L478:
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5046              		.loc 1 4631 0
 5047 0096 E26A     		ldr	r2, [r4, #44]
 5048 0098 0D4B     		ldr	r3, .L482+12
 5049 009a 1B68     		ldr	r3, [r3]
 5050 009c DB6A     		ldr	r3, [r3, #44]
 5051 009e 9A42     		cmp	r2, r3
 5052 00a0 02D9     		bls	.L474
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5053              		.loc 1 4635 0
 5054 00a2 55B1     		cbz	r5, .L479
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5055              		.loc 1 4637 0
 5056 00a4 0123     		movs	r3, #1
 5057 00a6 2B60     		str	r3, [r5]
 5058              	.L474:
 5059              	.LVL421:
 5060              	.LBB189:
 5061              	.LBB190:
 5062              		.loc 2 275 0
 5063              		.syntax unified
 5064              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5065 00a8 87F31188 			msr basepri, r7	
 5066              	@ 0 "" 2
 5067              	.LVL422:
 5068              		.thumb
 5069              		.syntax unified
 5070 00ac F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5071              	.LVL423:
 5072              	.L477:
 5073              	.LBE190:
 5074              	.LBE189:
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5075              		.loc 1 4628 0
 5076 00ae 04F11801 		add	r1, r4, #24
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 187


 5077 00b2 0848     		ldr	r0, .L482+16
 5078 00b4 FFF7FEFF 		bl	vListInsertEnd
 5079              	.LVL424:
 5080 00b8 EDE7     		b	.L478
 5081              	.L479:
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5082              		.loc 1 4644 0
 5083 00ba 0122     		movs	r2, #1
 5084 00bc 064B     		ldr	r3, .L482+20
 5085 00be 1A60     		str	r2, [r3]
 5086 00c0 F2E7     		b	.L474
 5087              	.L483:
 5088 00c2 00BF     		.align	2
 5089              	.L482:
 5090 00c4 00000000 		.word	.LANCHOR16
 5091 00c8 00000000 		.word	.LANCHOR13
 5092 00cc 00000000 		.word	.LANCHOR4
 5093 00d0 00000000 		.word	.LANCHOR10
 5094 00d4 00000000 		.word	.LANCHOR1
 5095 00d8 00000000 		.word	.LANCHOR20
 5096              		.cfi_endproc
 5097              	.LFE52:
 5099              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5100              		.align	1
 5101              		.global	xTaskNotifyStateClear
 5102              		.syntax unified
 5103              		.thumb
 5104              		.thumb_func
 5105              		.fpu fpv5-sp-d16
 5107              	xTaskNotifyStateClear:
 5108              	.LFB53:
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5109              		.loc 1 4663 0
 5110              		.cfi_startproc
 5111              		@ args = 0, pretend = 0, frame = 0
 5112              		@ frame_needed = 0, uses_anonymous_args = 0
 5113              	.LVL425:
 5114 0000 10B5     		push	{r4, lr}
 5115              	.LCFI49:
 5116              		.cfi_def_cfa_offset 8
 5117              		.cfi_offset 4, -8
 5118              		.cfi_offset 14, -4
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5119              		.loc 1 4669 0
 5120 0002 0446     		mov	r4, r0
 5121 0004 58B1     		cbz	r0, .L490
 5122              	.L485:
 5123              	.LVL426:
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5124              		.loc 1 4671 0 discriminator 4
 5125 0006 FFF7FEFF 		bl	vPortEnterCritical
 5126              	.LVL427:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5127              		.loc 1 4673 0 discriminator 4
 5128 000a 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 5129 000e DBB2     		uxtb	r3, r3
 5130 0010 022B     		cmp	r3, #2
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 188


 5131 0012 07D0     		beq	.L491
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5132              		.loc 1 4680 0
 5133 0014 0024     		movs	r4, #0
 5134              	.LVL428:
 5135              	.L486:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5136              		.loc 1 4683 0
 5137 0016 FFF7FEFF 		bl	vPortExitCritical
 5138              	.LVL429:
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5139              		.loc 1 4686 0
 5140 001a 2046     		mov	r0, r4
 5141 001c 10BD     		pop	{r4, pc}
 5142              	.LVL430:
 5143              	.L490:
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5144              		.loc 1 4669 0 discriminator 1
 5145 001e 044B     		ldr	r3, .L492
 5146 0020 1C68     		ldr	r4, [r3]
 5147 0022 F0E7     		b	.L485
 5148              	.LVL431:
 5149              	.L491:
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5150              		.loc 1 4675 0
 5151 0024 0023     		movs	r3, #0
 5152 0026 84F85430 		strb	r3, [r4, #84]
 5153              	.LVL432:
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5154              		.loc 1 4676 0
 5155 002a 0124     		movs	r4, #1
 5156              	.LVL433:
 5157 002c F3E7     		b	.L486
 5158              	.L493:
 5159 002e 00BF     		.align	2
 5160              	.L492:
 5161 0030 00000000 		.word	.LANCHOR10
 5162              		.cfi_endproc
 5163              	.LFE53:
 5165              		.global	pxCurrentTCB
 5166              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5167              		.align	2
 5168              		.set	.LANCHOR10,. + 0
 5171              	pxCurrentTCB:
 5172 0000 00000000 		.space	4
 5173              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5174              		.align	2
 5175              		.set	.LANCHOR2,. + 0
 5178              	pxDelayedTaskList:
 5179 0000 00000000 		.space	4
 5180              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5181              		.align	2
 5182              		.set	.LANCHOR8,. + 0
 5185              	pxOverflowDelayedTaskList:
 5186 0000 00000000 		.space	4
 5187              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5188              		.align	2
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 189


 5189              		.set	.LANCHOR4,. + 0
 5192              	pxReadyTasksLists:
 5193 0000 00000000 		.space	140
 5193      00000000 
 5193      00000000 
 5193      00000000 
 5193      00000000 
 5194              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5195              		.align	2
 5196              		.set	.LANCHOR9,. + 0
 5199              	uxCurrentNumberOfTasks:
 5200 0000 00000000 		.space	4
 5201              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5202              		.align	2
 5203              		.set	.LANCHOR15,. + 0
 5206              	uxDeletedTasksWaitingCleanUp:
 5207 0000 00000000 		.space	4
 5208              		.section	.bss.uxPendedTicks,"aw",%nobits
 5209              		.align	2
 5210              		.set	.LANCHOR19,. + 0
 5213              	uxPendedTicks:
 5214 0000 00000000 		.space	4
 5215              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5216              		.align	2
 5217              		.set	.LANCHOR16,. + 0
 5220              	uxSchedulerSuspended:
 5221 0000 00000000 		.space	4
 5222              		.section	.bss.uxTaskNumber,"aw",%nobits
 5223              		.align	2
 5224              		.set	.LANCHOR12,. + 0
 5227              	uxTaskNumber:
 5228 0000 00000000 		.space	4
 5229              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5230              		.align	2
 5231              		.set	.LANCHOR13,. + 0
 5234              	uxTopReadyPriority:
 5235 0000 00000000 		.space	4
 5236              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5237              		.align	2
 5238              		.set	.LANCHOR5,. + 0
 5241              	xDelayedTaskList1:
 5242 0000 00000000 		.space	20
 5242      00000000 
 5242      00000000 
 5242      00000000 
 5242      00000000 
 5243              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5244              		.align	2
 5245              		.set	.LANCHOR6,. + 0
 5248              	xDelayedTaskList2:
 5249 0000 00000000 		.space	20
 5249      00000000 
 5249      00000000 
 5249      00000000 
 5249      00000000 
 5250              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 5251              		.align	2
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 190


 5252              		.set	.LANCHOR17,. + 0
 5255              	xIdleTaskHandle:
 5256 0000 00000000 		.space	4
 5257              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5258              		.align	2
 5259              		.set	.LANCHOR3,. + 0
 5262              	xNextTaskUnblockTime:
 5263 0000 00000000 		.space	4
 5264              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5265              		.align	2
 5266              		.set	.LANCHOR18,. + 0
 5269              	xNumOfOverflows:
 5270 0000 00000000 		.space	4
 5271              		.section	.bss.xPendingReadyList,"aw",%nobits
 5272              		.align	2
 5273              		.set	.LANCHOR1,. + 0
 5276              	xPendingReadyList:
 5277 0000 00000000 		.space	20
 5277      00000000 
 5277      00000000 
 5277      00000000 
 5277      00000000 
 5278              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5279              		.align	2
 5280              		.set	.LANCHOR11,. + 0
 5283              	xSchedulerRunning:
 5284 0000 00000000 		.space	4
 5285              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5286              		.align	2
 5287              		.set	.LANCHOR0,. + 0
 5290              	xSuspendedTaskList:
 5291 0000 00000000 		.space	20
 5291      00000000 
 5291      00000000 
 5291      00000000 
 5291      00000000 
 5292              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5293              		.align	2
 5294              		.set	.LANCHOR7,. + 0
 5297              	xTasksWaitingTermination:
 5298 0000 00000000 		.space	20
 5298      00000000 
 5298      00000000 
 5298      00000000 
 5298      00000000 
 5299              		.section	.bss.xTickCount,"aw",%nobits
 5300              		.align	2
 5301              		.set	.LANCHOR14,. + 0
 5304              	xTickCount:
 5305 0000 00000000 		.space	4
 5306              		.section	.bss.xYieldPending,"aw",%nobits
 5307              		.align	2
 5308              		.set	.LANCHOR20,. + 0
 5311              	xYieldPending:
 5312 0000 00000000 		.space	4
 5313              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 5314              		.align	2
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 191


 5315              	.LC0:
 5316 0000 49444C45 		.ascii	"IDLE\000"
 5316      00
 5317              		.text
 5318              	.Letext0:
 5319              		.file 3 "c:\\gcc_toolchain\\6_2017-q1-update\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 5320              		.file 4 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 5321              		.file 5 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\lock.h"
 5322              		.file 6 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\_types.h"
 5323              		.file 7 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\reent.h"
 5324              		.file 8 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\stdlib.h"
 5325              		.file 9 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 5326              		.file 10 "Inc/FreeRTOSConfig.h"
 5327              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 5328              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 5329              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 5330              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 5331              		.file 15 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\string.h"
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 192


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:18     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:24     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:106    .text.prvTaskIsTaskSuspended:00000048 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:112    .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:118    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:159    .text.prvResetNextTaskUnblockTime:0000002c $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:165    .text.prvDeleteTCB:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:171    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:198    .text.prvInitialiseNewTask:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:204    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:327    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:333    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:399    .text.prvInitialiseTaskLists:00000048 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:411    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:417    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:523    .text.prvAddNewTaskToReadyList:0000008c $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:534    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:540    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:641    .text.prvAddCurrentTaskToDelayedList:00000084 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:652    .text.xTaskCreate:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:659    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:764    .text.vTaskDelete:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:771    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:924    .text.vTaskDelete:000000bc $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:938    .text.uxTaskPriorityGet:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:945    .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:984    .text.uxTaskPriorityGet:0000001c $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:989    .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:996    .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1061   .text.uxTaskPriorityGetFromISR:00000030 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1066   .text.vTaskPrioritySet:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1073   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1264   .text.vTaskPrioritySet:000000dc $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1272   .text.vTaskResume:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1279   .text.vTaskResume:00000000 vTaskResume
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1384   .text.vTaskResume:0000007c $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1392   .text.xTaskResumeFromISR:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1399   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1540   .text.xTaskResumeFromISR:0000009c $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1549   .text.vTaskStartScheduler:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1556   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1654   .text.vTaskStartScheduler:0000006c $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2540   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1666   .text.vTaskEndScheduler:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1673   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1712   .text.vTaskEndScheduler:00000024 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1717   .text.vTaskSuspendAll:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1724   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1740   .text.vTaskSuspendAll:0000000c $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1745   .text.xTaskGetTickCount:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1752   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1768   .text.xTaskGetTickCount:00000008 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1773   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1780   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1803   .text.xTaskGetTickCountFromISR:0000000c $d
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 193


C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1808   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1815   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1830   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1835   .text.pcTaskGetName:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1842   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1890   .text.pcTaskGetName:00000024 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1897   .text.xTaskIncrementTick:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:1904   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2115   .text.xTaskIncrementTick:000000f8 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2130   .text.xTaskResumeAll:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2137   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2328   .text.xTaskResumeAll:000000dc $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2341   .text.vTaskDelay:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2348   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2427   .text.vTaskDelay:0000004c $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2433   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2439   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2526   .text.prvCheckTasksWaitingTermination:00000050 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2534   .text.prvIdleTask:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2587   .text.prvIdleTask:00000028 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2593   .text.vTaskSetApplicationTaskTag:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2600   .text.vTaskSetApplicationTaskTag:00000000 vTaskSetApplicationTaskTag
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2639   .text.vTaskSetApplicationTaskTag:0000001c $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2644   .text.xTaskGetApplicationTaskTag:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2651   .text.xTaskGetApplicationTaskTag:00000000 xTaskGetApplicationTaskTag
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2690   .text.xTaskGetApplicationTaskTag:0000001c $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2695   .text.xTaskCallApplicationTaskHook:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2702   .text.xTaskCallApplicationTaskHook:00000000 xTaskCallApplicationTaskHook
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2746   .text.xTaskCallApplicationTaskHook:0000001c $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2751   .text.vTaskSwitchContext:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2758   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2922   .text.vTaskSwitchContext:000000bc $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2933   .text.vTaskSuspend:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:2940   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3098   .text.vTaskSuspend:000000bc $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3110   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3117   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3171   .text.vTaskPlaceOnEventList:00000030 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3176   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3183   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3274   .text.vTaskPlaceOnUnorderedEventList:0000005c $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3280   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3287   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3391   .text.xTaskRemoveFromEventList:00000078 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3401   .text.xTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3408   .text.xTaskRemoveFromUnorderedEventList:00000000 xTaskRemoveFromUnorderedEventList
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3525   .text.xTaskRemoveFromUnorderedEventList:00000080 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3534   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3541   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3582   .text.vTaskSetTimeOutState:00000028 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3590   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3597   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3730   .text.xTaskCheckForTimeOut:00000080 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3737   .text.vTaskMissedYield:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3744   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3759   .text.vTaskMissedYield:00000008 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3764   .text.xTaskGetCurrentTaskHandle:00000000 $t
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 194


C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3771   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3787   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3792   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3799   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3830   .text.xTaskGetSchedulerState:00000018 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3836   .text.vTaskPriorityInherit:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3843   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3959   .text.vTaskPriorityInherit:00000098 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3966   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:3973   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4129   .text.xTaskPriorityDisinherit:000000b0 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4136   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4143   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4166   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4171   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4178   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4204   .text.pvTaskIncrementMutexHeldCount:00000018 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4209   .text.ulTaskNotifyTake:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4216   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4312   .text.ulTaskNotifyTake:00000070 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4318   .text.xTaskNotifyWait:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4325   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4440   .text.xTaskNotifyWait:00000090 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4446   .text.xTaskGenericNotify:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4453   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4499   .text.xTaskGenericNotify:0000002c $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4504   .text.xTaskGenericNotify:00000030 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4649   .text.xTaskGenericNotify:000000d8 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4657   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4664   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4731   .text.xTaskGenericNotifyFromISR:0000004e $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4736   .text.xTaskGenericNotifyFromISR:00000052 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4902   .text.xTaskGenericNotifyFromISR:0000010c $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4912   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:4919   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5090   .text.vTaskNotifyGiveFromISR:000000c4 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5100   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5107   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5161   .text.xTaskNotifyStateClear:00000030 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5171   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5167   .bss.pxCurrentTCB:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5174   .bss.pxDelayedTaskList:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5178   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5181   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5185   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5188   .bss.pxReadyTasksLists:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5192   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5195   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5199   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5202   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5206   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5209   .bss.uxPendedTicks:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5213   .bss.uxPendedTicks:00000000 uxPendedTicks
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5216   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5220   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5223   .bss.uxTaskNumber:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5227   .bss.uxTaskNumber:00000000 uxTaskNumber
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s 			page 195


C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5230   .bss.uxTopReadyPriority:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5234   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5237   .bss.xDelayedTaskList1:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5241   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5244   .bss.xDelayedTaskList2:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5248   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5251   .bss.xIdleTaskHandle:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5255   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5258   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5262   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5265   .bss.xNumOfOverflows:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5269   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5272   .bss.xPendingReadyList:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5276   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5279   .bss.xSchedulerRunning:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5283   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5286   .bss.xSuspendedTaskList:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5290   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5293   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5297   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5300   .bss.xTickCount:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5304   .bss.xTickCount:00000000 xTickCount
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5307   .bss.xYieldPending:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5311   .bss.xYieldPending:00000000 xYieldPending
C:\Users\Student\AppData\Local\Temp\cc0jOuiZ.s:5314   .rodata.vTaskStartScheduler.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
vApplicationIdleHook
vApplicationStackOverflowHook

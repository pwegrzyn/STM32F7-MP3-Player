ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"ff.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ld_word,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	ld_word:
  25              	.LFB143:
  26              		.file 1 "Middlewares/Third_Party/FatFs/src/ff.c"
   1:Middlewares/Third_Party/FatFs/src/ff.c **** /*----------------------------------------------------------------------------/
   2:Middlewares/Third_Party/FatFs/src/ff.c **** /  FatFs - Generic FAT file system module  R0.12c                             /
   3:Middlewares/Third_Party/FatFs/src/ff.c **** /-----------------------------------------------------------------------------/
   4:Middlewares/Third_Party/FatFs/src/ff.c **** /
   5:Middlewares/Third_Party/FatFs/src/ff.c **** / Copyright (C) 2017, ChaN, all right reserved.
   6:Middlewares/Third_Party/FatFs/src/ff.c **** /
   7:Middlewares/Third_Party/FatFs/src/ff.c **** / FatFs module is an open source software. Redistribution and use of FatFs in
   8:Middlewares/Third_Party/FatFs/src/ff.c **** / source and binary forms, with or without modification, are permitted provided
   9:Middlewares/Third_Party/FatFs/src/ff.c **** / that the following condition is met:
  10:Middlewares/Third_Party/FatFs/src/ff.c **** /
  11:Middlewares/Third_Party/FatFs/src/ff.c **** / 1. Redistributions of source code must retain the above copyright notice,
  12:Middlewares/Third_Party/FatFs/src/ff.c **** /    this condition and the following disclaimer.
  13:Middlewares/Third_Party/FatFs/src/ff.c **** /
  14:Middlewares/Third_Party/FatFs/src/ff.c **** / This software is provided by the copyright holder and contributors "AS IS"
  15:Middlewares/Third_Party/FatFs/src/ff.c **** / and any warranties related to this software are DISCLAIMED.
  16:Middlewares/Third_Party/FatFs/src/ff.c **** / The copyright owner or contributors be NOT LIABLE for any damages caused
  17:Middlewares/Third_Party/FatFs/src/ff.c **** / by use of this software.
  18:Middlewares/Third_Party/FatFs/src/ff.c **** /----------------------------------------------------------------------------*/
  19:Middlewares/Third_Party/FatFs/src/ff.c **** 
  20:Middlewares/Third_Party/FatFs/src/ff.c **** 
  21:Middlewares/Third_Party/FatFs/src/ff.c **** #include "ff.h"			/* Declarations of FatFs API */
  22:Middlewares/Third_Party/FatFs/src/ff.c **** #include "diskio.h"		/* Declarations of device I/O functions */
  23:Middlewares/Third_Party/FatFs/src/ff.c **** 
  24:Middlewares/Third_Party/FatFs/src/ff.c **** 
  25:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------------------------------------------
  26:Middlewares/Third_Party/FatFs/src/ff.c **** 
  27:Middlewares/Third_Party/FatFs/src/ff.c ****    Module Private Definitions
  28:Middlewares/Third_Party/FatFs/src/ff.c **** 
  29:Middlewares/Third_Party/FatFs/src/ff.c **** ---------------------------------------------------------------------------*/
  30:Middlewares/Third_Party/FatFs/src/ff.c **** 
  31:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FATFS != 68300	/* Revision ID */
  32:Middlewares/Third_Party/FatFs/src/ff.c **** #error Wrong include file (ff.h).
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 2


  33:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
  34:Middlewares/Third_Party/FatFs/src/ff.c **** 
  35:Middlewares/Third_Party/FatFs/src/ff.c **** 
  36:Middlewares/Third_Party/FatFs/src/ff.c **** /* DBCS code ranges and SBCS upper conversion tables */
  37:Middlewares/Third_Party/FatFs/src/ff.c **** 
  38:Middlewares/Third_Party/FatFs/src/ff.c **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
  39:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
  40:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
  41:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
  42:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
  43:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
  44:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
  45:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
  46:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
  47:Middlewares/Third_Party/FatFs/src/ff.c **** 
  48:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
  49:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0x81
  50:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1E	0xFE
  51:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1S	0x40
  52:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1E	0x7E
  53:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2S	0x80
  54:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2E	0xFE
  55:Middlewares/Third_Party/FatFs/src/ff.c **** 
  56:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 949	/* Korean */
  57:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0x81
  58:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1E	0xFE
  59:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1S	0x41
  60:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1E	0x5A
  61:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2S	0x61
  62:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2E	0x7A
  63:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS3S	0x81
  64:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS3E	0xFE
  65:Middlewares/Third_Party/FatFs/src/ff.c **** 
  66:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
  67:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0x81
  68:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1E	0xFE
  69:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1S	0x40
  70:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1E	0x7E
  71:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2S	0xA1
  72:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2E	0xFE
  73:Middlewares/Third_Party/FatFs/src/ff.c **** 
  74:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 437	/* U.S. */
  75:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
  76:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
  77:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
  78:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
  79:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
  80:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
  81:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
  82:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
  83:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
  84:Middlewares/Third_Party/FatFs/src/ff.c **** 
  85:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 720	/* Arabic */
  86:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
  87:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  88:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
  89:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 3


  90:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
  91:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
  92:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
  93:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
  94:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
  95:Middlewares/Third_Party/FatFs/src/ff.c **** 
  96:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 737	/* Greek */
  97:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
  98:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  99:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
 100:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96, \
 101:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 102:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 103:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 104:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 105:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 106:Middlewares/Third_Party/FatFs/src/ff.c **** 
 107:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 771	/* KBL */
 108:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 109:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 110:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 111:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 112:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 113:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 114:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0xDE, \
 115:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 116:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0xFF}
 117:Middlewares/Third_Party/FatFs/src/ff.c **** 
 118:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 775	/* Baltic */
 119:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 120:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F, \
 121:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 122:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 123:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 124:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 125:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 126:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF, \
 127:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 128:Middlewares/Third_Party/FatFs/src/ff.c **** 
 129:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 850	/* Latin 1 */
 130:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 131:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x43,0x55,0x45,0x41,0x41,0x41,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41, \
 132:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x45,0x92,0x92,0x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0x9F, \
 133:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 134:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 135:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 136:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD1,0xD1,0x45,0x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0xDF, \
 137:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x4F,0xE1,0x4F,0x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0xEF, \
 138:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 139:Middlewares/Third_Party/FatFs/src/ff.c **** 
 140:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 852	/* Latin 2 */
 141:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 142:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F, \
 143:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0xAC, \
 144:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF, \
 145:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
 146:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 4


 147:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 148:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF, \
 149:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
 150:Middlewares/Third_Party/FatFs/src/ff.c **** 
 151:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 855	/* Cyrillic */
 152:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 153:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F, \
 154:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
 155:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF, \
 156:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
 157:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 158:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
 159:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF, \
 160:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
 161:Middlewares/Third_Party/FatFs/src/ff.c **** 
 162:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 857	/* Turkish */
 163:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 164:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F, \
 165:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
 166:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 167:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 168:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 169:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 170:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0xEF, \
 171:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 172:Middlewares/Third_Party/FatFs/src/ff.c **** 
 173:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 860	/* Portuguese */
 174:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 175:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x8F,0x8E,0x91,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F, \
 176:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 177:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x86,0x8B,0x9F,0x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 178:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 179:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 180:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 181:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 182:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 183:Middlewares/Third_Party/FatFs/src/ff.c **** 
 184:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 861	/* Icelandic */
 185:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 186:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F, \
 187:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 188:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA4,0xA5,0xA6,0xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 189:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 190:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 191:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 192:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 193:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 194:Middlewares/Third_Party/FatFs/src/ff.c **** 
 195:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 862	/* Hebrew */
 196:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 197:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 198:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 199:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 200:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 201:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 202:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 203:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 5


 204:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 205:Middlewares/Third_Party/FatFs/src/ff.c **** 
 206:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 863	/* Canadian-French */
 207:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 208:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x43,0x55,0x45,0x41,0x41,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F, \
 209:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x45,0x45,0x45,0x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0x9F, \
 210:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA0,0xA1,0x4F,0x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 211:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 212:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 213:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 214:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 215:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 216:Middlewares/Third_Party/FatFs/src/ff.c **** 
 217:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 864	/* Arabic */
 218:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 219:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
 220:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 221:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 222:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 223:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 224:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 225:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 226:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 227:Middlewares/Third_Party/FatFs/src/ff.c **** 
 228:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 865	/* Nordic */
 229:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 230:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
 231:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 232:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 233:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 234:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 235:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 236:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 237:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 238:Middlewares/Third_Party/FatFs/src/ff.c **** 
 239:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 866	/* Russian */
 240:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 241:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 242:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 243:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 244:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 245:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 246:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 247:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 248:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 249:Middlewares/Third_Party/FatFs/src/ff.c **** 
 250:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 869	/* Greek 2 */
 251:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 252:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 253:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0x90, \
 254:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x91,0x90,0x92,0x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 255:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 256:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 257:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0xDF, \
 258:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA9,0xAA,0xAC,0xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0xEF, \
 259:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xD1,0xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0xFF}
 260:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 6


 261:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 262:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
 263:Middlewares/Third_Party/FatFs/src/ff.c **** #error Cannot enable LFN without valid code page.
 264:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 265:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 266:Middlewares/Third_Party/FatFs/src/ff.c **** 
 267:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 268:Middlewares/Third_Party/FatFs/src/ff.c **** #error Unknown code page
 269:Middlewares/Third_Party/FatFs/src/ff.c **** 
 270:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 271:Middlewares/Third_Party/FatFs/src/ff.c **** 
 272:Middlewares/Third_Party/FatFs/src/ff.c **** 
 273:Middlewares/Third_Party/FatFs/src/ff.c **** /* Character code support macros */
 274:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 275:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 276:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 277:Middlewares/Third_Party/FatFs/src/ff.c **** 
 278:Middlewares/Third_Party/FatFs/src/ff.c **** #if _DF1S != 0	/* Code page is DBCS */
 279:Middlewares/Third_Party/FatFs/src/ff.c **** 
 280:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _DF2S	/* Two 1st byte areas */
 281:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 282:Middlewares/Third_Party/FatFs/src/ff.c **** #else			/* One 1st byte area */
 283:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 284:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 285:Middlewares/Third_Party/FatFs/src/ff.c **** 
 286:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _DS3S	/* Three 2nd byte areas */
 287:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 288:Middlewares/Third_Party/FatFs/src/ff.c **** #else			/* Two 2nd byte areas */
 289:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 290:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 291:Middlewares/Third_Party/FatFs/src/ff.c **** 
 292:Middlewares/Third_Party/FatFs/src/ff.c **** #else			/* Code page is SBCS */
 293:Middlewares/Third_Party/FatFs/src/ff.c **** 
 294:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS1(c)	0
 295:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS2(c)	0
 296:Middlewares/Third_Party/FatFs/src/ff.c **** 
 297:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _DF1S */
 298:Middlewares/Third_Party/FatFs/src/ff.c **** 
 299:Middlewares/Third_Party/FatFs/src/ff.c **** 
 300:Middlewares/Third_Party/FatFs/src/ff.c **** /* Additional file attribute bits for internal use */
 301:Middlewares/Third_Party/FatFs/src/ff.c **** #define	AM_VOL		0x08	/* Volume label */
 302:Middlewares/Third_Party/FatFs/src/ff.c **** #define AM_LFN		0x0F	/* LFN entry */
 303:Middlewares/Third_Party/FatFs/src/ff.c **** #define AM_MASK		0x3F	/* Mask of defined bits */
 304:Middlewares/Third_Party/FatFs/src/ff.c **** 
 305:Middlewares/Third_Party/FatFs/src/ff.c **** 
 306:Middlewares/Third_Party/FatFs/src/ff.c **** /* Additional file access control and file status flags for internal use */
 307:Middlewares/Third_Party/FatFs/src/ff.c **** #define FA_SEEKEND	0x20	/* Seek to end of the file on file open */
 308:Middlewares/Third_Party/FatFs/src/ff.c **** #define FA_MODIFIED	0x40	/* File has been modified */
 309:Middlewares/Third_Party/FatFs/src/ff.c **** #define FA_DIRTY	0x80	/* FIL.buf[] needs to be written-back */
 310:Middlewares/Third_Party/FatFs/src/ff.c **** 
 311:Middlewares/Third_Party/FatFs/src/ff.c **** 
 312:Middlewares/Third_Party/FatFs/src/ff.c **** /* Name status flags in fn[] */
 313:Middlewares/Third_Party/FatFs/src/ff.c **** #define NSFLAG		11		/* Index of the name status byte */
 314:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 315:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 316:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_LAST		0x04	/* Last segment */
 317:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 7


 318:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 319:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 320:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_NOLFN	0x40	/* Do not find LFN */
 321:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_NONAME	0x80	/* Not followed */
 322:Middlewares/Third_Party/FatFs/src/ff.c **** 
 323:Middlewares/Third_Party/FatFs/src/ff.c **** 
 324:Middlewares/Third_Party/FatFs/src/ff.c **** /* Limits and boundaries */
 325:Middlewares/Third_Party/FatFs/src/ff.c **** #define MAX_DIR		0x200000		/* Max size of FAT directory */
 326:Middlewares/Third_Party/FatFs/src/ff.c **** #define MAX_DIR_EX	0x10000000		/* Max size of exFAT directory */
 327:Middlewares/Third_Party/FatFs/src/ff.c **** #define MAX_FAT12	0xFF5			/* Max FAT12 clusters (differs from specs, but correct for real DOS/Windo
 328:Middlewares/Third_Party/FatFs/src/ff.c **** #define	MAX_FAT16	0xFFF5			/* Max FAT16 clusters (differs from specs, but correct for real DOS/Wind
 329:Middlewares/Third_Party/FatFs/src/ff.c **** #define	MAX_FAT32	0x0FFFFFF5		/* Max FAT32 clusters (not specified, practical limit) */
 330:Middlewares/Third_Party/FatFs/src/ff.c **** #define	MAX_EXFAT	0x7FFFFFFD		/* Max exFAT clusters (differs from specs, implementation limit) */
 331:Middlewares/Third_Party/FatFs/src/ff.c **** 
 332:Middlewares/Third_Party/FatFs/src/ff.c **** 
 333:Middlewares/Third_Party/FatFs/src/ff.c **** /* FatFs refers the FAT structure as simple byte array instead of structure member
 334:Middlewares/Third_Party/FatFs/src/ff.c **** / because the C structure is not binary compatible between different platforms */
 335:Middlewares/Third_Party/FatFs/src/ff.c **** 
 336:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_JmpBoot			0		/* x86 jump instruction (3-byte) */
 337:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_OEMName			3		/* OEM name (8-byte) */
 338:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_BytsPerSec		11		/* Sector size [byte] (WORD) */
 339:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_SecPerClus		13		/* Cluster size [sector] (BYTE) */
 340:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (WORD) */
 341:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_NumFATs			16		/* Number of FATs (BYTE) */
 342:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_RootEntCnt		17		/* Size of root directory area for FAT12/16 [entry] (WORD) */
 343:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_TotSec16		19		/* Volume size (16-bit) [sector] (WORD) */
 344:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_Media			21		/* Media descriptor byte (BYTE) */
 345:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FATSz16			22		/* FAT size (16-bit) [sector] (WORD) */
 346:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_SecPerTrk		24		/* Track size for int13h [sector] (WORD) */
 347:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_NumHeads		26		/* Number of heads for int13h (WORD) */
 348:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_HiddSec			28		/* Volume offset from top of the drive (DWORD) */
 349:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_TotSec32		32		/* Volume size (32-bit) [sector] (DWORD) */
 350:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_DrvNum			36		/* Physical drive number for int13h (BYTE) */
 351:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_NTres			37		/* Error flag (BYTE) */
 352:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_BootSig			38		/* Extended boot signature (BYTE) */
 353:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_VolID			39		/* Volume serial number (DWORD) */
 354:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_VolLab			43		/* Volume label string (8-byte) */
 355:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_FilSysType		54		/* File system type string (8-byte) */
 356:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_BootCode			62		/* Boot code (448-byte) */
 357:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_55AA				510		/* Signature word (WORD) */
 358:Middlewares/Third_Party/FatFs/src/ff.c **** 
 359:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FATSz32			36		/* FAT32: FAT size [sector] (DWORD) */
 360:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_ExtFlags32		40		/* FAT32: Extended flags (WORD) */
 361:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FSVer32			42		/* FAT32: File system version (WORD) */
 362:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_RootClus32		44		/* FAT32: Root directory cluster (DWORD) */
 363:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FSInfo32		48		/* FAT32: Offset of FSINFO sector (WORD) */
 364:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_BkBootSec32		50		/* FAT32: Offset of backup boot sector (WORD) */
 365:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_DrvNum32			64		/* FAT32: Physical drive number for int13h (BYTE) */
 366:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_NTres32			65		/* FAT32: Error flag (BYTE) */
 367:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_BootSig32		66		/* FAT32: Extended boot signature (BYTE) */
 368:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_VolID32			67		/* FAT32: Volume serial number (DWORD) */
 369:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_VolLab32			71		/* FAT32: Volume label string (8-byte) */
 370:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_FilSysType32		82		/* FAT32: File system type string (8-byte) */
 371:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_BootCode32		90		/* FAT32: Boot code (420-byte) */
 372:Middlewares/Third_Party/FatFs/src/ff.c **** 
 373:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_ZeroedEx		11		/* exFAT: MBZ field (53-byte) */
 374:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_VolOfsEx		64		/* exFAT: Volume offset from top of the drive [sector] (QWORD) */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 8


 375:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_TotSecEx		72		/* exFAT: Volume size [sector] (QWORD) */
 376:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FatOfsEx		80		/* exFAT: FAT offset from top of the volume [sector] (DWORD) */
 377:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FatSzEx			84		/* exFAT: FAT size [sector] (DWORD) */
 378:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_DataOfsEx		88		/* exFAT: Data offset from top of the volume [sector] (DWORD) */
 379:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_NumClusEx		92		/* exFAT: Number of clusters (DWORD) */
 380:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_RootClusEx		96		/* exFAT: Root directory start cluster (DWORD) */
 381:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_VolIDEx			100		/* exFAT: Volume serial number (DWORD) */
 382:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FSVerEx			104		/* exFAT: File system version (WORD) */
 383:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_VolFlagEx		106		/* exFAT: Volume flags (BYTE) */
 384:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_ActFatEx		107		/* exFAT: Active FAT flags (BYTE) */
 385:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_BytsPerSecEx	108		/* exFAT: Log2 of sector size in unit of byte (BYTE) */
 386:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_SecPerClusEx	109		/* exFAT: Log2 of cluster size in unit of sector (BYTE) */
 387:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_NumFATsEx		110		/* exFAT: Number of FATs (BYTE) */
 388:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_DrvNumEx		111		/* exFAT: Physical drive number for int13h (BYTE) */
 389:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_PercInUseEx		112		/* exFAT: Percent in use (BYTE) */
 390:Middlewares/Third_Party/FatFs/src/ff.c **** #define	BPB_RsvdEx			113		/* exFAT: Reserved (7-byte) */
 391:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_BootCodeEx		120		/* exFAT: Boot code (390-byte) */
 392:Middlewares/Third_Party/FatFs/src/ff.c **** 
 393:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_Name			0		/* Short file name (11-byte) */
 394:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_Attr			11		/* Attribute (BYTE) */
 395:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_NTres			12		/* Lower case flag (BYTE) */
 396:Middlewares/Third_Party/FatFs/src/ff.c **** #define DIR_CrtTime10		13		/* Created time sub-second (BYTE) */
 397:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_CrtTime			14		/* Created time (DWORD) */
 398:Middlewares/Third_Party/FatFs/src/ff.c **** #define DIR_LstAccDate		18		/* Last accessed date (WORD) */
 399:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_FstClusHI		20		/* Higher 16-bit of first cluster (WORD) */
 400:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_ModTime			22		/* Modified time (DWORD) */
 401:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_FstClusLO		26		/* Lower 16-bit of first cluster (WORD) */
 402:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_FileSize		28		/* File size (DWORD) */
 403:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LDIR_Ord			0		/* LFN: LFN order and LLE flag (BYTE) */
 404:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LDIR_Attr			11		/* LFN: LFN attribute (BYTE) */
 405:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LDIR_Type			12		/* LFN: Entry type (BYTE) */
 406:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LDIR_Chksum			13		/* LFN: Checksum of the SFN (BYTE) */
 407:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LDIR_FstClusLO		26		/* LFN: MBZ field (WORD) */
 408:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_Type			0		/* exFAT: Type of exFAT directory entry (BYTE) */
 409:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_NumLabel		1		/* exFAT: Number of volume label characters (BYTE) */
 410:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_Label			2		/* exFAT: Volume label (11-WORD) */
 411:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_CaseSum		4		/* exFAT: Sum of case conversion table (DWORD) */
 412:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_NumSec			1		/* exFAT: Number of secondary entries (BYTE) */
 413:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_SetSum			2		/* exFAT: Sum of the set of directory entries (WORD) */
 414:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_Attr			4		/* exFAT: File attribute (WORD) */
 415:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_CrtTime		8		/* exFAT: Created time (DWORD) */
 416:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_ModTime		12		/* exFAT: Modified time (DWORD) */
 417:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_AccTime		16		/* exFAT: Last accessed time (DWORD) */
 418:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_CrtTime10		20		/* exFAT: Created time subsecond (BYTE) */
 419:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_ModTime10		21		/* exFAT: Modified time subsecond (BYTE) */
 420:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_CrtTZ			22		/* exFAT: Created timezone (BYTE) */
 421:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_ModTZ			23		/* exFAT: Modified timezone (BYTE) */
 422:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_AccTZ			24		/* exFAT: Last accessed timezone (BYTE) */
 423:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_GenFlags		33		/* exFAT: General secondary flags (WORD) */
 424:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_NumName		35		/* exFAT: Number of file name characters (BYTE) */
 425:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_NameHash		36		/* exFAT: Hash of file name (WORD) */
 426:Middlewares/Third_Party/FatFs/src/ff.c **** #define XDIR_ValidFileSize	40		/* exFAT: Valid file size (QWORD) */
 427:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_FstClus		52		/* exFAT: First cluster of the file data (DWORD) */
 428:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_FileSize		56		/* exFAT: File/Directory size (QWORD) */
 429:Middlewares/Third_Party/FatFs/src/ff.c **** 
 430:Middlewares/Third_Party/FatFs/src/ff.c **** #define	SZDIRE				32		/* Size of a directory entry */
 431:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DDEM				0xE5	/* Deleted directory entry mark set to DIR_Name[0] */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 9


 432:Middlewares/Third_Party/FatFs/src/ff.c **** #define	RDDEM				0x05	/* Replacement of the character collides with DDEM */
 433:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LLEF				0x40	/* Last long entry flag in LDIR_Ord */
 434:Middlewares/Third_Party/FatFs/src/ff.c **** 
 435:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FSI_LeadSig			0		/* FAT32 FSI: Leading signature (DWORD) */
 436:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FSI_StrucSig		484		/* FAT32 FSI: Structure signature (DWORD) */
 437:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FSI_Free_Count		488		/* FAT32 FSI: Number of free clusters (DWORD) */
 438:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FSI_Nxt_Free		492		/* FAT32 FSI: Last allocated cluster (DWORD) */
 439:Middlewares/Third_Party/FatFs/src/ff.c **** 
 440:Middlewares/Third_Party/FatFs/src/ff.c **** #define MBR_Table			446		/* MBR: Offset of partition table in the MBR */
 441:Middlewares/Third_Party/FatFs/src/ff.c **** #define	SZ_PTE				16		/* MBR: Size of a partition table entry */
 442:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_Boot			0		/* MBR PTE: Boot indicator */
 443:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_StHead			1		/* MBR PTE: Start head */
 444:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_StSec			2		/* MBR PTE: Start sector */
 445:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_StCyl			3		/* MBR PTE: Start cylinder */
 446:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_System			4		/* MBR PTE: System ID */
 447:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_EdHead			5		/* MBR PTE: End head */
 448:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_EdSec			6		/* MBR PTE: End sector */
 449:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_EdCyl			7		/* MBR PTE: End cylinder */
 450:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_StLba			8		/* MBR PTE: Start in LBA */
 451:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_SizLba			12		/* MBR PTE: Size in LBA */
 452:Middlewares/Third_Party/FatFs/src/ff.c **** 
 453:Middlewares/Third_Party/FatFs/src/ff.c **** 
 454:Middlewares/Third_Party/FatFs/src/ff.c **** /* Post process after fatal error on file operation */
 455:Middlewares/Third_Party/FatFs/src/ff.c **** #define	ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
 456:Middlewares/Third_Party/FatFs/src/ff.c **** 
 457:Middlewares/Third_Party/FatFs/src/ff.c **** 
 458:Middlewares/Third_Party/FatFs/src/ff.c **** /* Reentrancy related */
 459:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
 460:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN == 1
 461:Middlewares/Third_Party/FatFs/src/ff.c **** #error Static LFN work area cannot be used at thread-safe configuration
 462:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 463:Middlewares/Third_Party/FatFs/src/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 464:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 465:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 466:Middlewares/Third_Party/FatFs/src/ff.c **** #define	ENTER_FF(fs)
 467:Middlewares/Third_Party/FatFs/src/ff.c **** #define LEAVE_FF(fs, res)	return res
 468:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 469:Middlewares/Third_Party/FatFs/src/ff.c **** 
 470:Middlewares/Third_Party/FatFs/src/ff.c **** 
 471:Middlewares/Third_Party/FatFs/src/ff.c **** /* Definitions of volume - partition conversion */
 472:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MULTI_PARTITION
 473:Middlewares/Third_Party/FatFs/src/ff.c **** #define LD2PD(vol) VolToPart[vol].pd	/* Get physical drive number */
 474:Middlewares/Third_Party/FatFs/src/ff.c **** #define LD2PT(vol) VolToPart[vol].pt	/* Get partition index */
 475:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 476:Middlewares/Third_Party/FatFs/src/ff.c **** #define LD2PD(vol) (BYTE)(vol)	/* Each logical drive is bound to the same physical drive number */
 477:Middlewares/Third_Party/FatFs/src/ff.c **** #define LD2PT(vol) 0			/* Find first valid partition or in SFD */
 478:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 479:Middlewares/Third_Party/FatFs/src/ff.c **** 
 480:Middlewares/Third_Party/FatFs/src/ff.c **** 
 481:Middlewares/Third_Party/FatFs/src/ff.c **** /* Definitions of sector size */
 482:Middlewares/Third_Party/FatFs/src/ff.c **** #if (_MAX_SS < _MIN_SS) || (_MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 483:Middlewares/Third_Party/FatFs/src/ff.c **** #error Wrong sector size configuration
 484:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 485:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS == _MIN_SS
 486:Middlewares/Third_Party/FatFs/src/ff.c **** #define	SS(fs)	((UINT)_MAX_SS)	/* Fixed sector size */
 487:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 488:Middlewares/Third_Party/FatFs/src/ff.c **** #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 10


 489:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 490:Middlewares/Third_Party/FatFs/src/ff.c **** 
 491:Middlewares/Third_Party/FatFs/src/ff.c **** 
 492:Middlewares/Third_Party/FatFs/src/ff.c **** /* Timestamp */
 493:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_NORTC == 1
 494:Middlewares/Third_Party/FatFs/src/ff.c **** #if _NORTC_YEAR < 1980 || _NORTC_YEAR > 2107 || _NORTC_MON < 1 || _NORTC_MON > 12 || _NORTC_MDAY < 
 495:Middlewares/Third_Party/FatFs/src/ff.c **** #error Invalid _FS_NORTC settings
 496:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 497:Middlewares/Third_Party/FatFs/src/ff.c **** #define GET_FATTIME()	((DWORD)(_NORTC_YEAR - 1980) << 25 | (DWORD)_NORTC_MON << 21 | (DWORD)_NORTC_
 498:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 499:Middlewares/Third_Party/FatFs/src/ff.c **** #define GET_FATTIME()	get_fattime()
 500:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 501:Middlewares/Third_Party/FatFs/src/ff.c **** 
 502:Middlewares/Third_Party/FatFs/src/ff.c **** 
 503:Middlewares/Third_Party/FatFs/src/ff.c **** /* File lock controls */
 504:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 505:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_READONLY
 506:Middlewares/Third_Party/FatFs/src/ff.c **** #error _FS_LOCK must be 0 at read-only configuration
 507:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 508:Middlewares/Third_Party/FatFs/src/ff.c **** typedef struct {
 509:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
 510:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clu;		/* Object ID 2, containing directory (0:root) */
 511:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ofs;		/* Object ID 3, offset in the directory */
 512:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
 513:Middlewares/Third_Party/FatFs/src/ff.c **** } FILESEM;
 514:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 515:Middlewares/Third_Party/FatFs/src/ff.c **** 
 516:Middlewares/Third_Party/FatFs/src/ff.c **** 
 517:Middlewares/Third_Party/FatFs/src/ff.c **** 
 518:Middlewares/Third_Party/FatFs/src/ff.c **** 
 519:Middlewares/Third_Party/FatFs/src/ff.c **** 
 520:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------------------------------------------
 521:Middlewares/Third_Party/FatFs/src/ff.c **** 
 522:Middlewares/Third_Party/FatFs/src/ff.c ****    Module Private Work Area
 523:Middlewares/Third_Party/FatFs/src/ff.c **** 
 524:Middlewares/Third_Party/FatFs/src/ff.c **** ---------------------------------------------------------------------------*/
 525:Middlewares/Third_Party/FatFs/src/ff.c **** 
 526:Middlewares/Third_Party/FatFs/src/ff.c **** /* Remark: Variables defined here without initial value shall be guaranteed
 527:Middlewares/Third_Party/FatFs/src/ff.c **** /  zero/null at start-up. If not, the linker option or start-up routine is
 528:Middlewares/Third_Party/FatFs/src/ff.c **** /  not compliance with C standard. */
 529:Middlewares/Third_Party/FatFs/src/ff.c **** 
 530:Middlewares/Third_Party/FatFs/src/ff.c **** #if _VOLUMES < 1 || _VOLUMES > 10
 531:Middlewares/Third_Party/FatFs/src/ff.c **** #error Wrong _VOLUMES setting
 532:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 533:Middlewares/Third_Party/FatFs/src/ff.c **** static FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 534:Middlewares/Third_Party/FatFs/src/ff.c **** static WORD Fsid;				/* File system mount ID */
 535:Middlewares/Third_Party/FatFs/src/ff.c **** 
 536:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0 && _VOLUMES >= 2
 537:Middlewares/Third_Party/FatFs/src/ff.c **** static BYTE CurrVol;			/* Current drive */
 538:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 539:Middlewares/Third_Party/FatFs/src/ff.c **** 
 540:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 541:Middlewares/Third_Party/FatFs/src/ff.c **** static FILESEM Files[_FS_LOCK];	/* Open object lock semaphores */
 542:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 543:Middlewares/Third_Party/FatFs/src/ff.c **** 
 544:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN == 0		/* Non-LFN configuration */
 545:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 11


 546:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)
 547:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()
 548:Middlewares/Third_Party/FatFs/src/ff.c **** 
 549:Middlewares/Third_Party/FatFs/src/ff.c **** #else					/* LFN configuration */
 550:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_LFN < 12 || _MAX_LFN > 255
 551:Middlewares/Third_Party/FatFs/src/ff.c **** #error Wrong _MAX_LFN value
 552:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 553:Middlewares/Third_Party/FatFs/src/ff.c **** #define MAXDIRB(nc)	((nc + 44U) / 15 * SZDIRE)
 554:Middlewares/Third_Party/FatFs/src/ff.c **** 
 555:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN == 1		/* LFN enabled with static working buffer */
 556:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 557:Middlewares/Third_Party/FatFs/src/ff.c **** static BYTE	DirBuf[MAXDIRB(_MAX_LFN)];	/* Directory entry block scratchpad buffer */
 558:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 559:Middlewares/Third_Party/FatFs/src/ff.c **** static WCHAR LfnBuf[_MAX_LFN + 1];	/* LFN enabled with static working buffer */
 560:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF
 561:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)
 562:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()
 563:Middlewares/Third_Party/FatFs/src/ff.c **** 
 564:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _USE_LFN == 2 	/* LFN enabled with dynamic working buffer on the stack */
 565:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 566:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF		WCHAR lbuf[_MAX_LFN+1]; BYTE dbuf[MAXDIRB(_MAX_LFN)];
 567:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; (fs)->dirbuf = dbuf; }
 568:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()
 569:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 570:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF		WCHAR lbuf[_MAX_LFN+1];
 571:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; }
 572:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()
 573:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 574:Middlewares/Third_Party/FatFs/src/ff.c **** 
 575:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _USE_LFN == 3 	/* LFN enabled with dynamic working buffer on the heap */
 576:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 577:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF		WCHAR *lfn;
 578:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((_MAX_LFN+1)*2 + MAXDIRB(_MAX_LFN)); if (!lfn) LEAVE_FF
 579:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()	ff_memfree(lfn)
 580:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 581:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF		WCHAR *lfn;
 582:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((_MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH_C
 583:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()	ff_memfree(lfn)
 584:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 585:Middlewares/Third_Party/FatFs/src/ff.c **** 
 586:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 587:Middlewares/Third_Party/FatFs/src/ff.c **** #error Wrong _USE_LFN setting
 588:Middlewares/Third_Party/FatFs/src/ff.c **** 
 589:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 590:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* else _USE_LFN == 0 */
 591:Middlewares/Third_Party/FatFs/src/ff.c **** 
 592:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
 593:Middlewares/Third_Party/FatFs/src/ff.c **** static const BYTE ExCvt[] = _EXCVT;	/* Upper conversion table for SBCS extended characters */
 594:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 595:Middlewares/Third_Party/FatFs/src/ff.c **** 
 596:Middlewares/Third_Party/FatFs/src/ff.c **** 
 597:Middlewares/Third_Party/FatFs/src/ff.c **** 
 598:Middlewares/Third_Party/FatFs/src/ff.c **** 
 599:Middlewares/Third_Party/FatFs/src/ff.c **** 
 600:Middlewares/Third_Party/FatFs/src/ff.c **** 
 601:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------------------------------------------
 602:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 12


 603:Middlewares/Third_Party/FatFs/src/ff.c ****    Module Private Functions
 604:Middlewares/Third_Party/FatFs/src/ff.c **** 
 605:Middlewares/Third_Party/FatFs/src/ff.c **** ---------------------------------------------------------------------------*/
 606:Middlewares/Third_Party/FatFs/src/ff.c **** 
 607:Middlewares/Third_Party/FatFs/src/ff.c **** 
 608:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 609:Middlewares/Third_Party/FatFs/src/ff.c **** /* Load/Store multi-byte word in the FAT structure                       */
 610:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 611:Middlewares/Third_Party/FatFs/src/ff.c **** 
 612:Middlewares/Third_Party/FatFs/src/ff.c **** static
 613:Middlewares/Third_Party/FatFs/src/ff.c **** WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
 614:Middlewares/Third_Party/FatFs/src/ff.c **** {
  27              		.loc 1 614 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 615:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD rv;
 616:Middlewares/Third_Party/FatFs/src/ff.c **** 
 617:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = ptr[1];
  33              		.loc 1 617 0
  34 0000 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
  35              	.LVL1:
 618:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[0];
  36              		.loc 1 618 0
  37 0002 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  38              	.LVL2:
 619:Middlewares/Third_Party/FatFs/src/ff.c **** 	return rv;
 620:Middlewares/Third_Party/FatFs/src/ff.c **** }
  39              		.loc 1 620 0
  40 0004 40EA0220 		orr	r0, r0, r2, lsl #8
  41              	.LVL3:
  42 0008 7047     		bx	lr
  43              		.cfi_endproc
  44              	.LFE143:
  46              		.section	.text.ld_dword,"ax",%progbits
  47              		.align	1
  48              		.syntax unified
  49              		.thumb
  50              		.thumb_func
  51              		.fpu fpv5-sp-d16
  53              	ld_dword:
  54              	.LFB144:
 621:Middlewares/Third_Party/FatFs/src/ff.c **** 
 622:Middlewares/Third_Party/FatFs/src/ff.c **** static
 623:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
 624:Middlewares/Third_Party/FatFs/src/ff.c **** {
  55              		.loc 1 624 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
  60              	.LVL4:
 625:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD rv;
 626:Middlewares/Third_Party/FatFs/src/ff.c **** 
 627:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = ptr[3];
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 13


  61              		.loc 1 627 0
  62 0000 C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
  63              	.LVL5:
 628:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[2];
  64              		.loc 1 628 0
  65 0002 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
  66 0004 43EA0222 		orr	r2, r3, r2, lsl #8
  67              	.LVL6:
 629:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[1];
  68              		.loc 1 629 0
  69 0008 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
  70 000a 43EA0223 		orr	r3, r3, r2, lsl #8
  71              	.LVL7:
 630:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[0];
  72              		.loc 1 630 0
  73 000e 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  74              	.LVL8:
 631:Middlewares/Third_Party/FatFs/src/ff.c **** 	return rv;
 632:Middlewares/Third_Party/FatFs/src/ff.c **** }
  75              		.loc 1 632 0
  76 0010 40EA0320 		orr	r0, r0, r3, lsl #8
  77              	.LVL9:
  78 0014 7047     		bx	lr
  79              		.cfi_endproc
  80              	.LFE144:
  82              		.section	.text.st_word,"ax",%progbits
  83              		.align	1
  84              		.syntax unified
  85              		.thumb
  86              		.thumb_func
  87              		.fpu fpv5-sp-d16
  89              	st_word:
  90              	.LFB145:
 633:Middlewares/Third_Party/FatFs/src/ff.c **** 
 634:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 635:Middlewares/Third_Party/FatFs/src/ff.c **** static
 636:Middlewares/Third_Party/FatFs/src/ff.c **** QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
 637:Middlewares/Third_Party/FatFs/src/ff.c **** {
 638:Middlewares/Third_Party/FatFs/src/ff.c **** 	QWORD rv;
 639:Middlewares/Third_Party/FatFs/src/ff.c **** 
 640:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = ptr[7];
 641:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[6];
 642:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[5];
 643:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[4];
 644:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[3];
 645:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[2];
 646:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[1];
 647:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[0];
 648:Middlewares/Third_Party/FatFs/src/ff.c **** 	return rv;
 649:Middlewares/Third_Party/FatFs/src/ff.c **** }
 650:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 651:Middlewares/Third_Party/FatFs/src/ff.c **** 
 652:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 653:Middlewares/Third_Party/FatFs/src/ff.c **** static
 654:Middlewares/Third_Party/FatFs/src/ff.c **** void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
 655:Middlewares/Third_Party/FatFs/src/ff.c **** {
  91              		.loc 1 655 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 14


  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              		@ link register save eliminated.
  96              	.LVL10:
 656:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
  97              		.loc 1 656 0
  98 0000 0170     		strb	r1, [r0]
  99              	.LVL11:
 657:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val;
 100              		.loc 1 657 0
 101 0002 090A     		lsrs	r1, r1, #8
 102              	.LVL12:
 103 0004 4170     		strb	r1, [r0, #1]
 658:Middlewares/Third_Party/FatFs/src/ff.c **** }
 104              		.loc 1 658 0
 105 0006 7047     		bx	lr
 106              		.cfi_endproc
 107              	.LFE145:
 109              		.section	.text.st_dword,"ax",%progbits
 110              		.align	1
 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 114              		.fpu fpv5-sp-d16
 116              	st_dword:
 117              	.LFB146:
 659:Middlewares/Third_Party/FatFs/src/ff.c **** 
 660:Middlewares/Third_Party/FatFs/src/ff.c **** static
 661:Middlewares/Third_Party/FatFs/src/ff.c **** void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
 662:Middlewares/Third_Party/FatFs/src/ff.c **** {
 118              		.loc 1 662 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 123              	.LVL13:
 663:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 124              		.loc 1 663 0
 125 0000 0170     		strb	r1, [r0]
 126              	.LVL14:
 664:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 127              		.loc 1 664 0
 128 0002 C1F30723 		ubfx	r3, r1, #8, #8
 129 0006 4370     		strb	r3, [r0, #1]
 130              	.LVL15:
 665:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 131              		.loc 1 665 0
 132 0008 C1F30743 		ubfx	r3, r1, #16, #8
 133 000c 8370     		strb	r3, [r0, #2]
 134              	.LVL16:
 666:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val;
 135              		.loc 1 666 0
 136 000e 090E     		lsrs	r1, r1, #24
 137              	.LVL17:
 138 0010 C170     		strb	r1, [r0, #3]
 667:Middlewares/Third_Party/FatFs/src/ff.c **** }
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 15


 139              		.loc 1 667 0
 140 0012 7047     		bx	lr
 141              		.cfi_endproc
 142              	.LFE146:
 144              		.section	.text.mem_cpy,"ax",%progbits
 145              		.align	1
 146              		.syntax unified
 147              		.thumb
 148              		.thumb_func
 149              		.fpu fpv5-sp-d16
 151              	mem_cpy:
 152              	.LFB147:
 668:Middlewares/Third_Party/FatFs/src/ff.c **** 
 669:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 670:Middlewares/Third_Party/FatFs/src/ff.c **** static
 671:Middlewares/Third_Party/FatFs/src/ff.c **** void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
 672:Middlewares/Third_Party/FatFs/src/ff.c **** {
 673:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 674:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 675:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 676:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 677:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 678:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 679:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 680:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val;
 681:Middlewares/Third_Party/FatFs/src/ff.c **** }
 682:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 683:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* !_FS_READONLY */
 684:Middlewares/Third_Party/FatFs/src/ff.c **** 
 685:Middlewares/Third_Party/FatFs/src/ff.c **** 
 686:Middlewares/Third_Party/FatFs/src/ff.c **** 
 687:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 688:Middlewares/Third_Party/FatFs/src/ff.c **** /* String functions                                                      */
 689:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 690:Middlewares/Third_Party/FatFs/src/ff.c **** 
 691:Middlewares/Third_Party/FatFs/src/ff.c **** /* Copy memory to memory */
 692:Middlewares/Third_Party/FatFs/src/ff.c **** static
 693:Middlewares/Third_Party/FatFs/src/ff.c **** void mem_cpy (void* dst, const void* src, UINT cnt) {
 153              		.loc 1 693 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 158              	.LVL18:
 694:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *d = (BYTE*)dst;
 695:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE *s = (const BYTE*)src;
 696:Middlewares/Third_Party/FatFs/src/ff.c **** 
 697:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (cnt) {
 159              		.loc 1 697 0
 160 0000 1346     		mov	r3, r2
 161 0002 2AB1     		cbz	r2, .L5
 162              	.LVL19:
 163              	.L7:
 698:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
 699:Middlewares/Third_Party/FatFs/src/ff.c **** 			*d++ = *s++;
 164              		.loc 1 699 0 discriminator 1
 165 0004 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 16


 166 0006 0270     		strb	r2, [r0]
 167              	.LVL20:
 168 0008 0130     		adds	r0, r0, #1
 169              	.LVL21:
 170 000a 0131     		adds	r1, r1, #1
 171              	.LVL22:
 700:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (--cnt);
 172              		.loc 1 700 0 discriminator 1
 173 000c 013B     		subs	r3, r3, #1
 174              	.LVL23:
 175 000e F9D1     		bne	.L7
 176              	.L5:
 701:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 702:Middlewares/Third_Party/FatFs/src/ff.c **** }
 177              		.loc 1 702 0
 178 0010 7047     		bx	lr
 179              		.cfi_endproc
 180              	.LFE147:
 182              		.section	.text.mem_set,"ax",%progbits
 183              		.align	1
 184              		.syntax unified
 185              		.thumb
 186              		.thumb_func
 187              		.fpu fpv5-sp-d16
 189              	mem_set:
 190              	.LFB148:
 703:Middlewares/Third_Party/FatFs/src/ff.c **** 
 704:Middlewares/Third_Party/FatFs/src/ff.c **** /* Fill memory block */
 705:Middlewares/Third_Party/FatFs/src/ff.c **** static
 706:Middlewares/Third_Party/FatFs/src/ff.c **** void mem_set (void* dst, int val, UINT cnt) {
 191              		.loc 1 706 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 196              	.LVL24:
 197              	.L9:
 707:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *d = (BYTE*)dst;
 708:Middlewares/Third_Party/FatFs/src/ff.c **** 
 709:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
 710:Middlewares/Third_Party/FatFs/src/ff.c **** 		*d++ = (BYTE)val;
 198              		.loc 1 710 0 discriminator 1
 199 0000 0170     		strb	r1, [r0]
 200              	.LVL25:
 201 0002 0130     		adds	r0, r0, #1
 202              	.LVL26:
 711:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (--cnt);
 203              		.loc 1 711 0 discriminator 1
 204 0004 013A     		subs	r2, r2, #1
 205              	.LVL27:
 206 0006 FBD1     		bne	.L9
 712:Middlewares/Third_Party/FatFs/src/ff.c **** }
 207              		.loc 1 712 0
 208 0008 7047     		bx	lr
 209              		.cfi_endproc
 210              	.LFE148:
 212              		.section	.text.mem_cmp,"ax",%progbits
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 17


 213              		.align	1
 214              		.syntax unified
 215              		.thumb
 216              		.thumb_func
 217              		.fpu fpv5-sp-d16
 219              	mem_cmp:
 220              	.LFB149:
 713:Middlewares/Third_Party/FatFs/src/ff.c **** 
 714:Middlewares/Third_Party/FatFs/src/ff.c **** /* Compare memory block */
 715:Middlewares/Third_Party/FatFs/src/ff.c **** static
 716:Middlewares/Third_Party/FatFs/src/ff.c **** int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 221              		.loc 1 716 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              		@ link register save eliminated.
 226              	.LVL28:
 227 0000 30B4     		push	{r4, r5}
 228              	.LCFI0:
 229              		.cfi_def_cfa_offset 8
 230              		.cfi_offset 4, -8
 231              		.cfi_offset 5, -4
 232              	.LVL29:
 233              	.L12:
 717:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 718:Middlewares/Third_Party/FatFs/src/ff.c **** 	int r = 0;
 719:Middlewares/Third_Party/FatFs/src/ff.c **** 
 720:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
 721:Middlewares/Third_Party/FatFs/src/ff.c **** 		r = *d++ - *s++;
 234              		.loc 1 721 0 discriminator 2
 235 0002 451C     		adds	r5, r0, #1
 236              	.LVL30:
 237 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 238              	.LVL31:
 239 0006 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 240 0008 1B1A     		subs	r3, r3, r0
 241              	.LVL32:
 722:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (--cnt && r == 0);
 242              		.loc 1 722 0 discriminator 2
 243 000a 013A     		subs	r2, r2, #1
 244              	.LVL33:
 245 000c 04D0     		beq	.L10
 246 000e 4C1C     		adds	r4, r1, #1
 247              	.LVL34:
 721:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (--cnt && r == 0);
 248              		.loc 1 721 0 discriminator 1
 249 0010 2846     		mov	r0, r5
 250 0012 2146     		mov	r1, r4
 251              		.loc 1 722 0 discriminator 1
 252 0014 002B     		cmp	r3, #0
 253 0016 F4D0     		beq	.L12
 254              	.LVL35:
 255              	.L10:
 723:Middlewares/Third_Party/FatFs/src/ff.c **** 
 724:Middlewares/Third_Party/FatFs/src/ff.c **** 	return r;
 725:Middlewares/Third_Party/FatFs/src/ff.c **** }
 256              		.loc 1 725 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 18


 257 0018 1846     		mov	r0, r3
 258 001a 30BC     		pop	{r4, r5}
 259              	.LCFI1:
 260              		.cfi_restore 5
 261              		.cfi_restore 4
 262              		.cfi_def_cfa_offset 0
 263              	.LVL36:
 264 001c 7047     		bx	lr
 265              		.cfi_endproc
 266              	.LFE149:
 268              		.section	.text.chk_chr,"ax",%progbits
 269              		.align	1
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 273              		.fpu fpv5-sp-d16
 275              	chk_chr:
 276              	.LFB150:
 726:Middlewares/Third_Party/FatFs/src/ff.c **** 
 727:Middlewares/Third_Party/FatFs/src/ff.c **** /* Check if chr is contained in the string */
 728:Middlewares/Third_Party/FatFs/src/ff.c **** static
 729:Middlewares/Third_Party/FatFs/src/ff.c **** int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 277              		.loc 1 729 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 282              	.LVL37:
 730:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (*str && *str != chr) str++;
 283              		.loc 1 730 0
 284 0000 00E0     		b	.L15
 285              	.L17:
 286              		.loc 1 730 0 is_stmt 0 discriminator 3
 287 0002 0130     		adds	r0, r0, #1
 288              	.LVL38:
 289              	.L15:
 290              		.loc 1 730 0 discriminator 1
 291 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 292 0006 0BB1     		cbz	r3, .L16
 293              		.loc 1 730 0 discriminator 2
 294 0008 8B42     		cmp	r3, r1
 295 000a FAD1     		bne	.L17
 296              	.L16:
 731:Middlewares/Third_Party/FatFs/src/ff.c **** 	return *str;
 732:Middlewares/Third_Party/FatFs/src/ff.c **** }
 297              		.loc 1 732 0 is_stmt 1
 298 000c 1846     		mov	r0, r3
 299              	.LVL39:
 300 000e 7047     		bx	lr
 301              		.cfi_endproc
 302              	.LFE150:
 304              		.section	.text.chk_lock,"ax",%progbits
 305              		.align	1
 306              		.syntax unified
 307              		.thumb
 308              		.thumb_func
 309              		.fpu fpv5-sp-d16
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 19


 311              	chk_lock:
 312              	.LFB153:
 733:Middlewares/Third_Party/FatFs/src/ff.c **** 
 734:Middlewares/Third_Party/FatFs/src/ff.c **** 
 735:Middlewares/Third_Party/FatFs/src/ff.c **** 
 736:Middlewares/Third_Party/FatFs/src/ff.c **** 
 737:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
 738:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 739:Middlewares/Third_Party/FatFs/src/ff.c **** /* Request/Release grant to access the volume                            */
 740:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 741:Middlewares/Third_Party/FatFs/src/ff.c **** static
 742:Middlewares/Third_Party/FatFs/src/ff.c **** int lock_fs (
 743:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs		/* File system object */
 744:Middlewares/Third_Party/FatFs/src/ff.c **** )
 745:Middlewares/Third_Party/FatFs/src/ff.c **** {
 746:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 747:Middlewares/Third_Party/FatFs/src/ff.c **** }
 748:Middlewares/Third_Party/FatFs/src/ff.c **** 
 749:Middlewares/Third_Party/FatFs/src/ff.c **** 
 750:Middlewares/Third_Party/FatFs/src/ff.c **** static
 751:Middlewares/Third_Party/FatFs/src/ff.c **** void unlock_fs (
 752:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,		/* File system object */
 753:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res		/* Result code to be returned */
 754:Middlewares/Third_Party/FatFs/src/ff.c **** )
 755:Middlewares/Third_Party/FatFs/src/ff.c **** {
 756:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 757:Middlewares/Third_Party/FatFs/src/ff.c **** 		ff_rel_grant(fs->sobj);
 758:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 759:Middlewares/Third_Party/FatFs/src/ff.c **** }
 760:Middlewares/Third_Party/FatFs/src/ff.c **** 
 761:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 762:Middlewares/Third_Party/FatFs/src/ff.c **** 
 763:Middlewares/Third_Party/FatFs/src/ff.c **** 
 764:Middlewares/Third_Party/FatFs/src/ff.c **** 
 765:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 766:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 767:Middlewares/Third_Party/FatFs/src/ff.c **** /* File lock control functions                                           */
 768:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 769:Middlewares/Third_Party/FatFs/src/ff.c **** 
 770:Middlewares/Third_Party/FatFs/src/ff.c **** static
 771:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT chk_lock (	/* Check if the file can be accessed */
 772:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Directory object pointing the file to be checked */
 773:Middlewares/Third_Party/FatFs/src/ff.c **** 	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
 774:Middlewares/Third_Party/FatFs/src/ff.c **** )
 775:Middlewares/Third_Party/FatFs/src/ff.c **** {
 313              		.loc 1 775 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317              		@ link register save eliminated.
 318              	.LVL40:
 319 0000 30B4     		push	{r4, r5}
 320              	.LCFI2:
 321              		.cfi_def_cfa_offset 8
 322              		.cfi_offset 4, -8
 323              		.cfi_offset 5, -4
 324              	.LVL41:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 20


 776:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, be;
 777:Middlewares/Third_Party/FatFs/src/ff.c **** 
 778:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Search file semaphore table */
 779:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = be = 0; i < _FS_LOCK; i++) {
 325              		.loc 1 779 0
 326 0002 0025     		movs	r5, #0
 327 0004 2B46     		mov	r3, r5
 328 0006 01E0     		b	.L19
 329              	.LVL42:
 330              	.L25:
 780:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 781:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 782:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 783:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].ofs == dp->dptr) break;
 784:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {			/* Blank entry */
 785:Middlewares/Third_Party/FatFs/src/ff.c **** 			be = 1;
 331              		.loc 1 785 0
 332 0008 0125     		movs	r5, #1
 333              	.LVL43:
 334              	.L20:
 779:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 335              		.loc 1 779 0 discriminator 2
 336 000a 0133     		adds	r3, r3, #1
 337              	.LVL44:
 338              	.L19:
 779:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 339              		.loc 1 779 0 is_stmt 0 discriminator 1
 340 000c 012B     		cmp	r3, #1
 341 000e 15D8     		bhi	.L21
 780:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 342              		.loc 1 780 0 is_stmt 1
 343 0010 1A01     		lsls	r2, r3, #4
 344 0012 174C     		ldr	r4, .L32
 345 0014 A258     		ldr	r2, [r4, r2]
 346 0016 002A     		cmp	r2, #0
 347 0018 F6D0     		beq	.L25
 781:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 348              		.loc 1 781 0
 349 001a 0468     		ldr	r4, [r0]
 350 001c A242     		cmp	r2, r4
 351 001e F4D1     		bne	.L20
 782:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].ofs == dp->dptr) break;
 352              		.loc 1 782 0 discriminator 1
 353 0020 134A     		ldr	r2, .L32
 354 0022 02EB0312 		add	r2, r2, r3, lsl #4
 355 0026 5468     		ldr	r4, [r2, #4]
 356 0028 8268     		ldr	r2, [r0, #8]
 781:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 357              		.loc 1 781 0 discriminator 1
 358 002a 9442     		cmp	r4, r2
 359 002c EDD1     		bne	.L20
 783:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {			/* Blank entry */
 360              		.loc 1 783 0
 361 002e 104A     		ldr	r2, .L32
 362 0030 02EB0312 		add	r2, r2, r3, lsl #4
 363 0034 9468     		ldr	r4, [r2, #8]
 364 0036 4269     		ldr	r2, [r0, #20]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 21


 782:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].ofs == dp->dptr) break;
 365              		.loc 1 782 0
 366 0038 9442     		cmp	r4, r2
 367 003a E6D1     		bne	.L20
 368              	.L21:
 786:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 787:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 788:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i == _FS_LOCK) {	/* The object is not opened */
 369              		.loc 1 788 0
 370 003c 022B     		cmp	r3, #2
 371 003e 0AD0     		beq	.L30
 789:Middlewares/Third_Party/FatFs/src/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 790:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 791:Middlewares/Third_Party/FatFs/src/ff.c **** 
 792:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* The object has been opened. Reject any open against writing file and all write mode open */
 793:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 372              		.loc 1 793 0
 373 0040 A1B9     		cbnz	r1, .L27
 374              		.loc 1 793 0 is_stmt 0 discriminator 2
 375 0042 0B4A     		ldr	r2, .L32
 376 0044 02EB0313 		add	r3, r2, r3, lsl #4
 377              	.LVL45:
 378 0048 9B89     		ldrh	r3, [r3, #12]
 379 004a B3F5807F 		cmp	r3, #256
 380 004e 09D0     		beq	.L31
 381              		.loc 1 793 0
 382 0050 0020     		movs	r0, #0
 383              	.LVL46:
 384              	.L24:
 794:Middlewares/Third_Party/FatFs/src/ff.c **** }
 385              		.loc 1 794 0 is_stmt 1
 386 0052 30BC     		pop	{r4, r5}
 387              	.LCFI3:
 388              		.cfi_remember_state
 389              		.cfi_restore 5
 390              		.cfi_restore 4
 391              		.cfi_def_cfa_offset 0
 392 0054 7047     		bx	lr
 393              	.LVL47:
 394              	.L30:
 395              	.LCFI4:
 396              		.cfi_restore_state
 789:Middlewares/Third_Party/FatFs/src/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 397              		.loc 1 789 0
 398 0056 0229     		cmp	r1, #2
 399 0058 08BF     		it	eq
 400 005a 45F00105 		orreq	r5, r5, #1
 401              	.LVL48:
 402 005e 1DB1     		cbz	r5, .L26
 403 0060 0020     		movs	r0, #0
 404              	.LVL49:
 405 0062 F6E7     		b	.L24
 406              	.LVL50:
 407              	.L31:
 793:Middlewares/Third_Party/FatFs/src/ff.c **** }
 408              		.loc 1 793 0
 409 0064 1020     		movs	r0, #16
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 22


 410              	.LVL51:
 411 0066 F4E7     		b	.L24
 412              	.LVL52:
 413              	.L26:
 789:Middlewares/Third_Party/FatFs/src/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 414              		.loc 1 789 0
 415 0068 1220     		movs	r0, #18
 416              	.LVL53:
 417 006a F2E7     		b	.L24
 418              	.LVL54:
 419              	.L27:
 793:Middlewares/Third_Party/FatFs/src/ff.c **** }
 420              		.loc 1 793 0
 421 006c 1020     		movs	r0, #16
 422              	.LVL55:
 423 006e F0E7     		b	.L24
 424              	.L33:
 425              		.align	2
 426              	.L32:
 427 0070 00000000 		.word	.LANCHOR0
 428              		.cfi_endproc
 429              	.LFE153:
 431              		.section	.text.enq_lock,"ax",%progbits
 432              		.align	1
 433              		.syntax unified
 434              		.thumb
 435              		.thumb_func
 436              		.fpu fpv5-sp-d16
 438              	enq_lock:
 439              	.LFB154:
 795:Middlewares/Third_Party/FatFs/src/ff.c **** 
 796:Middlewares/Third_Party/FatFs/src/ff.c **** 
 797:Middlewares/Third_Party/FatFs/src/ff.c **** static
 798:Middlewares/Third_Party/FatFs/src/ff.c **** int enq_lock (void)	/* Check if an entry is available for a new object */
 799:Middlewares/Third_Party/FatFs/src/ff.c **** {
 440              		.loc 1 799 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 0
 443              		@ frame_needed = 0, uses_anonymous_args = 0
 444              		@ link register save eliminated.
 445              	.LVL56:
 800:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
 801:Middlewares/Third_Party/FatFs/src/ff.c **** 
 802:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 446              		.loc 1 802 0
 447 0000 0020     		movs	r0, #0
 448 0002 00E0     		b	.L35
 449              	.LVL57:
 450              	.L37:
 451              		.loc 1 802 0 is_stmt 0 discriminator 4
 452 0004 0130     		adds	r0, r0, #1
 453              	.LVL58:
 454              	.L35:
 455              		.loc 1 802 0 discriminator 1
 456 0006 0128     		cmp	r0, #1
 457 0008 04D8     		bhi	.L36
 458              		.loc 1 802 0 discriminator 3
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 23


 459 000a 0301     		lsls	r3, r0, #4
 460 000c 034A     		ldr	r2, .L38
 461 000e D358     		ldr	r3, [r2, r3]
 462 0010 002B     		cmp	r3, #0
 463 0012 F7D1     		bne	.L37
 464              	.L36:
 803:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 804:Middlewares/Third_Party/FatFs/src/ff.c **** }
 465              		.loc 1 804 0 is_stmt 1
 466 0014 0238     		subs	r0, r0, #2
 467              	.LVL59:
 468 0016 18BF     		it	ne
 469 0018 0120     		movne	r0, #1
 470              	.LVL60:
 471 001a 7047     		bx	lr
 472              	.L39:
 473              		.align	2
 474              	.L38:
 475 001c 00000000 		.word	.LANCHOR0
 476              		.cfi_endproc
 477              	.LFE154:
 479              		.section	.text.inc_lock,"ax",%progbits
 480              		.align	1
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu fpv5-sp-d16
 486              	inc_lock:
 487              	.LFB155:
 805:Middlewares/Third_Party/FatFs/src/ff.c **** 
 806:Middlewares/Third_Party/FatFs/src/ff.c **** 
 807:Middlewares/Third_Party/FatFs/src/ff.c **** static
 808:Middlewares/Third_Party/FatFs/src/ff.c **** UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
 809:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,	/* Directory object pointing the file to register or increment */
 810:Middlewares/Third_Party/FatFs/src/ff.c **** 	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 811:Middlewares/Third_Party/FatFs/src/ff.c **** )
 812:Middlewares/Third_Party/FatFs/src/ff.c **** {
 488              		.loc 1 812 0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 0
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492              		@ link register save eliminated.
 493              	.LVL61:
 494 0000 70B4     		push	{r4, r5, r6}
 495              	.LCFI5:
 496              		.cfi_def_cfa_offset 12
 497              		.cfi_offset 4, -12
 498              		.cfi_offset 5, -8
 499              		.cfi_offset 6, -4
 500              	.LVL62:
 813:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
 814:Middlewares/Third_Party/FatFs/src/ff.c **** 
 815:Middlewares/Third_Party/FatFs/src/ff.c **** 
 816:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 501              		.loc 1 816 0
 502 0002 0023     		movs	r3, #0
 503 0004 00E0     		b	.L41
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 24


 504              	.LVL63:
 505              	.L42:
 506              		.loc 1 816 0 is_stmt 0 discriminator 2
 507 0006 0133     		adds	r3, r3, #1
 508              	.LVL64:
 509              	.L41:
 510              		.loc 1 816 0 discriminator 1
 511 0008 012B     		cmp	r3, #1
 512 000a 13D8     		bhi	.L43
 817:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 513              		.loc 1 817 0 is_stmt 1
 514 000c 1A01     		lsls	r2, r3, #4
 515 000e 244C     		ldr	r4, .L58
 516 0010 A458     		ldr	r4, [r4, r2]
 517 0012 0268     		ldr	r2, [r0]
 518 0014 9442     		cmp	r4, r2
 519 0016 F6D1     		bne	.L42
 818:Middlewares/Third_Party/FatFs/src/ff.c **** 			Files[i].clu == dp->obj.sclust &&
 520              		.loc 1 818 0 discriminator 1
 521 0018 214A     		ldr	r2, .L58
 522 001a 02EB0312 		add	r2, r2, r3, lsl #4
 523 001e 5468     		ldr	r4, [r2, #4]
 524 0020 8268     		ldr	r2, [r0, #8]
 817:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 525              		.loc 1 817 0 discriminator 1
 526 0022 9442     		cmp	r4, r2
 527 0024 EFD1     		bne	.L42
 819:Middlewares/Third_Party/FatFs/src/ff.c **** 			Files[i].ofs == dp->dptr) break;
 528              		.loc 1 819 0
 529 0026 1E4A     		ldr	r2, .L58
 530 0028 02EB0312 		add	r2, r2, r3, lsl #4
 531 002c 9468     		ldr	r4, [r2, #8]
 532 002e 4269     		ldr	r2, [r0, #20]
 818:Middlewares/Third_Party/FatFs/src/ff.c **** 			Files[i].clu == dp->obj.sclust &&
 533              		.loc 1 818 0
 534 0030 9442     		cmp	r4, r2
 535 0032 E8D1     		bne	.L42
 536              	.L43:
 820:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 821:Middlewares/Third_Party/FatFs/src/ff.c **** 
 822:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 537              		.loc 1 822 0
 538 0034 022B     		cmp	r3, #2
 539 0036 29D0     		beq	.L57
 540              	.LVL65:
 541              	.L46:
 823:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 824:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 825:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].fs = dp->obj.fs;
 826:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].clu = dp->obj.sclust;
 827:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ofs = dp->dptr;
 828:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ctr = 0;
 829:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 830:Middlewares/Third_Party/FatFs/src/ff.c **** 
 831:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 542              		.loc 1 831 0
 543 0038 21B1     		cbz	r1, .L50
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 25


 544              		.loc 1 831 0 is_stmt 0 discriminator 1
 545 003a 194A     		ldr	r2, .L58
 546 003c 02EB0312 		add	r2, r2, r3, lsl #4
 547 0040 9289     		ldrh	r2, [r2, #12]
 548 0042 52BB     		cbnz	r2, .L54
 549              	.L50:
 832:Middlewares/Third_Party/FatFs/src/ff.c **** 
 833:Middlewares/Third_Party/FatFs/src/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 550              		.loc 1 833 0 is_stmt 1
 551 0044 21BB     		cbnz	r1, .L55
 552              		.loc 1 833 0 is_stmt 0 discriminator 1
 553 0046 164A     		ldr	r2, .L58
 554 0048 02EB0312 		add	r2, r2, r3, lsl #4
 555 004c 9189     		ldrh	r1, [r2, #12]
 556              	.LVL66:
 557 004e 0131     		adds	r1, r1, #1
 558 0050 89B2     		uxth	r1, r1
 559              	.L51:
 560              		.loc 1 833 0 discriminator 4
 561 0052 134A     		ldr	r2, .L58
 562 0054 02EB0312 		add	r2, r2, r3, lsl #4
 563 0058 9181     		strh	r1, [r2, #12]	@ movhi
 834:Middlewares/Third_Party/FatFs/src/ff.c **** 
 835:Middlewares/Third_Party/FatFs/src/ff.c **** 	return i + 1;
 564              		.loc 1 835 0 is_stmt 1 discriminator 4
 565 005a 581C     		adds	r0, r3, #1
 566              	.L40:
 836:Middlewares/Third_Party/FatFs/src/ff.c **** }
 567              		.loc 1 836 0
 568 005c 70BC     		pop	{r4, r5, r6}
 569              	.LCFI6:
 570              		.cfi_remember_state
 571              		.cfi_restore 6
 572              		.cfi_restore 5
 573              		.cfi_restore 4
 574              		.cfi_def_cfa_offset 0
 575 005e 7047     		bx	lr
 576              	.LVL67:
 577              	.L48:
 578              	.LCFI7:
 579              		.cfi_restore_state
 823:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 580              		.loc 1 823 0 discriminator 4
 581 0060 0133     		adds	r3, r3, #1
 582              	.LVL68:
 583              	.L45:
 823:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 584              		.loc 1 823 0 is_stmt 0 discriminator 1
 585 0062 012B     		cmp	r3, #1
 586 0064 04D8     		bhi	.L47
 823:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 587              		.loc 1 823 0 discriminator 3
 588 0066 1A01     		lsls	r2, r3, #4
 589 0068 0D4C     		ldr	r4, .L58
 590 006a A258     		ldr	r2, [r4, r2]
 591 006c 002A     		cmp	r2, #0
 592 006e F7D1     		bne	.L48
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 26


 593              	.L47:
 824:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].fs = dp->obj.fs;
 594              		.loc 1 824 0 is_stmt 1
 595 0070 022B     		cmp	r3, #2
 596 0072 10D0     		beq	.L53
 825:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].clu = dp->obj.sclust;
 597              		.loc 1 825 0
 598 0074 0668     		ldr	r6, [r0]
 599 0076 0A4D     		ldr	r5, .L58
 600 0078 1C01     		lsls	r4, r3, #4
 601 007a 2A19     		adds	r2, r5, r4
 602 007c 2E51     		str	r6, [r5, r4]
 826:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ofs = dp->dptr;
 603              		.loc 1 826 0
 604 007e 8468     		ldr	r4, [r0, #8]
 605 0080 5460     		str	r4, [r2, #4]
 827:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ctr = 0;
 606              		.loc 1 827 0
 607 0082 4069     		ldr	r0, [r0, #20]
 608              	.LVL69:
 609 0084 9060     		str	r0, [r2, #8]
 828:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 610              		.loc 1 828 0
 611 0086 0020     		movs	r0, #0
 612 0088 9081     		strh	r0, [r2, #12]	@ movhi
 613 008a D5E7     		b	.L46
 614              	.LVL70:
 615              	.L57:
 823:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 616              		.loc 1 823 0
 617 008c 0023     		movs	r3, #0
 618              	.LVL71:
 619 008e E8E7     		b	.L45
 620              	.LVL72:
 621              	.L55:
 833:Middlewares/Third_Party/FatFs/src/ff.c **** 
 622              		.loc 1 833 0
 623 0090 4FF48071 		mov	r1, #256
 624              	.LVL73:
 625 0094 DDE7     		b	.L51
 626              	.LVL74:
 627              	.L53:
 824:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].fs = dp->obj.fs;
 628              		.loc 1 824 0
 629 0096 0020     		movs	r0, #0
 630              	.LVL75:
 631 0098 E0E7     		b	.L40
 632              	.L54:
 831:Middlewares/Third_Party/FatFs/src/ff.c **** 
 633              		.loc 1 831 0
 634 009a 0020     		movs	r0, #0
 635 009c DEE7     		b	.L40
 636              	.L59:
 637 009e 00BF     		.align	2
 638              	.L58:
 639 00a0 00000000 		.word	.LANCHOR0
 640              		.cfi_endproc
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 27


 641              	.LFE155:
 643              		.section	.text.dec_lock,"ax",%progbits
 644              		.align	1
 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 648              		.fpu fpv5-sp-d16
 650              	dec_lock:
 651              	.LFB156:
 837:Middlewares/Third_Party/FatFs/src/ff.c **** 
 838:Middlewares/Third_Party/FatFs/src/ff.c **** 
 839:Middlewares/Third_Party/FatFs/src/ff.c **** static
 840:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dec_lock (	/* Decrement object open counter */
 841:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i			/* Semaphore index (1..) */
 842:Middlewares/Third_Party/FatFs/src/ff.c **** )
 843:Middlewares/Third_Party/FatFs/src/ff.c **** {
 652              		.loc 1 843 0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 0
 655              		@ frame_needed = 0, uses_anonymous_args = 0
 656              		@ link register save eliminated.
 657              	.LVL76:
 844:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD n;
 845:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 846:Middlewares/Third_Party/FatFs/src/ff.c **** 
 847:Middlewares/Third_Party/FatFs/src/ff.c **** 
 848:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 658              		.loc 1 848 0
 659 0000 0138     		subs	r0, r0, #1
 660              	.LVL77:
 661 0002 0128     		cmp	r0, #1
 662 0004 15D8     		bhi	.L63
 849:Middlewares/Third_Party/FatFs/src/ff.c **** 		n = Files[i].ctr;
 663              		.loc 1 849 0
 664 0006 0D4B     		ldr	r3, .L66
 665 0008 03EB0013 		add	r3, r3, r0, lsl #4
 666 000c 9B89     		ldrh	r3, [r3, #12]
 667              	.LVL78:
 850:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 668              		.loc 1 850 0
 669 000e B3F5807F 		cmp	r3, #256
 670 0012 03D0     		beq	.L64
 851:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n > 0) n--;				/* Decrement read mode open count */
 671              		.loc 1 851 0
 672 0014 1BB1     		cbz	r3, .L62
 673              		.loc 1 851 0 is_stmt 0 discriminator 1
 674 0016 013B     		subs	r3, r3, #1
 675              	.LVL79:
 676 0018 9BB2     		uxth	r3, r3
 677              	.LVL80:
 678 001a 00E0     		b	.L62
 679              	.L64:
 850:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 680              		.loc 1 850 0 is_stmt 1
 681 001c 0023     		movs	r3, #0
 682              	.LVL81:
 683              	.L62:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 28


 852:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ctr = n;
 684              		.loc 1 852 0
 685 001e 074A     		ldr	r2, .L66
 686 0020 02EB0012 		add	r2, r2, r0, lsl #4
 687 0024 9381     		strh	r3, [r2, #12]	@ movhi
 853:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 688              		.loc 1 853 0
 689 0026 33B9     		cbnz	r3, .L65
 690              		.loc 1 853 0 is_stmt 0 discriminator 1
 691 0028 0301     		lsls	r3, r0, #4
 692              	.LVL82:
 693 002a 0020     		movs	r0, #0
 694              	.LVL83:
 695 002c 034A     		ldr	r2, .L66
 696              	.LVL84:
 697 002e D050     		str	r0, [r2, r3]
 698 0030 7047     		bx	lr
 699              	.LVL85:
 700              	.L63:
 854:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_OK;
 855:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
 856:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_INT_ERR;			/* Invalid index nunber */
 701              		.loc 1 856 0 is_stmt 1
 702 0032 0220     		movs	r0, #2
 703              	.LVL86:
 704 0034 7047     		bx	lr
 705              	.LVL87:
 706              	.L65:
 854:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_OK;
 707              		.loc 1 854 0
 708 0036 0020     		movs	r0, #0
 709              	.LVL88:
 857:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 858:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 859:Middlewares/Third_Party/FatFs/src/ff.c **** }
 710              		.loc 1 859 0
 711 0038 7047     		bx	lr
 712              	.L67:
 713 003a 00BF     		.align	2
 714              	.L66:
 715 003c 00000000 		.word	.LANCHOR0
 716              		.cfi_endproc
 717              	.LFE156:
 719              		.section	.text.clear_lock,"ax",%progbits
 720              		.align	1
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 724              		.fpu fpv5-sp-d16
 726              	clear_lock:
 727              	.LFB157:
 860:Middlewares/Third_Party/FatFs/src/ff.c **** 
 861:Middlewares/Third_Party/FatFs/src/ff.c **** 
 862:Middlewares/Third_Party/FatFs/src/ff.c **** static
 863:Middlewares/Third_Party/FatFs/src/ff.c **** void clear_lock (	/* Clear lock entries of the volume */
 864:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs
 865:Middlewares/Third_Party/FatFs/src/ff.c **** )
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 29


 866:Middlewares/Third_Party/FatFs/src/ff.c **** {
 728              		.loc 1 866 0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732              		@ link register save eliminated.
 733              	.LVL89:
 867:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
 868:Middlewares/Third_Party/FatFs/src/ff.c **** 
 869:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {
 734              		.loc 1 869 0
 735 0000 0023     		movs	r3, #0
 736 0002 03E0     		b	.L73
 737              	.LVL90:
 738              	.L80:
 739              	.LCFI8:
 740              		.cfi_def_cfa_offset 4
 741              		.cfi_offset 4, -4
 870:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 871:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 872:Middlewares/Third_Party/FatFs/src/ff.c **** }
 742              		.loc 1 872 0
 743 0004 5DF8044B 		ldr	r4, [sp], #4
 744              	.LCFI9:
 745              		.cfi_restore 4
 746              		.cfi_def_cfa_offset 0
 747 0008 7047     		bx	lr
 748              	.L79:
 869:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 749              		.loc 1 869 0
 750 000a 0133     		adds	r3, r3, #1
 751              	.LVL91:
 752              	.L73:
 753 000c 012B     		cmp	r3, #1
 754 000e 11D8     		bhi	.L78
 870:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 755              		.loc 1 870 0
 756 0010 1A01     		lsls	r2, r3, #4
 757 0012 0949     		ldr	r1, .L81
 758 0014 8A58     		ldr	r2, [r1, r2]
 759 0016 8242     		cmp	r2, r0
 760 0018 F7D1     		bne	.L79
 866:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
 761              		.loc 1 866 0
 762 001a 10B4     		push	{r4}
 763              	.LCFI10:
 764              		.cfi_def_cfa_offset 4
 765              		.cfi_offset 4, -4
 766              	.L74:
 870:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 767              		.loc 1 870 0 discriminator 1
 768 001c 1A01     		lsls	r2, r3, #4
 769 001e 0024     		movs	r4, #0
 770 0020 8C50     		str	r4, [r1, r2]
 771              	.L70:
 869:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 772              		.loc 1 869 0 discriminator 2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 30


 773 0022 0133     		adds	r3, r3, #1
 774              	.LVL92:
 775 0024 012B     		cmp	r3, #1
 776 0026 EDD8     		bhi	.L80
 870:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 777              		.loc 1 870 0
 778 0028 1A01     		lsls	r2, r3, #4
 779 002a 0349     		ldr	r1, .L81
 780 002c 8A58     		ldr	r2, [r1, r2]
 781 002e 8242     		cmp	r2, r0
 782 0030 F7D1     		bne	.L70
 783 0032 F3E7     		b	.L74
 784              	.L78:
 785              	.LCFI11:
 786              		.cfi_def_cfa_offset 0
 787              		.cfi_restore 4
 788 0034 7047     		bx	lr
 789              	.L82:
 790 0036 00BF     		.align	2
 791              	.L81:
 792 0038 00000000 		.word	.LANCHOR0
 793              		.cfi_endproc
 794              	.LFE157:
 796              		.section	.text.clust2sect,"ax",%progbits
 797              		.align	1
 798              		.syntax unified
 799              		.thumb
 800              		.thumb_func
 801              		.fpu fpv5-sp-d16
 803              	clust2sect:
 804              	.LFB161:
 873:Middlewares/Third_Party/FatFs/src/ff.c **** 
 874:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_LOCK != 0 */
 875:Middlewares/Third_Party/FatFs/src/ff.c **** 
 876:Middlewares/Third_Party/FatFs/src/ff.c **** 
 877:Middlewares/Third_Party/FatFs/src/ff.c **** 
 878:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 879:Middlewares/Third_Party/FatFs/src/ff.c **** /* Move/Flush disk access window in the file system object               */
 880:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 881:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 882:Middlewares/Third_Party/FatFs/src/ff.c **** static
 883:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 884:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs			/* File system object */
 885:Middlewares/Third_Party/FatFs/src/ff.c **** )
 886:Middlewares/Third_Party/FatFs/src/ff.c **** {
 887:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD wsect;
 888:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nf;
 889:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_OK;
 890:Middlewares/Third_Party/FatFs/src/ff.c **** 
 891:Middlewares/Third_Party/FatFs/src/ff.c **** 
 892:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->wflag) {	/* Write back the sector if it is dirty */
 893:Middlewares/Third_Party/FatFs/src/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 894:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 895:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_DISK_ERR;
 896:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 897:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 0;
 898:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 31


 899:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 900:Middlewares/Third_Party/FatFs/src/ff.c **** 					wsect += fs->fsize;
 901:Middlewares/Third_Party/FatFs/src/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 902:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 903:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 904:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 905:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 906:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 907:Middlewares/Third_Party/FatFs/src/ff.c **** }
 908:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 909:Middlewares/Third_Party/FatFs/src/ff.c **** 
 910:Middlewares/Third_Party/FatFs/src/ff.c **** 
 911:Middlewares/Third_Party/FatFs/src/ff.c **** static
 912:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 913:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,			/* File system object */
 914:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sector		/* Sector number to make appearance in the fs->win[] */
 915:Middlewares/Third_Party/FatFs/src/ff.c **** )
 916:Middlewares/Third_Party/FatFs/src/ff.c **** {
 917:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_OK;
 918:Middlewares/Third_Party/FatFs/src/ff.c **** 
 919:Middlewares/Third_Party/FatFs/src/ff.c **** 
 920:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (sector != fs->winsect) {	/* Window offset changed? */
 921:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 922:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = sync_window(fs);		/* Write-back changes */
 923:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 924:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {			/* Fill sector window with new data */
 925:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 926:Middlewares/Third_Party/FatFs/src/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 927:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_DISK_ERR;
 928:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 929:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->winsect = sector;
 930:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 931:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 932:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 933:Middlewares/Third_Party/FatFs/src/ff.c **** }
 934:Middlewares/Third_Party/FatFs/src/ff.c **** 
 935:Middlewares/Third_Party/FatFs/src/ff.c **** 
 936:Middlewares/Third_Party/FatFs/src/ff.c **** 
 937:Middlewares/Third_Party/FatFs/src/ff.c **** 
 938:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 939:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 940:Middlewares/Third_Party/FatFs/src/ff.c **** /* Synchronize file system and strage device                             */
 941:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 942:Middlewares/Third_Party/FatFs/src/ff.c **** 
 943:Middlewares/Third_Party/FatFs/src/ff.c **** static
 944:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
 945:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs		/* File system object */
 946:Middlewares/Third_Party/FatFs/src/ff.c **** )
 947:Middlewares/Third_Party/FatFs/src/ff.c **** {
 948:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 949:Middlewares/Third_Party/FatFs/src/ff.c **** 
 950:Middlewares/Third_Party/FatFs/src/ff.c **** 
 951:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = sync_window(fs);
 952:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 953:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Update FSInfo sector if needed */
 954:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 955:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Create FSInfo structure */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 32


 956:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(fs->win, 0, SS(fs));
 957:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(fs->win + BS_55AA, 0xAA55);
 958:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 959:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 960:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 961:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 962:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Write it into the FSInfo sector */
 963:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->winsect = fs->volbase + 1;
 964:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(fs->drv, fs->win, fs->winsect, 1);
 965:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag = 0;
 966:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 967:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 968:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 969:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 970:Middlewares/Third_Party/FatFs/src/ff.c **** 
 971:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 972:Middlewares/Third_Party/FatFs/src/ff.c **** }
 973:Middlewares/Third_Party/FatFs/src/ff.c **** 
 974:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 975:Middlewares/Third_Party/FatFs/src/ff.c **** 
 976:Middlewares/Third_Party/FatFs/src/ff.c **** 
 977:Middlewares/Third_Party/FatFs/src/ff.c **** 
 978:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 979:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get sector# from cluster#                                             */
 980:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 981:Middlewares/Third_Party/FatFs/src/ff.c **** 
 982:Middlewares/Third_Party/FatFs/src/ff.c **** static
 983:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
 984:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,		/* File system object */
 985:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 986:Middlewares/Third_Party/FatFs/src/ff.c **** )
 987:Middlewares/Third_Party/FatFs/src/ff.c **** {
 805              		.loc 1 987 0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 0
 808              		@ frame_needed = 0, uses_anonymous_args = 0
 809              		@ link register save eliminated.
 810              	.LVL93:
 988:Middlewares/Third_Party/FatFs/src/ff.c **** 	clst -= 2;
 811              		.loc 1 988 0
 812 0000 0239     		subs	r1, r1, #2
 813              	.LVL94:
 989:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 814              		.loc 1 989 0
 815 0002 036A     		ldr	r3, [r0, #32]
 816 0004 023B     		subs	r3, r3, #2
 817 0006 8B42     		cmp	r3, r1
 818 0008 04D9     		bls	.L85
 990:Middlewares/Third_Party/FatFs/src/ff.c **** 	return clst * fs->csize + fs->database;
 819              		.loc 1 990 0
 820 000a 4389     		ldrh	r3, [r0, #10]
 821 000c 406B     		ldr	r0, [r0, #52]
 822              	.LVL95:
 823 000e 01FB0300 		mla	r0, r1, r3, r0
 824 0012 7047     		bx	lr
 825              	.LVL96:
 826              	.L85:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 33


 989:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 827              		.loc 1 989 0
 828 0014 0020     		movs	r0, #0
 829              	.LVL97:
 991:Middlewares/Third_Party/FatFs/src/ff.c **** }
 830              		.loc 1 991 0
 831 0016 7047     		bx	lr
 832              		.cfi_endproc
 833              	.LFE161:
 835              		.section	.text.clmt_clust,"ax",%progbits
 836              		.align	1
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 840              		.fpu fpv5-sp-d16
 842              	clmt_clust:
 843              	.LFB166:
 992:Middlewares/Third_Party/FatFs/src/ff.c **** 
 993:Middlewares/Third_Party/FatFs/src/ff.c **** 
 994:Middlewares/Third_Party/FatFs/src/ff.c **** 
 995:Middlewares/Third_Party/FatFs/src/ff.c **** 
 996:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 997:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT access - Read value of a FAT entry                                */
 998:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 999:Middlewares/Third_Party/FatFs/src/ff.c **** 
1000:Middlewares/Third_Party/FatFs/src/ff.c **** static
1001:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
1002:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj,	/* Corresponding object */
1003:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst	/* Cluster number to get the value */
1004:Middlewares/Third_Party/FatFs/src/ff.c **** )
1005:Middlewares/Third_Party/FatFs/src/ff.c **** {
1006:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT wc, bc;
1007:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD val;
1008:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = obj->fs;
1009:Middlewares/Third_Party/FatFs/src/ff.c **** 
1010:Middlewares/Third_Party/FatFs/src/ff.c **** 
1011:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
1012:Middlewares/Third_Party/FatFs/src/ff.c **** 		val = 1;	/* Internal error */
1013:Middlewares/Third_Party/FatFs/src/ff.c **** 
1014:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
1015:Middlewares/Third_Party/FatFs/src/ff.c **** 		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1016:Middlewares/Third_Party/FatFs/src/ff.c **** 
1017:Middlewares/Third_Party/FatFs/src/ff.c **** 		switch (fs->fs_type) {
1018:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT12 :
1019:Middlewares/Third_Party/FatFs/src/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
1020:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1021:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc = fs->win[bc++ % SS(fs)];
1022:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1023:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc |= fs->win[bc % SS(fs)] << 8;
1024:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1025:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1026:Middlewares/Third_Party/FatFs/src/ff.c **** 
1027:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT16 :
1028:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1029:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = ld_word(fs->win + clst * 2 % SS(fs));
1030:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1031:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 34


1032:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT32 :
1033:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1034:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
1035:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1036:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1037:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_EXFAT :
1038:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (obj->objsize) {
1039:Middlewares/Third_Party/FatFs/src/ff.c **** 				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1040:Middlewares/Third_Party/FatFs/src/ff.c **** 				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
1041:Middlewares/Third_Party/FatFs/src/ff.c **** 
1042:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
1043:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (cofs <= clen) {
1044:Middlewares/Third_Party/FatFs/src/ff.c **** 						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
1045:Middlewares/Third_Party/FatFs/src/ff.c **** 						break;
1046:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
1047:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1048:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1049:Middlewares/Third_Party/FatFs/src/ff.c **** 					val = clst + 1; 	/* Generate the value */
1050:Middlewares/Third_Party/FatFs/src/ff.c **** 					break;
1051:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1052:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1053:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1054:Middlewares/Third_Party/FatFs/src/ff.c **** 						val = 0x7FFFFFFF;	/* Generate EOC */
1055:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {
1056:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1057:Middlewares/Third_Party/FatFs/src/ff.c **** 						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1058:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
1059:Middlewares/Third_Party/FatFs/src/ff.c **** 					break;
1060:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1061:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1062:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* go to default */
1063:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1064:Middlewares/Third_Party/FatFs/src/ff.c **** 		default:
1065:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = 1;	/* Internal error */
1066:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1067:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1068:Middlewares/Third_Party/FatFs/src/ff.c **** 
1069:Middlewares/Third_Party/FatFs/src/ff.c **** 	return val;
1070:Middlewares/Third_Party/FatFs/src/ff.c **** }
1071:Middlewares/Third_Party/FatFs/src/ff.c **** 
1072:Middlewares/Third_Party/FatFs/src/ff.c **** 
1073:Middlewares/Third_Party/FatFs/src/ff.c **** 
1074:Middlewares/Third_Party/FatFs/src/ff.c **** 
1075:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1076:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1077:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT access - Change value of a FAT entry                              */
1078:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1079:Middlewares/Third_Party/FatFs/src/ff.c **** 
1080:Middlewares/Third_Party/FatFs/src/ff.c **** static
1081:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
1082:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,		/* Corresponding file system object */
1083:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst,		/* FAT index number (cluster number) to be changed */
1084:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD val		/* New value to be set to the entry */
1085:Middlewares/Third_Party/FatFs/src/ff.c **** )
1086:Middlewares/Third_Party/FatFs/src/ff.c **** {
1087:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT bc;
1088:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *p;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 35


1089:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_INT_ERR;
1090:Middlewares/Third_Party/FatFs/src/ff.c **** 
1091:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1092:Middlewares/Third_Party/FatFs/src/ff.c **** 		switch (fs->fs_type) {
1093:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT12 :	/* Bitfield items */
1094:Middlewares/Third_Party/FatFs/src/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
1095:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1096:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
1097:Middlewares/Third_Party/FatFs/src/ff.c **** 			p = fs->win + bc++ % SS(fs);
1098:Middlewares/Third_Party/FatFs/src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
1099:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
1100:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1101:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
1102:Middlewares/Third_Party/FatFs/src/ff.c **** 			p = fs->win + bc % SS(fs);
1103:Middlewares/Third_Party/FatFs/src/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1104:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
1105:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1106:Middlewares/Third_Party/FatFs/src/ff.c **** 
1107:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT16 :	/* WORD aligned items */
1108:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1109:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
1110:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
1111:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
1112:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1113:Middlewares/Third_Party/FatFs/src/ff.c **** 
1114:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT32 :	/* DWORD aligned items */
1115:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1116:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_EXFAT :
1117:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1118:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1119:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
1120:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1121:Middlewares/Third_Party/FatFs/src/ff.c **** 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1122:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1123:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + clst * 4 % SS(fs), val);
1124:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
1125:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1126:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1127:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1128:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
1129:Middlewares/Third_Party/FatFs/src/ff.c **** }
1130:Middlewares/Third_Party/FatFs/src/ff.c **** 
1131:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
1132:Middlewares/Third_Party/FatFs/src/ff.c **** 
1133:Middlewares/Third_Party/FatFs/src/ff.c **** 
1134:Middlewares/Third_Party/FatFs/src/ff.c **** 
1135:Middlewares/Third_Party/FatFs/src/ff.c **** 
1136:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT && !_FS_READONLY
1137:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1138:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Accessing FAT and Allocation Bitmap                            */
1139:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1140:Middlewares/Third_Party/FatFs/src/ff.c **** 
1141:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------*/
1142:Middlewares/Third_Party/FatFs/src/ff.c **** /* Find a contiguous free cluster block */
1143:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------*/
1144:Middlewares/Third_Party/FatFs/src/ff.c **** 
1145:Middlewares/Third_Party/FatFs/src/ff.c **** static
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 36


1146:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
1147:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,	/* File system object */
1148:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst,	/* Cluster number to scan from */
1149:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ncl	/* Number of contiguous clusters to find (1..) */
1150:Middlewares/Third_Party/FatFs/src/ff.c **** )
1151:Middlewares/Third_Party/FatFs/src/ff.c **** {
1152:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE bm, bv;
1153:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
1154:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD val, scl, ctr;
1155:Middlewares/Third_Party/FatFs/src/ff.c **** 
1156:Middlewares/Third_Party/FatFs/src/ff.c **** 
1157:Middlewares/Third_Party/FatFs/src/ff.c **** 	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1158:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst >= fs->n_fatent - 2) clst = 0;
1159:Middlewares/Third_Party/FatFs/src/ff.c **** 	scl = val = clst; ctr = 0;
1160:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
1161:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bi
1162:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1163:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
1164:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {
1165:Middlewares/Third_Party/FatFs/src/ff.c **** 				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1166:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1167:Middlewares/Third_Party/FatFs/src/ff.c **** 					val = 0; bm = 0; i = SS(fs);
1168:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1169:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!bv) {	/* Is it a free cluster? */
1170:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1171:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
1172:Middlewares/Third_Party/FatFs/src/ff.c **** 					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1173:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1174:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (val == clst) return 0;	/* All cluster scanned? */
1175:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (bm);
1176:Middlewares/Third_Party/FatFs/src/ff.c **** 			bm = 1;
1177:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (++i < SS(fs));
1178:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1179:Middlewares/Third_Party/FatFs/src/ff.c **** }
1180:Middlewares/Third_Party/FatFs/src/ff.c **** 
1181:Middlewares/Third_Party/FatFs/src/ff.c **** 
1182:Middlewares/Third_Party/FatFs/src/ff.c **** /*----------------------------------------*/
1183:Middlewares/Third_Party/FatFs/src/ff.c **** /* Set/Clear a block of allocation bitmap */
1184:Middlewares/Third_Party/FatFs/src/ff.c **** /*----------------------------------------*/
1185:Middlewares/Third_Party/FatFs/src/ff.c **** 
1186:Middlewares/Third_Party/FatFs/src/ff.c **** static
1187:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT change_bitmap (
1188:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,	/* File system object */
1189:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst,	/* Cluster number to change from */
1190:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ncl,	/* Number of clusters to be changed */
1191:Middlewares/Third_Party/FatFs/src/ff.c **** 	int bv		/* bit value to be set (0 or 1) */
1192:Middlewares/Third_Party/FatFs/src/ff.c **** )
1193:Middlewares/Third_Party/FatFs/src/ff.c **** {
1194:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE bm;
1195:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
1196:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sect;
1197:Middlewares/Third_Party/FatFs/src/ff.c **** 
1198:Middlewares/Third_Party/FatFs/src/ff.c **** 	clst -= 2;	/* The first bit corresponds to cluster #2 */
1199:Middlewares/Third_Party/FatFs/src/ff.c **** 	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the 
1200:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
1201:Middlewares/Third_Party/FatFs/src/ff.c **** 	bm = 1 << (clst % 8);						/* Bit mask in the byte */
1202:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 37


1203:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1204:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
1205:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {
1206:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1207:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->win[i] ^= bm;	/* Flip the bit */
1208:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->wflag = 1;
1209:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1210:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (bm <<= 1);		/* Next bit */
1211:Middlewares/Third_Party/FatFs/src/ff.c **** 			bm = 1;
1212:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (++i < SS(fs));		/* Next byte */
1213:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = 0;
1214:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1215:Middlewares/Third_Party/FatFs/src/ff.c **** }
1216:Middlewares/Third_Party/FatFs/src/ff.c **** 
1217:Middlewares/Third_Party/FatFs/src/ff.c **** 
1218:Middlewares/Third_Party/FatFs/src/ff.c **** /*---------------------------------------------*/
1219:Middlewares/Third_Party/FatFs/src/ff.c **** /* Fill the first fragment of the FAT chain    */
1220:Middlewares/Third_Party/FatFs/src/ff.c **** /*---------------------------------------------*/
1221:Middlewares/Third_Party/FatFs/src/ff.c **** 
1222:Middlewares/Third_Party/FatFs/src/ff.c **** static
1223:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT fill_first_frag (
1224:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj	/* Pointer to the corresponding object */
1225:Middlewares/Third_Party/FatFs/src/ff.c **** )
1226:Middlewares/Third_Party/FatFs/src/ff.c **** {
1227:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
1228:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cl, n;
1229:Middlewares/Third_Party/FatFs/src/ff.c **** 
1230:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
1231:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1232:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = put_fat(obj->fs, cl, cl + 1);
1233:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
1234:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1235:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1236:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1237:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
1238:Middlewares/Third_Party/FatFs/src/ff.c **** }
1239:Middlewares/Third_Party/FatFs/src/ff.c **** 
1240:Middlewares/Third_Party/FatFs/src/ff.c **** 
1241:Middlewares/Third_Party/FatFs/src/ff.c **** /*---------------------------------------------*/
1242:Middlewares/Third_Party/FatFs/src/ff.c **** /* Fill the last fragment of the FAT chain     */
1243:Middlewares/Third_Party/FatFs/src/ff.c **** /*---------------------------------------------*/
1244:Middlewares/Third_Party/FatFs/src/ff.c **** 
1245:Middlewares/Third_Party/FatFs/src/ff.c **** static
1246:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT fill_last_frag (
1247:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj,	/* Pointer to the corresponding object */
1248:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD lcl,	/* Last cluster of the fragment */
1249:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD term	/* Value to set the last FAT entry */
1250:Middlewares/Third_Party/FatFs/src/ff.c **** )
1251:Middlewares/Third_Party/FatFs/src/ff.c **** {
1252:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
1253:Middlewares/Third_Party/FatFs/src/ff.c **** 
1254:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
1255:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1256:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
1257:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->n_frag--;
1258:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1259:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 38


1260:Middlewares/Third_Party/FatFs/src/ff.c **** }
1261:Middlewares/Third_Party/FatFs/src/ff.c **** 
1262:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_EXFAT && !_FS_READONLY */
1263:Middlewares/Third_Party/FatFs/src/ff.c **** 
1264:Middlewares/Third_Party/FatFs/src/ff.c **** 
1265:Middlewares/Third_Party/FatFs/src/ff.c **** 
1266:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1267:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1268:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT handling - Remove a cluster chain                                 */
1269:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1270:Middlewares/Third_Party/FatFs/src/ff.c **** static
1271:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
1272:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj,			/* Corresponding object */
1273:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst,			/* Cluster to remove a chain from */
1274:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
1275:Middlewares/Third_Party/FatFs/src/ff.c **** )
1276:Middlewares/Third_Party/FatFs/src/ff.c **** {
1277:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_OK;
1278:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD nxt;
1279:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = obj->fs;
1280:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT || _USE_TRIM
1281:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD scl = clst, ecl = clst;
1282:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1283:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_TRIM
1284:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD rt[2];
1285:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1286:Middlewares/Third_Party/FatFs/src/ff.c **** 
1287:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1288:Middlewares/Third_Party/FatFs/src/ff.c **** 
1289:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Mark the previous cluster 'EOC' on the FAT if it exists */
1290:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1291:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
1292:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
1293:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1294:Middlewares/Third_Party/FatFs/src/ff.c **** 
1295:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Remove the chain */
1296:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
1297:Middlewares/Third_Party/FatFs/src/ff.c **** 		nxt = get_fat(obj, clst);			/* Get cluster status */
1298:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 0) break;				/* Empty cluster? */
1299:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1300:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1301:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1302:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
1303:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
1304:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1305:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
1306:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->free_clst++;
1307:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag |= 1;
1308:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1309:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT || _USE_TRIM
1310:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1311:Middlewares/Third_Party/FatFs/src/ff.c **** 			ecl = nxt;
1312:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {				/* End of contiguous cluster block */
1313:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1314:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
1315:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap 
1316:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) return res;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 39


1317:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1318:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1319:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_TRIM
1320:Middlewares/Third_Party/FatFs/src/ff.c **** 			rt[0] = clust2sect(fs, scl);					/* Start sector */
1321:Middlewares/Third_Party/FatFs/src/ff.c **** 			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
1322:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
1323:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1324:Middlewares/Third_Party/FatFs/src/ff.c **** 			scl = ecl = nxt;
1325:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1326:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1327:Middlewares/Third_Party/FatFs/src/ff.c **** 		clst = nxt;					/* Next cluster */
1328:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1329:Middlewares/Third_Party/FatFs/src/ff.c **** 
1330:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1331:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
1332:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (pclst == 0) {	/* Does the object have no chain? */
1333:Middlewares/Third_Party/FatFs/src/ff.c **** 			obj->stat = 0;		/* Change the object status 'initial' */
1334:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
1335:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the c
1336:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->stat = 2;	/* Change the object status 'contiguous' */
1337:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1338:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1339:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1340:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1341:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
1342:Middlewares/Third_Party/FatFs/src/ff.c **** }
1343:Middlewares/Third_Party/FatFs/src/ff.c **** 
1344:Middlewares/Third_Party/FatFs/src/ff.c **** 
1345:Middlewares/Third_Party/FatFs/src/ff.c **** 
1346:Middlewares/Third_Party/FatFs/src/ff.c **** 
1347:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1348:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT handling - Stretch a chain or Create a new chain                  */
1349:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1350:Middlewares/Third_Party/FatFs/src/ff.c **** static
1351:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
1352:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj,			/* Corresponding object */
1353:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
1354:Middlewares/Third_Party/FatFs/src/ff.c **** )
1355:Middlewares/Third_Party/FatFs/src/ff.c **** {
1356:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cs, ncl, scl;
1357:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
1358:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = obj->fs;
1359:Middlewares/Third_Party/FatFs/src/ff.c **** 
1360:Middlewares/Third_Party/FatFs/src/ff.c **** 
1361:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst == 0) {	/* Create a new chain */
1362:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = fs->last_clst;				/* Get suggested cluster to start from */
1363:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1364:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1365:Middlewares/Third_Party/FatFs/src/ff.c **** 	else {				/* Stretch current chain */
1366:Middlewares/Third_Party/FatFs/src/ff.c **** 		cs = get_fat(obj, clst);			/* Check the cluster status */
1367:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs < 2) return 1;				/* Invalid FAT value */
1368:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
1369:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1370:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = clst;
1371:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1372:Middlewares/Third_Party/FatFs/src/ff.c **** 
1373:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 40


1374:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1375:Middlewares/Third_Party/FatFs/src/ff.c **** 		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1376:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1377:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1378:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_INT_ERR) return 1;
1379:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1380:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (clst == 0) {							/* Is it a new chain? */
1381:Middlewares/Third_Party/FatFs/src/ff.c **** 			obj->stat = 2;							/* Set status 'contiguous' */
1382:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {									/* It is a stretched chain */
1383:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1384:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1385:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->stat = 3;						/* Change status 'just fragmented' */
1386:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1387:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1388:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1389:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1390:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1391:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {				/* New fragment */
1392:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->n_frag == 0) obj->n_frag = 1;
1393:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one *
1394:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) obj->n_frag = 1;
1395:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1396:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1397:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
1398:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1399:Middlewares/Third_Party/FatFs/src/ff.c **** 	{	/* On the FAT12/16/32 volume */
1400:Middlewares/Third_Party/FatFs/src/ff.c **** 		ncl = scl;	/* Start cluster */
1401:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {
1402:Middlewares/Third_Party/FatFs/src/ff.c **** 			ncl++;							/* Next cluster */
1403:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1404:Middlewares/Third_Party/FatFs/src/ff.c **** 				ncl = 2;
1405:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ncl > scl) return 0;	/* No free cluster */
1406:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1407:Middlewares/Third_Party/FatFs/src/ff.c **** 			cs = get_fat(obj, ncl);			/* Get the cluster status */
1408:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cs == 0) break;				/* Found a free cluster */
1409:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
1410:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == scl) return 0;		/* No free cluster */
1411:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1412:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
1413:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && clst != 0) {
1414:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
1415:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1416:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1417:Middlewares/Third_Party/FatFs/src/ff.c **** 
1418:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1419:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->last_clst = ncl;
1420:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
1421:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsi_flag |= 1;
1422:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
1423:Middlewares/Third_Party/FatFs/src/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
1424:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1425:Middlewares/Third_Party/FatFs/src/ff.c **** 
1426:Middlewares/Third_Party/FatFs/src/ff.c **** 	return ncl;		/* Return new cluster number or error status */
1427:Middlewares/Third_Party/FatFs/src/ff.c **** }
1428:Middlewares/Third_Party/FatFs/src/ff.c **** 
1429:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
1430:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 41


1431:Middlewares/Third_Party/FatFs/src/ff.c **** 
1432:Middlewares/Third_Party/FatFs/src/ff.c **** 
1433:Middlewares/Third_Party/FatFs/src/ff.c **** 
1434:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
1435:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1436:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1437:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1438:Middlewares/Third_Party/FatFs/src/ff.c **** 
1439:Middlewares/Third_Party/FatFs/src/ff.c **** static
1440:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1441:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1442:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t ofs		/* File offset to be converted to cluster# */
1443:Middlewares/Third_Party/FatFs/src/ff.c **** )
1444:Middlewares/Third_Party/FatFs/src/ff.c **** {
 844              		.loc 1 1444 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 0
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848              		@ link register save eliminated.
 849              	.LVL98:
1445:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cl, ncl, *tbl;
1446:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = fp->obj.fs;
 850              		.loc 1 1446 0
 851 0000 0268     		ldr	r2, [r0]
 852              	.LVL99:
1447:Middlewares/Third_Party/FatFs/src/ff.c **** 
1448:Middlewares/Third_Party/FatFs/src/ff.c **** 
1449:Middlewares/Third_Party/FatFs/src/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
 853              		.loc 1 1449 0
 854 0002 C36A     		ldr	r3, [r0, #44]
 855 0004 0433     		adds	r3, r3, #4
 856              	.LVL100:
1450:Middlewares/Third_Party/FatFs/src/ff.c **** 	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 857              		.loc 1 1450 0
 858 0006 490A     		lsrs	r1, r1, #9
 859              	.LVL101:
 860 0008 5289     		ldrh	r2, [r2, #10]
 861              	.LVL102:
 862 000a B1FBF2F1 		udiv	r1, r1, r2
 863              	.LVL103:
 864              	.L89:
1451:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
1452:Middlewares/Third_Party/FatFs/src/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
 865              		.loc 1 1452 0
 866 000e 1868     		ldr	r0, [r3]
 867              	.LVL104:
1453:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ncl == 0) return 0;	/* End of table? (error) */
 868              		.loc 1 1453 0
 869 0010 30B1     		cbz	r0, .L86
1454:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
 870              		.loc 1 1454 0
 871 0012 8142     		cmp	r1, r0
 872 0014 02D3     		bcc	.L88
1455:Middlewares/Third_Party/FatFs/src/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
 873              		.loc 1 1455 0
 874 0016 091A     		subs	r1, r1, r0
 875              	.LVL105:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 42


 876 0018 0833     		adds	r3, r3, #8
 877              	.LVL106:
1452:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ncl == 0) return 0;	/* End of table? (error) */
 878              		.loc 1 1452 0
 879 001a F8E7     		b	.L89
 880              	.LVL107:
 881              	.L88:
1456:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1457:Middlewares/Third_Party/FatFs/src/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
 882              		.loc 1 1457 0
 883 001c 5868     		ldr	r0, [r3, #4]
 884              	.LVL108:
 885 001e 0844     		add	r0, r0, r1
 886              	.L86:
1458:Middlewares/Third_Party/FatFs/src/ff.c **** }
 887              		.loc 1 1458 0
 888 0020 7047     		bx	lr
 889              		.cfi_endproc
 890              	.LFE166:
 892              		.section	.text.ld_clust,"ax",%progbits
 893              		.align	1
 894              		.syntax unified
 895              		.thumb
 896              		.thumb_func
 897              		.fpu fpv5-sp-d16
 899              	ld_clust:
 900              	.LFB170:
1459:Middlewares/Third_Party/FatFs/src/ff.c **** 
1460:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_FASTSEEK */
1461:Middlewares/Third_Party/FatFs/src/ff.c **** 
1462:Middlewares/Third_Party/FatFs/src/ff.c **** 
1463:Middlewares/Third_Party/FatFs/src/ff.c **** 
1464:Middlewares/Third_Party/FatFs/src/ff.c **** 
1465:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1466:Middlewares/Third_Party/FatFs/src/ff.c **** /* Directory handling - Set directory index                              */
1467:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1468:Middlewares/Third_Party/FatFs/src/ff.c **** 
1469:Middlewares/Third_Party/FatFs/src/ff.c **** static
1470:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
1471:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Pointer to directory object */
1472:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ofs		/* Offset of directory table */
1473:Middlewares/Third_Party/FatFs/src/ff.c **** )
1474:Middlewares/Third_Party/FatFs/src/ff.c **** {
1475:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD csz, clst;
1476:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
1477:Middlewares/Third_Party/FatFs/src/ff.c **** 
1478:Middlewares/Third_Party/FatFs/src/ff.c **** 
1479:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE)
1480:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_INT_ERR;
1481:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1482:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dptr = ofs;				/* Set current offset */
1483:Middlewares/Third_Party/FatFs/src/ff.c **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1484:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1485:Middlewares/Third_Party/FatFs/src/ff.c **** 		clst = fs->dirbase;
1486:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1487:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1488:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 43


1489:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
1490:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
1491:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect = fs->dirbase;
1492:Middlewares/Third_Party/FatFs/src/ff.c **** 
1493:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
1494:Middlewares/Third_Party/FatFs/src/ff.c **** 		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1495:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (ofs >= csz) {				/* Follow cluster chain */
1496:Middlewares/Third_Party/FatFs/src/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1497:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1498:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
1499:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs -= csz;
1500:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1501:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect = clust2sect(fs, clst);
1502:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1503:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->clust = clst;					/* Current cluster# */
1504:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp->sect) return FR_INT_ERR;
1505:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1506:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1507:Middlewares/Third_Party/FatFs/src/ff.c **** 
1508:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
1509:Middlewares/Third_Party/FatFs/src/ff.c **** }
1510:Middlewares/Third_Party/FatFs/src/ff.c **** 
1511:Middlewares/Third_Party/FatFs/src/ff.c **** 
1512:Middlewares/Third_Party/FatFs/src/ff.c **** 
1513:Middlewares/Third_Party/FatFs/src/ff.c **** 
1514:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1515:Middlewares/Third_Party/FatFs/src/ff.c **** /* Directory handling - Move directory table index next                  */
1516:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1517:Middlewares/Third_Party/FatFs/src/ff.c **** 
1518:Middlewares/Third_Party/FatFs/src/ff.c **** static
1519:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
1520:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1521:Middlewares/Third_Party/FatFs/src/ff.c **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1522:Middlewares/Third_Party/FatFs/src/ff.c **** )
1523:Middlewares/Third_Party/FatFs/src/ff.c **** {
1524:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ofs, clst;
1525:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
1526:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1527:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT n;
1528:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1529:Middlewares/Third_Party/FatFs/src/ff.c **** 
1530:Middlewares/Third_Party/FatFs/src/ff.c **** 	ofs = dp->dptr + SZDIRE;	/* Next entry */
1531:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) re
1532:Middlewares/Third_Party/FatFs/src/ff.c **** 
1533:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1534:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect++;				/* Next sector */
1535:Middlewares/Third_Party/FatFs/src/ff.c **** 
1536:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!dp->clust) {		/* Static table */
1537:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1538:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->sect = 0; return FR_NO_FILE;
1539:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1540:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1541:Middlewares/Third_Party/FatFs/src/ff.c **** 		else {					/* Dynamic table */
1542:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
1543:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
1544:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
1545:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 44


1546:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
1547:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1548:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!stretch) {								/* If no stretch, report EOT */
1549:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->sect = 0; return FR_NO_FILE;
1550:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
1551:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1552:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
1553:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1554:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1555:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Clean-up the stretched table */
1556:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
1557:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1558:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
1559:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
1560:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
1561:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
1562:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
1563:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->winsect -= n;							/* Restore window offset */
1564:Middlewares/Third_Party/FatFs/src/ff.c **** #else
1565:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
1566:Middlewares/Third_Party/FatFs/src/ff.c **** 					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
1567:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1568:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1569:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->clust = clst;		/* Initialize data for new cluster */
1570:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->sect = clust2sect(fs, clst);
1571:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1572:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1573:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1574:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dptr = ofs;						/* Current entry */
1575:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1576:Middlewares/Third_Party/FatFs/src/ff.c **** 
1577:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
1578:Middlewares/Third_Party/FatFs/src/ff.c **** }
1579:Middlewares/Third_Party/FatFs/src/ff.c **** 
1580:Middlewares/Third_Party/FatFs/src/ff.c **** 
1581:Middlewares/Third_Party/FatFs/src/ff.c **** 
1582:Middlewares/Third_Party/FatFs/src/ff.c **** 
1583:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1584:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1585:Middlewares/Third_Party/FatFs/src/ff.c **** /* Directory handling - Reserve a block of directory entries             */
1586:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1587:Middlewares/Third_Party/FatFs/src/ff.c **** 
1588:Middlewares/Third_Party/FatFs/src/ff.c **** static
1589:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
1590:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1591:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nent		/* Number of contiguous entries to allocate */
1592:Middlewares/Third_Party/FatFs/src/ff.c **** )
1593:Middlewares/Third_Party/FatFs/src/ff.c **** {
1594:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
1595:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT n;
1596:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
1597:Middlewares/Third_Party/FatFs/src/ff.c **** 
1598:Middlewares/Third_Party/FatFs/src/ff.c **** 
1599:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_sdi(dp, 0);
1600:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
1601:Middlewares/Third_Party/FatFs/src/ff.c **** 		n = 0;
1602:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 45


1603:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, dp->sect);
1604:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
1605:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1606:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name
1607:Middlewares/Third_Party/FatFs/src/ff.c **** #else
1608:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
1609:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1610:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
1611:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
1612:Middlewares/Third_Party/FatFs/src/ff.c **** 				n = 0;					/* Not a blank entry. Restart to search */
1613:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1614:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_next(dp, 1);
1615:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (res == FR_OK);	/* Next entry with table stretch enabled */
1616:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1617:Middlewares/Third_Party/FatFs/src/ff.c **** 
1618:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1619:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
1620:Middlewares/Third_Party/FatFs/src/ff.c **** }
1621:Middlewares/Third_Party/FatFs/src/ff.c **** 
1622:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* !_FS_READONLY */
1623:Middlewares/Third_Party/FatFs/src/ff.c **** 
1624:Middlewares/Third_Party/FatFs/src/ff.c **** 
1625:Middlewares/Third_Party/FatFs/src/ff.c **** 
1626:Middlewares/Third_Party/FatFs/src/ff.c **** 
1627:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1628:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT: Directory handling - Load/Store start cluster number             */
1629:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1630:Middlewares/Third_Party/FatFs/src/ff.c **** 
1631:Middlewares/Third_Party/FatFs/src/ff.c **** static
1632:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
1633:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,		/* Pointer to the fs object */
1634:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE* dir	/* Pointer to the key entry */
1635:Middlewares/Third_Party/FatFs/src/ff.c **** )
1636:Middlewares/Third_Party/FatFs/src/ff.c **** {
 901              		.loc 1 1636 0
 902              		.cfi_startproc
 903              		@ args = 0, pretend = 0, frame = 0
 904              		@ frame_needed = 0, uses_anonymous_args = 0
 905              	.LVL109:
 906 0000 70B5     		push	{r4, r5, r6, lr}
 907              	.LCFI12:
 908              		.cfi_def_cfa_offset 16
 909              		.cfi_offset 4, -16
 910              		.cfi_offset 5, -12
 911              		.cfi_offset 6, -8
 912              		.cfi_offset 14, -4
 913 0002 0646     		mov	r6, r0
 914 0004 0D46     		mov	r5, r1
1637:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cl;
1638:Middlewares/Third_Party/FatFs/src/ff.c **** 
1639:Middlewares/Third_Party/FatFs/src/ff.c **** 	cl = ld_word(dir + DIR_FstClusLO);
 915              		.loc 1 1639 0
 916 0006 01F11A00 		add	r0, r1, #26
 917              	.LVL110:
 918 000a FFF7FEFF 		bl	ld_word
 919              	.LVL111:
1640:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_FAT32) {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 46


 920              		.loc 1 1640 0
 921 000e 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 922 0010 032B     		cmp	r3, #3
 923 0012 00D0     		beq	.L93
 924              	.LVL112:
 925              	.L90:
1641:Middlewares/Third_Party/FatFs/src/ff.c **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
1642:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1643:Middlewares/Third_Party/FatFs/src/ff.c **** 
1644:Middlewares/Third_Party/FatFs/src/ff.c **** 	return cl;
1645:Middlewares/Third_Party/FatFs/src/ff.c **** }
 926              		.loc 1 1645 0
 927 0014 70BD     		pop	{r4, r5, r6, pc}
 928              	.LVL113:
 929              	.L93:
 930 0016 0446     		mov	r4, r0
1641:Middlewares/Third_Party/FatFs/src/ff.c **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 931              		.loc 1 1641 0
 932 0018 05F11400 		add	r0, r5, #20
 933              	.LVL114:
 934 001c FFF7FEFF 		bl	ld_word
 935              	.LVL115:
 936 0020 44EA0040 		orr	r0, r4, r0, lsl #16
 937              	.LVL116:
1644:Middlewares/Third_Party/FatFs/src/ff.c **** }
 938              		.loc 1 1644 0
 939 0024 F6E7     		b	.L90
 940              		.cfi_endproc
 941              	.LFE170:
 943              		.section	.text.st_clust,"ax",%progbits
 944              		.align	1
 945              		.syntax unified
 946              		.thumb
 947              		.thumb_func
 948              		.fpu fpv5-sp-d16
 950              	st_clust:
 951              	.LFB171:
1646:Middlewares/Third_Party/FatFs/src/ff.c **** 
1647:Middlewares/Third_Party/FatFs/src/ff.c **** 
1648:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1649:Middlewares/Third_Party/FatFs/src/ff.c **** static
1650:Middlewares/Third_Party/FatFs/src/ff.c **** void st_clust (
1651:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,	/* Pointer to the fs object */
1652:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dir,	/* Pointer to the key entry */
1653:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cl	/* Value to be set */
1654:Middlewares/Third_Party/FatFs/src/ff.c **** )
1655:Middlewares/Third_Party/FatFs/src/ff.c **** {
 952              		.loc 1 1655 0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 0
 955              		@ frame_needed = 0, uses_anonymous_args = 0
 956              	.LVL117:
 957 0000 70B5     		push	{r4, r5, r6, lr}
 958              	.LCFI13:
 959              		.cfi_def_cfa_offset 16
 960              		.cfi_offset 4, -16
 961              		.cfi_offset 5, -12
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 47


 962              		.cfi_offset 6, -8
 963              		.cfi_offset 14, -4
 964 0002 0646     		mov	r6, r0
 965 0004 0C46     		mov	r4, r1
 966 0006 1546     		mov	r5, r2
1656:Middlewares/Third_Party/FatFs/src/ff.c **** 	st_word(dir + DIR_FstClusLO, (WORD)cl);
 967              		.loc 1 1656 0
 968 0008 91B2     		uxth	r1, r2
 969              	.LVL118:
 970 000a 04F11A00 		add	r0, r4, #26
 971              	.LVL119:
 972 000e FFF7FEFF 		bl	st_word
 973              	.LVL120:
1657:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 974              		.loc 1 1657 0
 975 0012 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 976 0014 032B     		cmp	r3, #3
 977 0016 00D0     		beq	.L97
 978              	.L94:
1658:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
1659:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1660:Middlewares/Third_Party/FatFs/src/ff.c **** }
 979              		.loc 1 1660 0
 980 0018 70BD     		pop	{r4, r5, r6, pc}
 981              	.LVL121:
 982              	.L97:
1658:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 983              		.loc 1 1658 0
 984 001a 290C     		lsrs	r1, r5, #16
 985 001c 04F11400 		add	r0, r4, #20
 986 0020 FFF7FEFF 		bl	st_word
 987              	.LVL122:
 988              		.loc 1 1660 0
 989 0024 F8E7     		b	.L94
 990              		.cfi_endproc
 991              	.LFE171:
 993              		.section	.text.pick_lfn,"ax",%progbits
 994              		.align	1
 995              		.syntax unified
 996              		.thumb
 997              		.thumb_func
 998              		.fpu fpv5-sp-d16
 1000              	pick_lfn:
 1001              	.LFB173:
1661:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1662:Middlewares/Third_Party/FatFs/src/ff.c **** 
1663:Middlewares/Third_Party/FatFs/src/ff.c **** 
1664:Middlewares/Third_Party/FatFs/src/ff.c **** 
1665:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
1666:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------------------------------*/
1667:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: LFN handling                                                  */
1668:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------------------------------*/
1669:Middlewares/Third_Party/FatFs/src/ff.c **** static
1670:Middlewares/Third_Party/FatFs/src/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN characters in the direc
1671:Middlewares/Third_Party/FatFs/src/ff.c **** 
1672:Middlewares/Third_Party/FatFs/src/ff.c **** 
1673:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------------------------*/
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 48


1674:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: Compare a part of file name with an LFN entry */
1675:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------------------------*/
1676:Middlewares/Third_Party/FatFs/src/ff.c **** static
1677:Middlewares/Third_Party/FatFs/src/ff.c **** int cmp_lfn (				/* 1:matched, 0:not matched */
1678:Middlewares/Third_Party/FatFs/src/ff.c **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
1679:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
1680:Middlewares/Third_Party/FatFs/src/ff.c **** )
1681:Middlewares/Third_Party/FatFs/src/ff.c **** {
1682:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, s;
1683:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR wc, uc;
1684:Middlewares/Third_Party/FatFs/src/ff.c **** 
1685:Middlewares/Third_Party/FatFs/src/ff.c **** 
1686:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1687:Middlewares/Third_Party/FatFs/src/ff.c **** 
1688:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1689:Middlewares/Third_Party/FatFs/src/ff.c **** 
1690:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1691:Middlewares/Third_Party/FatFs/src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1692:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wc) {
1693:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1694:Middlewares/Third_Party/FatFs/src/ff.c **** 				return 0;					/* Not matched */
1695:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1696:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc = uc;
1697:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
1698:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1699:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1700:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1701:Middlewares/Third_Party/FatFs/src/ff.c **** 
1702:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different len
1703:Middlewares/Third_Party/FatFs/src/ff.c **** 
1704:Middlewares/Third_Party/FatFs/src/ff.c **** 	return 1;		/* The part of LFN matched */
1705:Middlewares/Third_Party/FatFs/src/ff.c **** }
1706:Middlewares/Third_Party/FatFs/src/ff.c **** 
1707:Middlewares/Third_Party/FatFs/src/ff.c **** 
1708:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 || _USE_LABEL || _FS_EXFAT
1709:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------*/
1710:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: Pick a part of file name from an LFN entry */
1711:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------*/
1712:Middlewares/Third_Party/FatFs/src/ff.c **** static
1713:Middlewares/Third_Party/FatFs/src/ff.c **** int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
1714:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
1715:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dir			/* Pointer to the LFN entry */
1716:Middlewares/Third_Party/FatFs/src/ff.c **** )
1717:Middlewares/Third_Party/FatFs/src/ff.c **** {
 1002              		.loc 1 1717 0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 0
 1005              		@ frame_needed = 0, uses_anonymous_args = 0
 1006              	.LVL123:
 1007 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1008              	.LCFI14:
 1009              		.cfi_def_cfa_offset 24
 1010              		.cfi_offset 4, -24
 1011              		.cfi_offset 5, -20
 1012              		.cfi_offset 6, -16
 1013              		.cfi_offset 7, -12
 1014              		.cfi_offset 8, -8
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 49


 1015              		.cfi_offset 14, -4
 1016 0004 0746     		mov	r7, r0
 1017 0006 0E46     		mov	r6, r1
1718:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, s;
1719:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR wc, uc;
1720:Middlewares/Third_Party/FatFs/src/ff.c **** 
1721:Middlewares/Third_Party/FatFs/src/ff.c **** 
1722:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 1018              		.loc 1 1722 0
 1019 0008 01F11A00 		add	r0, r1, #26
 1020              	.LVL124:
 1021 000c FFF7FEFF 		bl	ld_word
 1022              	.LVL125:
 1023 0010 60BB     		cbnz	r0, .L104
1723:Middlewares/Third_Party/FatFs/src/ff.c **** 
1724:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 1024              		.loc 1 1724 0
 1025 0012 3578     		ldrb	r5, [r6]	@ zero_extendqisi2
 1026 0014 25F04005 		bic	r5, r5, #64
 1027 0018 013D     		subs	r5, r5, #1
 1028 001a 05EB4503 		add	r3, r5, r5, lsl #1
 1029 001e 05EB8305 		add	r5, r5, r3, lsl #2
 1030              	.LVL126:
1725:Middlewares/Third_Party/FatFs/src/ff.c **** 
1726:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 1031              		.loc 1 1726 0
 1032 0022 4FF00108 		mov	r8, #1
 1033 0026 0024     		movs	r4, #0
 1034 0028 04E0     		b	.L100
 1035              	.LVL127:
 1036              	.L101:
1727:Middlewares/Third_Party/FatFs/src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1728:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wc) {
1729:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
1730:Middlewares/Third_Party/FatFs/src/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1731:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
1732:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
 1037              		.loc 1 1732 0
 1038 002a 4FF6FF73 		movw	r3, #65535
 1039 002e 9842     		cmp	r0, r3
 1040 0030 21D1     		bne	.L106
 1041              	.LVL128:
 1042              	.L102:
1726:Middlewares/Third_Party/FatFs/src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 1043              		.loc 1 1726 0 discriminator 2
 1044 0032 0134     		adds	r4, r4, #1
 1045              	.LVL129:
 1046              	.L100:
1726:Middlewares/Third_Party/FatFs/src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 1047              		.loc 1 1726 0 is_stmt 0 discriminator 1
 1048 0034 0C2C     		cmp	r4, #12
 1049 0036 0ED8     		bhi	.L110
1727:Middlewares/Third_Party/FatFs/src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 1050              		.loc 1 1727 0 is_stmt 1
 1051 0038 124B     		ldr	r3, .L111
 1052 003a 185D     		ldrb	r0, [r3, r4]	@ zero_extendqisi2
 1053 003c 3044     		add	r0, r0, r6
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 50


 1054 003e FFF7FEFF 		bl	ld_word
 1055              	.LVL130:
1728:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 1056              		.loc 1 1728 0
 1057 0042 B8F1000F 		cmp	r8, #0
 1058 0046 F0D0     		beq	.L101
1729:Middlewares/Third_Party/FatFs/src/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
 1059              		.loc 1 1729 0
 1060 0048 FE2D     		cmp	r5, #254
 1061 004a 12D8     		bhi	.L105
 1062              	.LVL131:
1730:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 1063              		.loc 1 1730 0
 1064 004c 27F81500 		strh	r0, [r7, r5, lsl #1]	@ movhi
 1065 0050 8046     		mov	r8, r0
 1066 0052 0135     		adds	r5, r5, #1
 1067              	.LVL132:
 1068 0054 EDE7     		b	.L102
 1069              	.LVL133:
 1070              	.L110:
1733:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1734:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1735:Middlewares/Third_Party/FatFs/src/ff.c **** 
1736:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 1071              		.loc 1 1736 0
 1072 0056 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 1073 0058 13F0400F 		tst	r3, #64
 1074 005c 0DD0     		beq	.L107
1737:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 1075              		.loc 1 1737 0
 1076 005e FE2D     		cmp	r5, #254
 1077 0060 0DD8     		bhi	.L108
1738:Middlewares/Third_Party/FatFs/src/ff.c **** 		lfnbuf[i] = 0;
 1078              		.loc 1 1738 0
 1079 0062 0023     		movs	r3, #0
 1080 0064 27F81530 		strh	r3, [r7, r5, lsl #1]	@ movhi
1739:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1740:Middlewares/Third_Party/FatFs/src/ff.c **** 
1741:Middlewares/Third_Party/FatFs/src/ff.c **** 	return 1;		/* The part of LFN is valid */
 1081              		.loc 1 1741 0
 1082 0068 0120     		movs	r0, #1
 1083 006a 00E0     		b	.L98
 1084              	.LVL134:
 1085              	.L104:
1722:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1086              		.loc 1 1722 0
 1087 006c 0020     		movs	r0, #0
 1088              	.L98:
1742:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1089              		.loc 1 1742 0
 1090 006e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1091              	.LVL135:
 1092              	.L105:
1729:Middlewares/Third_Party/FatFs/src/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
 1093              		.loc 1 1729 0
 1094 0072 0020     		movs	r0, #0
 1095              	.LVL136:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 51


 1096 0074 FBE7     		b	.L98
 1097              	.LVL137:
 1098              	.L106:
1732:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 1099              		.loc 1 1732 0
 1100 0076 0020     		movs	r0, #0
 1101              	.LVL138:
 1102 0078 F9E7     		b	.L98
 1103              	.L107:
1741:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1104              		.loc 1 1741 0
 1105 007a 0120     		movs	r0, #1
 1106 007c F7E7     		b	.L98
 1107              	.L108:
1737:Middlewares/Third_Party/FatFs/src/ff.c **** 		lfnbuf[i] = 0;
 1108              		.loc 1 1737 0
 1109 007e 0020     		movs	r0, #0
 1110 0080 F5E7     		b	.L98
 1111              	.L112:
 1112 0082 00BF     		.align	2
 1113              	.L111:
 1114 0084 00000000 		.word	.LANCHOR1
 1115              		.cfi_endproc
 1116              	.LFE173:
 1118              		.section	.text.put_lfn,"ax",%progbits
 1119              		.align	1
 1120              		.syntax unified
 1121              		.thumb
 1122              		.thumb_func
 1123              		.fpu fpv5-sp-d16
 1125              	put_lfn:
 1126              	.LFB174:
1743:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1744:Middlewares/Third_Party/FatFs/src/ff.c **** 
1745:Middlewares/Third_Party/FatFs/src/ff.c **** 
1746:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1747:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------*/
1748:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: Create an entry of LFN entries */
1749:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------*/
1750:Middlewares/Third_Party/FatFs/src/ff.c **** static
1751:Middlewares/Third_Party/FatFs/src/ff.c **** void put_lfn (
1752:Middlewares/Third_Party/FatFs/src/ff.c **** 	const WCHAR* lfn,	/* Pointer to the LFN */
1753:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dir,			/* Pointer to the LFN entry to be created */
1754:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE ord,			/* LFN order (1-20) */
1755:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE sum			/* Checksum of the corresponding SFN */
1756:Middlewares/Third_Party/FatFs/src/ff.c **** )
1757:Middlewares/Third_Party/FatFs/src/ff.c **** {
 1127              		.loc 1 1757 0
 1128              		.cfi_startproc
 1129              		@ args = 0, pretend = 0, frame = 0
 1130              		@ frame_needed = 0, uses_anonymous_args = 0
 1131              	.LVL139:
 1132 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1133              	.LCFI15:
 1134              		.cfi_def_cfa_offset 32
 1135              		.cfi_offset 3, -32
 1136              		.cfi_offset 4, -28
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 52


 1137              		.cfi_offset 5, -24
 1138              		.cfi_offset 6, -20
 1139              		.cfi_offset 7, -16
 1140              		.cfi_offset 8, -12
 1141              		.cfi_offset 9, -8
 1142              		.cfi_offset 14, -4
 1143 0004 8046     		mov	r8, r0
 1144 0006 0F46     		mov	r7, r1
 1145 0008 9146     		mov	r9, r2
1758:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, s;
1759:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR wc;
1760:Middlewares/Third_Party/FatFs/src/ff.c **** 
1761:Middlewares/Third_Party/FatFs/src/ff.c **** 
1762:Middlewares/Third_Party/FatFs/src/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set checksum */
 1146              		.loc 1 1762 0
 1147 000a 4B73     		strb	r3, [r1, #13]
1763:Middlewares/Third_Party/FatFs/src/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 1148              		.loc 1 1763 0
 1149 000c 0F23     		movs	r3, #15
 1150              	.LVL140:
 1151 000e CB72     		strb	r3, [r1, #11]
1764:Middlewares/Third_Party/FatFs/src/ff.c **** 	dir[LDIR_Type] = 0;
 1152              		.loc 1 1764 0
 1153 0010 0024     		movs	r4, #0
 1154 0012 0C73     		strb	r4, [r1, #12]
1765:Middlewares/Third_Party/FatFs/src/ff.c **** 	st_word(dir + LDIR_FstClusLO, 0);
 1155              		.loc 1 1765 0
 1156 0014 2146     		mov	r1, r4
 1157              	.LVL141:
 1158 0016 07F11A00 		add	r0, r7, #26
 1159              	.LVL142:
 1160 001a FFF7FEFF 		bl	st_word
 1161              	.LVL143:
1766:Middlewares/Third_Party/FatFs/src/ff.c **** 
1767:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 1162              		.loc 1 1767 0
 1163 001e 09F1FF36 		add	r6, r9, #-1
 1164 0022 06EB4603 		add	r3, r6, r6, lsl #1
 1165 0026 06EB8306 		add	r6, r6, r3, lsl #2
 1166              	.LVL144:
1768:Middlewares/Third_Party/FatFs/src/ff.c **** 	s = wc = 0;
 1167              		.loc 1 1768 0
 1168 002a 2546     		mov	r5, r4
 1169 002c 02E0     		b	.L116
 1170              	.LVL145:
 1171              	.L115:
1769:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
1770:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1771:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
1772:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
1773:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (++s < 13);
 1172              		.loc 1 1773 0
 1173 002e 0134     		adds	r4, r4, #1
 1174              	.LVL146:
 1175 0030 0C2C     		cmp	r4, #12
 1176 0032 11D8     		bhi	.L121
 1177              	.LVL147:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 53


 1178              	.L116:
1770:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
 1179              		.loc 1 1770 0
 1180 0034 4FF6FF73 		movw	r3, #65535
 1181 0038 9D42     		cmp	r5, r3
 1182 003a 02D0     		beq	.L114
 1183              	.LVL148:
1770:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
 1184              		.loc 1 1770 0 is_stmt 0 discriminator 1
 1185 003c 38F81650 		ldrh	r5, [r8, r6, lsl #1]
 1186              	.LVL149:
 1187 0040 0136     		adds	r6, r6, #1
 1188              	.LVL150:
 1189              	.L114:
1771:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 1190              		.loc 1 1771 0 is_stmt 1
 1191 0042 0C4B     		ldr	r3, .L122
 1192 0044 185D     		ldrb	r0, [r3, r4]	@ zero_extendqisi2
 1193 0046 2946     		mov	r1, r5
 1194 0048 3844     		add	r0, r0, r7
 1195 004a FFF7FEFF 		bl	st_word
 1196              	.LVL151:
1772:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (++s < 13);
 1197              		.loc 1 1772 0
 1198 004e 002D     		cmp	r5, #0
 1199 0050 EDD1     		bne	.L115
 1200 0052 4FF6FF75 		movw	r5, #65535
 1201              	.LVL152:
 1202 0056 EAE7     		b	.L115
 1203              	.LVL153:
 1204              	.L121:
1774:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 1205              		.loc 1 1774 0
 1206 0058 4FF6FF73 		movw	r3, #65535
 1207 005c 9D42     		cmp	r5, r3
 1208 005e 02D0     		beq	.L117
 1209              		.loc 1 1774 0 is_stmt 0 discriminator 2
 1210 0060 38F81630 		ldrh	r3, [r8, r6, lsl #1]
 1211 0064 0BB9     		cbnz	r3, .L118
 1212              	.L117:
 1213              		.loc 1 1774 0 discriminator 3
 1214 0066 49F04009 		orr	r9, r9, #64
 1215              	.LVL154:
 1216              	.L118:
1775:Middlewares/Third_Party/FatFs/src/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 1217              		.loc 1 1775 0 is_stmt 1
 1218 006a 87F80090 		strb	r9, [r7]
1776:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1219              		.loc 1 1776 0
 1220 006e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1221              	.LVL155:
 1222              	.L123:
 1223 0072 00BF     		.align	2
 1224              	.L122:
 1225 0074 00000000 		.word	.LANCHOR1
 1226              		.cfi_endproc
 1227              	.LFE174:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 54


 1229              		.section	.text.gen_numname,"ax",%progbits
 1230              		.align	1
 1231              		.syntax unified
 1232              		.thumb
 1233              		.thumb_func
 1234              		.fpu fpv5-sp-d16
 1236              	gen_numname:
 1237              	.LFB175:
1777:Middlewares/Third_Party/FatFs/src/ff.c **** 
1778:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* !_FS_READONLY */
1779:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_LFN != 0 */
1780:Middlewares/Third_Party/FatFs/src/ff.c **** 
1781:Middlewares/Third_Party/FatFs/src/ff.c **** 
1782:Middlewares/Third_Party/FatFs/src/ff.c **** 
1783:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0 && !_FS_READONLY
1784:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1785:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: Create a Numbered SFN                                        */
1786:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1787:Middlewares/Third_Party/FatFs/src/ff.c **** 
1788:Middlewares/Third_Party/FatFs/src/ff.c **** static
1789:Middlewares/Third_Party/FatFs/src/ff.c **** void gen_numname (
1790:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
1791:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE* src,	/* Pointer to SFN */
1792:Middlewares/Third_Party/FatFs/src/ff.c **** 	const WCHAR* lfn,	/* Pointer to LFN */
1793:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT seq			/* Sequence number */
1794:Middlewares/Third_Party/FatFs/src/ff.c **** )
1795:Middlewares/Third_Party/FatFs/src/ff.c **** {
 1238              		.loc 1 1795 0
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 8
 1241              		@ frame_needed = 0, uses_anonymous_args = 0
 1242              	.LVL156:
 1243 0000 70B5     		push	{r4, r5, r6, lr}
 1244              	.LCFI16:
 1245              		.cfi_def_cfa_offset 16
 1246              		.cfi_offset 4, -16
 1247              		.cfi_offset 5, -12
 1248              		.cfi_offset 6, -8
 1249              		.cfi_offset 14, -4
 1250 0002 82B0     		sub	sp, sp, #8
 1251              	.LCFI17:
 1252              		.cfi_def_cfa_offset 24
 1253 0004 0546     		mov	r5, r0
 1254 0006 1646     		mov	r6, r2
 1255 0008 1C46     		mov	r4, r3
1796:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE ns[8], c;
1797:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, j;
1798:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR wc;
1799:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sr;
1800:Middlewares/Third_Party/FatFs/src/ff.c **** 
1801:Middlewares/Third_Party/FatFs/src/ff.c **** 
1802:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_cpy(dst, src, 11);
 1256              		.loc 1 1802 0
 1257 000a 0B22     		movs	r2, #11
 1258              	.LVL157:
 1259 000c FFF7FEFF 		bl	mem_cpy
 1260              	.LVL158:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 55


1803:Middlewares/Third_Party/FatFs/src/ff.c **** 
1804:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number 
 1261              		.loc 1 1804 0
 1262 0010 052C     		cmp	r4, #5
 1263 0012 11D8     		bhi	.L125
 1264              	.LVL159:
 1265              	.L126:
1805:Middlewares/Third_Party/FatFs/src/ff.c **** 		sr = seq;
1806:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (*lfn) {	/* Create a CRC */
1807:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc = *lfn++;
1808:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (i = 0; i < 16; i++) {
 1266              		.loc 1 1808 0
 1267 0014 0722     		movs	r2, #7
 1268 0016 1DE0     		b	.L132
 1269              	.LVL160:
 1270              	.L128:
 1271              		.loc 1 1808 0 is_stmt 0 discriminator 2
 1272 0018 0132     		adds	r2, r2, #1
 1273              	.LVL161:
 1274              	.L127:
 1275              		.loc 1 1808 0 discriminator 1
 1276 001a 0F2A     		cmp	r2, #15
 1277 001c 0CD8     		bhi	.L125
1809:Middlewares/Third_Party/FatFs/src/ff.c **** 				sr = (sr << 1) + (wc & 1);
 1278              		.loc 1 1809 0 is_stmt 1
 1279 001e 03F00101 		and	r1, r3, #1
 1280 0022 01EB4404 		add	r4, r1, r4, lsl #1
 1281              	.LVL162:
1810:Middlewares/Third_Party/FatFs/src/ff.c **** 				wc >>= 1;
 1282              		.loc 1 1810 0
 1283 0026 5B08     		lsrs	r3, r3, #1
 1284              	.LVL163:
1811:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (sr & 0x10000) sr ^= 0x11021;
 1285              		.loc 1 1811 0
 1286 0028 14F4803F 		tst	r4, #65536
 1287 002c F4D0     		beq	.L128
 1288              		.loc 1 1811 0 is_stmt 0 discriminator 1
 1289 002e 84F48834 		eor	r4, r4, #69632
 1290              	.LVL164:
 1291 0032 84F02104 		eor	r4, r4, #33
 1292              	.LVL165:
 1293 0036 EFE7     		b	.L128
 1294              	.LVL166:
 1295              	.L125:
1806:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc = *lfn++;
 1296              		.loc 1 1806 0 is_stmt 1
 1297 0038 3388     		ldrh	r3, [r6]
 1298 003a 002B     		cmp	r3, #0
 1299 003c EAD0     		beq	.L126
1807:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (i = 0; i < 16; i++) {
 1300              		.loc 1 1807 0
 1301 003e 0236     		adds	r6, r6, #2
 1302              	.LVL167:
1808:Middlewares/Third_Party/FatFs/src/ff.c **** 				sr = (sr << 1) + (wc & 1);
 1303              		.loc 1 1808 0
 1304 0040 0022     		movs	r2, #0
 1305 0042 EAE7     		b	.L127
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 56


 1306              	.LVL168:
 1307              	.L131:
1812:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1813:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1814:Middlewares/Third_Party/FatFs/src/ff.c **** 		seq = (UINT)sr;
1815:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1816:Middlewares/Third_Party/FatFs/src/ff.c **** 
1817:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* itoa (hexdecimal) */
1818:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = 7;
1819:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
1820:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = (BYTE)((seq % 16) + '0');
1821:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c > '9') c += 7;
1822:Middlewares/Third_Party/FatFs/src/ff.c **** 		ns[i--] = c;
 1308              		.loc 1 1822 0
 1309 0044 531E     		subs	r3, r2, #1
 1310              	.LVL169:
 1311 0046 02A8     		add	r0, sp, #8
 1312 0048 0244     		add	r2, r2, r0
 1313 004a 02F8081C 		strb	r1, [r2, #-8]
 1314              	.LVL170:
1823:Middlewares/Third_Party/FatFs/src/ff.c **** 		seq /= 16;
1824:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (seq);
 1315              		.loc 1 1824 0
 1316 004e 2409     		lsrs	r4, r4, #4
 1317              	.LVL171:
 1318 0050 09D0     		beq	.L142
1822:Middlewares/Third_Party/FatFs/src/ff.c **** 		seq /= 16;
 1319              		.loc 1 1822 0
 1320 0052 1A46     		mov	r2, r3
 1321              	.LVL172:
 1322              	.L132:
1820:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c > '9') c += 7;
 1323              		.loc 1 1820 0
 1324 0054 04F00F03 		and	r3, r4, #15
 1325 0058 03F13001 		add	r1, r3, #48
 1326              	.LVL173:
1821:Middlewares/Third_Party/FatFs/src/ff.c **** 		ns[i--] = c;
 1327              		.loc 1 1821 0
 1328 005c 3929     		cmp	r1, #57
 1329 005e F1D9     		bls	.L131
1821:Middlewares/Third_Party/FatFs/src/ff.c **** 		ns[i--] = c;
 1330              		.loc 1 1821 0 is_stmt 0 discriminator 1
 1331 0060 03F13701 		add	r1, r3, #55
 1332              	.LVL174:
 1333 0064 EEE7     		b	.L131
 1334              	.LVL175:
 1335              	.L142:
1825:Middlewares/Third_Party/FatFs/src/ff.c **** 	ns[i] = '~';
 1336              		.loc 1 1825 0 is_stmt 1
 1337 0066 7E21     		movs	r1, #126
 1338              	.LVL176:
 1339 0068 0246     		mov	r2, r0
 1340              	.LVL177:
 1341 006a 1A44     		add	r2, r2, r3
 1342 006c 02F8081C 		strb	r1, [r2, #-8]
 1343              	.LVL178:
1826:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 57


1827:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Append the number */
1828:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
 1344              		.loc 1 1828 0
 1345 0070 00E0     		b	.L133
 1346              	.LVL179:
 1347              	.L135:
 1348              		.loc 1 1828 0 is_stmt 0 discriminator 2
 1349 0072 0134     		adds	r4, r4, #1
 1350              	.LVL180:
 1351              	.L133:
 1352              		.loc 1 1828 0 discriminator 1
 1353 0074 9C42     		cmp	r4, r3
 1354 0076 09D2     		bcs	.L137
 1355              		.loc 1 1828 0 discriminator 3
 1356 0078 2A5D     		ldrb	r2, [r5, r4]	@ zero_extendqisi2
 1357 007a 202A     		cmp	r2, #32
 1358 007c F9D1     		bne	.L135
 1359 007e 05E0     		b	.L137
 1360              	.L139:
1829:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsDBCS1(dst[j])) {
1830:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (j == i - 1) break;
1831:Middlewares/Third_Party/FatFs/src/ff.c **** 			j++;
1832:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1833:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1834:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
1835:Middlewares/Third_Party/FatFs/src/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
 1361              		.loc 1 1835 0 is_stmt 1
 1362 0080 2021     		movs	r1, #32
 1363              	.L136:
 1364              		.loc 1 1835 0 is_stmt 0 discriminator 4
 1365 0082 621C     		adds	r2, r4, #1
 1366              	.LVL181:
 1367 0084 2955     		strb	r1, [r5, r4]
1836:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (j < 8);
 1368              		.loc 1 1836 0 is_stmt 1 discriminator 4
 1369 0086 072A     		cmp	r2, #7
 1370 0088 08D8     		bhi	.L143
1835:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (j < 8);
 1371              		.loc 1 1835 0
 1372 008a 1446     		mov	r4, r2
 1373              	.LVL182:
 1374              	.L137:
 1375 008c 072B     		cmp	r3, #7
 1376 008e F7D8     		bhi	.L139
 1377              	.LVL183:
1835:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (j < 8);
 1378              		.loc 1 1835 0 is_stmt 0 discriminator 1
 1379 0090 02AA     		add	r2, sp, #8
 1380 0092 1A44     		add	r2, r2, r3
 1381 0094 12F8081C 		ldrb	r1, [r2, #-8]	@ zero_extendqisi2
 1382 0098 0133     		adds	r3, r3, #1
 1383              	.LVL184:
 1384 009a F2E7     		b	.L136
 1385              	.LVL185:
 1386              	.L143:
1837:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1387              		.loc 1 1837 0 is_stmt 1
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 58


 1388 009c 02B0     		add	sp, sp, #8
 1389              	.LCFI18:
 1390              		.cfi_def_cfa_offset 16
 1391              		@ sp needed
 1392 009e 70BD     		pop	{r4, r5, r6, pc}
 1393              		.cfi_endproc
 1394              	.LFE175:
 1396              		.section	.text.sum_sfn,"ax",%progbits
 1397              		.align	1
 1398              		.syntax unified
 1399              		.thumb
 1400              		.thumb_func
 1401              		.fpu fpv5-sp-d16
 1403              	sum_sfn:
 1404              	.LFB176:
1838:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_LFN != 0 && !_FS_READONLY */
1839:Middlewares/Third_Party/FatFs/src/ff.c **** 
1840:Middlewares/Third_Party/FatFs/src/ff.c **** 
1841:Middlewares/Third_Party/FatFs/src/ff.c **** 
1842:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
1843:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1844:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: Calculate checksum of an SFN entry                           */
1845:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1846:Middlewares/Third_Party/FatFs/src/ff.c **** 
1847:Middlewares/Third_Party/FatFs/src/ff.c **** static
1848:Middlewares/Third_Party/FatFs/src/ff.c **** BYTE sum_sfn (
1849:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE* dir		/* Pointer to the SFN entry */
1850:Middlewares/Third_Party/FatFs/src/ff.c **** )
1851:Middlewares/Third_Party/FatFs/src/ff.c **** {
 1405              		.loc 1 1851 0
 1406              		.cfi_startproc
 1407              		@ args = 0, pretend = 0, frame = 0
 1408              		@ frame_needed = 0, uses_anonymous_args = 0
 1409              		@ link register save eliminated.
 1410              	.LVL186:
 1411 0000 0146     		mov	r1, r0
 1412              	.LVL187:
1852:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE sum = 0;
1853:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT n = 11;
 1413              		.loc 1 1853 0
 1414 0002 0B22     		movs	r2, #11
1852:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE sum = 0;
 1415              		.loc 1 1852 0
 1416 0004 0020     		movs	r0, #0
 1417              	.LVL188:
 1418              	.L145:
1854:Middlewares/Third_Party/FatFs/src/ff.c **** 
1855:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
1856:Middlewares/Third_Party/FatFs/src/ff.c **** 		sum = (sum >> 1) + (sum << 7) + *dir++;
 1419              		.loc 1 1856 0 discriminator 1
 1420 0006 C301     		lsls	r3, r0, #7
 1421 0008 43EA5003 		orr	r3, r3, r0, lsr #1
 1422              	.LVL189:
 1423 000c 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1424              	.LVL190:
 1425 000e 50FA83F3 		uxtab	r3, r0, r3
 1426 0012 D8B2     		uxtb	r0, r3
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 59


 1427              	.LVL191:
 1428 0014 0131     		adds	r1, r1, #1
 1429              	.LVL192:
1857:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (--n);
 1430              		.loc 1 1857 0 discriminator 1
 1431 0016 013A     		subs	r2, r2, #1
 1432              	.LVL193:
 1433 0018 F5D1     		bne	.L145
1858:Middlewares/Third_Party/FatFs/src/ff.c **** 	return sum;
1859:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1434              		.loc 1 1859 0
 1435 001a 7047     		bx	lr
 1436              		.cfi_endproc
 1437              	.LFE176:
 1439              		.section	.text.get_ldnumber,"ax",%progbits
 1440              		.align	1
 1441              		.syntax unified
 1442              		.thumb
 1443              		.thumb_func
 1444              		.fpu fpv5-sp-d16
 1446              	get_ldnumber:
 1447              	.LFB184:
1860:Middlewares/Third_Party/FatFs/src/ff.c **** 
1861:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_LFN != 0 */
1862:Middlewares/Third_Party/FatFs/src/ff.c **** 
1863:Middlewares/Third_Party/FatFs/src/ff.c **** 
1864:Middlewares/Third_Party/FatFs/src/ff.c **** 
1865:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1866:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1867:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Checksum                                                       */
1868:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1869:Middlewares/Third_Party/FatFs/src/ff.c **** 
1870:Middlewares/Third_Party/FatFs/src/ff.c **** static
1871:Middlewares/Third_Party/FatFs/src/ff.c **** WORD xdir_sum (			/* Get checksum of the directoly block */
1872:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE* dir		/* Directory entry block to be calculated */
1873:Middlewares/Third_Party/FatFs/src/ff.c **** )
1874:Middlewares/Third_Party/FatFs/src/ff.c **** {
1875:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, szblk;
1876:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD sum;
1877:Middlewares/Third_Party/FatFs/src/ff.c **** 
1878:Middlewares/Third_Party/FatFs/src/ff.c **** 
1879:Middlewares/Third_Party/FatFs/src/ff.c **** 	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
1880:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = sum = 0; i < szblk; i++) {
1881:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == XDIR_SetSum) {	/* Skip sum field */
1882:Middlewares/Third_Party/FatFs/src/ff.c **** 			i++;
1883:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
1884:Middlewares/Third_Party/FatFs/src/ff.c **** 			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
1885:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1886:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1887:Middlewares/Third_Party/FatFs/src/ff.c **** 	return sum;
1888:Middlewares/Third_Party/FatFs/src/ff.c **** }
1889:Middlewares/Third_Party/FatFs/src/ff.c **** 
1890:Middlewares/Third_Party/FatFs/src/ff.c **** 
1891:Middlewares/Third_Party/FatFs/src/ff.c **** 
1892:Middlewares/Third_Party/FatFs/src/ff.c **** static
1893:Middlewares/Third_Party/FatFs/src/ff.c **** WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
1894:Middlewares/Third_Party/FatFs/src/ff.c **** 	const WCHAR* name	/* File name to be calculated */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 60


1895:Middlewares/Third_Party/FatFs/src/ff.c **** )
1896:Middlewares/Third_Party/FatFs/src/ff.c **** {
1897:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR chr;
1898:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD sum = 0;
1899:Middlewares/Third_Party/FatFs/src/ff.c **** 
1900:Middlewares/Third_Party/FatFs/src/ff.c **** 
1901:Middlewares/Third_Party/FatFs/src/ff.c **** 	while ((chr = *name++) != 0) {
1902:Middlewares/Third_Party/FatFs/src/ff.c **** 		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
1903:Middlewares/Third_Party/FatFs/src/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
1904:Middlewares/Third_Party/FatFs/src/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
1905:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1906:Middlewares/Third_Party/FatFs/src/ff.c **** 	return sum;
1907:Middlewares/Third_Party/FatFs/src/ff.c **** }
1908:Middlewares/Third_Party/FatFs/src/ff.c **** 
1909:Middlewares/Third_Party/FatFs/src/ff.c **** 
1910:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY && _USE_MKFS
1911:Middlewares/Third_Party/FatFs/src/ff.c **** static
1912:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD xsum32 (
1913:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE  dat,	/* Data to be sumed */
1914:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sum	/* Previous value */
1915:Middlewares/Third_Party/FatFs/src/ff.c **** )
1916:Middlewares/Third_Party/FatFs/src/ff.c **** {
1917:Middlewares/Third_Party/FatFs/src/ff.c **** 	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
1918:Middlewares/Third_Party/FatFs/src/ff.c **** 	return sum;
1919:Middlewares/Third_Party/FatFs/src/ff.c **** }
1920:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1921:Middlewares/Third_Party/FatFs/src/ff.c **** 
1922:Middlewares/Third_Party/FatFs/src/ff.c **** 
1923:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
1924:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------------*/
1925:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Get object information from a directory block */
1926:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------------*/
1927:Middlewares/Third_Party/FatFs/src/ff.c **** 
1928:Middlewares/Third_Party/FatFs/src/ff.c **** static
1929:Middlewares/Third_Party/FatFs/src/ff.c **** void get_xdir_info (
1930:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
1931:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno		/* Buffer to store the extracted file information */
1932:Middlewares/Third_Party/FatFs/src/ff.c **** )
1933:Middlewares/Third_Party/FatFs/src/ff.c **** {
1934:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT di, si;
1935:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR w;
1936:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
1937:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nc;
1938:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1939:Middlewares/Third_Party/FatFs/src/ff.c **** 
1940:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get file name */
1941:Middlewares/Third_Party/FatFs/src/ff.c **** 	di = 0;
1942:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
1943:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
1944:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
1945:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = ld_word(dirb + si);					/* Get a character */
1946:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
1947:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->fname[di] = w;						/* Store it */
1948:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1949:Middlewares/Third_Party/FatFs/src/ff.c **** #else
1950:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
1951:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 61


1952:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
1953:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
1954:Middlewares/Third_Party/FatFs/src/ff.c **** 			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
1955:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1956:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessi
1957:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->fname[di++] = (char)w;
1958:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1959:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1960:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
1961:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fname[di] = 0;						/* Terminate file name */
1962:Middlewares/Third_Party/FatFs/src/ff.c **** 
1963:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->altname[0] = 0;							/* No SFN */
1964:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
1965:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
1966:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
1967:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
1968:Middlewares/Third_Party/FatFs/src/ff.c **** }
1969:Middlewares/Third_Party/FatFs/src/ff.c **** 
1970:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
1971:Middlewares/Third_Party/FatFs/src/ff.c **** 
1972:Middlewares/Third_Party/FatFs/src/ff.c **** 
1973:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------*/
1974:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Get a directry entry block */
1975:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------*/
1976:Middlewares/Third_Party/FatFs/src/ff.c **** 
1977:Middlewares/Third_Party/FatFs/src/ff.c **** static
1978:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
1979:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
1980:Middlewares/Third_Party/FatFs/src/ff.c **** )
1981:Middlewares/Third_Party/FatFs/src/ff.c **** {
1982:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
1983:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, sz_ent;
1984:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
1985:Middlewares/Third_Party/FatFs/src/ff.c **** 
1986:Middlewares/Third_Party/FatFs/src/ff.c **** 
1987:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Load 85 entry */
1988:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
1989:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) return res;
1990:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
1991:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_cpy(dirb + 0, dp->dir, SZDIRE);
1992:Middlewares/Third_Party/FatFs/src/ff.c **** 	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
1993:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1994:Middlewares/Third_Party/FatFs/src/ff.c **** 
1995:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Load C0 entry */
1996:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_next(dp, 0);
1997:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) return res;
1998:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
1999:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) return res;
2000:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
2001:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
2002:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
2003:Middlewares/Third_Party/FatFs/src/ff.c **** 
2004:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Load C1 entries */
2005:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = SZDIRE * 2;	/* C1 offset */
2006:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
2007:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_next(dp, 0);
2008:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 62


2009:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2010:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
2011:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
2012:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
2013:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while ((i += SZDIRE) < sz_ent);
2014:Middlewares/Third_Party/FatFs/src/ff.c **** 
2015:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Sanity check (do it when accessible object name) */
2016:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i <= MAXDIRB(_MAX_LFN)) {
2017:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
2018:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2019:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
2020:Middlewares/Third_Party/FatFs/src/ff.c **** }
2021:Middlewares/Third_Party/FatFs/src/ff.c **** 
2022:Middlewares/Third_Party/FatFs/src/ff.c **** 
2023:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY || _FS_RPATH != 0
2024:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------*/
2025:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Load the object's directory entry block */
2026:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------*/
2027:Middlewares/Third_Party/FatFs/src/ff.c **** static
2028:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT load_obj_dir (
2029:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
2030:Middlewares/Third_Party/FatFs/src/ff.c **** 	const _FDID* obj	/* Object with its containing directory information */
2031:Middlewares/Third_Party/FatFs/src/ff.c **** )
2032:Middlewares/Third_Party/FatFs/src/ff.c **** {
2033:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2034:Middlewares/Third_Party/FatFs/src/ff.c **** 
2035:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Open object containing directory */
2036:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->obj.fs = obj->fs;
2037:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->obj.sclust = obj->c_scl;
2038:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->obj.stat = (BYTE)obj->c_size;
2039:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
2040:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->blk_ofs = obj->c_ofs;
2041:Middlewares/Third_Party/FatFs/src/ff.c **** 
2042:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
2043:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
2044:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = load_xdir(dp);		/* Load the object's entry block */
2045:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2046:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2047:Middlewares/Third_Party/FatFs/src/ff.c **** }
2048:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2049:Middlewares/Third_Party/FatFs/src/ff.c **** 
2050:Middlewares/Third_Party/FatFs/src/ff.c **** 
2051:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
2052:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------*/
2053:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Store the directory block to the media */
2054:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------*/
2055:Middlewares/Third_Party/FatFs/src/ff.c **** static
2056:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT store_xdir (
2057:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp				/* Pointer to the direcotry object */
2058:Middlewares/Third_Party/FatFs/src/ff.c **** )
2059:Middlewares/Third_Party/FatFs/src/ff.c **** {
2060:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2061:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nent;
2062:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
2063:Middlewares/Third_Party/FatFs/src/ff.c **** 
2064:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create set sum */
2065:Middlewares/Third_Party/FatFs/src/ff.c **** 	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 63


2066:Middlewares/Third_Party/FatFs/src/ff.c **** 	nent = dirb[XDIR_NumSec] + 1;
2067:Middlewares/Third_Party/FatFs/src/ff.c **** 
2068:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Store the set of directory to the volume */
2069:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);
2070:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (res == FR_OK) {
2071:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2072:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
2073:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(dp->dir, dirb, SZDIRE);
2074:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->obj.fs->wflag = 1;
2075:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (--nent == 0) break;
2076:Middlewares/Third_Party/FatFs/src/ff.c **** 		dirb += SZDIRE;
2077:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_next(dp, 0);
2078:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2079:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
2080:Middlewares/Third_Party/FatFs/src/ff.c **** }
2081:Middlewares/Third_Party/FatFs/src/ff.c **** 
2082:Middlewares/Third_Party/FatFs/src/ff.c **** 
2083:Middlewares/Third_Party/FatFs/src/ff.c **** 
2084:Middlewares/Third_Party/FatFs/src/ff.c **** /*-------------------------------------------*/
2085:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Create a new directory enrty block */
2086:Middlewares/Third_Party/FatFs/src/ff.c **** /*-------------------------------------------*/
2087:Middlewares/Third_Party/FatFs/src/ff.c **** 
2088:Middlewares/Third_Party/FatFs/src/ff.c **** static
2089:Middlewares/Third_Party/FatFs/src/ff.c **** void create_xdir (
2090:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
2091:Middlewares/Third_Party/FatFs/src/ff.c **** 	const WCHAR* lfn	/* Pointer to the nul terminated file name */
2092:Middlewares/Third_Party/FatFs/src/ff.c **** )
2093:Middlewares/Third_Party/FatFs/src/ff.c **** {
2094:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
2095:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE nb, nc;
2096:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR chr;
2097:Middlewares/Third_Party/FatFs/src/ff.c **** 
2098:Middlewares/Third_Party/FatFs/src/ff.c **** 
2099:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create 85+C0 entry */
2100:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_set(dirb, 0, 2 * SZDIRE);
2101:Middlewares/Third_Party/FatFs/src/ff.c **** 	dirb[XDIR_Type] = 0x85;
2102:Middlewares/Third_Party/FatFs/src/ff.c **** 	dirb[XDIR_Type + SZDIRE] = 0xC0;
2103:Middlewares/Third_Party/FatFs/src/ff.c **** 
2104:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create C1 entries */
2105:Middlewares/Third_Party/FatFs/src/ff.c **** 	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
2106:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
2107:Middlewares/Third_Party/FatFs/src/ff.c **** 		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
2108:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {	/* Fill name field */
2109:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
2110:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(dirb + i, chr); 		/* Store it */
2111:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while ((i += 2) % SZDIRE != 0);
2112:Middlewares/Third_Party/FatFs/src/ff.c **** 		nb++;
2113:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (lfn[nc]);	/* Fill next entry if any char follows */
2114:Middlewares/Third_Party/FatFs/src/ff.c **** 
2115:Middlewares/Third_Party/FatFs/src/ff.c **** 	dirb[XDIR_NumName] = nc;	/* Set name length */
2116:Middlewares/Third_Party/FatFs/src/ff.c **** 	dirb[XDIR_NumSec] = nb;		/* Set block length */
2117:Middlewares/Third_Party/FatFs/src/ff.c **** 	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
2118:Middlewares/Third_Party/FatFs/src/ff.c **** }
2119:Middlewares/Third_Party/FatFs/src/ff.c **** 
2120:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* !_FS_READONLY */
2121:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_EXFAT */
2122:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 64


2123:Middlewares/Third_Party/FatFs/src/ff.c **** 
2124:Middlewares/Third_Party/FatFs/src/ff.c **** 
2125:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 || _USE_LABEL || _FS_EXFAT
2126:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2127:Middlewares/Third_Party/FatFs/src/ff.c **** /* Read an object from the directory                                     */
2128:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2129:Middlewares/Third_Party/FatFs/src/ff.c **** 
2130:Middlewares/Third_Party/FatFs/src/ff.c **** static
2131:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_read (
2132:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
2133:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol			/* Filtered by 0:file/directory or 1:volume label */
2134:Middlewares/Third_Party/FatFs/src/ff.c **** )
2135:Middlewares/Third_Party/FatFs/src/ff.c **** {
2136:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_NO_FILE;
2137:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
2138:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE a, c;
2139:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
2140:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE ord = 0xFF, sum = 0xFF;
2141:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2142:Middlewares/Third_Party/FatFs/src/ff.c **** 
2143:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (dp->sect) {
2144:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
2145:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
2146:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = dp->dir[DIR_Name];	/* Test for the entry type */
2147:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) {
2148:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
2149:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2150:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2151:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2152:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (_USE_LABEL && vol) {
2153:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (c == 0x83) break;	/* Volume label entry? */
2154:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
2155:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (c == 0x85) {		/* Start of the file entry block? */
2156:Middlewares/Third_Party/FatFs/src/ff.c **** 					dp->blk_ofs = dp->dptr;	/* Get location of the block */
2157:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = load_xdir(dp);	/* Load the entry block */
2158:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
2159:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
2160:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2161:Middlewares/Third_Party/FatFs/src/ff.c **** 					break;
2162:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2163:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2164:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else
2165:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2166:Middlewares/Third_Party/FatFs/src/ff.c **** 		{	/* On the FAT12/16/32 volume */
2167:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2168:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2169:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid 
2170:Middlewares/Third_Party/FatFs/src/ff.c **** 				ord = 0xFF;
2171:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
2172:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (a == AM_LFN) {			/* An LFN entry is found */
2173:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2174:Middlewares/Third_Party/FatFs/src/ff.c **** 						sum = dp->dir[LDIR_Chksum];
2175:Middlewares/Third_Party/FatFs/src/ff.c **** 						c &= (BYTE)~LLEF; ord = c;
2176:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->blk_ofs = dp->dptr;
2177:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2178:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Check LFN validity and capture it */
2179:Middlewares/Third_Party/FatFs/src/ff.c **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 65


2180:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {					/* An SFN entry is found */
2181:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2182:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2183:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2184:Middlewares/Third_Party/FatFs/src/ff.c **** 					break;
2185:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2186:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2187:Middlewares/Third_Party/FatFs/src/ff.c **** #else		/* Non LFN configuration */
2188:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a 
2189:Middlewares/Third_Party/FatFs/src/ff.c **** 				break;
2190:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2191:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2192:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2193:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_next(dp, 0);		/* Next entry */
2194:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
2195:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2196:Middlewares/Third_Party/FatFs/src/ff.c **** 
2197:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2198:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2199:Middlewares/Third_Party/FatFs/src/ff.c **** }
2200:Middlewares/Third_Party/FatFs/src/ff.c **** 
2201:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
2202:Middlewares/Third_Party/FatFs/src/ff.c **** 
2203:Middlewares/Third_Party/FatFs/src/ff.c **** 
2204:Middlewares/Third_Party/FatFs/src/ff.c **** 
2205:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2206:Middlewares/Third_Party/FatFs/src/ff.c **** /* Directory handling - Find an object in the directory                  */
2207:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2208:Middlewares/Third_Party/FatFs/src/ff.c **** 
2209:Middlewares/Third_Party/FatFs/src/ff.c **** static
2210:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
2211:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp			/* Pointer to the directory object with the file name */
2212:Middlewares/Third_Party/FatFs/src/ff.c **** )
2213:Middlewares/Third_Party/FatFs/src/ff.c **** {
2214:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2215:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
2216:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE c;
2217:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
2218:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE a, ord, sum;
2219:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2220:Middlewares/Third_Party/FatFs/src/ff.c **** 
2221:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_sdi(dp, 0);			/* Rewind directory object */
2222:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) return res;
2223:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2224:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2225:Middlewares/Third_Party/FatFs/src/ff.c **** 		BYTE nc;
2226:Middlewares/Third_Party/FatFs/src/ff.c **** 		UINT di, ni;
2227:Middlewares/Third_Party/FatFs/src/ff.c **** 		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
2228:Middlewares/Third_Party/FatFs/src/ff.c **** 
2229:Middlewares/Third_Party/FatFs/src/ff.c **** 		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
2230:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_LFN < 255
2231:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object n
2232:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2233:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched
2234:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compa
2235:Middlewares/Third_Party/FatFs/src/ff.c **** 				if ((di % SZDIRE) == 0) di += 2;
2236:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 66


2237:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2238:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
2239:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2240:Middlewares/Third_Party/FatFs/src/ff.c **** 		return res;
2241:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2242:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2243:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* On the FAT12/16/32 volume */
2244:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
2245:Middlewares/Third_Party/FatFs/src/ff.c **** 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2246:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2247:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
2248:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
2249:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
2250:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = dp->dir[DIR_Name];
2251:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2252:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2253:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2254:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2255:Middlewares/Third_Party/FatFs/src/ff.c **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2256:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
2257:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
2258:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2259:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
2260:Middlewares/Third_Party/FatFs/src/ff.c **** 						sum = dp->dir[LDIR_Chksum];
2261:Middlewares/Third_Party/FatFs/src/ff.c **** 						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2262:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2263:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2264:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
2265:Middlewares/Third_Party/FatFs/src/ff.c **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0x
2266:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2267:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {					/* An SFN entry is found */
2268:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2269:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2270:Middlewares/Third_Party/FatFs/src/ff.c **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2271:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2272:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2273:Middlewares/Third_Party/FatFs/src/ff.c **** #else		/* Non LFN configuration */
2274:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
2275:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry
2276:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2277:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_next(dp, 0);	/* Next entry */
2278:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (res == FR_OK);
2279:Middlewares/Third_Party/FatFs/src/ff.c **** 
2280:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2281:Middlewares/Third_Party/FatFs/src/ff.c **** }
2282:Middlewares/Third_Party/FatFs/src/ff.c **** 
2283:Middlewares/Third_Party/FatFs/src/ff.c **** 
2284:Middlewares/Third_Party/FatFs/src/ff.c **** 
2285:Middlewares/Third_Party/FatFs/src/ff.c **** 
2286:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
2287:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2288:Middlewares/Third_Party/FatFs/src/ff.c **** /* Register an object to the directory                                   */
2289:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2290:Middlewares/Third_Party/FatFs/src/ff.c **** 
2291:Middlewares/Third_Party/FatFs/src/ff.c **** static
2292:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DI
2293:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp				/* Target directory with object name to be created */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 67


2294:Middlewares/Third_Party/FatFs/src/ff.c **** )
2295:Middlewares/Third_Party/FatFs/src/ff.c **** {
2296:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2297:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
2298:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2299:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT n, nlen, nent;
2300:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE sn[12], sum;
2301:Middlewares/Third_Party/FatFs/src/ff.c **** 
2302:Middlewares/Third_Party/FatFs/src/ff.c **** 
2303:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2304:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2305:Middlewares/Third_Party/FatFs/src/ff.c **** 
2306:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2307:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2308:Middlewares/Third_Party/FatFs/src/ff.c **** 		DIR dj;
2309:Middlewares/Third_Party/FatFs/src/ff.c **** 
2310:Middlewares/Third_Party/FatFs/src/ff.c **** 		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
2311:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_alloc(dp, nent);		/* Allocate entries */
2312:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
2313:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
2314:Middlewares/Third_Party/FatFs/src/ff.c **** 
2315:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
2316:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
2317:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
2318:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
2319:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if neede
2320:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
2321:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
2322:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
2323:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
2324:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
2325:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
2326:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = store_xdir(&dj);							/* Store the object status */
2327:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
2328:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2329:Middlewares/Third_Party/FatFs/src/ff.c **** 
2330:Middlewares/Third_Party/FatFs/src/ff.c **** 		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
2331:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_OK;
2332:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2333:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2334:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* On the FAT12/16/32 volume */
2335:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_cpy(sn, dp->fn, 12);
2336:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2337:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2338:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (n = 1; n < 100; n++) {
2339:Middlewares/Third_Party/FatFs/src/ff.c **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2340:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2341:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
2342:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2343:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2344:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2345:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[NSFLAG] = sn[NSFLAG];
2346:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2347:Middlewares/Third_Party/FatFs/src/ff.c **** 
2348:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create an SFN with/without LFNs. */
2349:Middlewares/Third_Party/FatFs/src/ff.c **** 	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2350:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_alloc(dp, nent);		/* Allocate entries */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 68


2351:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2352:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2353:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
2354:Middlewares/Third_Party/FatFs/src/ff.c **** 			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
2355:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {					/* Store LFN entries in bottom first */
2356:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = move_window(fs, dp->sect);
2357:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) break;
2358:Middlewares/Third_Party/FatFs/src/ff.c **** 				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2359:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->wflag = 1;
2360:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
2361:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (res == FR_OK && --nent);
2362:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2363:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2364:Middlewares/Third_Party/FatFs/src/ff.c **** 
2365:Middlewares/Third_Party/FatFs/src/ff.c **** #else	/* Non LFN configuration */
2366:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
2367:Middlewares/Third_Party/FatFs/src/ff.c **** 
2368:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2369:Middlewares/Third_Party/FatFs/src/ff.c **** 
2370:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Set SFN entry */
2371:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
2372:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
2373:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
2374:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
2375:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2376:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
2377:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2378:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2379:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
2380:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2381:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2382:Middlewares/Third_Party/FatFs/src/ff.c **** 
2383:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2384:Middlewares/Third_Party/FatFs/src/ff.c **** }
2385:Middlewares/Third_Party/FatFs/src/ff.c **** 
2386:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
2387:Middlewares/Third_Party/FatFs/src/ff.c **** 
2388:Middlewares/Third_Party/FatFs/src/ff.c **** 
2389:Middlewares/Third_Party/FatFs/src/ff.c **** 
2390:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE == 0
2391:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2392:Middlewares/Third_Party/FatFs/src/ff.c **** /* Remove an object from the directory                                   */
2393:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2394:Middlewares/Third_Party/FatFs/src/ff.c **** 
2395:Middlewares/Third_Party/FatFs/src/ff.c **** static
2396:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
2397:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp				/* Directory object pointing the entry to be removed */
2398:Middlewares/Third_Party/FatFs/src/ff.c **** )
2399:Middlewares/Third_Party/FatFs/src/ff.c **** {
2400:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2401:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
2402:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2403:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD last = dp->dptr;
2404:Middlewares/Third_Party/FatFs/src/ff.c **** 
2405:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry blo
2406:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
2407:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 69


2408:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, dp->sect);
2409:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
2410:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Mark an entry 'deleted' */
2411:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2412:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->dir[XDIR_Type] &= 0x7F;
2413:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {									/* On the FAT12/16/32 volume */
2414:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->dir[DIR_Name] = DDEM;
2415:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2416:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
2417:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been de
2418:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_next(dp, 0);	/* Next entry */
2419:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (res == FR_OK);
2420:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
2421:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2422:Middlewares/Third_Party/FatFs/src/ff.c **** #else			/* Non LFN configuration */
2423:Middlewares/Third_Party/FatFs/src/ff.c **** 
2424:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = move_window(fs, dp->sect);
2425:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
2426:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->dir[DIR_Name] = DDEM;
2427:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->wflag = 1;
2428:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2429:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2430:Middlewares/Third_Party/FatFs/src/ff.c **** 
2431:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2432:Middlewares/Third_Party/FatFs/src/ff.c **** }
2433:Middlewares/Third_Party/FatFs/src/ff.c **** 
2434:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY && _FS_MINIMIZE == 0 */
2435:Middlewares/Third_Party/FatFs/src/ff.c **** 
2436:Middlewares/Third_Party/FatFs/src/ff.c **** 
2437:Middlewares/Third_Party/FatFs/src/ff.c **** 
2438:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
2439:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2440:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get file information from directory entry                             */
2441:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2442:Middlewares/Third_Party/FatFs/src/ff.c **** 
2443:Middlewares/Third_Party/FatFs/src/ff.c **** static
2444:Middlewares/Third_Party/FatFs/src/ff.c **** void get_fileinfo (		/* No return code */
2445:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
2446:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno	 	/* Pointer to the file information to be filled */
2447:Middlewares/Third_Party/FatFs/src/ff.c **** )
2448:Middlewares/Third_Party/FatFs/src/ff.c **** {
2449:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, j;
2450:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c;
2451:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD tm;
2452:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
2453:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR w, lfv;
2454:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
2455:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2456:Middlewares/Third_Party/FatFs/src/ff.c **** 
2457:Middlewares/Third_Party/FatFs/src/ff.c **** 
2458:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fname[0] = 0;		/* Invaidate file info */
2459:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
2460:Middlewares/Third_Party/FatFs/src/ff.c **** 
2461:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2462:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2463:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2464:Middlewares/Third_Party/FatFs/src/ff.c **** 		get_xdir_info(fs->dirbuf, fno);
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 70


2465:Middlewares/Third_Party/FatFs/src/ff.c **** 		return;
2466:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
2467:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2468:Middlewares/Third_Party/FatFs/src/ff.c **** 	{	/* On the FAT12/16/32 volume */
2469:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2470:Middlewares/Third_Party/FatFs/src/ff.c **** 			i = j = 0;
2471:Middlewares/Third_Party/FatFs/src/ff.c **** 			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2472:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
2473:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = ff_convert(w, 0);		/* Unicode -> OEM */
2474:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
2475:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
2476:Middlewares/Third_Party/FatFs/src/ff.c **** 					fno->fname[i++] = (char)(w >> 8);
2477:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2478:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2479:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2480:Middlewares/Third_Party/FatFs/src/ff.c **** 				fno->fname[i++] = (TCHAR)w;
2481:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2482:Middlewares/Third_Party/FatFs/src/ff.c **** 			fno->fname[i] = 0;	/* Terminate the LFN */
2483:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2484:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2485:Middlewares/Third_Party/FatFs/src/ff.c **** 
2486:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = j = 0;
2487:Middlewares/Third_Party/FatFs/src/ff.c **** 	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2488:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (i < 11) {		/* Copy name body and extension */
2489:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = (TCHAR)dp->dir[i++];
2490:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == ' ') continue;				/* Skip padding spaces */
2491:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2492:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == 9) {						/* Insert a . if extension is exist */
2493:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!lfv) fno->fname[j] = '.';
2494:Middlewares/Third_Party/FatFs/src/ff.c **** 			fno->altname[j++] = '.';
2495:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2496:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
2497:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dp->dir[i])) {
2498:Middlewares/Third_Party/FatFs/src/ff.c **** 			c = c << 8 | dp->dir[i++];
2499:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2500:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = ff_convert(c, 1);	/* OEM -> Unicode */
2501:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!c) c = '?';
2502:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2503:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->altname[j] = c;
2504:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!lfv) {
2505:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2506:Middlewares/Third_Party/FatFs/src/ff.c **** 				c += 0x20;			/* To lower */
2507:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2508:Middlewares/Third_Party/FatFs/src/ff.c **** 			fno->fname[j] = c;
2509:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2510:Middlewares/Third_Party/FatFs/src/ff.c **** 		j++;
2511:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2512:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!lfv) {
2513:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->fname[j] = 0;
2514:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is ex
2515:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2516:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->altname[j] = 0;	/* Terminate the SFN */
2517:Middlewares/Third_Party/FatFs/src/ff.c **** 
2518:Middlewares/Third_Party/FatFs/src/ff.c **** #else	/* Non-LFN configuration */
2519:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = j = 0;
2520:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (i < 11) {		/* Copy name body and extension */
2521:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = (TCHAR)dp->dir[i++];
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 71


2522:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == ' ') continue;				/* Skip padding spaces */
2523:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2524:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
2525:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->fname[j++] = c;
2526:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2527:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fname[j] = 0;
2528:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2529:Middlewares/Third_Party/FatFs/src/ff.c **** 
2530:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
2531:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
2532:Middlewares/Third_Party/FatFs/src/ff.c **** 	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
2533:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
2534:Middlewares/Third_Party/FatFs/src/ff.c **** }
2535:Middlewares/Third_Party/FatFs/src/ff.c **** 
2536:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
2537:Middlewares/Third_Party/FatFs/src/ff.c **** 
2538:Middlewares/Third_Party/FatFs/src/ff.c **** 
2539:Middlewares/Third_Party/FatFs/src/ff.c **** 
2540:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FIND && _FS_MINIMIZE <= 1
2541:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2542:Middlewares/Third_Party/FatFs/src/ff.c **** /* Pattern matching                                                      */
2543:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2544:Middlewares/Third_Party/FatFs/src/ff.c **** 
2545:Middlewares/Third_Party/FatFs/src/ff.c **** static
2546:Middlewares/Third_Party/FatFs/src/ff.c **** WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
2547:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
2548:Middlewares/Third_Party/FatFs/src/ff.c **** )
2549:Middlewares/Third_Party/FatFs/src/ff.c **** {
2550:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
2551:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR chr;
2552:Middlewares/Third_Party/FatFs/src/ff.c **** 
2553:Middlewares/Third_Party/FatFs/src/ff.c **** 	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2554:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2555:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
2556:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2557:Middlewares/Third_Party/FatFs/src/ff.c **** #else
2558:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
2559:Middlewares/Third_Party/FatFs/src/ff.c **** 		chr = chr << 8 | (BYTE)*(*ptr)++;
2560:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2561:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2562:Middlewares/Third_Party/FatFs/src/ff.c **** 	return chr;
2563:Middlewares/Third_Party/FatFs/src/ff.c **** #else
2564:Middlewares/Third_Party/FatFs/src/ff.c **** 	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
2565:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2566:Middlewares/Third_Party/FatFs/src/ff.c **** }
2567:Middlewares/Third_Party/FatFs/src/ff.c **** 
2568:Middlewares/Third_Party/FatFs/src/ff.c **** 
2569:Middlewares/Third_Party/FatFs/src/ff.c **** static
2570:Middlewares/Third_Party/FatFs/src/ff.c **** int pattern_matching (	/* 0:not matched, 1:matched */
2571:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* pat,	/* Matching pattern */
2572:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* nam,	/* String to be tested */
2573:Middlewares/Third_Party/FatFs/src/ff.c **** 	int skip,			/* Number of pre-skip chars (number of ?s) */
2574:Middlewares/Third_Party/FatFs/src/ff.c **** 	int inf				/* Infinite search (* specified) */
2575:Middlewares/Third_Party/FatFs/src/ff.c **** )
2576:Middlewares/Third_Party/FatFs/src/ff.c **** {
2577:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR *pp, *np;
2578:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR pc, nc;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 72


2579:Middlewares/Third_Party/FatFs/src/ff.c **** 	int nm, nx;
2580:Middlewares/Third_Party/FatFs/src/ff.c **** 
2581:Middlewares/Third_Party/FatFs/src/ff.c **** 
2582:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (skip--) {				/* Pre-skip name chars */
2583:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2584:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2585:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!*pat && inf) return 1;		/* (short circuit) */
2586:Middlewares/Third_Party/FatFs/src/ff.c **** 
2587:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
2588:Middlewares/Third_Party/FatFs/src/ff.c **** 		pp = pat; np = nam;			/* Top of pattern and name to match */
2589:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {
2590:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2591:Middlewares/Third_Party/FatFs/src/ff.c **** 				nm = nx = 0;
2592:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {				/* Analyze the wildcard chars */
2593:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (*pp++ == '?') nm++; else nx = 1;
2594:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (*pp == '?' || *pp == '*');
2595:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildc
2596:Middlewares/Third_Party/FatFs/src/ff.c **** 				nc = *np; break;	/* Branch mismatched */
2597:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2598:Middlewares/Third_Party/FatFs/src/ff.c **** 			pc = get_achar(&pp);	/* Get a pattern char */
2599:Middlewares/Third_Party/FatFs/src/ff.c **** 			nc = get_achar(&np);	/* Get a name char */
2600:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (pc != nc) break;	/* Branch mismatched? */
2601:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2602:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2603:Middlewares/Third_Party/FatFs/src/ff.c **** 		get_achar(&nam);			/* nam++ */
2604:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2605:Middlewares/Third_Party/FatFs/src/ff.c **** 
2606:Middlewares/Third_Party/FatFs/src/ff.c **** 	return 0;
2607:Middlewares/Third_Party/FatFs/src/ff.c **** }
2608:Middlewares/Third_Party/FatFs/src/ff.c **** 
2609:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_FIND && _FS_MINIMIZE <= 1 */
2610:Middlewares/Third_Party/FatFs/src/ff.c **** 
2611:Middlewares/Third_Party/FatFs/src/ff.c **** 
2612:Middlewares/Third_Party/FatFs/src/ff.c **** 
2613:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2614:Middlewares/Third_Party/FatFs/src/ff.c **** /* Pick a top segment and create the object name in directory form       */
2615:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2616:Middlewares/Third_Party/FatFs/src/ff.c **** 
2617:Middlewares/Third_Party/FatFs/src/ff.c **** static
2618:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
2619:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
2620:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
2621:Middlewares/Third_Party/FatFs/src/ff.c **** )
2622:Middlewares/Third_Party/FatFs/src/ff.c **** {
2623:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2624:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE b, cf;
2625:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR w, *lfn;
2626:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, ni, si, di;
2627:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR *p;
2628:Middlewares/Third_Party/FatFs/src/ff.c **** 
2629:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create LFN in Unicode */
2630:Middlewares/Third_Party/FatFs/src/ff.c **** 	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2631:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
2632:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = p[si++];					/* Get a character */
2633:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w < ' ') break;				/* Break if end of the path name */
2634:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2635:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 73


2636:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
2637:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2638:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2639:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
2640:Middlewares/Third_Party/FatFs/src/ff.c **** 		w &= 0xFF;
2641:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
2642:Middlewares/Third_Party/FatFs/src/ff.c **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
2643:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
2644:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
2645:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2646:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2647:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2648:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2649:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters
2650:Middlewares/Third_Party/FatFs/src/ff.c **** 		lfn[di++] = w;					/* Store the Unicode character */
2651:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2652:Middlewares/Third_Party/FatFs/src/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
2653:Middlewares/Third_Party/FatFs/src/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2654:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
2655:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((di == 1 && lfn[di - 1] == '.') ||
2656:Middlewares/Third_Party/FatFs/src/ff.c **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
2657:Middlewares/Third_Party/FatFs/src/ff.c **** 		lfn[di] = 0;
2658:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
2659:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->fn[i] = (i < di) ? '.' : ' ';
2660:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
2661:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_OK;
2662:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2663:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2664:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (di) {						/* Snip off trailing spaces and dots if exist */
2665:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = lfn[di - 1];
2666:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w != ' ' && w != '.') break;
2667:Middlewares/Third_Party/FatFs/src/ff.c **** 		di--;
2668:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2669:Middlewares/Third_Party/FatFs/src/ff.c **** 	lfn[di] = 0;						/* LFN is created */
2670:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2671:Middlewares/Third_Party/FatFs/src/ff.c **** 
2672:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create SFN in directory form */
2673:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_set(dp->fn, ' ', 11);
2674:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2675:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
2676:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2677:Middlewares/Third_Party/FatFs/src/ff.c **** 
2678:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = b = 0; ni = 8;
2679:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
2680:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = lfn[si++];					/* Get an LFN character */
2681:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
2682:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2683:Middlewares/Third_Party/FatFs/src/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
2684:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2685:Middlewares/Third_Party/FatFs/src/ff.c **** 
2686:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
2687:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ni == 11) {				/* Long extension */
2688:Middlewares/Third_Party/FatFs/src/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
2689:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2690:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
2691:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (si > di) break;			/* No extension */
2692:Middlewares/Third_Party/FatFs/src/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 74


2693:Middlewares/Third_Party/FatFs/src/ff.c **** 			b <<= 2; continue;
2694:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2695:Middlewares/Third_Party/FatFs/src/ff.c **** 
2696:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w >= 0x80) {				/* Non ASCII character */
2697:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
2698:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
2699:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2700:Middlewares/Third_Party/FatFs/src/ff.c **** #else
2701:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
2702:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2703:Middlewares/Third_Party/FatFs/src/ff.c **** 			cf |= NS_LFN;				/* Force create LFN entry */
2704:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2705:Middlewares/Third_Party/FatFs/src/ff.c **** 
2706:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
2707:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i >= ni - 1) {
2708:Middlewares/Third_Party/FatFs/src/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
2709:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2710:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->fn[i++] = (BYTE)(w >> 8);
2711:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {						/* SBC */
2712:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2713:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2714:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
2715:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (IsUpper(w)) {		/* ASCII large capital */
2716:Middlewares/Third_Party/FatFs/src/ff.c **** 					b |= 2;
2717:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
2718:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (IsLower(w)) {	/* ASCII small capital */
2719:Middlewares/Third_Party/FatFs/src/ff.c **** 						b |= 1; w -= 0x20;
2720:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2721:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2722:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2723:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2724:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[i++] = (BYTE)w;
2725:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2726:Middlewares/Third_Party/FatFs/src/ff.c **** 
2727:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it
2728:Middlewares/Third_Party/FatFs/src/ff.c **** 
2729:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ni == 8) b <<= 2;
2730:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are com
2731:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
2732:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2733:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2734:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2735:Middlewares/Third_Party/FatFs/src/ff.c **** 
2736:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->fn[NSFLAG] = cf;	/* SFN is created */
2737:Middlewares/Third_Party/FatFs/src/ff.c **** 
2738:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
2739:Middlewares/Third_Party/FatFs/src/ff.c **** 
2740:Middlewares/Third_Party/FatFs/src/ff.c **** 
2741:Middlewares/Third_Party/FatFs/src/ff.c **** #else	/* _USE_LFN != 0 : Non-LFN configuration */
2742:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE c, d, *sfn;
2743:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT ni, si, i;
2744:Middlewares/Third_Party/FatFs/src/ff.c **** 	const char *p;
2745:Middlewares/Third_Party/FatFs/src/ff.c **** 
2746:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create file name in directory form */
2747:Middlewares/Third_Party/FatFs/src/ff.c **** 	p = *path; sfn = dp->fn;
2748:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_set(sfn, ' ', 11);
2749:Middlewares/Third_Party/FatFs/src/ff.c **** 	si = i = 0; ni = 8;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 75


2750:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
2751:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
2752:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {
2753:Middlewares/Third_Party/FatFs/src/ff.c **** 			c = (BYTE)p[si++];
2754:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c != '.' || si >= 3) break;
2755:Middlewares/Third_Party/FatFs/src/ff.c **** 			sfn[i++] = c;
2756:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2757:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
2758:Middlewares/Third_Party/FatFs/src/ff.c **** 		*path = p + si;								/* Return pointer to the next segment */
2759:Middlewares/Third_Party/FatFs/src/ff.c **** 		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path
2760:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_OK;
2761:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2762:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2763:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
2764:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = (BYTE)p[si++];
2765:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c <= ' ') break; 			/* Break if end of the path name */
2766:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '/' || c == '\\') {	/* Break if a separator is found */
2767:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2768:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
2769:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2770:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '.' || i >= ni) {		/* End of body or over size? */
2771:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
2772:Middlewares/Third_Party/FatFs/src/ff.c **** 			i = 8; ni = 11;				/* Goto extension */
2773:Middlewares/Third_Party/FatFs/src/ff.c **** 			continue;
2774:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2775:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c >= 0x80) {				/* Extended character? */
2776:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
2777:Middlewares/Third_Party/FatFs/src/ff.c **** 			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
2778:Middlewares/Third_Party/FatFs/src/ff.c **** #else
2779:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_DF1S
2780:Middlewares/Third_Party/FatFs/src/ff.c **** 			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
2781:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2782:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2783:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2784:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
2785:Middlewares/Third_Party/FatFs/src/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
2786:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
2787:Middlewares/Third_Party/FatFs/src/ff.c **** 			sfn[i++] = c;
2788:Middlewares/Third_Party/FatFs/src/ff.c **** 			sfn[i++] = d;
2789:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {						/* SBC */
2790:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
2791:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
2792:Middlewares/Third_Party/FatFs/src/ff.c **** 			sfn[i++] = c;
2793:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2794:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2795:Middlewares/Third_Party/FatFs/src/ff.c **** 	*path = p + si;						/* Return pointer to the next segment */
2796:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
2797:Middlewares/Third_Party/FatFs/src/ff.c **** 
2798:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with 
2799:Middlewares/Third_Party/FatFs/src/ff.c **** 	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2800:Middlewares/Third_Party/FatFs/src/ff.c **** 
2801:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
2802:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_LFN != 0 */
2803:Middlewares/Third_Party/FatFs/src/ff.c **** }
2804:Middlewares/Third_Party/FatFs/src/ff.c **** 
2805:Middlewares/Third_Party/FatFs/src/ff.c **** 
2806:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 76


2807:Middlewares/Third_Party/FatFs/src/ff.c **** 
2808:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2809:Middlewares/Third_Party/FatFs/src/ff.c **** /* Follow a file path                                                    */
2810:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2811:Middlewares/Third_Party/FatFs/src/ff.c **** 
2812:Middlewares/Third_Party/FatFs/src/ff.c **** static
2813:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
2814:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Directory object to return last directory and found object */
2815:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path	/* Full-path string to find a file or directory */
2816:Middlewares/Third_Party/FatFs/src/ff.c **** )
2817:Middlewares/Third_Party/FatFs/src/ff.c **** {
2818:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2819:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE ns;
2820:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID *obj = &dp->obj;
2821:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = obj->fs;
2822:Middlewares/Third_Party/FatFs/src/ff.c **** 
2823:Middlewares/Third_Party/FatFs/src/ff.c **** 
2824:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
2825:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (*path != '/' && *path != '\\') {	/* Without heading separator */
2826:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->sclust = fs->cdir;				/* Start from current directory */
2827:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
2828:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2829:Middlewares/Third_Party/FatFs/src/ff.c **** 	{										/* With heading separator */
2830:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2831:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->sclust = 0;					/* Start from root directory */
2832:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2833:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2834:Middlewares/Third_Party/FatFs/src/ff.c **** 	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
2835:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
2836:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
2837:Middlewares/Third_Party/FatFs/src/ff.c **** 		DIR dj;
2838:Middlewares/Third_Party/FatFs/src/ff.c **** 
2839:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->c_scl = fs->cdc_scl;
2840:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->c_size = fs->cdc_size;
2841:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->c_ofs = fs->cdc_ofs;
2842:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = load_obj_dir(&dj, obj);
2843:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
2844:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
2845:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
2846:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2847:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2848:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2849:Middlewares/Third_Party/FatFs/src/ff.c **** 
2850:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2851:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[NSFLAG] = NS_NONAME;
2852:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_sdi(dp, 0);
2853:Middlewares/Third_Party/FatFs/src/ff.c **** 
2854:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {								/* Follow path */
2855:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {
2856:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
2857:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
2858:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_find(dp);				/* Find an object with the segment name */
2859:Middlewares/Third_Party/FatFs/src/ff.c **** 			ns = dp->fn[NSFLAG];
2860:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
2861:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
2862:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
2863:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 77


2864:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->fn[NSFLAG] = NS_NONAME;
2865:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_OK;
2866:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {							/* Could not find the object */
2867:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2868:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2869:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2870:Middlewares/Third_Party/FatFs/src/ff.c **** 				break;
2871:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2872:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2873:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Get into the sub-directory */
2874:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
2875:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_NO_PATH; break;
2876:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2877:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2878:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
2879:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->c_scl = obj->sclust;
2880:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
2881:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->c_ofs = dp->blk_ofs;
2882:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
2883:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
2884:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
2885:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
2886:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2887:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
2888:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2889:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2890:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2891:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2892:Middlewares/Third_Party/FatFs/src/ff.c **** 
2893:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2894:Middlewares/Third_Party/FatFs/src/ff.c **** }
2895:Middlewares/Third_Party/FatFs/src/ff.c **** 
2896:Middlewares/Third_Party/FatFs/src/ff.c **** 
2897:Middlewares/Third_Party/FatFs/src/ff.c **** 
2898:Middlewares/Third_Party/FatFs/src/ff.c **** 
2899:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2900:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get logical drive number from path name                               */
2901:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2902:Middlewares/Third_Party/FatFs/src/ff.c **** 
2903:Middlewares/Third_Party/FatFs/src/ff.c **** static
2904:Middlewares/Third_Party/FatFs/src/ff.c **** int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
2905:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the path name */
2906:Middlewares/Third_Party/FatFs/src/ff.c **** )
2907:Middlewares/Third_Party/FatFs/src/ff.c **** {
 1448              		.loc 1 2907 0
 1449              		.cfi_startproc
 1450              		@ args = 0, pretend = 0, frame = 0
 1451              		@ frame_needed = 0, uses_anonymous_args = 0
 1452              		@ link register save eliminated.
 1453              	.LVL194:
2908:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR *tp, *tt;
2909:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
2910:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol = -1;
2911:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STR_VOLUME_ID		/* Find string drive id */
2912:Middlewares/Third_Party/FatFs/src/ff.c **** 	static const char* const volid[] = {_VOLUME_STRS};
2913:Middlewares/Third_Party/FatFs/src/ff.c **** 	const char *sp;
2914:Middlewares/Third_Party/FatFs/src/ff.c **** 	char c;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 78


2915:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR tc;
2916:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2917:Middlewares/Third_Party/FatFs/src/ff.c **** 
2918:Middlewares/Third_Party/FatFs/src/ff.c **** 
2919:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (*path) {	/* If the pointer is not a null */
 1454              		.loc 1 2919 0
 1455 0000 0168     		ldr	r1, [r0]
 1456 0002 09B1     		cbz	r1, .L158
2920:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the pa
 1457              		.loc 1 2920 0
 1458 0004 0A46     		mov	r2, r1
 1459 0006 03E0     		b	.L147
 1460              	.L158:
2910:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STR_VOLUME_ID		/* Find string drive id */
 1461              		.loc 1 2910 0
 1462 0008 4FF0FF33 		mov	r3, #-1
 1463 000c 09E0     		b	.L155
 1464              	.LVL195:
 1465              	.L149:
 1466              		.loc 1 2920 0 discriminator 3
 1467 000e 0132     		adds	r2, r2, #1
 1468              	.LVL196:
 1469              	.L147:
 1470              		.loc 1 2920 0 is_stmt 0 discriminator 1
 1471 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1472 0012 3A2B     		cmp	r3, #58
 1473 0014 18BF     		it	ne
 1474 0016 1F2B     		cmpne	r3, #31
 1475 0018 F9D8     		bhi	.L149
2921:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (*tt == ':') {	/* If a ':' is exist in the path name */
 1476              		.loc 1 2921 0 is_stmt 1
 1477 001a 3A2B     		cmp	r3, #58
 1478 001c 03D0     		beq	.L159
2922:Middlewares/Third_Party/FatFs/src/ff.c **** 			tp = *path;
2923:Middlewares/Third_Party/FatFs/src/ff.c **** 			i = *tp++ - '0';
2924:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
2925:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2926:Middlewares/Third_Party/FatFs/src/ff.c **** 					vol = (int)i;
2927:Middlewares/Third_Party/FatFs/src/ff.c **** 					*path = ++tt;
2928:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2929:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2930:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STR_VOLUME_ID
2931:Middlewares/Third_Party/FatFs/src/ff.c **** 			 else {	/* No numeric drive number, find string drive id */
2932:Middlewares/Third_Party/FatFs/src/ff.c **** 				i = 0; tt++;
2933:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {
2934:Middlewares/Third_Party/FatFs/src/ff.c **** 					sp = volid[i]; tp = *path;
2935:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {	/* Compare a string drive id with path name */
2936:Middlewares/Third_Party/FatFs/src/ff.c **** 						c = *sp++; tc = *tp++;
2937:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (IsLower(tc)) tc -= 0x20;
2938:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (c && (TCHAR)c == tc);
2939:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
2940:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2941:Middlewares/Third_Party/FatFs/src/ff.c **** 					vol = (int)i;
2942:Middlewares/Third_Party/FatFs/src/ff.c **** 					*path = tt;
2943:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2944:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2945:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 79


2946:Middlewares/Third_Party/FatFs/src/ff.c **** 			return vol;
2947:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2948:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0 && _VOLUMES >= 2
2949:Middlewares/Third_Party/FatFs/src/ff.c **** 		vol = CurrVol;	/* Current drive */
 1479              		.loc 1 2949 0
 1480 001e 0D4B     		ldr	r3, .L160
 1481 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1482              	.LVL197:
 1483              	.L155:
2950:Middlewares/Third_Party/FatFs/src/ff.c **** #else
2951:Middlewares/Third_Party/FatFs/src/ff.c **** 		vol = 0;		/* Drive 0 */
2952:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2953:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2954:Middlewares/Third_Party/FatFs/src/ff.c **** 	return vol;
2955:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1484              		.loc 1 2955 0
 1485 0022 1846     		mov	r0, r3
 1486              	.LVL198:
 1487 0024 7047     		bx	lr
 1488              	.LVL199:
 1489              	.L159:
2907:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR *tp, *tt;
 1490              		.loc 1 2907 0
 1491 0026 10B4     		push	{r4}
 1492              	.LCFI19:
 1493              		.cfi_def_cfa_offset 4
 1494              		.cfi_offset 4, -4
 1495              	.LVL200:
2923:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 1496              		.loc 1 2923 0
 1497 0028 4C1C     		adds	r4, r1, #1
 1498              	.LVL201:
 1499 002a 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 1500 002c 303B     		subs	r3, r3, #48
 1501              	.LVL202:
2924:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 1502              		.loc 1 2924 0
 1503 002e 092B     		cmp	r3, #9
 1504 0030 98BF     		it	ls
 1505 0032 A242     		cmpls	r2, r4
 1506 0034 07D1     		bne	.L152
2925:Middlewares/Third_Party/FatFs/src/ff.c **** 					vol = (int)i;
 1507              		.loc 1 2925 0
 1508 0036 012B     		cmp	r3, #1
 1509 0038 08D8     		bhi	.L153
 1510              	.LVL203:
2927:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 1511              		.loc 1 2927 0
 1512 003a 0132     		adds	r2, r2, #1
 1513              	.LVL204:
 1514 003c 0260     		str	r2, [r0]
 1515              	.LVL205:
 1516              	.L146:
 1517              		.loc 1 2955 0
 1518 003e 1846     		mov	r0, r3
 1519              	.LVL206:
 1520 0040 5DF8044B 		ldr	r4, [sp], #4
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 80


 1521              	.LCFI20:
 1522              		.cfi_remember_state
 1523              		.cfi_restore 4
 1524              		.cfi_def_cfa_offset 0
 1525              	.LVL207:
 1526 0044 7047     		bx	lr
 1527              	.LVL208:
 1528              	.L152:
 1529              	.LCFI21:
 1530              		.cfi_restore_state
2910:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STR_VOLUME_ID		/* Find string drive id */
 1531              		.loc 1 2910 0
 1532 0046 4FF0FF33 		mov	r3, #-1
 1533              	.LVL209:
 1534 004a F8E7     		b	.L146
 1535              	.LVL210:
 1536              	.L153:
 1537 004c 4FF0FF33 		mov	r3, #-1
 1538              	.LVL211:
 1539 0050 F5E7     		b	.L146
 1540              	.L161:
 1541 0052 00BF     		.align	2
 1542              	.L160:
 1543 0054 00000000 		.word	.LANCHOR2
 1544              		.cfi_endproc
 1545              	.LFE184:
 1547              		.section	.text.putc_init,"ax",%progbits
 1548              		.align	1
 1549              		.syntax unified
 1550              		.thumb
 1551              		.thumb_func
 1552              		.fpu fpv5-sp-d16
 1554              	putc_init:
 1555              	.LFB210:
2956:Middlewares/Third_Party/FatFs/src/ff.c **** 
2957:Middlewares/Third_Party/FatFs/src/ff.c **** 
2958:Middlewares/Third_Party/FatFs/src/ff.c **** 
2959:Middlewares/Third_Party/FatFs/src/ff.c **** 
2960:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2961:Middlewares/Third_Party/FatFs/src/ff.c **** /* Load a sector and check if it is an FAT boot sector                   */
2962:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2963:Middlewares/Third_Party/FatFs/src/ff.c **** 
2964:Middlewares/Third_Party/FatFs/src/ff.c **** static
2965:Middlewares/Third_Party/FatFs/src/ff.c **** BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
2966:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,	/* File system object */
2967:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
2968:Middlewares/Third_Party/FatFs/src/ff.c **** )
2969:Middlewares/Third_Party/FatFs/src/ff.c **** {
2970:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2971:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2972:Middlewares/Third_Party/FatFs/src/ff.c **** 
2973:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed 
2974:Middlewares/Third_Party/FatFs/src/ff.c **** 
2975:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90
2976:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string *
2977:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2978:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 81


2979:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2980:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
2981:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2982:Middlewares/Third_Party/FatFs/src/ff.c **** 	return 2;
2983:Middlewares/Third_Party/FatFs/src/ff.c **** }
2984:Middlewares/Third_Party/FatFs/src/ff.c **** 
2985:Middlewares/Third_Party/FatFs/src/ff.c **** 
2986:Middlewares/Third_Party/FatFs/src/ff.c **** 
2987:Middlewares/Third_Party/FatFs/src/ff.c **** 
2988:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2989:Middlewares/Third_Party/FatFs/src/ff.c **** /* Find logical drive and check if the volume is mounted                 */
2990:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2991:Middlewares/Third_Party/FatFs/src/ff.c **** 
2992:Middlewares/Third_Party/FatFs/src/ff.c **** static
2993:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
2994:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
2995:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS** rfs,		/* Pointer to pointer to the found file system object */
2996:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE mode			/* !=0: Check write protection for write access */
2997:Middlewares/Third_Party/FatFs/src/ff.c **** )
2998:Middlewares/Third_Party/FatFs/src/ff.c **** {
2999:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE fmt, *pt;
3000:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol;
3001:Middlewares/Third_Party/FatFs/src/ff.c **** 	DSTATUS stat;
3002:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
3003:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD nrsv;
3004:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3005:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
3006:Middlewares/Third_Party/FatFs/src/ff.c **** 
3007:Middlewares/Third_Party/FatFs/src/ff.c **** 
3008:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive number */
3009:Middlewares/Third_Party/FatFs/src/ff.c **** 	*rfs = 0;
3010:Middlewares/Third_Party/FatFs/src/ff.c **** 	vol = get_ldnumber(path);
3011:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
3012:Middlewares/Third_Party/FatFs/src/ff.c **** 
3013:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Check if the file system object is valid or not */
3014:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs = FatFs[vol];					/* Get pointer to the file system object */
3015:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
3016:Middlewares/Third_Party/FatFs/src/ff.c **** 
3017:Middlewares/Third_Party/FatFs/src/ff.c **** 	ENTER_FF(fs);						/* Lock the volume */
3018:Middlewares/Third_Party/FatFs/src/ff.c **** 	*rfs = fs;							/* Return pointer to the file system object */
3019:Middlewares/Third_Party/FatFs/src/ff.c **** 
3020:Middlewares/Third_Party/FatFs/src/ff.c **** 	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
3021:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type) {					/* If the volume has been mounted */
3022:Middlewares/Third_Party/FatFs/src/ff.c **** 		stat = disk_status(fs->drv);
3023:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
3024:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
3025:Middlewares/Third_Party/FatFs/src/ff.c **** 				return FR_WRITE_PROTECTED;
3026:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3027:Middlewares/Third_Party/FatFs/src/ff.c **** 			return FR_OK;				/* The file system object is valid */
3028:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3029:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3030:Middlewares/Third_Party/FatFs/src/ff.c **** 
3031:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* The file system object is not valid. */
3032:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
3033:Middlewares/Third_Party/FatFs/src/ff.c **** 
3034:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
3035:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 82


3036:Middlewares/Third_Party/FatFs/src/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
3037:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
3038:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
3039:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3040:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
3041:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_WRITE_PROTECTED;
3042:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3043:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
3044:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
3045:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
3046:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3047:Middlewares/Third_Party/FatFs/src/ff.c **** 
3048:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
3049:Middlewares/Third_Party/FatFs/src/ff.c **** 	bsect = 0;
3050:Middlewares/Third_Party/FatFs/src/ff.c **** 	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
3051:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
3052:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < 4; i++) {		/* Get partition offset */
3053:Middlewares/Third_Party/FatFs/src/ff.c **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
3054:Middlewares/Third_Party/FatFs/src/ff.c **** 			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
3055:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3056:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
3057:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i) i--;
3058:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {							/* Find an FAT volume */
3059:Middlewares/Third_Party/FatFs/src/ff.c **** 			bsect = br[i];
3060:Middlewares/Third_Party/FatFs/src/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
3061:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
3062:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3063:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
3064:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
3065:Middlewares/Third_Party/FatFs/src/ff.c **** 
3066:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* An FAT volume is found (bsect). Following code initializes the file system object */
3067:Middlewares/Third_Party/FatFs/src/ff.c **** 
3068:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3069:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt == 1) {
3070:Middlewares/Third_Party/FatFs/src/ff.c **** 		QWORD maxlba;
3071:Middlewares/Third_Party/FatFs/src/ff.c **** 
3072:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
3073:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
3074:Middlewares/Third_Party/FatFs/src/ff.c **** 
3075:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Mu
3076:Middlewares/Third_Party/FatFs/src/ff.c **** 
3077:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physica
3078:Middlewares/Third_Party/FatFs/src/ff.c **** 			return FR_NO_FILESYSTEM;
3079:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3080:Middlewares/Third_Party/FatFs/src/ff.c **** 
3081:Middlewares/Third_Party/FatFs/src/ff.c **** 		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
3082:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
3083:Middlewares/Third_Party/FatFs/src/ff.c **** 
3084:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
3085:Middlewares/Third_Party/FatFs/src/ff.c **** 
3086:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
3087:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
3088:Middlewares/Third_Party/FatFs/src/ff.c **** 
3089:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
3090:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
3091:Middlewares/Third_Party/FatFs/src/ff.c **** 
3092:Middlewares/Third_Party/FatFs/src/ff.c **** 		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 83


3093:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
3094:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->n_fatent = nclst + 2;
3095:Middlewares/Third_Party/FatFs/src/ff.c **** 
3096:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Boundaries and Limits */
3097:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->volbase = bsect;
3098:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
3099:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
3100:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size mu
3101:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
3102:Middlewares/Third_Party/FatFs/src/ff.c **** 
3103:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Check if bitmap location is in assumption (at the first cluster) */
3104:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
3105:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < SS(fs); i += SZDIRE) {
3106:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? *
3107:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3108:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == SS(fs)) return FR_NO_FILESYSTEM;
3109:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3110:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3111:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3112:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_EXFAT;			/* FAT sub-type */
3113:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
3114:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_EXFAT */
3115:Middlewares/Third_Party/FatFs/src/ff.c **** 	{
3116:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must
3117:Middlewares/Third_Party/FatFs/src/ff.c **** 
3118:Middlewares/Third_Party/FatFs/src/ff.c **** 		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
3119:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
3120:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsize = fasize;
3121:Middlewares/Third_Party/FatFs/src/ff.c **** 
3122:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
3123:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
3124:Middlewares/Third_Party/FatFs/src/ff.c **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
3125:Middlewares/Third_Party/FatFs/src/ff.c **** 
3126:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
3127:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
3128:Middlewares/Third_Party/FatFs/src/ff.c **** 
3129:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
3130:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
3131:Middlewares/Third_Party/FatFs/src/ff.c **** 
3132:Middlewares/Third_Party/FatFs/src/ff.c **** 		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
3133:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
3134:Middlewares/Third_Party/FatFs/src/ff.c **** 
3135:Middlewares/Third_Party/FatFs/src/ff.c **** 		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
3136:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
3137:Middlewares/Third_Party/FatFs/src/ff.c **** 
3138:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Determine the FAT sub type */
3139:Middlewares/Third_Party/FatFs/src/ff.c **** 		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
3140:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
3141:Middlewares/Third_Party/FatFs/src/ff.c **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
3142:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
3143:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT32;
3144:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
3145:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
3146:Middlewares/Third_Party/FatFs/src/ff.c **** 
3147:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Boundaries and Limits */
3148:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
3149:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->volbase = bsect;							/* Volume start sector */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 84


3150:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
3151:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->database = bsect + sysect;					/* Data start sector */
3152:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
3153:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
3154:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
3155:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
3156:Middlewares/Third_Party/FatFs/src/ff.c **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
3157:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
3158:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
3159:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
3160:Middlewares/Third_Party/FatFs/src/ff.c **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
3161:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
3162:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3163:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not
3164:Middlewares/Third_Party/FatFs/src/ff.c **** 
3165:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3166:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Get FSINFO if available */
3167:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3168:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsi_flag = 0x80;
3169:Middlewares/Third_Party/FatFs/src/ff.c **** #if (_FS_NOFSINFO & 3) != 3
3170:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
3171:Middlewares/Third_Party/FatFs/src/ff.c **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
3172:Middlewares/Third_Party/FatFs/src/ff.c **** 			&& move_window(fs, bsect + 1) == FR_OK)
3173:Middlewares/Third_Party/FatFs/src/ff.c **** 		{
3174:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag = 0;
3175:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
3176:Middlewares/Third_Party/FatFs/src/ff.c **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
3177:Middlewares/Third_Party/FatFs/src/ff.c **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
3178:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
3179:Middlewares/Third_Party/FatFs/src/ff.c **** #if (_FS_NOFSINFO & 1) == 0
3180:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
3181:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3182:Middlewares/Third_Party/FatFs/src/ff.c **** #if (_FS_NOFSINFO & 2) == 0
3183:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
3184:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3185:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3186:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3187:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* (_FS_NOFSINFO & 3) != 3 */
3188:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* !_FS_READONLY */
3189:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3190:Middlewares/Third_Party/FatFs/src/ff.c **** 
3191:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
3192:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
3193:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN == 1
3194:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
3195:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3196:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
3197:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3198:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3199:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
3200:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->cdir = 0;			/* Initialize current directory */
3201:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3202:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0			/* Clear file lock semaphores */
3203:Middlewares/Third_Party/FatFs/src/ff.c **** 	clear_lock(fs);
3204:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3205:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
3206:Middlewares/Third_Party/FatFs/src/ff.c **** }
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 85


3207:Middlewares/Third_Party/FatFs/src/ff.c **** 
3208:Middlewares/Third_Party/FatFs/src/ff.c **** 
3209:Middlewares/Third_Party/FatFs/src/ff.c **** 
3210:Middlewares/Third_Party/FatFs/src/ff.c **** 
3211:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3212:Middlewares/Third_Party/FatFs/src/ff.c **** /* Check if the file/directory object is valid or not                    */
3213:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3214:Middlewares/Third_Party/FatFs/src/ff.c **** 
3215:Middlewares/Third_Party/FatFs/src/ff.c **** static
3216:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
3217:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
3218:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
3219:Middlewares/Third_Party/FatFs/src/ff.c **** )
3220:Middlewares/Third_Party/FatFs/src/ff.c **** {
3221:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3222:Middlewares/Third_Party/FatFs/src/ff.c **** 
3223:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) 
3224:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fs = 0;
3225:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_INVALID_OBJECT;	/* The object is invalid */
3226:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
3227:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fs = obj->fs;			/* Owner file sytem object */
3228:Middlewares/Third_Party/FatFs/src/ff.c **** 		ENTER_FF(obj->fs);		/* Lock file system */
3229:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_OK;			/* Valid object */
3230:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3231:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
3232:Middlewares/Third_Party/FatFs/src/ff.c **** }
3233:Middlewares/Third_Party/FatFs/src/ff.c **** 
3234:Middlewares/Third_Party/FatFs/src/ff.c **** 
3235:Middlewares/Third_Party/FatFs/src/ff.c **** 
3236:Middlewares/Third_Party/FatFs/src/ff.c **** 
3237:Middlewares/Third_Party/FatFs/src/ff.c **** /*---------------------------------------------------------------------------
3238:Middlewares/Third_Party/FatFs/src/ff.c **** 
3239:Middlewares/Third_Party/FatFs/src/ff.c ****    Public Functions (FatFs API)
3240:Middlewares/Third_Party/FatFs/src/ff.c **** 
3241:Middlewares/Third_Party/FatFs/src/ff.c **** ----------------------------------------------------------------------------*/
3242:Middlewares/Third_Party/FatFs/src/ff.c **** 
3243:Middlewares/Third_Party/FatFs/src/ff.c **** 
3244:Middlewares/Third_Party/FatFs/src/ff.c **** 
3245:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3246:Middlewares/Third_Party/FatFs/src/ff.c **** /* Mount/Unmount a Logical Drive                                         */
3247:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3248:Middlewares/Third_Party/FatFs/src/ff.c **** 
3249:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_mount (
3250:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
3251:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
3252:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
3253:Middlewares/Third_Party/FatFs/src/ff.c **** )
3254:Middlewares/Third_Party/FatFs/src/ff.c **** {
3255:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *cfs;
3256:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol;
3257:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3258:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR *rp = path;
3259:Middlewares/Third_Party/FatFs/src/ff.c **** 
3260:Middlewares/Third_Party/FatFs/src/ff.c **** 
3261:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive number */
3262:Middlewares/Third_Party/FatFs/src/ff.c **** 	vol = get_ldnumber(&rp);
3263:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 86


3264:Middlewares/Third_Party/FatFs/src/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
3265:Middlewares/Third_Party/FatFs/src/ff.c **** 
3266:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (cfs) {
3267:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
3268:Middlewares/Third_Party/FatFs/src/ff.c **** 		clear_lock(cfs);
3269:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3270:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT						/* Discard sync object of the current volume */
3271:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
3272:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3273:Middlewares/Third_Party/FatFs/src/ff.c **** 		cfs->fs_type = 0;				/* Clear old fs object */
3274:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3275:Middlewares/Third_Party/FatFs/src/ff.c **** 
3276:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs) {
3277:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
3278:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT						/* Create sync object for the new volume */
3279:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
3280:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3281:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3282:Middlewares/Third_Party/FatFs/src/ff.c **** 	FatFs[vol] = fs;					/* Register new fs object */
3283:Middlewares/Third_Party/FatFs/src/ff.c **** 
3284:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
3285:Middlewares/Third_Party/FatFs/src/ff.c **** 
3286:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
3287:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
3288:Middlewares/Third_Party/FatFs/src/ff.c **** }
3289:Middlewares/Third_Party/FatFs/src/ff.c **** 
3290:Middlewares/Third_Party/FatFs/src/ff.c **** 
3291:Middlewares/Third_Party/FatFs/src/ff.c **** 
3292:Middlewares/Third_Party/FatFs/src/ff.c **** 
3293:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3294:Middlewares/Third_Party/FatFs/src/ff.c **** /* Open or Create a File                                                 */
3295:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3296:Middlewares/Third_Party/FatFs/src/ff.c **** 
3297:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_open (
3298:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,			/* Pointer to the blank file object */
3299:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Pointer to the file name */
3300:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
3301:Middlewares/Third_Party/FatFs/src/ff.c **** )
3302:Middlewares/Third_Party/FatFs/src/ff.c **** {
3303:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3304:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
3305:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3306:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3307:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD dw, cl, bcs, clst, sc;
3308:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t ofs;
3309:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3310:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
3311:Middlewares/Third_Party/FatFs/src/ff.c **** 
3312:Middlewares/Third_Party/FatFs/src/ff.c **** 
3313:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!fp) return FR_INVALID_OBJECT;
3314:Middlewares/Third_Party/FatFs/src/ff.c **** 
3315:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
3316:Middlewares/Third_Party/FatFs/src/ff.c **** 	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_A
3317:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, mode);
3318:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
3319:Middlewares/Third_Party/FatFs/src/ff.c **** 		dj.obj.fs = fs;
3320:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 87


3321:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
3322:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY	/* R/W configuration */
3323:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3324:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
3325:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;
3326:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3327:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
3328:Middlewares/Third_Party/FatFs/src/ff.c **** 			else {
3329:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
3330:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3331:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3332:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3333:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create or Open a file */
3334:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
3335:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
3336:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
3337:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
3338:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
3339:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3340:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_register(&dj);
3341:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3342:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3343:Middlewares/Third_Party/FatFs/src/ff.c **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
3344:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3345:Middlewares/Third_Party/FatFs/src/ff.c **** 			else {								/* Any object is already existing */
3346:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
3347:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_DENIED;
3348:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
3349:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
3350:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3351:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3352:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
3353:Middlewares/Third_Party/FatFs/src/ff.c **** 				dw = GET_FATTIME();
3354:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3355:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
3356:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Get current allocation info */
3357:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.fs = fs;
3358:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
3359:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
3360:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3361:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.n_frag = 0;
3362:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Initialize directory entry block */
3363:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
3364:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_CrtTime10] = 0;
3365:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
3366:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_ModTime10] = 0;
3367:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
3368:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
3369:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_qword(fs->dirbuf + XDIR_FileSize, 0);
3370:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
3371:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 1;
3372:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = store_xdir(&dj);
3373:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
3374:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
3375:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
3376:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3377:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 88


3378:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3379:Middlewares/Third_Party/FatFs/src/ff.c **** 				{
3380:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Clean directory info */
3381:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
3382:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
3383:Middlewares/Third_Party/FatFs/src/ff.c **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
3384:Middlewares/Third_Party/FatFs/src/ff.c **** 					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
3385:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
3386:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dj.dir + DIR_FileSize, 0);
3387:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
3388:Middlewares/Third_Party/FatFs/src/ff.c **** 
3389:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (cl) {							/* Remove the cluster chain if exist */
3390:Middlewares/Third_Party/FatFs/src/ff.c **** 						dw = fs->winsect;
3391:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = remove_chain(&dj.obj, cl, 0);
3392:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (res == FR_OK) {
3393:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = move_window(fs, dw);
3394:Middlewares/Third_Party/FatFs/src/ff.c **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
3395:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
3396:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3397:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3398:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3399:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3400:Middlewares/Third_Party/FatFs/src/ff.c **** 		else {	/* Open an existing file */
3401:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {					/* Following succeeded */
3402:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
3403:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NO_FILE;
3404:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
3405:Middlewares/Third_Party/FatFs/src/ff.c **** 					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
3406:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_DENIED;
3407:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3408:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3409:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3410:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3411:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3412:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
3413:Middlewares/Third_Party/FatFs/src/ff.c **** 				mode |= FA_MODIFIED;
3414:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
3415:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->dir_ptr = dj.dir;
3416:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
3417:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
3418:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!fp->obj.lockid) res = FR_INT_ERR;
3419:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3420:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3421:Middlewares/Third_Party/FatFs/src/ff.c **** #else		/* R/O configuration */
3422:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3423:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
3424:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;
3425:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
3426:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
3427:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NO_FILE;
3428:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3429:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3430:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3431:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3432:Middlewares/Third_Party/FatFs/src/ff.c **** 
3433:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3434:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 89


3435:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
3436:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
3437:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3438:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.c_ofs = dj.blk_ofs;
3439:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
3440:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
3441:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3442:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
3443:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3444:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
3445:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
3446:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
3447:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3448:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
3449:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->cltbl = 0;			/* Disable fast seek mode */
3450:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3451:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.fs = fs;	 	/* Validate the file object */
3452:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.id = fs->id;
3453:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->flag = mode;		/* Set file access mode */
3454:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->err = 0;			/* Clear error flag */
3455:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->sect = 0;			/* Invalidate current data sector */
3456:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->fptr = 0;			/* Set file pointer top of the file */
3457:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3458:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
3459:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
3460:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3461:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is sp
3462:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
3463:Middlewares/Third_Party/FatFs/src/ff.c **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
3464:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
3465:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
3466:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = get_fat(&fp->obj, clst);
3467:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst <= 1) res = FR_INT_ERR;
3468:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
3469:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3470:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;
3471:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
3472:Middlewares/Third_Party/FatFs/src/ff.c **** 					if ((sc = clust2sect(fs, clst)) == 0) {
3473:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_INT_ERR;
3474:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {
3475:Middlewares/Third_Party/FatFs/src/ff.c **** 						fp->sect = sc + (DWORD)(ofs / SS(fs));
3476:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
3477:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
3478:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3479:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3480:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3481:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3482:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3483:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3484:Middlewares/Third_Party/FatFs/src/ff.c **** 
3485:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
3486:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3487:Middlewares/Third_Party/FatFs/src/ff.c **** 
3488:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
3489:Middlewares/Third_Party/FatFs/src/ff.c **** 
3490:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
3491:Middlewares/Third_Party/FatFs/src/ff.c **** }
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 90


3492:Middlewares/Third_Party/FatFs/src/ff.c **** 
3493:Middlewares/Third_Party/FatFs/src/ff.c **** 
3494:Middlewares/Third_Party/FatFs/src/ff.c **** 
3495:Middlewares/Third_Party/FatFs/src/ff.c **** 
3496:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3497:Middlewares/Third_Party/FatFs/src/ff.c **** /* Read File                                                             */
3498:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3499:Middlewares/Third_Party/FatFs/src/ff.c **** 
3500:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_read (
3501:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp, 	/* Pointer to the file object */
3502:Middlewares/Third_Party/FatFs/src/ff.c **** 	void* buff,	/* Pointer to data buffer */
3503:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT btr,	/* Number of bytes to read */
3504:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT* br	/* Pointer to number of bytes read */
3505:Middlewares/Third_Party/FatFs/src/ff.c **** )
3506:Middlewares/Third_Party/FatFs/src/ff.c **** {
3507:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3508:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3509:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst, sect;
3510:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t remain;
3511:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT rcnt, cc, csect;
3512:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *rbuff = (BYTE*)buff;
3513:Middlewares/Third_Party/FatFs/src/ff.c **** 
3514:Middlewares/Third_Party/FatFs/src/ff.c **** 
3515:Middlewares/Third_Party/FatFs/src/ff.c **** 	*br = 0;	/* Clear read byte counter */
3516:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
3517:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
3518:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
3519:Middlewares/Third_Party/FatFs/src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
3520:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
3521:Middlewares/Third_Party/FatFs/src/ff.c **** 
3522:Middlewares/Third_Party/FatFs/src/ff.c **** 	for ( ;  btr;								/* Repeat until all data read */
3523:Middlewares/Third_Party/FatFs/src/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
3524:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
3525:Middlewares/Third_Party/FatFs/src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
3526:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (csect == 0) {					/* On the cluster boundary? */
3527:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
3528:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
3529:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {						/* Middle or end of the file */
3530:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
3531:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fp->cltbl) {
3532:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3533:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
3534:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3535:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
3536:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
3537:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3538:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3539:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst < 2) ABORT(fs, FR_INT_ERR);
3540:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
3541:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;				/* Update current cluster */
3542:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3543:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect = clust2sect(fs, fp->clust);	/* Get current sector */
3544:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!sect) ABORT(fs, FR_INT_ERR);
3545:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
3546:Middlewares/Third_Party/FatFs/src/ff.c **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
3547:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
3548:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 91


3549:Middlewares/Third_Party/FatFs/src/ff.c **** 					cc = fs->csize - csect;
3550:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3551:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
3552:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
3553:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3554:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->wflag && fs->winsect - sect < cc) {
3555:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
3556:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3557:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3558:Middlewares/Third_Party/FatFs/src/ff.c **** 				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
3559:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
3560:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3561:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3562:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3563:Middlewares/Third_Party/FatFs/src/ff.c **** 				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
3564:Middlewares/Third_Party/FatFs/src/ff.c **** 				continue;
3565:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3566:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
3567:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->sect != sect) {			/* Load data sector if not in cache */
3568:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3569:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
3570:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
3571:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
3572:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3573:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3574:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cach
3575:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3576:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3577:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->sect = sect;
3578:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3579:Middlewares/Third_Party/FatFs/src/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
3580:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
3581:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3582:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3583:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3584:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3585:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3586:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3587:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3588:Middlewares/Third_Party/FatFs/src/ff.c **** 
3589:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, FR_OK);
3590:Middlewares/Third_Party/FatFs/src/ff.c **** }
3591:Middlewares/Third_Party/FatFs/src/ff.c **** 
3592:Middlewares/Third_Party/FatFs/src/ff.c **** 
3593:Middlewares/Third_Party/FatFs/src/ff.c **** 
3594:Middlewares/Third_Party/FatFs/src/ff.c **** 
3595:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3596:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3597:Middlewares/Third_Party/FatFs/src/ff.c **** /* Write File                                                            */
3598:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3599:Middlewares/Third_Party/FatFs/src/ff.c **** 
3600:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_write (
3601:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,			/* Pointer to the file object */
3602:Middlewares/Third_Party/FatFs/src/ff.c **** 	const void* buff,	/* Pointer to the data to be written */
3603:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT btw,			/* Number of bytes to write */
3604:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT* bw			/* Pointer to number of bytes written */
3605:Middlewares/Third_Party/FatFs/src/ff.c **** )
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 92


3606:Middlewares/Third_Party/FatFs/src/ff.c **** {
3607:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3608:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3609:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst, sect;
3610:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT wcnt, cc, csect;
3611:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE *wbuff = (const BYTE*)buff;
3612:Middlewares/Third_Party/FatFs/src/ff.c **** 
3613:Middlewares/Third_Party/FatFs/src/ff.c **** 
3614:Middlewares/Third_Party/FatFs/src/ff.c **** 	*bw = 0;	/* Clear write byte counter */
3615:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
3616:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
3617:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
3618:Middlewares/Third_Party/FatFs/src/ff.c **** 
3619:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
3620:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
3621:Middlewares/Third_Party/FatFs/src/ff.c **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
3622:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3623:Middlewares/Third_Party/FatFs/src/ff.c **** 
3624:Middlewares/Third_Party/FatFs/src/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
3625:Middlewares/Third_Party/FatFs/src/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->
3626:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
3627:Middlewares/Third_Party/FatFs/src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
3628:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (csect == 0) {				/* On the cluster boundary? */
3629:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
3630:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fp->obj.sclust;	/* Follow from the origin */
3631:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0) {		/* If no cluster is allocated, */
3632:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
3633:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3634:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {					/* On the middle or end of the file */
3635:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
3636:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fp->cltbl) {
3637:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3638:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
3639:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3640:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
3641:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
3642:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3643:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3644:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
3645:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
3646:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
3647:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;			/* Update current cluster */
3648:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
3649:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3650:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3651:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back s
3652:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3653:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
3654:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
3655:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
3656:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3657:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3658:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect = clust2sect(fs, fp->clust);	/* Get current sector */
3659:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!sect) ABORT(fs, FR_INT_ERR);
3660:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
3661:Middlewares/Third_Party/FatFs/src/ff.c **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
3662:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 93


3663:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
3664:Middlewares/Third_Party/FatFs/src/ff.c **** 					cc = fs->csize - csect;
3665:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3666:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
3667:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 2
3668:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3669:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct writ
3670:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
3671:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 0;
3672:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3673:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3674:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write *
3675:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
3676:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
3677:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3678:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3679:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3680:Middlewares/Third_Party/FatFs/src/ff.c **** 				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
3681:Middlewares/Third_Party/FatFs/src/ff.c **** 				continue;
3682:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3683:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3684:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
3685:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
3686:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->winsect = sect;
3687:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3688:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3689:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->sect != sect && 		/* Fill sector cache with file data */
3690:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr < fp->obj.objsize &&
3691:Middlewares/Third_Party/FatFs/src/ff.c **** 				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
3692:Middlewares/Third_Party/FatFs/src/ff.c **** 					ABORT(fs, FR_DISK_ERR);
3693:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3694:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3695:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->sect = sect;
3696:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3697:Middlewares/Third_Party/FatFs/src/ff.c **** 		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
3698:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
3699:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3700:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3701:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
3702:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->wflag = 1;
3703:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3704:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
3705:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->flag |= FA_DIRTY;
3706:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3707:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3708:Middlewares/Third_Party/FatFs/src/ff.c **** 
3709:Middlewares/Third_Party/FatFs/src/ff.c **** 	fp->flag |= FA_MODIFIED;				/* Set file change flag */
3710:Middlewares/Third_Party/FatFs/src/ff.c **** 
3711:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, FR_OK);
3712:Middlewares/Third_Party/FatFs/src/ff.c **** }
3713:Middlewares/Third_Party/FatFs/src/ff.c **** 
3714:Middlewares/Third_Party/FatFs/src/ff.c **** 
3715:Middlewares/Third_Party/FatFs/src/ff.c **** 
3716:Middlewares/Third_Party/FatFs/src/ff.c **** 
3717:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3718:Middlewares/Third_Party/FatFs/src/ff.c **** /* Synchronize the File                                                  */
3719:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 94


3720:Middlewares/Third_Party/FatFs/src/ff.c **** 
3721:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_sync (
3722:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp		/* Pointer to the file object */
3723:Middlewares/Third_Party/FatFs/src/ff.c **** )
3724:Middlewares/Third_Party/FatFs/src/ff.c **** {
3725:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3726:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3727:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD tm;
3728:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *dir;
3729:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3730:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
3731:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
3732:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3733:Middlewares/Third_Party/FatFs/src/ff.c **** 
3734:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
3735:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
3736:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
3737:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
3738:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
3739:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
3740:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
3741:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3742:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3743:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Update the directory entry */
3744:Middlewares/Third_Party/FatFs/src/ff.c **** 			tm = GET_FATTIME();				/* Modified time */
3745:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3746:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
3747:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
3748:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
3749:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if nee
3750:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3751:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
3752:Middlewares/Third_Party/FatFs/src/ff.c **** 					INIT_NAMBUF(fs);
3753:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
3754:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
3755:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
3756:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
3757:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
3758:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
3759:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
3760:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
3761:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->dirbuf[XDIR_ModTime10] = 0;
3762:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_dword(fs->dirbuf + XDIR_AccTime, 0);
3763:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = store_xdir(&dj);	/* Restore it to the directory */
3764:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (res == FR_OK) {
3765:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = sync_fs(fs);
3766:Middlewares/Third_Party/FatFs/src/ff.c **** 							fp->flag &= (BYTE)~FA_MODIFIED;
3767:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
3768:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3769:Middlewares/Third_Party/FatFs/src/ff.c **** 					FREE_NAMBUF();
3770:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3771:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
3772:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3773:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
3774:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = move_window(fs, fp->dir_sect);
3775:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
3776:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir = fp->dir_ptr;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 95


3777:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
3778:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
3779:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
3780:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
3781:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_word(dir + DIR_LstAccDate, 0);
3782:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
3783:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_fs(fs);					/* Restore it to the directory */
3784:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_MODIFIED;
3785:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3786:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3787:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3788:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3789:Middlewares/Third_Party/FatFs/src/ff.c **** 
3790:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
3791:Middlewares/Third_Party/FatFs/src/ff.c **** }
3792:Middlewares/Third_Party/FatFs/src/ff.c **** 
3793:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
3794:Middlewares/Third_Party/FatFs/src/ff.c **** 
3795:Middlewares/Third_Party/FatFs/src/ff.c **** 
3796:Middlewares/Third_Party/FatFs/src/ff.c **** 
3797:Middlewares/Third_Party/FatFs/src/ff.c **** 
3798:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3799:Middlewares/Third_Party/FatFs/src/ff.c **** /* Close File                                                            */
3800:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3801:Middlewares/Third_Party/FatFs/src/ff.c **** 
3802:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_close (
3803:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp		/* Pointer to the file object to be closed */
3804:Middlewares/Third_Party/FatFs/src/ff.c **** )
3805:Middlewares/Third_Party/FatFs/src/ff.c **** {
3806:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3807:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3808:Middlewares/Third_Party/FatFs/src/ff.c **** 
3809:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3810:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = f_sync(fp);					/* Flush cached data */
3811:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK)
3812:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3813:Middlewares/Third_Party/FatFs/src/ff.c **** 	{
3814:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = validate(&fp->obj, &fs);	/* Lock volume */
3815:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3816:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
3817:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
3818:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK)
3819:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3820:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
3821:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.fs = 0;			/* Invalidate file object */
3822:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3823:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
3824:Middlewares/Third_Party/FatFs/src/ff.c **** 			unlock_fs(fs, FR_OK);		/* Unlock volume */
3825:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3826:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3827:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3828:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
3829:Middlewares/Third_Party/FatFs/src/ff.c **** }
3830:Middlewares/Third_Party/FatFs/src/ff.c **** 
3831:Middlewares/Third_Party/FatFs/src/ff.c **** 
3832:Middlewares/Third_Party/FatFs/src/ff.c **** 
3833:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 96


3834:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH >= 1
3835:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3836:Middlewares/Third_Party/FatFs/src/ff.c **** /* Change Current Directory or Current Drive, Get Current Directory      */
3837:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3838:Middlewares/Third_Party/FatFs/src/ff.c **** 
3839:Middlewares/Third_Party/FatFs/src/ff.c **** #if _VOLUMES >= 2
3840:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_chdrive (
3841:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path		/* Drive number */
3842:Middlewares/Third_Party/FatFs/src/ff.c **** )
3843:Middlewares/Third_Party/FatFs/src/ff.c **** {
3844:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol;
3845:Middlewares/Third_Party/FatFs/src/ff.c **** 
3846:Middlewares/Third_Party/FatFs/src/ff.c **** 
3847:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive number */
3848:Middlewares/Third_Party/FatFs/src/ff.c **** 	vol = get_ldnumber(&path);
3849:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
3850:Middlewares/Third_Party/FatFs/src/ff.c **** 
3851:Middlewares/Third_Party/FatFs/src/ff.c **** 	CurrVol = (BYTE)vol;	/* Set it as current volume */
3852:Middlewares/Third_Party/FatFs/src/ff.c **** 
3853:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
3854:Middlewares/Third_Party/FatFs/src/ff.c **** }
3855:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3856:Middlewares/Third_Party/FatFs/src/ff.c **** 
3857:Middlewares/Third_Party/FatFs/src/ff.c **** 
3858:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_chdir (
3859:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
3860:Middlewares/Third_Party/FatFs/src/ff.c **** )
3861:Middlewares/Third_Party/FatFs/src/ff.c **** {
3862:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3863:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
3864:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3865:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
3866:Middlewares/Third_Party/FatFs/src/ff.c **** 
3867:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
3868:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, 0);
3869:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
3870:Middlewares/Third_Party/FatFs/src/ff.c **** 		dj.obj.fs = fs;
3871:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
3872:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
3873:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
3874:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
3875:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
3876:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3877:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
3878:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->cdc_scl = dj.obj.c_scl;
3879:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->cdc_size = dj.obj.c_size;
3880:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->cdc_ofs = dj.obj.c_ofs;
3881:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3882:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3883:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
3884:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
3885:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3886:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
3887:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
3888:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
3889:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3890:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->cdc_ofs = dj.blk_ofs;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 97


3891:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
3892:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3893:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
3894:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
3895:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3896:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
3897:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
3898:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3899:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3900:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3901:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
3902:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
3903:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3904:Middlewares/Third_Party/FatFs/src/ff.c **** 
3905:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
3906:Middlewares/Third_Party/FatFs/src/ff.c **** }
3907:Middlewares/Third_Party/FatFs/src/ff.c **** 
3908:Middlewares/Third_Party/FatFs/src/ff.c **** 
3909:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH >= 2
3910:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_getcwd (
3911:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR* buff,	/* Pointer to the directory path */
3912:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT len		/* Size of path */
3913:Middlewares/Third_Party/FatFs/src/ff.c **** )
3914:Middlewares/Third_Party/FatFs/src/ff.c **** {
3915:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3916:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
3917:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3918:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, n;
3919:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ccl;
3920:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR *tp;
3921:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO fno;
3922:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
3923:Middlewares/Third_Party/FatFs/src/ff.c **** 
3924:Middlewares/Third_Party/FatFs/src/ff.c **** 
3925:Middlewares/Third_Party/FatFs/src/ff.c **** 	*buff = 0;
3926:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
3927:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
3928:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
3929:Middlewares/Third_Party/FatFs/src/ff.c **** 		dj.obj.fs = fs;
3930:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
3931:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = len;			/* Bottom of buffer (directory stack base) */
3932:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path)
3933:Middlewares/Third_Party/FatFs/src/ff.c **** 			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
3934:Middlewares/Third_Party/FatFs/src/ff.c **** 			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
3935:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
3936:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) break;
3937:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = move_window(fs, dj.sect);
3938:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) break;
3939:Middlewares/Third_Party/FatFs/src/ff.c **** 				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
3940:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_sdi(&dj, 0);
3941:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) break;
3942:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {							/* Find the entry links to the child directory */
3943:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_read(&dj, 0);
3944:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res != FR_OK) break;
3945:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
3946:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_next(&dj, 0);
3947:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (res == FR_OK);
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 98


3948:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
3949:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) break;
3950:Middlewares/Third_Party/FatFs/src/ff.c **** 				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
3951:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (n = 0; fno.fname[n]; n++) ;
3952:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i < n + 3) {
3953:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NOT_ENOUGH_CORE; break;
3954:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3955:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (n) buff[--i] = fno.fname[--n];
3956:Middlewares/Third_Party/FatFs/src/ff.c **** 				buff[--i] = '/';
3957:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3958:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3959:Middlewares/Third_Party/FatFs/src/ff.c **** 		tp = buff;
3960:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3961:Middlewares/Third_Party/FatFs/src/ff.c **** #if _VOLUMES >= 2
3962:Middlewares/Third_Party/FatFs/src/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
3963:Middlewares/Third_Party/FatFs/src/ff.c **** 			*tp++ = ':';
3964:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3965:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i == len) {					/* Root-directory */
3966:Middlewares/Third_Party/FatFs/src/ff.c **** 				*tp++ = '/';
3967:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {						/* Sub-directroy */
3968:Middlewares/Third_Party/FatFs/src/ff.c **** 				do		/* Add stacked path str */
3969:Middlewares/Third_Party/FatFs/src/ff.c **** 					*tp++ = buff[i++];
3970:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (i < len);
3971:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3972:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3973:Middlewares/Third_Party/FatFs/src/ff.c **** 		*tp = 0;
3974:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
3975:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3976:Middlewares/Third_Party/FatFs/src/ff.c **** 
3977:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
3978:Middlewares/Third_Party/FatFs/src/ff.c **** }
3979:Middlewares/Third_Party/FatFs/src/ff.c **** 
3980:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_RPATH >= 2 */
3981:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_RPATH >= 1 */
3982:Middlewares/Third_Party/FatFs/src/ff.c **** 
3983:Middlewares/Third_Party/FatFs/src/ff.c **** 
3984:Middlewares/Third_Party/FatFs/src/ff.c **** 
3985:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 2
3986:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3987:Middlewares/Third_Party/FatFs/src/ff.c **** /* Seek File R/W Pointer                                                 */
3988:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3989:Middlewares/Third_Party/FatFs/src/ff.c **** 
3990:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_lseek (
3991:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
3992:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t ofs		/* File pointer from top of file */
3993:Middlewares/Third_Party/FatFs/src/ff.c **** )
3994:Middlewares/Third_Party/FatFs/src/ff.c **** {
3995:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3996:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3997:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst, bcs, nsect;
3998:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t ifptr;
3999:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
4000:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
4001:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4002:Middlewares/Third_Party/FatFs/src/ff.c **** 
4003:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
4004:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) res = (FRESULT)fp->err;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 99


4005:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT && !_FS_READONLY
4006:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
4007:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed
4008:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4009:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4010:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
4011:Middlewares/Third_Party/FatFs/src/ff.c **** 
4012:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
4013:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
4014:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
4015:Middlewares/Third_Party/FatFs/src/ff.c **** 			tbl = fp->cltbl;
4016:Middlewares/Third_Party/FatFs/src/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
4017:Middlewares/Third_Party/FatFs/src/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
4018:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cl) {
4019:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {
4020:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Get a fragment */
4021:Middlewares/Third_Party/FatFs/src/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
4022:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
4023:Middlewares/Third_Party/FatFs/src/ff.c **** 						pcl = cl; ncl++;
4024:Middlewares/Third_Party/FatFs/src/ff.c **** 						cl = get_fat(&fp->obj, cl);
4025:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
4026:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4027:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (cl == pcl + 1);
4028:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
4029:Middlewares/Third_Party/FatFs/src/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
4030:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4031:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
4032:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4033:Middlewares/Third_Party/FatFs/src/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
4034:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ulen <= tlen) {
4035:Middlewares/Third_Party/FatFs/src/ff.c **** 				*tbl = 0;		/* Terminate table */
4036:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
4037:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
4038:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4039:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {						/* Fast seek */
4040:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
4041:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
4042:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ofs) {
4043:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
4044:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc = clust2sect(fs, fp->clust);
4045:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!dsc) ABORT(fs, FR_INT_ERR);
4046:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
4047:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
4048:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
4049:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4050:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
4051:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
4052:Middlewares/Third_Party/FatFs/src/ff.c **** 						fp->flag &= (BYTE)~FA_DIRTY;
4053:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4054:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4055:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sec
4056:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4057:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->sect = dsc;
4058:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4059:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4060:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4061:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 100


4062:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4063:Middlewares/Third_Party/FatFs/src/ff.c **** 
4064:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Normal Seek */
4065:Middlewares/Third_Party/FatFs/src/ff.c **** 	{
4066:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4067:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATx
4068:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4069:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, cl
4070:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs = fp->obj.objsize;
4071:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4072:Middlewares/Third_Party/FatFs/src/ff.c **** 		ifptr = fp->fptr;
4073:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->fptr = nsect = 0;
4074:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs) {
4075:Middlewares/Third_Party/FatFs/src/ff.c **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
4076:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ifptr > 0 &&
4077:Middlewares/Third_Party/FatFs/src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
4078:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
4079:Middlewares/Third_Party/FatFs/src/ff.c **** 				ofs -= fp->fptr;
4080:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = fp->clust;
4081:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {									/* When seek to back cluster, */
4082:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = fp->obj.sclust;					/* start from the first cluster */
4083:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4084:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
4085:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = create_chain(&fp->obj, 0);
4086:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
4087:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4088:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.sclust = clst;
4089:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4090:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4091:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;
4092:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4093:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst != 0) {
4094:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
4095:Middlewares/Third_Party/FatFs/src/ff.c **** 					ofs -= bcs; fp->fptr += bcs;
4096:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4097:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
4098:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize t
4099:Middlewares/Third_Party/FatFs/src/ff.c **** 							fp->obj.objsize = fp->fptr;
4100:Middlewares/Third_Party/FatFs/src/ff.c **** 							fp->flag |= FA_MODIFIED;
4101:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4102:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
4103:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (clst == 0) {				/* Clip file size in case of disk full */
4104:Middlewares/Third_Party/FatFs/src/ff.c **** 							ofs = 0; break;
4105:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4106:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
4107:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4108:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
4109:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
4110:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4111:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4112:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
4113:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->clust = clst;
4114:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4115:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr += ofs;
4116:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ofs % SS(fs)) {
4117:Middlewares/Third_Party/FatFs/src/ff.c **** 					nsect = clust2sect(fs, clst);	/* Current sector */
4118:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!nsect) ABORT(fs, FR_INT_ERR);
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 101


4119:Middlewares/Third_Party/FatFs/src/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
4120:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4121:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4122:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4123:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is e
4124:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.objsize = fp->fptr;
4125:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->flag |= FA_MODIFIED;
4126:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4127:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
4128:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
4129:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4130:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
4131:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
4132:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
4133:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4134:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4135:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cach
4136:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4137:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->sect = nsect;
4138:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4139:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4140:Middlewares/Third_Party/FatFs/src/ff.c **** 
4141:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4142:Middlewares/Third_Party/FatFs/src/ff.c **** }
4143:Middlewares/Third_Party/FatFs/src/ff.c **** 
4144:Middlewares/Third_Party/FatFs/src/ff.c **** 
4145:Middlewares/Third_Party/FatFs/src/ff.c **** 
4146:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 1
4147:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4148:Middlewares/Third_Party/FatFs/src/ff.c **** /* Create a Directory Object                                             */
4149:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4150:Middlewares/Third_Party/FatFs/src/ff.c **** 
4151:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_opendir (
4152:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Pointer to directory object to create */
4153:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
4154:Middlewares/Third_Party/FatFs/src/ff.c **** )
4155:Middlewares/Third_Party/FatFs/src/ff.c **** {
4156:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4157:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4158:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID *obj;
4159:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4160:Middlewares/Third_Party/FatFs/src/ff.c **** 
4161:Middlewares/Third_Party/FatFs/src/ff.c **** 
4162:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp) return FR_INVALID_OBJECT;
4163:Middlewares/Third_Party/FatFs/src/ff.c **** 
4164:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4165:Middlewares/Third_Party/FatFs/src/ff.c **** 	obj = &dp->obj;
4166:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, 0);
4167:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4168:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->fs = fs;
4169:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4170:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
4171:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
4172:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
4173:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
4174:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4175:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 102


4176:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
4177:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
4178:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->c_ofs = dp->blk_ofs;
4179:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
4180:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
4181:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
4182:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
4183:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4184:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
4185:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
4186:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4187:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {						/* This object is a file */
4188:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NO_PATH;
4189:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4190:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4191:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4192:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->id = fs->id;
4193:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
4194:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
4195:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
4196:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (obj->sclust) {
4197:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
4198:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
4199:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {
4200:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->lockid = 0;	/* Root directory need not to be locked */
4201:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4202:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4203:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4204:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4205:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4206:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4207:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
4208:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4209:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
4210:Middlewares/Third_Party/FatFs/src/ff.c **** 
4211:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4212:Middlewares/Third_Party/FatFs/src/ff.c **** }
4213:Middlewares/Third_Party/FatFs/src/ff.c **** 
4214:Middlewares/Third_Party/FatFs/src/ff.c **** 
4215:Middlewares/Third_Party/FatFs/src/ff.c **** 
4216:Middlewares/Third_Party/FatFs/src/ff.c **** 
4217:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4218:Middlewares/Third_Party/FatFs/src/ff.c **** /* Close Directory                                                       */
4219:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4220:Middlewares/Third_Party/FatFs/src/ff.c **** 
4221:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_closedir (
4222:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR *dp		/* Pointer to the directory object to be closed */
4223:Middlewares/Third_Party/FatFs/src/ff.c **** )
4224:Middlewares/Third_Party/FatFs/src/ff.c **** {
4225:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4226:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4227:Middlewares/Third_Party/FatFs/src/ff.c **** 
4228:Middlewares/Third_Party/FatFs/src/ff.c **** 
4229:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
4230:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4231:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
4232:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 103


4233:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dec_lock(dp->obj.lockid);
4234:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4235:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK)
4236:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4237:Middlewares/Third_Party/FatFs/src/ff.c **** 		{
4238:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->obj.fs = 0;			/* Invalidate directory object */
4239:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4240:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
4241:Middlewares/Third_Party/FatFs/src/ff.c **** 		unlock_fs(fs, FR_OK);		/* Unlock volume */
4242:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4243:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4244:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
4245:Middlewares/Third_Party/FatFs/src/ff.c **** }
4246:Middlewares/Third_Party/FatFs/src/ff.c **** 
4247:Middlewares/Third_Party/FatFs/src/ff.c **** 
4248:Middlewares/Third_Party/FatFs/src/ff.c **** 
4249:Middlewares/Third_Party/FatFs/src/ff.c **** 
4250:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4251:Middlewares/Third_Party/FatFs/src/ff.c **** /* Read Directory Entries in Sequence                                    */
4252:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4253:Middlewares/Third_Party/FatFs/src/ff.c **** 
4254:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_readdir (
4255:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Pointer to the open directory object */
4256:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4257:Middlewares/Third_Party/FatFs/src/ff.c **** )
4258:Middlewares/Third_Party/FatFs/src/ff.c **** {
4259:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4260:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4261:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4262:Middlewares/Third_Party/FatFs/src/ff.c **** 
4263:Middlewares/Third_Party/FatFs/src/ff.c **** 
4264:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
4265:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4266:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!fno) {
4267:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
4268:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
4269:Middlewares/Third_Party/FatFs/src/ff.c **** 			INIT_NAMBUF(fs);
4270:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
4271:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
4272:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
4273:Middlewares/Third_Party/FatFs/src/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
4274:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
4275:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
4276:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4277:Middlewares/Third_Party/FatFs/src/ff.c **** 			FREE_NAMBUF();
4278:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4279:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4280:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4281:Middlewares/Third_Party/FatFs/src/ff.c **** }
4282:Middlewares/Third_Party/FatFs/src/ff.c **** 
4283:Middlewares/Third_Party/FatFs/src/ff.c **** 
4284:Middlewares/Third_Party/FatFs/src/ff.c **** 
4285:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FIND
4286:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4287:Middlewares/Third_Party/FatFs/src/ff.c **** /* Find Next File                                                        */
4288:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4289:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 104


4290:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_findnext (
4291:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Pointer to the open directory object */
4292:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno	/* Pointer to the file information structure */
4293:Middlewares/Third_Party/FatFs/src/ff.c **** )
4294:Middlewares/Third_Party/FatFs/src/ff.c **** {
4295:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4296:Middlewares/Third_Party/FatFs/src/ff.c **** 
4297:Middlewares/Third_Party/FatFs/src/ff.c **** 
4298:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
4299:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = f_readdir(dp, fno);		/* Get a directory item */
4300:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory 
4301:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
4302:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0 && _USE_FIND == 2
4303:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist *
4304:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4305:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4306:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
4307:Middlewares/Third_Party/FatFs/src/ff.c **** }
4308:Middlewares/Third_Party/FatFs/src/ff.c **** 
4309:Middlewares/Third_Party/FatFs/src/ff.c **** 
4310:Middlewares/Third_Party/FatFs/src/ff.c **** 
4311:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4312:Middlewares/Third_Party/FatFs/src/ff.c **** /* Find First File                                                       */
4313:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4314:Middlewares/Third_Party/FatFs/src/ff.c **** 
4315:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_findfirst (
4316:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,				/* Pointer to the blank directory object */
4317:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno,			/* Pointer to the file information structure */
4318:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,		/* Pointer to the directory to open */
4319:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* pattern	/* Pointer to the matching pattern */
4320:Middlewares/Third_Party/FatFs/src/ff.c **** )
4321:Middlewares/Third_Party/FatFs/src/ff.c **** {
4322:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4323:Middlewares/Third_Party/FatFs/src/ff.c **** 
4324:Middlewares/Third_Party/FatFs/src/ff.c **** 
4325:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->pat = pattern;		/* Save pointer to pattern string */
4326:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = f_opendir(dp, path);		/* Open the target directory */
4327:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4328:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = f_findnext(dp, fno);	/* Find the first item */
4329:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4330:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
4331:Middlewares/Third_Party/FatFs/src/ff.c **** }
4332:Middlewares/Third_Party/FatFs/src/ff.c **** 
4333:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_FIND */
4334:Middlewares/Third_Party/FatFs/src/ff.c **** 
4335:Middlewares/Third_Party/FatFs/src/ff.c **** 
4336:Middlewares/Third_Party/FatFs/src/ff.c **** 
4337:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE == 0
4338:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4339:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get File Status                                                       */
4340:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4341:Middlewares/Third_Party/FatFs/src/ff.c **** 
4342:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_stat (
4343:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
4344:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4345:Middlewares/Third_Party/FatFs/src/ff.c **** )
4346:Middlewares/Third_Party/FatFs/src/ff.c **** {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 105


4347:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4348:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
4349:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4350:Middlewares/Third_Party/FatFs/src/ff.c **** 
4351:Middlewares/Third_Party/FatFs/src/ff.c **** 
4352:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4353:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &dj.obj.fs, 0);
4354:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4355:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(dj.obj.fs);
4356:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
4357:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
4358:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
4359:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;
4360:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {							/* Found an object */
4361:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
4362:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4363:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4364:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4365:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4366:Middlewares/Third_Party/FatFs/src/ff.c **** 
4367:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(dj.obj.fs, res);
4368:Middlewares/Third_Party/FatFs/src/ff.c **** }
4369:Middlewares/Third_Party/FatFs/src/ff.c **** 
4370:Middlewares/Third_Party/FatFs/src/ff.c **** 
4371:Middlewares/Third_Party/FatFs/src/ff.c **** 
4372:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4373:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4374:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get Number of Free Clusters                                           */
4375:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4376:Middlewares/Third_Party/FatFs/src/ff.c **** 
4377:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_getfree (
4378:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
4379:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
4380:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
4381:Middlewares/Third_Party/FatFs/src/ff.c **** )
4382:Middlewares/Third_Party/FatFs/src/ff.c **** {
4383:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4384:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4385:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD nfree, clst, sect, stat;
4386:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
4387:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *p;
4388:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID obj;
4389:Middlewares/Third_Party/FatFs/src/ff.c **** 
4390:Middlewares/Third_Party/FatFs/src/ff.c **** 
4391:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4392:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, 0);
4393:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4394:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fatfs = fs;				/* Return ptr to the fs object */
4395:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* If free_clst is valid, return it without full cluster scan */
4396:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) {
4397:Middlewares/Third_Party/FatFs/src/ff.c **** 			*nclst = fs->free_clst;
4398:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
4399:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Get number of free clusters */
4400:Middlewares/Third_Party/FatFs/src/ff.c **** 			nfree = 0;
4401:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
4402:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = 2; obj.fs = fs;
4403:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 106


4404:Middlewares/Third_Party/FatFs/src/ff.c **** 					stat = get_fat(&obj, clst);
4405:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
4406:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
4407:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 0) nfree++;
4408:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (++clst < fs->n_fatent);
4409:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
4410:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4411:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
4412:Middlewares/Third_Party/FatFs/src/ff.c **** 					BYTE bm;
4413:Middlewares/Third_Party/FatFs/src/ff.c **** 					UINT b;
4414:Middlewares/Third_Party/FatFs/src/ff.c **** 
4415:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fs->n_fatent - 2;
4416:Middlewares/Third_Party/FatFs/src/ff.c **** 					sect = fs->database;
4417:Middlewares/Third_Party/FatFs/src/ff.c **** 					i = 0;
4418:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
4419:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
4420:Middlewares/Third_Party/FatFs/src/ff.c **** 						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
4421:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (!(bm & 1)) nfree++;
4422:Middlewares/Third_Party/FatFs/src/ff.c **** 							bm >>= 1;
4423:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4424:Middlewares/Third_Party/FatFs/src/ff.c **** 						i = (i + 1) % SS(fs);
4425:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (clst);
4426:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else
4427:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4428:Middlewares/Third_Party/FatFs/src/ff.c **** 				{	/* FAT16/32: Sector alighed FAT entries */
4429:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fs->n_fatent; sect = fs->fatbase;
4430:Middlewares/Third_Party/FatFs/src/ff.c **** 					i = 0; p = 0;
4431:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
4432:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (i == 0) {
4433:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = move_window(fs, sect++);
4434:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res != FR_OK) break;
4435:Middlewares/Third_Party/FatFs/src/ff.c **** 							p = fs->win;
4436:Middlewares/Third_Party/FatFs/src/ff.c **** 							i = SS(fs);
4437:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4438:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (fs->fs_type == FS_FAT16) {
4439:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (ld_word(p) == 0) nfree++;
4440:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 2; i -= 2;
4441:Middlewares/Third_Party/FatFs/src/ff.c **** 						} else {
4442:Middlewares/Third_Party/FatFs/src/ff.c **** 							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
4443:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 4; i -= 4;
4444:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4445:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (--clst);
4446:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4447:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4448:Middlewares/Third_Party/FatFs/src/ff.c **** 			*nclst = nfree;			/* Return the free clusters */
4449:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->free_clst = nfree;	/* Now free_clst is valid */
4450:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
4451:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4452:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4453:Middlewares/Third_Party/FatFs/src/ff.c **** 
4454:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4455:Middlewares/Third_Party/FatFs/src/ff.c **** }
4456:Middlewares/Third_Party/FatFs/src/ff.c **** 
4457:Middlewares/Third_Party/FatFs/src/ff.c **** 
4458:Middlewares/Third_Party/FatFs/src/ff.c **** 
4459:Middlewares/Third_Party/FatFs/src/ff.c **** 
4460:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 107


4461:Middlewares/Third_Party/FatFs/src/ff.c **** /* Truncate File                                                         */
4462:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4463:Middlewares/Third_Party/FatFs/src/ff.c **** 
4464:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_truncate (
4465:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp		/* Pointer to the file object */
4466:Middlewares/Third_Party/FatFs/src/ff.c **** )
4467:Middlewares/Third_Party/FatFs/src/ff.c **** {
4468:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4469:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4470:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ncl;
4471:Middlewares/Third_Party/FatFs/src/ff.c **** 
4472:Middlewares/Third_Party/FatFs/src/ff.c **** 
4473:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
4474:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
4475:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
4476:Middlewares/Third_Party/FatFs/src/ff.c **** 
4477:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
4478:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
4479:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
4480:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.sclust = 0;
4481:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
4482:Middlewares/Third_Party/FatFs/src/ff.c **** 			ncl = get_fat(&fp->obj, fp->clust);
4483:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
4484:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
4485:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
4486:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK && ncl < fs->n_fatent) {
4487:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
4488:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4489:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4490:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
4491:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->flag |= FA_MODIFIED;
4492:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
4493:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
4494:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
4495:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_DISK_ERR;
4496:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
4497:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
4498:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4499:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4500:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4501:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) ABORT(fs, res);
4502:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4503:Middlewares/Third_Party/FatFs/src/ff.c **** 
4504:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4505:Middlewares/Third_Party/FatFs/src/ff.c **** }
4506:Middlewares/Third_Party/FatFs/src/ff.c **** 
4507:Middlewares/Third_Party/FatFs/src/ff.c **** 
4508:Middlewares/Third_Party/FatFs/src/ff.c **** 
4509:Middlewares/Third_Party/FatFs/src/ff.c **** 
4510:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4511:Middlewares/Third_Party/FatFs/src/ff.c **** /* Delete a File/Directory                                               */
4512:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4513:Middlewares/Third_Party/FatFs/src/ff.c **** 
4514:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_unlink (
4515:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path		/* Pointer to the file or directory path */
4516:Middlewares/Third_Party/FatFs/src/ff.c **** )
4517:Middlewares/Third_Party/FatFs/src/ff.c **** {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 108


4518:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4519:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj, sdj;
4520:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD dclst = 0;
4521:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4522:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4523:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID obj;
4524:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4525:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4526:Middlewares/Third_Party/FatFs/src/ff.c **** 
4527:Middlewares/Third_Party/FatFs/src/ff.c **** 
4528:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4529:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);
4530:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
4531:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4532:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4533:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
4534:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
4535:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
4536:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4537:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
4538:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
4539:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4540:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
4541:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
4542:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
4543:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
4544:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_RDO) {
4545:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
4546:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4547:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4548:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4549:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4550:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj.fs = fs;
4551:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4552:Middlewares/Third_Party/FatFs/src/ff.c **** 					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
4553:Middlewares/Third_Party/FatFs/src/ff.c **** 					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
4554:Middlewares/Third_Party/FatFs/src/ff.c **** 					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
4555:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else
4556:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4557:Middlewares/Third_Party/FatFs/src/ff.c **** 				{
4558:Middlewares/Third_Party/FatFs/src/ff.c **** 					dclst = ld_clust(fs, dj.dir);
4559:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4560:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
4561:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
4562:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
4563:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_DENIED;
4564:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
4565:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4566:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
4567:Middlewares/Third_Party/FatFs/src/ff.c **** 						sdj.obj.fs = fs;						/* Open the sub-directory */
4568:Middlewares/Third_Party/FatFs/src/ff.c **** 						sdj.obj.sclust = dclst;
4569:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4570:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (fs->fs_type == FS_EXFAT) {
4571:Middlewares/Third_Party/FatFs/src/ff.c **** 							sdj.obj.objsize = obj.objsize;
4572:Middlewares/Third_Party/FatFs/src/ff.c **** 							sdj.obj.stat = obj.stat;
4573:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4574:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 109


4575:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = dir_sdi(&sdj, 0);
4576:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (res == FR_OK) {
4577:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = dir_read(&sdj, 0);			/* Read an item */
4578:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
4579:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
4580:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4581:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4582:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4583:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4584:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4585:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_remove(&dj);			/* Remove the directory entry */
4586:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
4587:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4588:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = remove_chain(&obj, dclst, 0);
4589:Middlewares/Third_Party/FatFs/src/ff.c **** #else
4590:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = remove_chain(&dj.obj, dclst, 0);
4591:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4592:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4593:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) res = sync_fs(fs);
4594:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4595:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4596:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4597:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4598:Middlewares/Third_Party/FatFs/src/ff.c **** 
4599:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4600:Middlewares/Third_Party/FatFs/src/ff.c **** }
4601:Middlewares/Third_Party/FatFs/src/ff.c **** 
4602:Middlewares/Third_Party/FatFs/src/ff.c **** 
4603:Middlewares/Third_Party/FatFs/src/ff.c **** 
4604:Middlewares/Third_Party/FatFs/src/ff.c **** 
4605:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4606:Middlewares/Third_Party/FatFs/src/ff.c **** /* Create a Directory                                                    */
4607:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4608:Middlewares/Third_Party/FatFs/src/ff.c **** 
4609:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_mkdir (
4610:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path		/* Pointer to the directory path */
4611:Middlewares/Third_Party/FatFs/src/ff.c **** )
4612:Middlewares/Third_Party/FatFs/src/ff.c **** {
4613:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4614:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
4615:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4616:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *dir;
4617:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT n;
4618:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD dsc, dcl, pcl, tm;
4619:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4620:Middlewares/Third_Party/FatFs/src/ff.c **** 
4621:Middlewares/Third_Party/FatFs/src/ff.c **** 
4622:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4623:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);
4624:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
4625:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4626:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4627:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
4628:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
4629:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
4630:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_INVALID_NAME;
4631:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 110


4632:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
4633:Middlewares/Third_Party/FatFs/src/ff.c **** 			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
4634:Middlewares/Third_Party/FatFs/src/ff.c **** 			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
4635:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
4636:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
4637:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
4638:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
4639:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
4640:Middlewares/Third_Party/FatFs/src/ff.c **** 			tm = GET_FATTIME();
4641:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
4642:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc = clust2sect(fs, dcl);
4643:Middlewares/Third_Party/FatFs/src/ff.c **** 				dir = fs->win;
4644:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_set(dir, 0, SS(fs));
4645:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
4646:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
4647:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Name] = '.';
4648:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] = AM_DIR;
4649:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);
4650:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir, dcl);
4651:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
4652:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
4653:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
4654:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir + SZDIRE, pcl);
4655:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4656:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
4657:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->winsect = dsc++;
4658:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
4659:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_window(fs);
4660:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res != FR_OK) break;
4661:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_set(dir, 0, SS(fs));
4662:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4663:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4664:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4665:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_register(&dj);	/* Register the object to the directoy */
4666:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4667:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4668:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4669:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
4670:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
4671:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
4672:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
4673:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
4674:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
4675:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
4676:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = store_xdir(&dj);
4677:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else
4678:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4679:Middlewares/Third_Party/FatFs/src/ff.c **** 				{
4680:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir = dj.dir;
4681:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);	/* Created time */
4682:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir, dcl);				/* Table start cluster */
4683:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] = AM_DIR;				/* Attribute */
4684:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
4685:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4686:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
4687:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_fs(fs);
4688:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 111


4689:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
4690:Middlewares/Third_Party/FatFs/src/ff.c **** 				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
4691:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4692:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4693:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4694:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4695:Middlewares/Third_Party/FatFs/src/ff.c **** 
4696:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4697:Middlewares/Third_Party/FatFs/src/ff.c **** }
4698:Middlewares/Third_Party/FatFs/src/ff.c **** 
4699:Middlewares/Third_Party/FatFs/src/ff.c **** 
4700:Middlewares/Third_Party/FatFs/src/ff.c **** 
4701:Middlewares/Third_Party/FatFs/src/ff.c **** 
4702:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4703:Middlewares/Third_Party/FatFs/src/ff.c **** /* Rename a File/Directory                                               */
4704:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4705:Middlewares/Third_Party/FatFs/src/ff.c **** 
4706:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_rename (
4707:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
4708:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path_new	/* Pointer to the new name */
4709:Middlewares/Third_Party/FatFs/src/ff.c **** )
4710:Middlewares/Third_Party/FatFs/src/ff.c **** {
4711:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4712:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR djo, djn;
4713:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4714:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
4715:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD dw;
4716:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4717:Middlewares/Third_Party/FatFs/src/ff.c **** 
4718:Middlewares/Third_Party/FatFs/src/ff.c **** 
4719:Middlewares/Third_Party/FatFs/src/ff.c **** 	get_ldnumber(&path_new);						/* Snip drive number of new name off */
4720:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
4721:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4722:Middlewares/Third_Party/FatFs/src/ff.c **** 		djo.obj.fs = fs;
4723:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4724:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
4725:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
4726:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
4727:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
4728:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = chk_lock(&djo, 2);
4729:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4730:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4731:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {						/* Object to be renamed is found */
4732:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4733:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {	/* At exFAT */
4734:Middlewares/Third_Party/FatFs/src/ff.c **** 				BYTE nf, nn;
4735:Middlewares/Third_Party/FatFs/src/ff.c **** 				WORD nh;
4736:Middlewares/Third_Party/FatFs/src/ff.c **** 
4737:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
4738:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(&djn, &djo, sizeof djo);
4739:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
4740:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
4741:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
4742:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4743:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
4744:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
4745:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 112


4746:Middlewares/Third_Party/FatFs/src/ff.c **** 						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
4747:Middlewares/Third_Party/FatFs/src/ff.c **** 						nh = ld_word(fs->dirbuf + XDIR_NameHash);
4748:Middlewares/Third_Party/FatFs/src/ff.c **** 						mem_cpy(fs->dirbuf, buf, SZDIRE * 2);
4749:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
4750:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_word(fs->dirbuf + XDIR_NameHash, nh);
4751:Middlewares/Third_Party/FatFs/src/ff.c **** /* Start of critical section where an interruption can cause a cross-link */
4752:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = store_xdir(&djn);
4753:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4754:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4755:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
4756:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4757:Middlewares/Third_Party/FatFs/src/ff.c **** 			{	/* At FAT12/FAT16/FAT32 */
4758:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
4759:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
4760:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
4761:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
4762:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
4763:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4764:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
4765:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
4766:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
4767:Middlewares/Third_Party/FatFs/src/ff.c **** 						dir = djn.dir;					/* Copy information about object except name */
4768:Middlewares/Third_Party/FatFs/src/ff.c **** 						mem_cpy(dir + 13, buf + 2, 19);
4769:Middlewares/Third_Party/FatFs/src/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
4770:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
4771:Middlewares/Third_Party/FatFs/src/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
4772:Middlewares/Third_Party/FatFs/src/ff.c **** 							dw = clust2sect(fs, ld_clust(fs, dir));
4773:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (!dw) {
4774:Middlewares/Third_Party/FatFs/src/ff.c **** 								res = FR_INT_ERR;
4775:Middlewares/Third_Party/FatFs/src/ff.c **** 							} else {
4776:Middlewares/Third_Party/FatFs/src/ff.c **** /* Start of critical section where an interruption can cause a cross-link */
4777:Middlewares/Third_Party/FatFs/src/ff.c **** 								res = move_window(fs, dw);
4778:Middlewares/Third_Party/FatFs/src/ff.c **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
4779:Middlewares/Third_Party/FatFs/src/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
4780:Middlewares/Third_Party/FatFs/src/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
4781:Middlewares/Third_Party/FatFs/src/ff.c **** 									fs->wflag = 1;
4782:Middlewares/Third_Party/FatFs/src/ff.c **** 								}
4783:Middlewares/Third_Party/FatFs/src/ff.c **** 							}
4784:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4785:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4786:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4787:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4788:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4789:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_remove(&djo);		/* Remove old entry */
4790:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
4791:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_fs(fs);
4792:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4793:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4794:Middlewares/Third_Party/FatFs/src/ff.c **** /* End of the critical section */
4795:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4796:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4797:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4798:Middlewares/Third_Party/FatFs/src/ff.c **** 
4799:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4800:Middlewares/Third_Party/FatFs/src/ff.c **** }
4801:Middlewares/Third_Party/FatFs/src/ff.c **** 
4802:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 113


4803:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_MINIMIZE == 0 */
4804:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
4805:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_MINIMIZE <= 2 */
4806:Middlewares/Third_Party/FatFs/src/ff.c **** 
4807:Middlewares/Third_Party/FatFs/src/ff.c **** 
4808:Middlewares/Third_Party/FatFs/src/ff.c **** 
4809:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_CHMOD && !_FS_READONLY
4810:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4811:Middlewares/Third_Party/FatFs/src/ff.c **** /* Change Attribute                                                      */
4812:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4813:Middlewares/Third_Party/FatFs/src/ff.c **** 
4814:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_chmod (
4815:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
4816:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE attr,			/* Attribute bits */
4817:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE mask			/* Attribute mask to change */
4818:Middlewares/Third_Party/FatFs/src/ff.c **** )
4819:Middlewares/Third_Party/FatFs/src/ff.c **** {
4820:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4821:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
4822:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4823:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4824:Middlewares/Third_Party/FatFs/src/ff.c **** 
4825:Middlewares/Third_Party/FatFs/src/ff.c **** 
4826:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
4827:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
4828:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4829:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4830:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
4831:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
4832:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
4833:Middlewares/Third_Party/FatFs/src/ff.c **** 			mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
4834:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4835:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
4836:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribu
4837:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = store_xdir(&dj);
4838:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
4839:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4840:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
4841:Middlewares/Third_Party/FatFs/src/ff.c **** 				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change 
4842:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->wflag = 1;
4843:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4844:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4845:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = sync_fs(fs);
4846:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4847:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4848:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4849:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4850:Middlewares/Third_Party/FatFs/src/ff.c **** 
4851:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4852:Middlewares/Third_Party/FatFs/src/ff.c **** }
4853:Middlewares/Third_Party/FatFs/src/ff.c **** 
4854:Middlewares/Third_Party/FatFs/src/ff.c **** 
4855:Middlewares/Third_Party/FatFs/src/ff.c **** 
4856:Middlewares/Third_Party/FatFs/src/ff.c **** 
4857:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4858:Middlewares/Third_Party/FatFs/src/ff.c **** /* Change Timestamp                                                      */
4859:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 114


4860:Middlewares/Third_Party/FatFs/src/ff.c **** 
4861:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_utime (
4862:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Pointer to the file/directory name */
4863:Middlewares/Third_Party/FatFs/src/ff.c **** 	const FILINFO* fno	/* Pointer to the time stamp to be set */
4864:Middlewares/Third_Party/FatFs/src/ff.c **** )
4865:Middlewares/Third_Party/FatFs/src/ff.c **** {
4866:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4867:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
4868:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4869:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4870:Middlewares/Third_Party/FatFs/src/ff.c **** 
4871:Middlewares/Third_Party/FatFs/src/ff.c **** 
4872:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
4873:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
4874:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4875:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4876:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
4877:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
4878:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
4879:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4880:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
4881:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
4882:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = store_xdir(&dj);
4883:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
4884:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4885:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
4886:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
4887:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->wflag = 1;
4888:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4889:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4890:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = sync_fs(fs);
4891:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4892:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4893:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4894:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4895:Middlewares/Third_Party/FatFs/src/ff.c **** 
4896:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4897:Middlewares/Third_Party/FatFs/src/ff.c **** }
4898:Middlewares/Third_Party/FatFs/src/ff.c **** 
4899:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_CHMOD && !_FS_READONLY */
4900:Middlewares/Third_Party/FatFs/src/ff.c **** 
4901:Middlewares/Third_Party/FatFs/src/ff.c **** 
4902:Middlewares/Third_Party/FatFs/src/ff.c **** 
4903:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LABEL
4904:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4905:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get Volume Label                                                      */
4906:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4907:Middlewares/Third_Party/FatFs/src/ff.c **** 
4908:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_getlabel (
4909:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
4910:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR* label,		/* Pointer to a buffer to return the volume label */
4911:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
4912:Middlewares/Third_Party/FatFs/src/ff.c **** )
4913:Middlewares/Third_Party/FatFs/src/ff.c **** {
4914:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4915:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
4916:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 115


4917:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT si, di;
4918:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE || _FS_EXFAT
4919:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR w;
4920:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4921:Middlewares/Third_Party/FatFs/src/ff.c **** 
4922:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4923:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, 0);
4924:Middlewares/Third_Party/FatFs/src/ff.c **** 
4925:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get volume label */
4926:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK && label) {
4927:Middlewares/Third_Party/FatFs/src/ff.c **** 		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
4928:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_sdi(&dj, 0);
4929:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
4930:Middlewares/Third_Party/FatFs/src/ff.c **** 		 	res = dir_read(&dj, 1);			/* Find a volume label entry */
4931:Middlewares/Third_Party/FatFs/src/ff.c **** 		 	if (res == FR_OK) {
4932:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4933:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4934:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (si = di = 0; si < dj.dir[XDIR_NumLabel]; si++) {	/* Extract volume label from 83 entry */
4935:Middlewares/Third_Party/FatFs/src/ff.c **** 						w = ld_word(dj.dir + XDIR_Label + si * 2);
4936:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
4937:Middlewares/Third_Party/FatFs/src/ff.c **** 						label[di++] = w;
4938:Middlewares/Third_Party/FatFs/src/ff.c **** #else
4939:Middlewares/Third_Party/FatFs/src/ff.c **** 						w = ff_convert(w, 0);	/* Unicode -> OEM */
4940:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (w == 0) w = '?';	/* Replace wrong character */
4941:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (_DF1S && w >= 0x100) label[di++] = (char)(w >> 8);
4942:Middlewares/Third_Party/FatFs/src/ff.c **** 						label[di++] = (char)w;
4943:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4944:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4945:Middlewares/Third_Party/FatFs/src/ff.c **** 					label[di] = 0;
4946:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else
4947:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4948:Middlewares/Third_Party/FatFs/src/ff.c **** 				{
4949:Middlewares/Third_Party/FatFs/src/ff.c **** 					si = di = 0;		/* Extract volume label from AM_VOL entry with code comversion */
4950:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
4951:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
4952:Middlewares/Third_Party/FatFs/src/ff.c **** 						w = (si < 11) ? dj.dir[si++] : ' ';
4953:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (IsDBCS1(w) && si < 11 && IsDBCS2(dj.dir[si])) {
4954:Middlewares/Third_Party/FatFs/src/ff.c **** 							w = w << 8 | dj.dir[si++];
4955:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4956:Middlewares/Third_Party/FatFs/src/ff.c **** 						label[di++] = ff_convert(w, 1);	/* OEM -> Unicode */
4957:Middlewares/Third_Party/FatFs/src/ff.c **** #else
4958:Middlewares/Third_Party/FatFs/src/ff.c **** 						label[di++] = dj.dir[si++];
4959:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4960:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (di < 11);
4961:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {				/* Truncate trailing spaces */
4962:Middlewares/Third_Party/FatFs/src/ff.c **** 						label[di] = 0;
4963:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (di == 0) break;
4964:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (label[--di] == ' ');
4965:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4966:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4967:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4968:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
4969:Middlewares/Third_Party/FatFs/src/ff.c **** 			label[0] = 0;
4970:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
4971:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4972:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4973:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 116


4974:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get volume serial number */
4975:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK && vsn) {
4976:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, fs->volbase);
4977:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
4978:Middlewares/Third_Party/FatFs/src/ff.c **** 			switch (fs->fs_type) {
4979:Middlewares/Third_Party/FatFs/src/ff.c **** 			case FS_EXFAT:
4980:Middlewares/Third_Party/FatFs/src/ff.c **** 				di = BPB_VolIDEx; break;
4981:Middlewares/Third_Party/FatFs/src/ff.c **** 
4982:Middlewares/Third_Party/FatFs/src/ff.c **** 			case FS_FAT32:
4983:Middlewares/Third_Party/FatFs/src/ff.c **** 				di = BS_VolID32; break;
4984:Middlewares/Third_Party/FatFs/src/ff.c **** 
4985:Middlewares/Third_Party/FatFs/src/ff.c **** 			default:
4986:Middlewares/Third_Party/FatFs/src/ff.c **** 				di = BS_VolID;
4987:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4988:Middlewares/Third_Party/FatFs/src/ff.c **** 			*vsn = ld_dword(fs->win + di);
4989:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4990:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4991:Middlewares/Third_Party/FatFs/src/ff.c **** 
4992:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4993:Middlewares/Third_Party/FatFs/src/ff.c **** }
4994:Middlewares/Third_Party/FatFs/src/ff.c **** 
4995:Middlewares/Third_Party/FatFs/src/ff.c **** 
4996:Middlewares/Third_Party/FatFs/src/ff.c **** 
4997:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4998:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4999:Middlewares/Third_Party/FatFs/src/ff.c **** /* Set Volume Label                                                      */
5000:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5001:Middlewares/Third_Party/FatFs/src/ff.c **** 
5002:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_setlabel (
5003:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* label	/* Pointer to the volume label to set */
5004:Middlewares/Third_Party/FatFs/src/ff.c **** )
5005:Middlewares/Third_Party/FatFs/src/ff.c **** {
5006:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
5007:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
5008:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
5009:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE dirvn[22];
5010:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, j, slen;
5011:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR w;
5012:Middlewares/Third_Party/FatFs/src/ff.c **** 	static const char badchr[] = "\"*+,.:;<=>\?[]|\x7F";
5013:Middlewares/Third_Party/FatFs/src/ff.c **** 
5014:Middlewares/Third_Party/FatFs/src/ff.c **** 
5015:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
5016:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&label, &fs, FA_WRITE);
5017:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
5018:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
5019:Middlewares/Third_Party/FatFs/src/ff.c **** 
5020:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get length of given volume label */
5021:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (slen = 0; (UINT)label[slen] >= ' '; slen++) ;	/* Get name length */
5022:Middlewares/Third_Party/FatFs/src/ff.c **** 
5023:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
5024:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
5025:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = j = 0; i < slen; ) {	/* Create volume label in directory form */
5026:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = label[i++];
5027:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
5028:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (IsDBCS1(w)) {
5029:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = (i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
5030:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 117


5031:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = ff_convert(w, 1);
5032:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5033:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (w == 0 || chk_chr(badchr, w) || j == 22) {	/* Check validity check validity of the volume la
5034:Middlewares/Third_Party/FatFs/src/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
5035:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5036:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(dirvn + j, w); j += 2;
5037:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5038:Middlewares/Third_Party/FatFs/src/ff.c **** 		slen = j;
5039:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
5040:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5041:Middlewares/Third_Party/FatFs/src/ff.c **** 	{	/* On the FAT12/16/32 volume */
5042:Middlewares/Third_Party/FatFs/src/ff.c **** 		for ( ; slen && label[slen - 1] == ' '; slen--) ;	/* Remove trailing spaces */
5043:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (slen) {		/* Is there a volume label to be set? */
5044:Middlewares/Third_Party/FatFs/src/ff.c **** 			dirvn[0] = 0; i = j = 0;	/* Create volume label in directory form */
5045:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {
5046:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
5047:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = ff_convert(ff_wtoupper(label[i++]), 0);
5048:Middlewares/Third_Party/FatFs/src/ff.c **** #else
5049:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = (BYTE)label[i++];
5050:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (IsDBCS1(w)) {
5051:Middlewares/Third_Party/FatFs/src/ff.c **** 					w = (j < 10 && i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
5052:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5053:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
5054:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
5055:Middlewares/Third_Party/FatFs/src/ff.c **** #else
5056:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
5057:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
5058:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
5059:Middlewares/Third_Party/FatFs/src/ff.c **** #else
5060:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
5061:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5062:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5063:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5064:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (w == 0 || chk_chr(badchr, w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) {	/* Reject invalid ch
5065:Middlewares/Third_Party/FatFs/src/ff.c **** 					LEAVE_FF(fs, FR_INVALID_NAME);
5066:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5067:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (w >= 0x100) dirvn[j++] = (BYTE)(w >> 8);
5068:Middlewares/Third_Party/FatFs/src/ff.c **** 				dirvn[j++] = (BYTE)w;
5069:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (i < slen);
5070:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (j < 11) dirvn[j++] = ' ';	/* Fill remaining name field */
5071:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
5072:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5073:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5074:Middlewares/Third_Party/FatFs/src/ff.c **** 
5075:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Set volume label */
5076:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.sclust = 0;		/* Open root directory */
5077:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_sdi(&dj, 0);
5078:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
5079:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_read(&dj, 1);	/* Get volume label entry */
5080:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
5081:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5082:Middlewares/Third_Party/FatFs/src/ff.c **** 				dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);	/* Change the volume label */
5083:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
5084:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
5085:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (slen) {
5086:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
5087:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 118


5088:Middlewares/Third_Party/FatFs/src/ff.c **** 					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
5089:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5090:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5091:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
5092:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = sync_fs(fs);
5093:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {			/* No volume label entry is found or error */
5094:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_NO_FILE) {
5095:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_OK;
5096:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (slen) {	/* Create a volume label entry */
5097:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry */
5098:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
5099:Middlewares/Third_Party/FatFs/src/ff.c **** 						mem_set(dj.dir, 0, SZDIRE);	/* Clear the entry */
5100:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5101:Middlewares/Third_Party/FatFs/src/ff.c **** 							dj.dir[XDIR_Type] = 0x83;		/* Create 83 entry */
5102:Middlewares/Third_Party/FatFs/src/ff.c **** 							dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);
5103:Middlewares/Third_Party/FatFs/src/ff.c **** 							mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
5104:Middlewares/Third_Party/FatFs/src/ff.c **** 						} else {
5105:Middlewares/Third_Party/FatFs/src/ff.c **** 							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
5106:Middlewares/Third_Party/FatFs/src/ff.c **** 							mem_cpy(dj.dir, dirvn, 11);
5107:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
5108:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
5109:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = sync_fs(fs);
5110:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
5111:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5112:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5113:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5114:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5115:Middlewares/Third_Party/FatFs/src/ff.c **** 
5116:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
5117:Middlewares/Third_Party/FatFs/src/ff.c **** }
5118:Middlewares/Third_Party/FatFs/src/ff.c **** 
5119:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
5120:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_LABEL */
5121:Middlewares/Third_Party/FatFs/src/ff.c **** 
5122:Middlewares/Third_Party/FatFs/src/ff.c **** 
5123:Middlewares/Third_Party/FatFs/src/ff.c **** 
5124:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_EXPAND && !_FS_READONLY
5125:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5126:Middlewares/Third_Party/FatFs/src/ff.c **** /* Allocate a Contiguous Blocks to the File                              */
5127:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5128:Middlewares/Third_Party/FatFs/src/ff.c **** 
5129:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_expand (
5130:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
5131:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t fsz,	/* File size to be expanded to */
5132:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE opt		/* Operation mode 0:Find and prepare or 1:Find and allocate */
5133:Middlewares/Third_Party/FatFs/src/ff.c **** )
5134:Middlewares/Third_Party/FatFs/src/ff.c **** {
5135:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
5136:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
5137:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD n, clst, stcl, scl, ncl, tcl, lclst;
5138:Middlewares/Third_Party/FatFs/src/ff.c **** 
5139:Middlewares/Third_Party/FatFs/src/ff.c **** 
5140:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5141:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5142:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
5143:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
5144:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type != FS_EXFAT && fsz >= 0x100000000) LEAVE_FF(fs, FR_DENIED);	/* Check if in size li
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 119


5145:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5146:Middlewares/Third_Party/FatFs/src/ff.c **** 	n = (DWORD)fs->csize * SS(fs);	/* Cluster size */
5147:Middlewares/Third_Party/FatFs/src/ff.c **** 	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 0);	/* Number of clusters required */
5148:Middlewares/Third_Party/FatFs/src/ff.c **** 	stcl = fs->last_clst; lclst = 0;
5149:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
5150:Middlewares/Third_Party/FatFs/src/ff.c **** 
5151:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
5152:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
5153:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = find_bitmap(fs, stcl, tcl);			/* Find a contiguous cluster block */
5154:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (scl == 0) res = FR_DENIED;				/* No contiguous cluster block was found */
5155:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR;
5156:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {	/* A contiguous free area is found */
5157:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (opt) {		/* Allocate it now */
5158:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = change_bitmap(fs, scl, tcl, 1);	/* Mark the cluster block 'in use' */
5159:Middlewares/Third_Party/FatFs/src/ff.c **** 				lclst = scl + tcl - 1;
5160:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {		/* Set it as suggested point for next allocation */
5161:Middlewares/Third_Party/FatFs/src/ff.c **** 				lclst = scl - 1;
5162:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5163:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5164:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
5165:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5166:Middlewares/Third_Party/FatFs/src/ff.c **** 	{
5167:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = clst = stcl; ncl = 0;
5168:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {	/* Find a contiguous cluster block */
5169:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = get_fat(&fp->obj, clst);
5170:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (++clst >= fs->n_fatent) clst = 2;
5171:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (n == 1) { res = FR_INT_ERR; break; }
5172:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
5173:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (n == 0) {	/* Is it a free cluster? */
5174:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (++ncl == tcl) break;	/* Break if a contiguous cluster block is found */
5175:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
5176:Middlewares/Third_Party/FatFs/src/ff.c **** 				scl = clst; ncl = 0;		/* Not a free cluster */
5177:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5178:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst == stcl) { res = FR_DENIED; break; }	/* No contiguous cluster? */
5179:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5180:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {	/* A contiguous free area is found */
5181:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (opt) {		/* Allocate it now */
5182:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
5183:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = put_fat(fs, clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
5184:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res != FR_OK) break;
5185:Middlewares/Third_Party/FatFs/src/ff.c **** 					lclst = clst;
5186:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5187:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {		/* Set it as suggested point for next allocation */
5188:Middlewares/Third_Party/FatFs/src/ff.c **** 				lclst = scl - 1;
5189:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5190:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5191:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5192:Middlewares/Third_Party/FatFs/src/ff.c **** 
5193:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
5194:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->last_clst = lclst;		/* Set suggested start cluster to start next */
5195:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (opt) {	/* Is it allocated now? */
5196:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.sclust = scl;		/* Update object allocation information */
5197:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.objsize = fsz;
5198:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (_FS_EXFAT) fp->obj.stat = 2;	/* Set status 'contiguous chain' */
5199:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->flag |= FA_MODIFIED;
5200:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->free_clst <= fs->n_fatent - 2) {	/* Update FSINFO */
5201:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->free_clst -= tcl;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 120


5202:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->fsi_flag |= 1;
5203:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5204:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5205:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5206:Middlewares/Third_Party/FatFs/src/ff.c **** 
5207:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
5208:Middlewares/Third_Party/FatFs/src/ff.c **** }
5209:Middlewares/Third_Party/FatFs/src/ff.c **** 
5210:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_EXPAND && !_FS_READONLY */
5211:Middlewares/Third_Party/FatFs/src/ff.c **** 
5212:Middlewares/Third_Party/FatFs/src/ff.c **** 
5213:Middlewares/Third_Party/FatFs/src/ff.c **** 
5214:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FORWARD
5215:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5216:Middlewares/Third_Party/FatFs/src/ff.c **** /* Forward data to the stream directly                                   */
5217:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5218:Middlewares/Third_Party/FatFs/src/ff.c **** 
5219:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_forward (
5220:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp, 						/* Pointer to the file object */
5221:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
5222:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT btf,						/* Number of bytes to forward */
5223:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT* bf						/* Pointer to number of bytes forwarded */
5224:Middlewares/Third_Party/FatFs/src/ff.c **** )
5225:Middlewares/Third_Party/FatFs/src/ff.c **** {
5226:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
5227:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
5228:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst, sect;
5229:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t remain;
5230:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT rcnt, csect;
5231:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *dbuf;
5232:Middlewares/Third_Party/FatFs/src/ff.c **** 
5233:Middlewares/Third_Party/FatFs/src/ff.c **** 
5234:Middlewares/Third_Party/FatFs/src/ff.c **** 	*bf = 0;	/* Clear transfer byte counter */
5235:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5236:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5237:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
5238:Middlewares/Third_Party/FatFs/src/ff.c **** 
5239:Middlewares/Third_Party/FatFs/src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
5240:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
5241:Middlewares/Third_Party/FatFs/src/ff.c **** 
5242:Middlewares/Third_Party/FatFs/src/ff.c **** 	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream goes busy */
5243:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
5244:Middlewares/Third_Party/FatFs/src/ff.c **** 		csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
5245:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {				/* On the sector boundary? */
5246:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (csect == 0) {						/* On the cluster boundary? */
5247:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
5248:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.sclust : get_fat(&fp->obj, fp->clust);
5249:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst <= 1) ABORT(fs, FR_INT_ERR);
5250:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
5251:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;					/* Update current cluster */
5252:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5253:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5254:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = clust2sect(fs, fp->clust);			/* Get current data sector */
5255:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!sect) ABORT(fs, FR_INT_ERR);
5256:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect += csect;
5257:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
5258:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window to the file dat
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 121


5259:Middlewares/Third_Party/FatFs/src/ff.c **** 		dbuf = fs->win;
5260:Middlewares/Third_Party/FatFs/src/ff.c **** #else
5261:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->sect != sect) {		/* Fill sector cache with file data */
5262:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
5263:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
5264:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5265:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
5266:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5267:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5268:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5269:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5270:Middlewares/Third_Party/FatFs/src/ff.c **** 		dbuf = fp->buf;
5271:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5272:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->sect = sect;
5273:Middlewares/Third_Party/FatFs/src/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
5274:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rcnt > btf) rcnt = btf;					/* Clip it by btr if needed */
5275:Middlewares/Third_Party/FatFs/src/ff.c **** 		rcnt = (*func)(dbuf + ((UINT)fp->fptr % SS(fs)), rcnt);	/* Forward the file data */
5276:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!rcnt) ABORT(fs, FR_INT_ERR);
5277:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5278:Middlewares/Third_Party/FatFs/src/ff.c **** 
5279:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, FR_OK);
5280:Middlewares/Third_Party/FatFs/src/ff.c **** }
5281:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_FORWARD */
5282:Middlewares/Third_Party/FatFs/src/ff.c **** 
5283:Middlewares/Third_Party/FatFs/src/ff.c **** 
5284:Middlewares/Third_Party/FatFs/src/ff.c **** 
5285:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_MKFS && !_FS_READONLY
5286:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5287:Middlewares/Third_Party/FatFs/src/ff.c **** /* Create an FAT/exFAT volume                                            */
5288:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5289:Middlewares/Third_Party/FatFs/src/ff.c **** 
5290:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_mkfs (
5291:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Logical drive number */
5292:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE opt,			/* Format option */
5293:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD au,			/* Size of allocation unit (cluster) [byte] */
5294:Middlewares/Third_Party/FatFs/src/ff.c **** 	void* work,			/* Pointer to working buffer */
5295:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT len			/* Size of working buffer */
5296:Middlewares/Third_Party/FatFs/src/ff.c **** )
5297:Middlewares/Third_Party/FatFs/src/ff.c **** {
5298:Middlewares/Third_Party/FatFs/src/ff.c **** 	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
5299:Middlewares/Third_Party/FatFs/src/ff.c **** 	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
5300:Middlewares/Third_Party/FatFs/src/ff.c **** 	static const WORD cst[] = {1, 4, 16, 64, 256, 512, 0};	/* Cluster size boundary for FAT12/16 volum
5301:Middlewares/Third_Party/FatFs/src/ff.c **** 	static const WORD cst32[] = {1, 2, 4, 8, 16, 32, 0};	/* Cluster size boundary for FAT32 volume (12
5302:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE fmt, sys, *buf, *pte, pdrv, part;
5303:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD ss;
5304:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD szb_buf, sz_buf, sz_blk, n_clst, pau, sect, nsect, n;
5305:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD b_vol, b_fat, b_data;				/* Base LBA for volume, fat, data */
5306:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sz_vol, sz_rsv, sz_fat, sz_dir;	/* Size for volume, fat, dir, data */
5307:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
5308:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol;
5309:Middlewares/Third_Party/FatFs/src/ff.c **** 	DSTATUS stat;
5310:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_TRIM || _FS_EXFAT
5311:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD tbl[3];
5312:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5313:Middlewares/Third_Party/FatFs/src/ff.c **** 
5314:Middlewares/Third_Party/FatFs/src/ff.c **** 
5315:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Check mounted drive and clear work area */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 122


5316:Middlewares/Third_Party/FatFs/src/ff.c **** 	vol = get_ldnumber(&path);					/* Get target logical drive */
5317:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
5318:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
5319:Middlewares/Third_Party/FatFs/src/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
5320:Middlewares/Third_Party/FatFs/src/ff.c **** 	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
5321:Middlewares/Third_Party/FatFs/src/ff.c **** 
5322:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Check physical drive status */
5323:Middlewares/Third_Party/FatFs/src/ff.c **** 	stat = disk_initialize(pdrv);
5324:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
5325:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
5326:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & 
5327:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
5328:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
5329:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
5330:Middlewares/Third_Party/FatFs/src/ff.c **** #else
5331:Middlewares/Third_Party/FatFs/src/ff.c **** 	ss = _MAX_SS;
5332:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5333:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Che
5334:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
5335:Middlewares/Third_Party/FatFs/src/ff.c **** 
5336:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get working buffer */
5337:Middlewares/Third_Party/FatFs/src/ff.c **** 	buf = (BYTE*)work;		/* Working buffer */
5338:Middlewares/Third_Party/FatFs/src/ff.c **** 	sz_buf = len / ss;		/* Size of working buffer (sector) */
5339:Middlewares/Third_Party/FatFs/src/ff.c **** 	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
5340:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!szb_buf) return FR_MKFS_ABORTED;
5341:Middlewares/Third_Party/FatFs/src/ff.c **** 
5342:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Determine where the volume to be located (b_vol, sz_vol) */
5343:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (_MULTI_PARTITION && part != 0) {
5344:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Get partition information from partition table in the MBR */
5345:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Load MBR */
5346:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_word(buf + BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;	/* Check if MBR is valid */
5347:Middlewares/Third_Party/FatFs/src/ff.c **** 		pte = buf + (MBR_Table + (part - 1) * SZ_PTE);
5348:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
5349:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
5350:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
5351:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
5352:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create a single-partition in this function */
5353:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
5354:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
5355:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
5356:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_vol -= b_vol;						/* Volume size */
5357:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5358:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
5359:Middlewares/Third_Party/FatFs/src/ff.c **** 
5360:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Pre-determine the FAT type */
5361:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
5362:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
5363:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms 
5364:Middlewares/Third_Party/FatFs/src/ff.c **** 				fmt = FS_EXFAT; break;
5365:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5366:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5367:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
5368:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (opt & FM_FAT32) {	/* FAT32 possible? */
5369:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
5370:Middlewares/Third_Party/FatFs/src/ff.c **** 				fmt = FS_FAT32; break;
5371:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5372:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 123


5373:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
5374:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT16;
5375:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (0);
5376:Middlewares/Third_Party/FatFs/src/ff.c **** 
5377:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
5378:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt == FS_EXFAT) {	/* Create an exFAT volume */
5379:Middlewares/Third_Party/FatFs/src/ff.c **** 		DWORD szb_bit, szb_case, sum, nb, cl;
5380:Middlewares/Third_Party/FatFs/src/ff.c **** 		WCHAR ch, si;
5381:Middlewares/Third_Party/FatFs/src/ff.c **** 		UINT j, st;
5382:Middlewares/Third_Party/FatFs/src/ff.c **** 		BYTE b;
5383:Middlewares/Third_Party/FatFs/src/ff.c **** 
5384:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < 0x1000) return FR_MKFS_ABORTED;	/* Too small volume? */
5385:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_TRIM
5386:Middlewares/Third_Party/FatFs/src/ff.c **** 		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area may be erased *
5387:Middlewares/Third_Party/FatFs/src/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, tbl);
5388:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5389:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Determine FAT location, data location and number of clusters */
5390:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!au) {	/* au auto-selection */
5391:Middlewares/Third_Party/FatFs/src/ff.c **** 			au = 8;
5392:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (sz_vol >= 0x80000) au = 64;		/* >= 512Ks */
5393:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (sz_vol >= 0x4000000) au = 256;	/* >= 64Ms */
5394:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5395:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_fat = b_vol + 32;										/* FAT start at offset 32 */
5396:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_fat = ((sz_vol / au + 2) * 4 + ss - 1) / ss;			/* Number of FAT sectors */
5397:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_data = (b_fat + sz_fat + sz_blk - 1) & ~(sz_blk - 1);	/* Align data area to the erase block bou
5398:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (b_data >= sz_vol / 2) return FR_MKFS_ABORTED;		/* Too small volume? */
5399:Middlewares/Third_Party/FatFs/src/ff.c **** 		n_clst = (sz_vol - (b_data - b_vol)) / au;				/* Number of clusters */
5400:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n_clst <16) return FR_MKFS_ABORTED;					/* Too few clusters? */
5401:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n_clst > MAX_EXFAT) return FR_MKFS_ABORTED;			/* Too many clusters? */
5402:Middlewares/Third_Party/FatFs/src/ff.c **** 
5403:Middlewares/Third_Party/FatFs/src/ff.c **** 		szb_bit = (n_clst + 7) / 8;						/* Size of allocation bitmap */
5404:Middlewares/Third_Party/FatFs/src/ff.c **** 		tbl[0] = (szb_bit + au * ss - 1) / (au * ss);	/* Number of allocation bitmap clusters */
5405:Middlewares/Third_Party/FatFs/src/ff.c **** 
5406:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create a compressed up-case table */
5407:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_data + au * tbl[0];	/* Table start sector */
5408:Middlewares/Third_Party/FatFs/src/ff.c **** 		sum = 0;						/* Table checksum to be stored in the 82 entry */
5409:Middlewares/Third_Party/FatFs/src/ff.c **** 		st = si = i = j = szb_case = 0;
5410:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
5411:Middlewares/Third_Party/FatFs/src/ff.c **** 			switch (st) {
5412:Middlewares/Third_Party/FatFs/src/ff.c **** 			case 0:
5413:Middlewares/Third_Party/FatFs/src/ff.c **** 				ch = ff_wtoupper(si);	/* Get an up-case char */
5414:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ch != si) {
5415:Middlewares/Third_Party/FatFs/src/ff.c **** 					si++; break;		/* Store the up-case char if exist */
5416:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5417:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get r
5418:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (j >= 128) {
5419:Middlewares/Third_Party/FatFs/src/ff.c **** 					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
5420:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5421:Middlewares/Third_Party/FatFs/src/ff.c **** 				st = 1;			/* Do not compress short run */
5422:Middlewares/Third_Party/FatFs/src/ff.c **** 				/* go to next case */
5423:Middlewares/Third_Party/FatFs/src/ff.c **** 			case 1:
5424:Middlewares/Third_Party/FatFs/src/ff.c **** 				ch = si++;		/* Fill the short run */
5425:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (--j == 0) st = 0;
5426:Middlewares/Third_Party/FatFs/src/ff.c **** 				break;
5427:Middlewares/Third_Party/FatFs/src/ff.c **** 
5428:Middlewares/Third_Party/FatFs/src/ff.c **** 			default:
5429:Middlewares/Third_Party/FatFs/src/ff.c **** 				ch = (WCHAR)j; si += j;	/* Number of chars to skip */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 124


5430:Middlewares/Third_Party/FatFs/src/ff.c **** 				st = 0;
5431:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5432:Middlewares/Third_Party/FatFs/src/ff.c **** 			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
5433:Middlewares/Third_Party/FatFs/src/ff.c **** 			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
5434:Middlewares/Third_Party/FatFs/src/ff.c **** 			i += 2; szb_case += 2;
5435:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!si || i == szb_buf) {		/* Write buffered data when buffer full or end of process */
5436:Middlewares/Third_Party/FatFs/src/ff.c **** 				n = (i + ss - 1) / ss;
5437:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5438:Middlewares/Third_Party/FatFs/src/ff.c **** 				sect += n; i = 0;
5439:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5440:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (si);
5441:Middlewares/Third_Party/FatFs/src/ff.c **** 		tbl[1] = (szb_case + au * ss - 1) / (au * ss);	/* Number of up-case table clusters */
5442:Middlewares/Third_Party/FatFs/src/ff.c **** 		tbl[2] = 1;										/* Number of root dir clusters */
5443:Middlewares/Third_Party/FatFs/src/ff.c **** 
5444:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Initialize the allocation bitmap */
5445:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of sectors */
5446:Middlewares/Third_Party/FatFs/src/ff.c **** 		nb = tbl[0] + tbl[1] + tbl[2];					/* Number of clusters in-use by system */
5447:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
5448:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, szb_buf);
5449:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (i = 0; nb >= 8 && i < szb_buf; buf[i++] = 0xFF, nb -= 8) ;
5450:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (b = 1; nb && i < szb_buf; buf[i] |= b, b <<= 1, nb--) ;
5451:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
5452:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5453:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
5454:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (nsect);
5455:Middlewares/Third_Party/FatFs/src/ff.c **** 
5456:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Initialize the FAT */
5457:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
5458:Middlewares/Third_Party/FatFs/src/ff.c **** 		j = nb = cl = 0;
5459:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
5460:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, szb_buf); i = 0;	/* Clear work area and reset write index */
5461:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cl == 0) {	/* Set entry 0 and 1 */
5462:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + i, 0xFFFFFFF8); i += 4; cl++;
5463:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + i, 0xFFFFFFFF); i += 4; cl++;
5464:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5465:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {			/* Create chains of bitmap, up-case and root dir */
5466:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (nb && i < szb_buf) {			/* Create a chain */
5467:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
5468:Middlewares/Third_Party/FatFs/src/ff.c **** 					i += 4; cl++; nb--;
5469:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5470:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!nb && j < 3) nb = tbl[j++];	/* Next chain */
5471:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (nb && i < szb_buf);
5472:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
5473:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5474:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
5475:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (nsect);
5476:Middlewares/Third_Party/FatFs/src/ff.c **** 
5477:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Initialize the root directory */
5478:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_set(buf, 0, szb_buf);
5479:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[SZDIRE * 0 + 0] = 0x83;		/* 83 entry (volume label) */
5480:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[SZDIRE * 1 + 0] = 0x81;		/* 81 entry (allocation bitmap) */
5481:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + SZDIRE * 1 + 20, 2);
5482:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + SZDIRE * 1 + 24, szb_bit);
5483:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[SZDIRE * 2 + 0] = 0x82;		/* 82 entry (up-case table) */
5484:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 4, sum);
5485:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);
5486:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 24, szb_case);
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 125


5487:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_data + au * (tbl[0] + tbl[1]);	nsect = au;	/* Start of the root directory and number of 
5488:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {	/* Fill root directory sectors */
5489:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
5490:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5491:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5492:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
5493:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (nsect);
5494:Middlewares/Third_Party/FatFs/src/ff.c **** 
5495:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create two set of the exFAT VBR blocks */
5496:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_vol;
5497:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (n = 0; n < 2; n++) {
5498:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Main record (+0) */
5499:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5500:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
5501:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
5502:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
5503:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_FatOfsEx, b_fat - b_vol);			/* FAT offset [sector] */
5504:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
5505:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_DataOfsEx, b_data - b_vol);			/* Data offset [sector] */
5506:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
5507:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
5508:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
5509:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_FSVerEx, 0x100);						/* File system version (1.00) */
5510:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector si
5511:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (buf[BPB_SecPerClusEx] = 0, i = au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster s
5512:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
5513:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
5514:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
5515:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
5516:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
5517:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], 
5518:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5519:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5520:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Extended bootstrap record (+1..+8) */
5521:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5522:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
5523:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (j = 1; j < 9; j++) {
5524:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
5525:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5526:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5527:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* OEM/Reserved record (+9..+10) */
5528:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5529:Middlewares/Third_Party/FatFs/src/ff.c **** 			for ( ; j < 11; j++) {
5530:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
5531:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5532:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5533:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Sum record (+11) */
5534:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
5535:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5536:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5537:Middlewares/Third_Party/FatFs/src/ff.c **** 
5538:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
5539:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_EXFAT */
5540:Middlewares/Third_Party/FatFs/src/ff.c **** 	{	/* Create an FAT12/16/32 volume */
5541:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
5542:Middlewares/Third_Party/FatFs/src/ff.c **** 			pau = au;
5543:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Pre-determine number of clusters and FAT sub-type */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 126


5544:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {	/* FAT32 volume */
5545:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!pau) {	/* au auto-selection */
5546:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
5547:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
5548:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5549:Middlewares/Third_Party/FatFs/src/ff.c **** 				n_clst = sz_vol / pau;	/* Number of clusters */
5550:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
5551:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv = 32;	/* Number of reserved sectors */
5552:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_dir = 0;		/* No static directory */
5553:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
5554:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {				/* FAT12/16 volume */
5555:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!pau) {	/* au auto-selection */
5556:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
5557:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
5558:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5559:Middlewares/Third_Party/FatFs/src/ff.c **** 				n_clst = sz_vol / pau;
5560:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst > MAX_FAT12) {
5561:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = n_clst * 2 + 4;		/* FAT size [byte] */
5562:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
5563:Middlewares/Third_Party/FatFs/src/ff.c **** 					fmt = FS_FAT12;
5564:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
5565:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5566:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
5567:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv = 1;						/* Number of reserved sectors */
5568:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
5569:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5570:Middlewares/Third_Party/FatFs/src/ff.c **** 			b_fat = b_vol + sz_rsv;						/* FAT base */
5571:Middlewares/Third_Party/FatFs/src/ff.c **** 			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
5572:Middlewares/Third_Party/FatFs/src/ff.c **** 
5573:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Align data base to erase block boundary (for flash memory media) */
5574:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current d
5575:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
5576:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv += n; b_fat += n;
5577:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {					/* FAT12/16: Expand FAT size */
5578:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_fat += n / n_fats;
5579:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5580:Middlewares/Third_Party/FatFs/src/ff.c **** 
5581:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Determine number of clusters and final check of validity of the FAT sub-type */
5582:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
5583:Middlewares/Third_Party/FatFs/src/ff.c **** 			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
5584:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
5585:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
5586:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
5587:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
5588:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5589:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5590:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT16) {
5591:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
5592:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (pau * 2) <= 64) {
5593:Middlewares/Third_Party/FatFs/src/ff.c **** 						au = pau * 2; continue;		/* Adjust cluster size and retry */
5594:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
5595:Middlewares/Third_Party/FatFs/src/ff.c **** 					if ((opt & FM_FAT32)) {
5596:Middlewares/Third_Party/FatFs/src/ff.c **** 						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
5597:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
5598:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
5599:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
5600:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 127


5601:Middlewares/Third_Party/FatFs/src/ff.c **** 				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
5602:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
5603:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
5604:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5605:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5606:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT1
5607:Middlewares/Third_Party/FatFs/src/ff.c **** 
5608:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Ok, it is the valid cluster configuration */
5609:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
5610:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (1);
5611:Middlewares/Third_Party/FatFs/src/ff.c **** 
5612:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_TRIM
5613:Middlewares/Third_Party/FatFs/src/ff.c **** 		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased *
5614:Middlewares/Third_Party/FatFs/src/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, tbl);
5615:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5616:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create FAT VBR */
5617:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_set(buf, 0, ss);
5618:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
5619:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
5620:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
5621:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
5622:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
5623:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root direc
5624:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < 0x10000) {
5625:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
5626:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
5627:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
5628:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5629:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
5630:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
5631:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
5632:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
5633:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
5634:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
5635:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
5636:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
5637:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
5638:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
5639:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
5640:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
5641:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
5642:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
5643:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
5644:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
5645:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
5646:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
5647:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
5648:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5649:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size)
5650:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector 
5651:Middlewares/Third_Party/FatFs/src/ff.c **** 
5652:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create FSINFO record if needed */
5653:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
5654:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
5655:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5656:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_LeadSig, 0x41615252);
5657:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_StrucSig, 0x61417272);
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 128


5658:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
5659:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
5660:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);
5661:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
5662:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
5663:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5664:Middlewares/Third_Party/FatFs/src/ff.c **** 
5665:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Initialize FAT area */
5666:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_set(buf, 0, (UINT)szb_buf);
5667:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_fat;		/* FAT start sector */
5668:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
5669:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
5670:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
5671:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
5672:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
5673:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
5674:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
5675:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5676:Middlewares/Third_Party/FatFs/src/ff.c **** 			nsect = sz_fat;		/* Number of FAT sectors */
5677:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {	/* Fill FAT sectors */
5678:Middlewares/Third_Party/FatFs/src/ff.c **** 				n = (nsect > sz_buf) ? sz_buf : nsect;
5679:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
5680:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_set(buf, 0, ss);
5681:Middlewares/Third_Party/FatFs/src/ff.c **** 				sect += n; nsect -= n;
5682:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (nsect);
5683:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5684:Middlewares/Third_Party/FatFs/src/ff.c **** 
5685:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Initialize root directory (fill with zero) */
5686:Middlewares/Third_Party/FatFs/src/ff.c **** 		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
5687:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
5688:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
5689:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
5690:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
5691:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (nsect);
5692:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5693:Middlewares/Third_Party/FatFs/src/ff.c **** 
5694:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Determine system ID in the partition table */
5695:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (_FS_EXFAT && fmt == FS_EXFAT) {
5696:Middlewares/Third_Party/FatFs/src/ff.c **** 		sys = 0x07;			/* HPFS/NTFS/exFAT */
5697:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
5698:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
5699:Middlewares/Third_Party/FatFs/src/ff.c **** 			sys = 0x0C;		/* FAT32X */
5700:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
5701:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (sz_vol >= 0x10000) {
5702:Middlewares/Third_Party/FatFs/src/ff.c **** 				sys = 0x06;	/* FAT12/16 (>=64KS) */
5703:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
5704:Middlewares/Third_Party/FatFs/src/ff.c **** 				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
5705:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5706:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5707:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5708:Middlewares/Third_Party/FatFs/src/ff.c **** 
5709:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Update partition information */
5710:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (_MULTI_PARTITION && part != 0) {	/* Created in the existing partition */
5711:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Update system ID in the partition table */
5712:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
5713:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
5714:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 129


5715:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {								/* Created as a new single partition */
5716:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
5717:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5718:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
5719:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
5720:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_Boot] = 0;					/* Boot indicator */
5721:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StHead] = 1;				/* Start head */
5722:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StSec] = 1;					/* Start sector */
5723:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StCyl] = 0;					/* Start cylinder */
5724:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_System] = sys;				/* System type */
5725:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
5726:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdHead] = 254;				/* End head */
5727:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
5728:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
5729:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
5730:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
5731:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
5732:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5733:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5734:Middlewares/Third_Party/FatFs/src/ff.c **** 
5735:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
5736:Middlewares/Third_Party/FatFs/src/ff.c **** 
5737:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
5738:Middlewares/Third_Party/FatFs/src/ff.c **** }
5739:Middlewares/Third_Party/FatFs/src/ff.c **** 
5740:Middlewares/Third_Party/FatFs/src/ff.c **** 
5741:Middlewares/Third_Party/FatFs/src/ff.c **** 
5742:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MULTI_PARTITION
5743:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5744:Middlewares/Third_Party/FatFs/src/ff.c **** /* Create partition table on the physical drive                          */
5745:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5746:Middlewares/Third_Party/FatFs/src/ff.c **** 
5747:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_fdisk (
5748:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE pdrv,			/* Physical drive number */
5749:Middlewares/Third_Party/FatFs/src/ff.c **** 	const DWORD* szt,	/* Pointer to the size table for each partitions */
5750:Middlewares/Third_Party/FatFs/src/ff.c **** 	void* work			/* Pointer to the working buffer */
5751:Middlewares/Third_Party/FatFs/src/ff.c **** )
5752:Middlewares/Third_Party/FatFs/src/ff.c **** {
5753:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
5754:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
5755:Middlewares/Third_Party/FatFs/src/ff.c **** 	DSTATUS stat;
5756:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sz_disk, sz_part, s_part;
5757:Middlewares/Third_Party/FatFs/src/ff.c **** 
5758:Middlewares/Third_Party/FatFs/src/ff.c **** 
5759:Middlewares/Third_Party/FatFs/src/ff.c **** 	stat = disk_initialize(pdrv);
5760:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
5761:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
5762:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) return FR_DISK_ERR;
5763:Middlewares/Third_Party/FatFs/src/ff.c **** 
5764:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Determine the CHS without any consideration of the drive geometry */
5765:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
5766:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (n == 256) n--;
5767:Middlewares/Third_Party/FatFs/src/ff.c **** 	e_hd = n - 1;
5768:Middlewares/Third_Party/FatFs/src/ff.c **** 	sz_cyl = 63 * n;
5769:Middlewares/Third_Party/FatFs/src/ff.c **** 	tot_cyl = sz_disk / sz_cyl;
5770:Middlewares/Third_Party/FatFs/src/ff.c **** 
5771:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create partition table */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 130


5772:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_set(buf, 0, _MAX_SS);
5773:Middlewares/Third_Party/FatFs/src/ff.c **** 	p = buf + MBR_Table; b_cyl = 0;
5774:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = 0; i < 4; i++, p += SZ_PTE) {
5775:Middlewares/Third_Party/FatFs/src/ff.c **** 		p_cyl = (szt[i] <= 100U) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;	/* Number of cylinder
5776:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!p_cyl) continue;
5777:Middlewares/Third_Party/FatFs/src/ff.c **** 		s_part = (DWORD)sz_cyl * b_cyl;
5778:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_part = (DWORD)sz_cyl * p_cyl;
5779:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == 0) {	/* Exclude first track of cylinder 0 */
5780:Middlewares/Third_Party/FatFs/src/ff.c **** 			s_hd = 1;
5781:Middlewares/Third_Party/FatFs/src/ff.c **** 			s_part += 63; sz_part -= 63;
5782:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
5783:Middlewares/Third_Party/FatFs/src/ff.c **** 			s_hd = 0;
5784:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5785:Middlewares/Third_Party/FatFs/src/ff.c **** 		e_cyl = b_cyl + p_cyl - 1;	/* End cylinder */
5786:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (e_cyl >= tot_cyl) return FR_INVALID_PARAMETER;
5787:Middlewares/Third_Party/FatFs/src/ff.c **** 
5788:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Set partition table */
5789:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[1] = s_hd;						/* Start head */
5790:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[2] = (BYTE)((b_cyl >> 2) + 1);	/* Start sector */
5791:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[3] = (BYTE)b_cyl;					/* Start cylinder */
5792:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[4] = 0x07;						/* System type (temporary setting) */
5793:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[5] = e_hd;						/* End head */
5794:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[6] = (BYTE)((e_cyl >> 2) + 63);	/* End sector */
5795:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[7] = (BYTE)e_cyl;					/* End cylinder */
5796:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(p + 8, s_part);			/* Start sector in LBA */
5797:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(p + 12, sz_part);			/* Number of sectors */
5798:Middlewares/Third_Party/FatFs/src/ff.c **** 
5799:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Next partition */
5800:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_cyl += p_cyl;
5801:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5802:Middlewares/Third_Party/FatFs/src/ff.c **** 	st_word(p, 0xAA55);
5803:Middlewares/Third_Party/FatFs/src/ff.c **** 
5804:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Write it to the MBR */
5805:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (disk_write(pdrv, buf, 0, 1) != RES_OK || disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) ? FR_DI
5806:Middlewares/Third_Party/FatFs/src/ff.c **** }
5807:Middlewares/Third_Party/FatFs/src/ff.c **** 
5808:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _MULTI_PARTITION */
5809:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_MKFS && !_FS_READONLY */
5810:Middlewares/Third_Party/FatFs/src/ff.c **** 
5811:Middlewares/Third_Party/FatFs/src/ff.c **** 
5812:Middlewares/Third_Party/FatFs/src/ff.c **** 
5813:Middlewares/Third_Party/FatFs/src/ff.c **** 
5814:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_STRFUNC
5815:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5816:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get a string from the file                                            */
5817:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5818:Middlewares/Third_Party/FatFs/src/ff.c **** 
5819:Middlewares/Third_Party/FatFs/src/ff.c **** TCHAR* f_gets (
5820:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR* buff,	/* Pointer to the string buffer to read */
5821:Middlewares/Third_Party/FatFs/src/ff.c **** 	int len,		/* Size of string buffer (characters) */
5822:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp			/* Pointer to the file object */
5823:Middlewares/Third_Party/FatFs/src/ff.c **** )
5824:Middlewares/Third_Party/FatFs/src/ff.c **** {
5825:Middlewares/Third_Party/FatFs/src/ff.c **** 	int n = 0;
5826:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c, *p = buff;
5827:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE s[2];
5828:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT rc;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 131


5829:Middlewares/Third_Party/FatFs/src/ff.c **** 
5830:Middlewares/Third_Party/FatFs/src/ff.c **** 
5831:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (n < len - 1) {	/* Read characters until buffer gets filled */
5832:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
5833:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STRF_ENCODE == 3		/* Read a character in UTF-8 */
5834:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_read(fp, s, 1, &rc);
5835:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 1) break;
5836:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[0];
5837:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c >= 0x80) {
5838:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c < 0xC0) continue;	/* Skip stray trailer */
5839:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c < 0xE0) {			/* Two-byte sequence (0x80-0x7FF) */
5840:Middlewares/Third_Party/FatFs/src/ff.c **** 				f_read(fp, s, 1, &rc);
5841:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (rc != 1) break;
5842:Middlewares/Third_Party/FatFs/src/ff.c **** 				c = (c & 0x1F) << 6 | (s[0] & 0x3F);
5843:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (c < 0x80) c = '?';	/* Reject invalid code range */
5844:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
5845:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (c < 0xF0) {		/* Three-byte sequence (0x800-0xFFFF) */
5846:Middlewares/Third_Party/FatFs/src/ff.c **** 					f_read(fp, s, 2, &rc);
5847:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (rc != 2) break;
5848:Middlewares/Third_Party/FatFs/src/ff.c **** 					c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
5849:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (c < 0x800) c = '?';	/* Reject invalid code range */
5850:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {			/* Reject four-byte sequence */
5851:Middlewares/Third_Party/FatFs/src/ff.c **** 					c = '?';
5852:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5853:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5854:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5855:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _STRF_ENCODE == 2		/* Read a character in UTF-16BE */
5856:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_read(fp, s, 2, &rc);
5857:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 2) break;
5858:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[1] + (s[0] << 8);
5859:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _STRF_ENCODE == 1		/* Read a character in UTF-16LE */
5860:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_read(fp, s, 2, &rc);
5861:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 2) break;
5862:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[0] + (s[1] << 8);
5863:Middlewares/Third_Party/FatFs/src/ff.c **** #else						/* Read a character in ANSI/OEM */
5864:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_read(fp, s, 1, &rc);
5865:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 1) break;
5866:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[0];
5867:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsDBCS1(c)) {
5868:Middlewares/Third_Party/FatFs/src/ff.c **** 			f_read(fp, s, 1, &rc);
5869:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (rc != 1) break;
5870:Middlewares/Third_Party/FatFs/src/ff.c **** 			c = (c << 8) + s[0];
5871:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5872:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = ff_convert(c, 1);	/* OEM -> Unicode */
5873:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!c) c = '?';
5874:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5875:Middlewares/Third_Party/FatFs/src/ff.c **** #else						/* Read a character without conversion */
5876:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_read(fp, s, 1, &rc);
5877:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 1) break;
5878:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[0];
5879:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5880:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
5881:Middlewares/Third_Party/FatFs/src/ff.c **** 		*p++ = c;
5882:Middlewares/Third_Party/FatFs/src/ff.c **** 		n++;
5883:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
5884:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5885:Middlewares/Third_Party/FatFs/src/ff.c **** 	*p = 0;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 132


5886:Middlewares/Third_Party/FatFs/src/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
5887:Middlewares/Third_Party/FatFs/src/ff.c **** }
5888:Middlewares/Third_Party/FatFs/src/ff.c **** 
5889:Middlewares/Third_Party/FatFs/src/ff.c **** 
5890:Middlewares/Third_Party/FatFs/src/ff.c **** 
5891:Middlewares/Third_Party/FatFs/src/ff.c **** 
5892:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
5893:Middlewares/Third_Party/FatFs/src/ff.c **** #include <stdarg.h>
5894:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5895:Middlewares/Third_Party/FatFs/src/ff.c **** /* Put a character to the file                                           */
5896:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5897:Middlewares/Third_Party/FatFs/src/ff.c **** 
5898:Middlewares/Third_Party/FatFs/src/ff.c **** typedef struct {
5899:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL *fp;		/* Ptr to the writing file */
5900:Middlewares/Third_Party/FatFs/src/ff.c **** 	int idx, nchr;	/* Write index of buf[] (-1:error), number of chars written */
5901:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE buf[64];	/* Write buffer */
5902:Middlewares/Third_Party/FatFs/src/ff.c **** } putbuff;
5903:Middlewares/Third_Party/FatFs/src/ff.c **** 
5904:Middlewares/Third_Party/FatFs/src/ff.c **** 
5905:Middlewares/Third_Party/FatFs/src/ff.c **** static
5906:Middlewares/Third_Party/FatFs/src/ff.c **** void putc_bfd (		/* Buffered write with code conversion */
5907:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff* pb,
5908:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c
5909:Middlewares/Third_Party/FatFs/src/ff.c **** )
5910:Middlewares/Third_Party/FatFs/src/ff.c **** {
5911:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT bw;
5912:Middlewares/Third_Party/FatFs/src/ff.c **** 	int i;
5913:Middlewares/Third_Party/FatFs/src/ff.c **** 
5914:Middlewares/Third_Party/FatFs/src/ff.c **** 
5915:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
5916:Middlewares/Third_Party/FatFs/src/ff.c **** 		putc_bfd(pb, '\r');
5917:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5918:Middlewares/Third_Party/FatFs/src/ff.c **** 
5919:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = pb->idx;		/* Write index of pb->buf[] */
5920:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i < 0) return;
5921:Middlewares/Third_Party/FatFs/src/ff.c **** 
5922:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
5923:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STRF_ENCODE == 3			/* Write a character in UTF-8 */
5924:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (c < 0x80) {				/* 7-bit */
5925:Middlewares/Third_Party/FatFs/src/ff.c **** 		pb->buf[i++] = (BYTE)c;
5926:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
5927:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c < 0x800) {		/* 11-bit */
5928:Middlewares/Third_Party/FatFs/src/ff.c **** 			pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
5929:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {				/* 16-bit */
5930:Middlewares/Third_Party/FatFs/src/ff.c **** 			pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
5931:Middlewares/Third_Party/FatFs/src/ff.c **** 			pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
5932:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5933:Middlewares/Third_Party/FatFs/src/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
5934:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5935:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _STRF_ENCODE == 2			/* Write a character in UTF-16BE */
5936:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
5937:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)c;
5938:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _STRF_ENCODE == 1			/* Write a character in UTF-16LE */
5939:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)c;
5940:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
5941:Middlewares/Third_Party/FatFs/src/ff.c **** #else							/* Write a character in ANSI/OEM */
5942:Middlewares/Third_Party/FatFs/src/ff.c **** 	c = ff_convert(c, 0);	/* Unicode -> OEM */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 133


5943:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!c) c = '?';
5944:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (c >= 0x100)
5945:Middlewares/Third_Party/FatFs/src/ff.c **** 		pb->buf[i++] = (BYTE)(c >> 8);
5946:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)c;
5947:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5948:Middlewares/Third_Party/FatFs/src/ff.c **** #else							/* Write a character without conversion */
5949:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)c;
5950:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5951:Middlewares/Third_Party/FatFs/src/ff.c **** 
5952:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
5953:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &bw);
5954:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = (bw == (UINT)i) ? 0 : -1;
5955:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5956:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->idx = i;
5957:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->nchr++;
5958:Middlewares/Third_Party/FatFs/src/ff.c **** }
5959:Middlewares/Third_Party/FatFs/src/ff.c **** 
5960:Middlewares/Third_Party/FatFs/src/ff.c **** 
5961:Middlewares/Third_Party/FatFs/src/ff.c **** static
5962:Middlewares/Third_Party/FatFs/src/ff.c **** int putc_flush (		/* Flush left characters in the buffer */
5963:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff* pb
5964:Middlewares/Third_Party/FatFs/src/ff.c **** )
5965:Middlewares/Third_Party/FatFs/src/ff.c **** {
5966:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nw;
5967:Middlewares/Third_Party/FatFs/src/ff.c **** 
5968:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (   pb->idx >= 0	/* Flush buffered characters to the file */
5969:Middlewares/Third_Party/FatFs/src/ff.c **** 		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
5970:Middlewares/Third_Party/FatFs/src/ff.c **** 		&& (UINT)pb->idx == nw) return pb->nchr;
5971:Middlewares/Third_Party/FatFs/src/ff.c **** 	return EOF;
5972:Middlewares/Third_Party/FatFs/src/ff.c **** }
5973:Middlewares/Third_Party/FatFs/src/ff.c **** 
5974:Middlewares/Third_Party/FatFs/src/ff.c **** 
5975:Middlewares/Third_Party/FatFs/src/ff.c **** static
5976:Middlewares/Third_Party/FatFs/src/ff.c **** void putc_init (		/* Initialize write buffer */
5977:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff* pb,
5978:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp
5979:Middlewares/Third_Party/FatFs/src/ff.c **** )
5980:Middlewares/Third_Party/FatFs/src/ff.c **** {
 1556              		.loc 1 5980 0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
 1560              		@ link register save eliminated.
 1561              	.LVL212:
5981:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->fp = fp;
 1562              		.loc 1 5981 0
 1563 0000 0160     		str	r1, [r0]
5982:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->nchr = pb->idx = 0;
 1564              		.loc 1 5982 0
 1565 0002 0023     		movs	r3, #0
 1566 0004 4360     		str	r3, [r0, #4]
 1567 0006 8360     		str	r3, [r0, #8]
5983:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1568              		.loc 1 5983 0
 1569 0008 7047     		bx	lr
 1570              		.cfi_endproc
 1571              	.LFE210:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 134


 1573              		.section	.text.lock_fs,"ax",%progbits
 1574              		.align	1
 1575              		.syntax unified
 1576              		.thumb
 1577              		.thumb_func
 1578              		.fpu fpv5-sp-d16
 1580              	lock_fs:
 1581              	.LFB151:
 745:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 1582              		.loc 1 745 0
 1583              		.cfi_startproc
 1584              		@ args = 0, pretend = 0, frame = 0
 1585              		@ frame_needed = 0, uses_anonymous_args = 0
 1586              	.LVL213:
 1587 0000 08B5     		push	{r3, lr}
 1588              	.LCFI22:
 1589              		.cfi_def_cfa_offset 8
 1590              		.cfi_offset 3, -8
 1591              		.cfi_offset 14, -4
 746:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1592              		.loc 1 746 0
 1593 0002 30B1     		cbz	r0, .L165
 746:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1594              		.loc 1 746 0 is_stmt 0 discriminator 1
 1595 0004 0069     		ldr	r0, [r0, #16]
 1596              	.LVL214:
 1597 0006 FFF7FEFF 		bl	ff_req_grant
 1598              	.LVL215:
 1599 000a 0346     		mov	r3, r0
 1600 000c 10B1     		cbz	r0, .L163
 746:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1601              		.loc 1 746 0
 1602 000e 0123     		movs	r3, #1
 1603 0010 00E0     		b	.L163
 1604              	.LVL216:
 1605              	.L165:
 1606 0012 0023     		movs	r3, #0
 1607              	.LVL217:
 1608              	.L163:
 747:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1609              		.loc 1 747 0 is_stmt 1
 1610 0014 1846     		mov	r0, r3
 1611 0016 08BD     		pop	{r3, pc}
 1612              		.cfi_endproc
 1613              	.LFE151:
 1615              		.section	.text.validate,"ax",%progbits
 1616              		.align	1
 1617              		.syntax unified
 1618              		.thumb
 1619              		.thumb_func
 1620              		.fpu fpv5-sp-d16
 1622              	validate:
 1623              	.LFB187:
3220:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 1624              		.loc 1 3220 0
 1625              		.cfi_startproc
 1626              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 135


 1627              		@ frame_needed = 0, uses_anonymous_args = 0
 1628              	.LVL218:
 1629 0000 38B5     		push	{r3, r4, r5, lr}
 1630              	.LCFI23:
 1631              		.cfi_def_cfa_offset 16
 1632              		.cfi_offset 3, -16
 1633              		.cfi_offset 4, -12
 1634              		.cfi_offset 5, -8
 1635              		.cfi_offset 14, -4
 1636 0002 0D46     		mov	r5, r1
3223:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fs = 0;
 1637              		.loc 1 3223 0
 1638 0004 40B1     		cbz	r0, .L168
 1639 0006 0446     		mov	r4, r0
3223:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fs = 0;
 1640              		.loc 1 3223 0 is_stmt 0 discriminator 1
 1641 0008 0368     		ldr	r3, [r0]
 1642 000a 2BB1     		cbz	r3, .L168
3223:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fs = 0;
 1643              		.loc 1 3223 0 discriminator 2
 1644 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1645 000e 1AB1     		cbz	r2, .L168
3223:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fs = 0;
 1646              		.loc 1 3223 0 discriminator 3
 1647 0010 D988     		ldrh	r1, [r3, #6]
 1648              	.LVL219:
 1649 0012 8288     		ldrh	r2, [r0, #4]
 1650 0014 9142     		cmp	r1, r2
 1651 0016 03D0     		beq	.L173
 1652              	.LVL220:
 1653              	.L168:
3224:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_INVALID_OBJECT;	/* The object is invalid */
 1654              		.loc 1 3224 0 is_stmt 1
 1655 0018 0023     		movs	r3, #0
 1656 001a 2B60     		str	r3, [r5]
 1657              	.LVL221:
3225:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
 1658              		.loc 1 3225 0
 1659 001c 0920     		movs	r0, #9
 1660              	.LVL222:
 1661              	.L170:
3232:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1662              		.loc 1 3232 0
 1663 001e 38BD     		pop	{r3, r4, r5, pc}
 1664              	.LVL223:
 1665              	.L173:
3223:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fs = 0;
 1666              		.loc 1 3223 0 discriminator 4
 1667 0020 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 1668              	.LVL224:
 1669 0022 FFF7FEFF 		bl	disk_status
 1670              	.LVL225:
 1671 0026 10F0010F 		tst	r0, #1
 1672 002a F5D1     		bne	.L168
3227:Middlewares/Third_Party/FatFs/src/ff.c **** 		ENTER_FF(obj->fs);		/* Lock file system */
 1673              		.loc 1 3227 0
 1674 002c 2368     		ldr	r3, [r4]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 136


 1675 002e 2B60     		str	r3, [r5]
3228:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_OK;			/* Valid object */
 1676              		.loc 1 3228 0
 1677 0030 2068     		ldr	r0, [r4]
 1678 0032 FFF7FEFF 		bl	lock_fs
 1679              	.LVL226:
 1680 0036 08B1     		cbz	r0, .L174
3229:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 1681              		.loc 1 3229 0
 1682 0038 0020     		movs	r0, #0
 1683 003a F0E7     		b	.L170
 1684              	.L174:
3228:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_OK;			/* Valid object */
 1685              		.loc 1 3228 0
 1686 003c 0F20     		movs	r0, #15
 1687 003e EEE7     		b	.L170
 1688              		.cfi_endproc
 1689              	.LFE187:
 1691              		.section	.text.sync_window,"ax",%progbits
 1692              		.align	1
 1693              		.syntax unified
 1694              		.thumb
 1695              		.thumb_func
 1696              		.fpu fpv5-sp-d16
 1698              	sync_window:
 1699              	.LFB158:
 886:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD wsect;
 1700              		.loc 1 886 0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
 1704              	.LVL227:
 1705 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1706              	.LCFI24:
 1707              		.cfi_def_cfa_offset 24
 1708              		.cfi_offset 3, -24
 1709              		.cfi_offset 4, -20
 1710              		.cfi_offset 5, -16
 1711              		.cfi_offset 6, -12
 1712              		.cfi_offset 7, -8
 1713              		.cfi_offset 14, -4
 1714              	.LVL228:
 892:Middlewares/Third_Party/FatFs/src/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 1715              		.loc 1 892 0
 1716 0002 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 1717 0004 0BB9     		cbnz	r3, .L183
 889:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1718              		.loc 1 889 0
 1719 0006 0020     		movs	r0, #0
 1720              	.LVL229:
 1721              	.L176:
 907:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 1722              		.loc 1 907 0
 1723 0008 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1724              	.LVL230:
 1725              	.L183:
 1726 000a 0446     		mov	r4, r0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 137


 893:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 1727              		.loc 1 893 0
 1728 000c 856B     		ldr	r5, [r0, #56]
 1729              	.LVL231:
 894:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_DISK_ERR;
 1730              		.loc 1 894 0
 1731 000e 00F13C07 		add	r7, r0, #60
 1732 0012 0123     		movs	r3, #1
 1733 0014 2A46     		mov	r2, r5
 1734 0016 3946     		mov	r1, r7
 1735 0018 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 1736              	.LVL232:
 1737 001a FFF7FEFF 		bl	disk_write
 1738              	.LVL233:
 1739 001e A8B9     		cbnz	r0, .L180
 897:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 1740              		.loc 1 897 0
 1741 0020 0023     		movs	r3, #0
 1742 0022 E370     		strb	r3, [r4, #3]
 898:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 1743              		.loc 1 898 0
 1744 0024 E36A     		ldr	r3, [r4, #44]
 1745 0026 EB1A     		subs	r3, r5, r3
 1746 0028 626A     		ldr	r2, [r4, #36]
 1747 002a 9342     		cmp	r3, r2
 1748 002c 10D2     		bcs	.L181
 899:Middlewares/Third_Party/FatFs/src/ff.c **** 					wsect += fs->fsize;
 1749              		.loc 1 899 0
 1750 002e A678     		ldrb	r6, [r4, #2]	@ zero_extendqisi2
 1751              	.LVL234:
 1752              	.L177:
 899:Middlewares/Third_Party/FatFs/src/ff.c **** 					wsect += fs->fsize;
 1753              		.loc 1 899 0 is_stmt 0 discriminator 1
 1754 0030 012E     		cmp	r6, #1
 1755 0032 09D9     		bls	.L184
 900:Middlewares/Third_Party/FatFs/src/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 1756              		.loc 1 900 0 is_stmt 1 discriminator 3
 1757 0034 636A     		ldr	r3, [r4, #36]
 1758 0036 1D44     		add	r5, r5, r3
 1759              	.LVL235:
 901:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 1760              		.loc 1 901 0 discriminator 3
 1761 0038 0123     		movs	r3, #1
 1762 003a 2A46     		mov	r2, r5
 1763 003c 3946     		mov	r1, r7
 1764 003e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1765 0040 FFF7FEFF 		bl	disk_write
 1766              	.LVL236:
 899:Middlewares/Third_Party/FatFs/src/ff.c **** 					wsect += fs->fsize;
 1767              		.loc 1 899 0 discriminator 3
 1768 0044 013E     		subs	r6, r6, #1
 1769              	.LVL237:
 1770 0046 F3E7     		b	.L177
 1771              	.L184:
 889:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1772              		.loc 1 889 0
 1773 0048 0020     		movs	r0, #0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 138


 1774 004a DDE7     		b	.L176
 1775              	.LVL238:
 1776              	.L180:
 895:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 1777              		.loc 1 895 0
 1778 004c 0120     		movs	r0, #1
 1779 004e DBE7     		b	.L176
 1780              	.L181:
 889:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1781              		.loc 1 889 0
 1782 0050 0020     		movs	r0, #0
 1783 0052 D9E7     		b	.L176
 1784              		.cfi_endproc
 1785              	.LFE158:
 1787              		.section	.text.move_window,"ax",%progbits
 1788              		.align	1
 1789              		.syntax unified
 1790              		.thumb
 1791              		.thumb_func
 1792              		.fpu fpv5-sp-d16
 1794              	move_window:
 1795              	.LFB159:
 916:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_OK;
 1796              		.loc 1 916 0
 1797              		.cfi_startproc
 1798              		@ args = 0, pretend = 0, frame = 0
 1799              		@ frame_needed = 0, uses_anonymous_args = 0
 1800              	.LVL239:
 1801 0000 70B5     		push	{r4, r5, r6, lr}
 1802              	.LCFI25:
 1803              		.cfi_def_cfa_offset 16
 1804              		.cfi_offset 4, -16
 1805              		.cfi_offset 5, -12
 1806              		.cfi_offset 6, -8
 1807              		.cfi_offset 14, -4
 1808              	.LVL240:
 920:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 1809              		.loc 1 920 0
 1810 0002 836B     		ldr	r3, [r0, #56]
 1811 0004 8B42     		cmp	r3, r1
 1812 0006 12D0     		beq	.L188
 1813 0008 0446     		mov	r4, r0
 1814 000a 0D46     		mov	r5, r1
 922:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 1815              		.loc 1 922 0
 1816 000c FFF7FEFF 		bl	sync_window
 1817              	.LVL241:
 924:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 1818              		.loc 1 924 0
 1819 0010 0646     		mov	r6, r0
 1820 0012 68B9     		cbnz	r0, .L186
 925:Middlewares/Third_Party/FatFs/src/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 1821              		.loc 1 925 0
 1822 0014 0123     		movs	r3, #1
 1823 0016 2A46     		mov	r2, r5
 1824 0018 04F13C01 		add	r1, r4, #60
 1825 001c 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 139


 1826              	.LVL242:
 1827 001e FFF7FEFF 		bl	disk_read
 1828              	.LVL243:
 1829 0022 10B1     		cbz	r0, .L187
 927:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 1830              		.loc 1 927 0
 1831 0024 0126     		movs	r6, #1
 926:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_DISK_ERR;
 1832              		.loc 1 926 0
 1833 0026 4FF0FF35 		mov	r5, #-1
 1834              	.LVL244:
 1835              	.L187:
 929:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 1836              		.loc 1 929 0
 1837 002a A563     		str	r5, [r4, #56]
 1838 002c 00E0     		b	.L186
 1839              	.LVL245:
 1840              	.L188:
 917:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1841              		.loc 1 917 0
 1842 002e 0026     		movs	r6, #0
 1843              	.LVL246:
 1844              	.L186:
 933:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1845              		.loc 1 933 0
 1846 0030 3046     		mov	r0, r6
 1847 0032 70BD     		pop	{r4, r5, r6, pc}
 1848              		.cfi_endproc
 1849              	.LFE159:
 1851              		.section	.text.check_fs,"ax",%progbits
 1852              		.align	1
 1853              		.syntax unified
 1854              		.thumb
 1855              		.thumb_func
 1856              		.fpu fpv5-sp-d16
 1858              	check_fs:
 1859              	.LFB185:
2969:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 1860              		.loc 1 2969 0
 1861              		.cfi_startproc
 1862              		@ args = 0, pretend = 0, frame = 0
 1863              		@ frame_needed = 0, uses_anonymous_args = 0
 1864              	.LVL247:
 1865 0000 10B5     		push	{r4, lr}
 1866              	.LCFI26:
 1867              		.cfi_def_cfa_offset 8
 1868              		.cfi_offset 4, -8
 1869              		.cfi_offset 14, -4
 1870 0002 0446     		mov	r4, r0
2970:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 1871              		.loc 1 2970 0
 1872 0004 0023     		movs	r3, #0
 1873 0006 C370     		strb	r3, [r0, #3]
 1874 0008 4FF0FF33 		mov	r3, #-1
 1875 000c 8363     		str	r3, [r0, #56]
2971:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1876              		.loc 1 2971 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 140


 1877 000e FFF7FEFF 		bl	move_window
 1878              	.LVL248:
 1879 0012 18BB     		cbnz	r0, .L194
2973:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1880              		.loc 1 2973 0
 1881 0014 04F23A20 		addw	r0, r4, #570
 1882 0018 FFF7FEFF 		bl	ld_word
 1883              	.LVL249:
 1884 001c 4AF65523 		movw	r3, #43605
 1885 0020 9842     		cmp	r0, r3
 1886 0022 1DD1     		bne	.L195
2975:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string *
 1887              		.loc 1 2975 0
 1888 0024 94F83C30 		ldrb	r3, [r4, #60]	@ zero_extendqisi2
 1889 0028 E92B     		cmp	r3, #233
 1890 002a 05D0     		beq	.L193
2975:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string *
 1891              		.loc 1 2975 0 is_stmt 0 discriminator 1
 1892 002c E36B     		ldr	r3, [r4, #60]
 1893 002e 03F0FF13 		and	r3, r3, #16711935
 1894 0032 0F4A     		ldr	r2, .L200
 1895 0034 9342     		cmp	r3, r2
 1896 0036 15D1     		bne	.L196
 1897              	.L193:
2976:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 1898              		.loc 1 2976 0 is_stmt 1
 1899 0038 04F17200 		add	r0, r4, #114
 1900 003c FFF7FEFF 		bl	ld_dword
 1901              	.LVL250:
 1902 0040 20F07F40 		bic	r0, r0, #-16777216
 1903 0044 0B4B     		ldr	r3, .L200+4
 1904 0046 9842     		cmp	r0, r3
 1905 0048 0ED0     		beq	.L197
2977:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 1906              		.loc 1 2977 0
 1907 004a 04F18E00 		add	r0, r4, #142
 1908 004e FFF7FEFF 		bl	ld_dword
 1909              	.LVL251:
 1910 0052 094B     		ldr	r3, .L200+8
 1911 0054 9842     		cmp	r0, r3
 1912 0056 09D1     		bne	.L198
 1913 0058 0020     		movs	r0, #0
 1914 005a 02E0     		b	.L192
 1915              	.L194:
2971:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1916              		.loc 1 2971 0
 1917 005c 0420     		movs	r0, #4
 1918 005e 00E0     		b	.L192
 1919              	.L195:
2973:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1920              		.loc 1 2973 0
 1921 0060 0320     		movs	r0, #3
 1922              	.L192:
2983:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1923              		.loc 1 2983 0
 1924 0062 10BD     		pop	{r4, pc}
 1925              	.LVL252:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 141


 1926              	.L196:
2982:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1927              		.loc 1 2982 0
 1928 0064 0220     		movs	r0, #2
 1929 0066 FCE7     		b	.L192
 1930              	.L197:
2976:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 1931              		.loc 1 2976 0
 1932 0068 0020     		movs	r0, #0
 1933 006a FAE7     		b	.L192
 1934              	.L198:
2982:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1935              		.loc 1 2982 0
 1936 006c 0220     		movs	r0, #2
 1937 006e F8E7     		b	.L192
 1938              	.L201:
 1939              		.align	2
 1940              	.L200:
 1941 0070 EB009000 		.word	9437419
 1942 0074 46415400 		.word	5521734
 1943 0078 46415433 		.word	861159750
 1944              		.cfi_endproc
 1945              	.LFE185:
 1947              		.section	.text.find_volume,"ax",%progbits
 1948              		.align	1
 1949              		.syntax unified
 1950              		.thumb
 1951              		.thumb_func
 1952              		.fpu fpv5-sp-d16
 1954              	find_volume:
 1955              	.LFB186:
2998:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE fmt, *pt;
 1956              		.loc 1 2998 0
 1957              		.cfi_startproc
 1958              		@ args = 0, pretend = 0, frame = 16
 1959              		@ frame_needed = 0, uses_anonymous_args = 0
 1960              	.LVL253:
 1961 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1962              	.LCFI27:
 1963              		.cfi_def_cfa_offset 32
 1964              		.cfi_offset 4, -32
 1965              		.cfi_offset 5, -28
 1966              		.cfi_offset 6, -24
 1967              		.cfi_offset 7, -20
 1968              		.cfi_offset 8, -16
 1969              		.cfi_offset 9, -12
 1970              		.cfi_offset 10, -8
 1971              		.cfi_offset 14, -4
 1972 0004 84B0     		sub	sp, sp, #16
 1973              	.LCFI28:
 1974              		.cfi_def_cfa_offset 48
 1975 0006 0E46     		mov	r6, r1
 1976 0008 1746     		mov	r7, r2
3009:Middlewares/Third_Party/FatFs/src/ff.c **** 	vol = get_ldnumber(path);
 1977              		.loc 1 3009 0
 1978 000a 0023     		movs	r3, #0
 1979 000c 0B60     		str	r3, [r1]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 142


3010:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 1980              		.loc 1 3010 0
 1981 000e FFF7FEFF 		bl	get_ldnumber
 1982              	.LVL254:
3011:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1983              		.loc 1 3011 0
 1984 0012 051E     		subs	r5, r0, #0
 1985 0014 C0F24C81 		blt	.L220
3014:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 1986              		.loc 1 3014 0
 1987 0018 BB4B     		ldr	r3, .L252
 1988 001a 53F82540 		ldr	r4, [r3, r5, lsl #2]
 1989              	.LVL255:
3015:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1990              		.loc 1 3015 0
 1991 001e 002C     		cmp	r4, #0
 1992 0020 00F04881 		beq	.L221
3017:Middlewares/Third_Party/FatFs/src/ff.c **** 	*rfs = fs;							/* Return pointer to the file system object */
 1993              		.loc 1 3017 0
 1994 0024 2046     		mov	r0, r4
 1995              	.LVL256:
 1996 0026 FFF7FEFF 		bl	lock_fs
 1997              	.LVL257:
 1998 002a 0028     		cmp	r0, #0
 1999 002c 00F04681 		beq	.L222
3018:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2000              		.loc 1 3018 0
 2001 0030 3460     		str	r4, [r6]
3020:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type) {					/* If the volume has been mounted */
 2002              		.loc 1 3020 0
 2003 0032 07F0FE07 		and	r7, r7, #254
 2004              	.LVL258:
3021:Middlewares/Third_Party/FatFs/src/ff.c **** 		stat = disk_status(fs->drv);
 2005              		.loc 1 3021 0
 2006 0036 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2007 0038 73B1     		cbz	r3, .L204
3022:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 2008              		.loc 1 3022 0
 2009 003a 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2010 003c FFF7FEFF 		bl	disk_status
 2011              	.LVL259:
3023:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 2012              		.loc 1 3023 0
 2013 0040 10F0010F 		tst	r0, #1
 2014 0044 08D1     		bne	.L204
3024:Middlewares/Third_Party/FatFs/src/ff.c **** 				return FR_WRITE_PROTECTED;
 2015              		.loc 1 3024 0
 2016 0046 002F     		cmp	r7, #0
 2017 0048 00F03A81 		beq	.L223
3024:Middlewares/Third_Party/FatFs/src/ff.c **** 				return FR_WRITE_PROTECTED;
 2018              		.loc 1 3024 0 is_stmt 0 discriminator 1
 2019 004c 10F0040F 		tst	r0, #4
 2020 0050 40F03881 		bne	.L224
3027:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2021              		.loc 1 3027 0 is_stmt 1
 2022 0054 0020     		movs	r0, #0
 2023              	.LVL260:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 143


 2024 0056 2EE1     		b	.L203
 2025              	.L204:
3034:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 2026              		.loc 1 3034 0
 2027 0058 0023     		movs	r3, #0
 2028 005a 2370     		strb	r3, [r4]
3035:Middlewares/Third_Party/FatFs/src/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 2029              		.loc 1 3035 0
 2030 005c E8B2     		uxtb	r0, r5
 2031 005e 6070     		strb	r0, [r4, #1]
3036:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 2032              		.loc 1 3036 0
 2033 0060 FFF7FEFF 		bl	disk_initialize
 2034              	.LVL261:
3037:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 2035              		.loc 1 3037 0
 2036 0064 10F0010F 		tst	r0, #1
 2037 0068 40F02E81 		bne	.L225
3040:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_WRITE_PROTECTED;
 2038              		.loc 1 3040 0
 2039 006c 1FB1     		cbz	r7, .L205
3040:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_WRITE_PROTECTED;
 2040              		.loc 1 3040 0 is_stmt 0 discriminator 1
 2041 006e 10F0040F 		tst	r0, #4
 2042 0072 40F02B81 		bne	.L226
 2043              	.L205:
 2044              	.LVL262:
3050:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 2045              		.loc 1 3050 0 is_stmt 1
 2046 0076 0021     		movs	r1, #0
 2047 0078 2046     		mov	r0, r4
 2048              	.LVL263:
 2049 007a FFF7FEFF 		bl	check_fs
 2050              	.LVL264:
3051:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < 4; i++) {		/* Get partition offset */
 2051              		.loc 1 3051 0
 2052 007e 0228     		cmp	r0, #2
 2053 0080 00F0B880 		beq	.L227
3049:Middlewares/Third_Party/FatFs/src/ff.c **** 	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 2054              		.loc 1 3049 0
 2055 0084 0026     		movs	r6, #0
 2056              	.LVL265:
 2057              	.L207:
3063:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 2058              		.loc 1 3063 0
 2059 0086 0428     		cmp	r0, #4
 2060 0088 00F02281 		beq	.L230
3064:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2061              		.loc 1 3064 0
 2062 008c 0128     		cmp	r0, #1
 2063 008e 00F22181 		bhi	.L231
3116:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2064              		.loc 1 3116 0
 2065 0092 04F14700 		add	r0, r4, #71
 2066              	.LVL266:
 2067 0096 FFF7FEFF 		bl	ld_word
 2068              	.LVL267:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 144


 2069 009a B0F5007F 		cmp	r0, #512
 2070 009e 40F01B81 		bne	.L232
3118:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 2071              		.loc 1 3118 0
 2072 00a2 04F15200 		add	r0, r4, #82
 2073 00a6 FFF7FEFF 		bl	ld_word
 2074              	.LVL268:
 2075 00aa 0746     		mov	r7, r0
 2076              	.LVL269:
3119:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsize = fasize;
 2077              		.loc 1 3119 0
 2078 00ac 20B9     		cbnz	r0, .L212
3119:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsize = fasize;
 2079              		.loc 1 3119 0 is_stmt 0 discriminator 1
 2080 00ae 04F16000 		add	r0, r4, #96
 2081              	.LVL270:
 2082 00b2 FFF7FEFF 		bl	ld_dword
 2083              	.LVL271:
 2084 00b6 0746     		mov	r7, r0
 2085              	.LVL272:
 2086              	.L212:
3120:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2087              		.loc 1 3120 0 is_stmt 1
 2088 00b8 6762     		str	r7, [r4, #36]
3122:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 2089              		.loc 1 3122 0
 2090 00ba 94F84C20 		ldrb	r2, [r4, #76]	@ zero_extendqisi2
 2091 00be A270     		strb	r2, [r4, #2]
3123:Middlewares/Third_Party/FatFs/src/ff.c **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 2092              		.loc 1 3123 0
 2093 00c0 531E     		subs	r3, r2, #1
 2094 00c2 DBB2     		uxtb	r3, r3
 2095 00c4 012B     		cmp	r3, #1
 2096 00c6 00F20981 		bhi	.L233
3124:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2097              		.loc 1 3124 0
 2098 00ca 07FB02F5 		mul	r5, r7, r2
 2099              	.LVL273:
3126:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
 2100              		.loc 1 3126 0
 2101 00ce 94F84980 		ldrb	r8, [r4, #73]	@ zero_extendqisi2
 2102 00d2 A4F80A80 		strh	r8, [r4, #10]	@ movhi
3127:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2103              		.loc 1 3127 0
 2104 00d6 B8F1000F 		cmp	r8, #0
 2105 00da 00F00181 		beq	.L234
3127:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2106              		.loc 1 3127 0 is_stmt 0 discriminator 2
 2107 00de 08F1FF33 		add	r3, r8, #-1
 2108 00e2 18EA030F 		tst	r8, r3
 2109 00e6 40F0FD80 		bne	.L235
3129:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 2110              		.loc 1 3129 0 is_stmt 1
 2111 00ea 04F14D00 		add	r0, r4, #77
 2112 00ee FFF7FEFF 		bl	ld_word
 2113              	.LVL274:
 2114 00f2 8246     		mov	r10, r0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 145


 2115 00f4 2081     		strh	r0, [r4, #8]	@ movhi
3130:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2116              		.loc 1 3130 0
 2117 00f6 10F00F0F 		tst	r0, #15
 2118 00fa 40F0F580 		bne	.L236
3132:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 2119              		.loc 1 3132 0
 2120 00fe 04F14F00 		add	r0, r4, #79
 2121 0102 FFF7FEFF 		bl	ld_word
 2122              	.LVL275:
 2123 0106 8146     		mov	r9, r0
 2124              	.LVL276:
3133:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2125              		.loc 1 3133 0
 2126 0108 20B9     		cbnz	r0, .L213
3133:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2127              		.loc 1 3133 0 is_stmt 0 discriminator 1
 2128 010a 04F15C00 		add	r0, r4, #92
 2129              	.LVL277:
 2130 010e FFF7FEFF 		bl	ld_dword
 2131              	.LVL278:
 2132 0112 8146     		mov	r9, r0
 2133              	.LVL279:
 2134              	.L213:
3135:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 2135              		.loc 1 3135 0 is_stmt 1
 2136 0114 04F14A00 		add	r0, r4, #74
 2137              	.LVL280:
 2138 0118 FFF7FEFF 		bl	ld_word
 2139              	.LVL281:
3136:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2140              		.loc 1 3136 0
 2141 011c 0146     		mov	r1, r0
 2142 011e 0028     		cmp	r0, #0
 2143 0120 00F0E480 		beq	.L237
3139:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 2144              		.loc 1 3139 0
 2145 0124 4219     		adds	r2, r0, r5
 2146 0126 02EB1A12 		add	r2, r2, r10, lsr #4
 2147              	.LVL282:
3140:Middlewares/Third_Party/FatFs/src/ff.c **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 2148              		.loc 1 3140 0
 2149 012a 9145     		cmp	r9, r2
 2150 012c C0F0E080 		bcc	.L238
3141:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 2151              		.loc 1 3141 0
 2152 0130 A9EB0203 		sub	r3, r9, r2
 2153 0134 B3FBF8F3 		udiv	r3, r3, r8
 2154              	.LVL283:
3142:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT32;
 2155              		.loc 1 3142 0
 2156 0138 002B     		cmp	r3, #0
 2157 013a 00F0DB80 		beq	.L239
 2158              	.LVL284:
3144:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 2159              		.loc 1 3144 0
 2160 013e 4FF6F570 		movw	r0, #65525
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 146


 2161              	.LVL285:
 2162 0142 8342     		cmp	r3, r0
 2163 0144 6ED9     		bls	.L240
3143:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 2164              		.loc 1 3143 0
 2165 0146 4FF00309 		mov	r9, #3
 2166              	.LVL286:
 2167              	.L214:
3145:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2168              		.loc 1 3145 0
 2169 014a 40F6F570 		movw	r0, #4085
 2170 014e 8342     		cmp	r3, r0
 2171 0150 01D8     		bhi	.L215
 2172 0152 4FF00109 		mov	r9, #1
 2173              	.LVL287:
 2174              	.L215:
3148:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->volbase = bsect;							/* Volume start sector */
 2175              		.loc 1 3148 0
 2176 0156 03F10208 		add	r8, r3, #2
 2177 015a C4F82080 		str	r8, [r4, #32]
3149:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 2178              		.loc 1 3149 0
 2179 015e A662     		str	r6, [r4, #40]
3150:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->database = bsect + sysect;					/* Data start sector */
 2180              		.loc 1 3150 0
 2181 0160 8B19     		adds	r3, r1, r6
 2182              	.LVL288:
 2183 0162 E362     		str	r3, [r4, #44]
3151:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
 2184              		.loc 1 3151 0
 2185 0164 3244     		add	r2, r2, r6
 2186              	.LVL289:
 2187 0166 6263     		str	r2, [r4, #52]
3152:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
 2188              		.loc 1 3152 0
 2189 0168 B9F1030F 		cmp	r9, #3
 2190 016c 5DD0     		beq	.L247
3158:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 2191              		.loc 1 3158 0
 2192 016e BAF1000F 		cmp	r10, #0
 2193 0172 00F0C580 		beq	.L244
3159:Middlewares/Third_Party/FatFs/src/ff.c **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 2194              		.loc 1 3159 0
 2195 0176 2B44     		add	r3, r3, r5
 2196 0178 2363     		str	r3, [r4, #48]
3161:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2197              		.loc 1 3161 0
 2198 017a B9F1020F 		cmp	r9, #2
 2199 017e 65D0     		beq	.L248
3161:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2200              		.loc 1 3161 0 is_stmt 0 discriminator 2
 2201 0180 08EB4802 		add	r2, r8, r8, lsl #1
 2202 0184 08F00103 		and	r3, r8, #1
 2203 0188 03EB5203 		add	r3, r3, r2, lsr #1
 2204              	.LVL290:
 2205              	.L217:
3163:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 147


 2206              		.loc 1 3163 0 is_stmt 1
 2207 018c 03F2FF13 		addw	r3, r3, #511
 2208              	.LVL291:
 2209 0190 B7EB532F 		cmp	r7, r3, lsr #9
 2210 0194 C0F0B680 		bcc	.L245
3167:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsi_flag = 0x80;
 2211              		.loc 1 3167 0
 2212 0198 4FF0FF33 		mov	r3, #-1
 2213              	.LVL292:
 2214 019c A361     		str	r3, [r4, #24]
 2215 019e 6361     		str	r3, [r4, #20]
3168:Middlewares/Third_Party/FatFs/src/ff.c **** #if (_FS_NOFSINFO & 3) != 3
 2216              		.loc 1 3168 0
 2217 01a0 8023     		movs	r3, #128
 2218 01a2 2371     		strb	r3, [r4, #4]
3170:Middlewares/Third_Party/FatFs/src/ff.c **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
 2219              		.loc 1 3170 0
 2220 01a4 B9F1030F 		cmp	r9, #3
 2221 01a8 53D0     		beq	.L249
 2222              	.L219:
3191:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 2223              		.loc 1 3191 0
 2224 01aa 84F80090 		strb	r9, [r4]
3192:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN == 1
 2225              		.loc 1 3192 0
 2226 01ae 574A     		ldr	r2, .L252+4
 2227 01b0 1388     		ldrh	r3, [r2]
 2228 01b2 0133     		adds	r3, r3, #1
 2229 01b4 9BB2     		uxth	r3, r3
 2230 01b6 1380     		strh	r3, [r2]	@ movhi
 2231 01b8 E380     		strh	r3, [r4, #6]	@ movhi
3200:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 2232              		.loc 1 3200 0
 2233 01ba 0025     		movs	r5, #0
 2234              	.LVL293:
 2235 01bc E561     		str	r5, [r4, #28]
3203:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 2236              		.loc 1 3203 0
 2237 01be 2046     		mov	r0, r4
 2238 01c0 FFF7FEFF 		bl	clear_lock
 2239              	.LVL294:
3205:Middlewares/Third_Party/FatFs/src/ff.c **** }
 2240              		.loc 1 3205 0
 2241 01c4 2846     		mov	r0, r5
 2242 01c6 76E0     		b	.L203
 2243              	.LVL295:
 2244              	.L228:
3054:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2245              		.loc 1 3054 0
 2246 01c8 0020     		movs	r0, #0
 2247              	.LVL296:
 2248              	.L208:
3054:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2249              		.loc 1 3054 0 is_stmt 0 discriminator 4
 2250 01ca 04AB     		add	r3, sp, #16
 2251 01cc 03EB8503 		add	r3, r3, r5, lsl #2
 2252 01d0 43F8100C 		str	r0, [r3, #-16]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 148


3052:Middlewares/Third_Party/FatFs/src/ff.c **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
 2253              		.loc 1 3052 0 is_stmt 1 discriminator 4
 2254 01d4 0135     		adds	r5, r5, #1
 2255              	.LVL297:
 2256              	.L206:
3052:Middlewares/Third_Party/FatFs/src/ff.c **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
 2257              		.loc 1 3052 0 is_stmt 0 discriminator 2
 2258 01d6 032D     		cmp	r5, #3
 2259 01d8 0ED8     		bhi	.L250
3053:Middlewares/Third_Party/FatFs/src/ff.c **** 			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 2260              		.loc 1 3053 0 is_stmt 1
 2261 01da 04F13C00 		add	r0, r4, #60
 2262 01de 2B01     		lsls	r3, r5, #4
 2263 01e0 03F5DF73 		add	r3, r3, #446
 2264 01e4 1844     		add	r0, r0, r3
 2265              	.LVL298:
3054:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2266              		.loc 1 3054 0
 2267 01e6 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 2268 01e8 002B     		cmp	r3, #0
 2269 01ea EDD0     		beq	.L228
3054:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2270              		.loc 1 3054 0 is_stmt 0 discriminator 1
 2271 01ec 0830     		adds	r0, r0, #8
 2272              	.LVL299:
 2273 01ee FFF7FEFF 		bl	ld_dword
 2274              	.LVL300:
 2275 01f2 EAE7     		b	.L208
 2276              	.LVL301:
 2277              	.L227:
3052:Middlewares/Third_Party/FatFs/src/ff.c **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
 2278              		.loc 1 3052 0 is_stmt 1
 2279 01f4 0025     		movs	r5, #0
 2280              	.LVL302:
 2281 01f6 EEE7     		b	.L206
 2282              	.LVL303:
 2283              	.L250:
 2284 01f8 0025     		movs	r5, #0
 2285              	.LVL304:
 2286 01fa 0AE0     		b	.L211
 2287              	.LVL305:
 2288              	.L251:
3060:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 2289              		.loc 1 3060 0 discriminator 1
 2290 01fc 3146     		mov	r1, r6
 2291 01fe 2046     		mov	r0, r4
 2292 0200 FFF7FEFF 		bl	check_fs
 2293              	.LVL306:
3061:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2294              		.loc 1 3061 0 discriminator 1
 2295 0204 0128     		cmp	r0, #1
 2296 0206 7FF63EAF 		bls	.L207
 2297              	.LVL307:
 2298              	.L210:
 2299 020a 0135     		adds	r5, r5, #1
 2300              	.LVL308:
 2301 020c 032D     		cmp	r5, #3
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 149


 2302 020e 3FF63AAF 		bhi	.L207
 2303              	.LVL309:
 2304              	.L211:
3059:Middlewares/Third_Party/FatFs/src/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 2305              		.loc 1 3059 0
 2306 0212 04AB     		add	r3, sp, #16
 2307 0214 03EB8503 		add	r3, r3, r5, lsl #2
 2308 0218 53F8106C 		ldr	r6, [r3, #-16]
 2309              	.LVL310:
3060:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 2310              		.loc 1 3060 0
 2311 021c 002E     		cmp	r6, #0
 2312 021e EDD1     		bne	.L251
 2313 0220 0320     		movs	r0, #3
 2314 0222 F2E7     		b	.L210
 2315              	.LVL311:
 2316              	.L240:
3144:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 2317              		.loc 1 3144 0
 2318 0224 4FF00209 		mov	r9, #2
 2319              	.LVL312:
 2320 0228 8FE7     		b	.L214
 2321              	.LVL313:
 2322              	.L247:
3153:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 2323              		.loc 1 3153 0
 2324 022a 04F16600 		add	r0, r4, #102
 2325 022e FFF7FEFF 		bl	ld_word
 2326              	.LVL314:
 2327 0232 0028     		cmp	r0, #0
 2328 0234 60D1     		bne	.L242
3154:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 2329              		.loc 1 3154 0
 2330 0236 BAF1000F 		cmp	r10, #0
 2331 023a 5FD1     		bne	.L243
3155:Middlewares/Third_Party/FatFs/src/ff.c **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 2332              		.loc 1 3155 0
 2333 023c 04F16800 		add	r0, r4, #104
 2334 0240 FFF7FEFF 		bl	ld_dword
 2335              	.LVL315:
 2336 0244 2063     		str	r0, [r4, #48]
3156:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 2337              		.loc 1 3156 0
 2338 0246 4FEA8803 		lsl	r3, r8, #2
 2339              	.LVL316:
 2340 024a 9FE7     		b	.L217
 2341              	.LVL317:
 2342              	.L248:
3161:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2343              		.loc 1 3161 0 discriminator 1
 2344 024c 4FEA4803 		lsl	r3, r8, #1
 2345 0250 9CE7     		b	.L217
 2346              	.LVL318:
 2347              	.L249:
3171:Middlewares/Third_Party/FatFs/src/ff.c **** 			&& move_window(fs, bsect + 1) == FR_OK)
 2348              		.loc 1 3171 0
 2349 0252 04F16C00 		add	r0, r4, #108
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 150


 2350 0256 FFF7FEFF 		bl	ld_word
 2351              	.LVL319:
 2352 025a 0128     		cmp	r0, #1
 2353 025c A5D1     		bne	.L219
3172:Middlewares/Third_Party/FatFs/src/ff.c **** 		{
 2354              		.loc 1 3172 0
 2355 025e 711C     		adds	r1, r6, #1
 2356 0260 2046     		mov	r0, r4
 2357 0262 FFF7FEFF 		bl	move_window
 2358              	.LVL320:
 2359 0266 0028     		cmp	r0, #0
 2360 0268 9FD1     		bne	.L219
3174:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 2361              		.loc 1 3174 0
 2362 026a 0023     		movs	r3, #0
 2363 026c 2371     		strb	r3, [r4, #4]
3175:Middlewares/Third_Party/FatFs/src/ff.c **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 2364              		.loc 1 3175 0
 2365 026e 04F23A20 		addw	r0, r4, #570
 2366 0272 FFF7FEFF 		bl	ld_word
 2367              	.LVL321:
 2368 0276 4AF65523 		movw	r3, #43605
 2369 027a 9842     		cmp	r0, r3
 2370 027c 95D1     		bne	.L219
3176:Middlewares/Third_Party/FatFs/src/ff.c **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 2371              		.loc 1 3176 0
 2372 027e 04F13C00 		add	r0, r4, #60
 2373 0282 FFF7FEFF 		bl	ld_dword
 2374              	.LVL322:
 2375 0286 224B     		ldr	r3, .L252+8
 2376 0288 9842     		cmp	r0, r3
 2377 028a 8ED1     		bne	.L219
3177:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
 2378              		.loc 1 3177 0
 2379 028c 04F50870 		add	r0, r4, #544
 2380 0290 FFF7FEFF 		bl	ld_dword
 2381              	.LVL323:
 2382 0294 1F4B     		ldr	r3, .L252+12
 2383 0296 9842     		cmp	r0, r3
 2384 0298 87D1     		bne	.L219
3180:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 2385              		.loc 1 3180 0
 2386 029a 04F50970 		add	r0, r4, #548
 2387 029e FFF7FEFF 		bl	ld_dword
 2388              	.LVL324:
 2389 02a2 A061     		str	r0, [r4, #24]
3183:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 2390              		.loc 1 3183 0
 2391 02a4 04F50A70 		add	r0, r4, #552
 2392 02a8 FFF7FEFF 		bl	ld_dword
 2393              	.LVL325:
 2394 02ac 6061     		str	r0, [r4, #20]
 2395 02ae 7CE7     		b	.L219
 2396              	.LVL326:
 2397              	.L220:
3011:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2398              		.loc 1 3011 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 151


 2399 02b0 0B20     		movs	r0, #11
 2400              	.LVL327:
 2401 02b2 00E0     		b	.L203
 2402              	.LVL328:
 2403              	.L221:
3015:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2404              		.loc 1 3015 0
 2405 02b4 0C20     		movs	r0, #12
 2406              	.LVL329:
 2407              	.L203:
3206:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2408              		.loc 1 3206 0
 2409 02b6 04B0     		add	sp, sp, #16
 2410              	.LCFI29:
 2411              		.cfi_remember_state
 2412              		.cfi_def_cfa_offset 32
 2413              		@ sp needed
 2414 02b8 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2415              	.LVL330:
 2416              	.L222:
 2417              	.LCFI30:
 2418              		.cfi_restore_state
3017:Middlewares/Third_Party/FatFs/src/ff.c **** 	*rfs = fs;							/* Return pointer to the file system object */
 2419              		.loc 1 3017 0
 2420 02bc 0F20     		movs	r0, #15
 2421 02be FAE7     		b	.L203
 2422              	.LVL331:
 2423              	.L223:
3027:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2424              		.loc 1 3027 0
 2425 02c0 0020     		movs	r0, #0
 2426              	.LVL332:
 2427 02c2 F8E7     		b	.L203
 2428              	.LVL333:
 2429              	.L224:
3025:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 2430              		.loc 1 3025 0
 2431 02c4 0A20     		movs	r0, #10
 2432              	.LVL334:
 2433 02c6 F6E7     		b	.L203
 2434              	.LVL335:
 2435              	.L225:
3038:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2436              		.loc 1 3038 0
 2437 02c8 0320     		movs	r0, #3
 2438              	.LVL336:
 2439 02ca F4E7     		b	.L203
 2440              	.LVL337:
 2441              	.L226:
3041:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2442              		.loc 1 3041 0
 2443 02cc 0A20     		movs	r0, #10
 2444              	.LVL338:
 2445 02ce F2E7     		b	.L203
 2446              	.LVL339:
 2447              	.L230:
3063:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 152


 2448              		.loc 1 3063 0
 2449 02d0 0120     		movs	r0, #1
 2450              	.LVL340:
 2451 02d2 F0E7     		b	.L203
 2452              	.LVL341:
 2453              	.L231:
3064:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2454              		.loc 1 3064 0
 2455 02d4 0D20     		movs	r0, #13
 2456              	.LVL342:
 2457 02d6 EEE7     		b	.L203
 2458              	.L232:
3116:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2459              		.loc 1 3116 0
 2460 02d8 0D20     		movs	r0, #13
 2461 02da ECE7     		b	.L203
 2462              	.LVL343:
 2463              	.L233:
3123:Middlewares/Third_Party/FatFs/src/ff.c **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 2464              		.loc 1 3123 0
 2465 02dc 0D20     		movs	r0, #13
 2466              	.LVL344:
 2467 02de EAE7     		b	.L203
 2468              	.LVL345:
 2469              	.L234:
3127:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2470              		.loc 1 3127 0
 2471 02e0 0D20     		movs	r0, #13
 2472 02e2 E8E7     		b	.L203
 2473              	.L235:
 2474 02e4 0D20     		movs	r0, #13
 2475 02e6 E6E7     		b	.L203
 2476              	.L236:
3130:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2477              		.loc 1 3130 0
 2478 02e8 0D20     		movs	r0, #13
 2479 02ea E4E7     		b	.L203
 2480              	.LVL346:
 2481              	.L237:
3136:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2482              		.loc 1 3136 0
 2483 02ec 0D20     		movs	r0, #13
 2484              	.LVL347:
 2485 02ee E2E7     		b	.L203
 2486              	.LVL348:
 2487              	.L238:
3140:Middlewares/Third_Party/FatFs/src/ff.c **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 2488              		.loc 1 3140 0
 2489 02f0 0D20     		movs	r0, #13
 2490              	.LVL349:
 2491 02f2 E0E7     		b	.L203
 2492              	.LVL350:
 2493              	.L239:
3142:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT32;
 2494              		.loc 1 3142 0
 2495 02f4 0D20     		movs	r0, #13
 2496              	.LVL351:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 153


 2497 02f6 DEE7     		b	.L203
 2498              	.LVL352:
 2499              	.L242:
3153:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 2500              		.loc 1 3153 0
 2501 02f8 0D20     		movs	r0, #13
 2502 02fa DCE7     		b	.L203
 2503              	.L243:
3154:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 2504              		.loc 1 3154 0
 2505 02fc 0D20     		movs	r0, #13
 2506 02fe DAE7     		b	.L203
 2507              	.LVL353:
 2508              	.L244:
3158:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 2509              		.loc 1 3158 0
 2510 0300 0D20     		movs	r0, #13
 2511 0302 D8E7     		b	.L203
 2512              	.LVL354:
 2513              	.L245:
3163:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2514              		.loc 1 3163 0
 2515 0304 0D20     		movs	r0, #13
 2516 0306 D6E7     		b	.L203
 2517              	.L253:
 2518              		.align	2
 2519              	.L252:
 2520 0308 00000000 		.word	.LANCHOR3
 2521 030c 00000000 		.word	.LANCHOR4
 2522 0310 52526141 		.word	1096897106
 2523 0314 72724161 		.word	1631679090
 2524              		.cfi_endproc
 2525              	.LFE186:
 2527              		.section	.text.put_fat,"ax",%progbits
 2528              		.align	1
 2529              		.syntax unified
 2530              		.thumb
 2531              		.thumb_func
 2532              		.fpu fpv5-sp-d16
 2534              	put_fat:
 2535              	.LFB163:
1086:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT bc;
 2536              		.loc 1 1086 0
 2537              		.cfi_startproc
 2538              		@ args = 0, pretend = 0, frame = 0
 2539              		@ frame_needed = 0, uses_anonymous_args = 0
 2540              	.LVL355:
 2541 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2542              	.LCFI31:
 2543              		.cfi_def_cfa_offset 32
 2544              		.cfi_offset 4, -32
 2545              		.cfi_offset 5, -28
 2546              		.cfi_offset 6, -24
 2547              		.cfi_offset 7, -20
 2548              		.cfi_offset 8, -16
 2549              		.cfi_offset 9, -12
 2550              		.cfi_offset 10, -8
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 154


 2551              		.cfi_offset 14, -4
 2552              	.LVL356:
1091:Middlewares/Third_Party/FatFs/src/ff.c **** 		switch (fs->fs_type) {
 2553              		.loc 1 1091 0
 2554 0004 0129     		cmp	r1, #1
 2555 0006 7AD9     		bls	.L263
1091:Middlewares/Third_Party/FatFs/src/ff.c **** 		switch (fs->fs_type) {
 2556              		.loc 1 1091 0 is_stmt 0 discriminator 1
 2557 0008 036A     		ldr	r3, [r0, #32]
 2558 000a 8B42     		cmp	r3, r1
 2559 000c 79D9     		bls	.L264
 2560 000e 1746     		mov	r7, r2
 2561 0010 0C46     		mov	r4, r1
 2562 0012 0646     		mov	r6, r0
1092:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT12 :	/* Bitfield items */
 2563              		.loc 1 1092 0 is_stmt 1
 2564 0014 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2565 0016 022B     		cmp	r3, #2
 2566 0018 43D0     		beq	.L256
 2567 001a 032B     		cmp	r3, #3
 2568 001c 54D0     		beq	.L257
 2569 001e 012B     		cmp	r3, #1
 2570 0020 01D0     		beq	.L268
1089:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2571              		.loc 1 1089 0
 2572 0022 0225     		movs	r5, #2
 2573 0024 6EE0     		b	.L255
 2574              	.L268:
 2575              	.LVL357:
1094:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2576              		.loc 1 1094 0
 2577 0026 01EB5108 		add	r8, r1, r1, lsr #1
 2578              	.LVL358:
1095:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 2579              		.loc 1 1095 0
 2580 002a C16A     		ldr	r1, [r0, #44]
 2581              	.LVL359:
 2582 002c 01EB5821 		add	r1, r1, r8, lsr #9
 2583 0030 FFF7FEFF 		bl	move_window
 2584              	.LVL360:
1096:Middlewares/Third_Party/FatFs/src/ff.c **** 			p = fs->win + bc++ % SS(fs);
 2585              		.loc 1 1096 0
 2586 0034 0546     		mov	r5, r0
 2587 0036 0028     		cmp	r0, #0
 2588 0038 64D1     		bne	.L255
1097:Middlewares/Third_Party/FatFs/src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2589              		.loc 1 1097 0
 2590 003a 06F13C0A 		add	r10, r6, #60
 2591 003e 08F10109 		add	r9, r8, #1
 2592              	.LVL361:
 2593 0042 C8F30808 		ubfx	r8, r8, #0, #9
 2594              	.LVL362:
1098:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2595              		.loc 1 1098 0
 2596 0046 14F00104 		ands	r4, r4, #1
 2597              	.LVL363:
 2598 004a 1FD0     		beq	.L259
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 155


1098:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2599              		.loc 1 1098 0 is_stmt 0 discriminator 1
 2600 004c 1AF90830 		ldrsb	r3, [r10, r8]
 2601 0050 03F00F03 		and	r3, r3, #15
 2602 0054 3A01     		lsls	r2, r7, #4
 2603 0056 02F47F62 		and	r2, r2, #4080
 2604 005a 1343     		orrs	r3, r3, r2
 2605 005c DBB2     		uxtb	r3, r3
 2606              	.L260:
1098:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2607              		.loc 1 1098 0 discriminator 4
 2608 005e 0AF80830 		strb	r3, [r10, r8]
1099:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2609              		.loc 1 1099 0 is_stmt 1 discriminator 4
 2610 0062 0123     		movs	r3, #1
 2611 0064 F370     		strb	r3, [r6, #3]
1100:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 2612              		.loc 1 1100 0 discriminator 4
 2613 0066 F16A     		ldr	r1, [r6, #44]
 2614 0068 01EB5921 		add	r1, r1, r9, lsr #9
 2615 006c 3046     		mov	r0, r6
 2616              	.LVL364:
 2617 006e FFF7FEFF 		bl	move_window
 2618              	.LVL365:
1101:Middlewares/Third_Party/FatFs/src/ff.c **** 			p = fs->win + bc % SS(fs);
 2619              		.loc 1 1101 0 discriminator 4
 2620 0072 0546     		mov	r5, r0
 2621 0074 0028     		cmp	r0, #0
 2622 0076 45D1     		bne	.L255
1102:Middlewares/Third_Party/FatFs/src/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 2623              		.loc 1 1102 0
 2624 0078 C9F30809 		ubfx	r9, r9, #0, #9
 2625              	.LVL366:
1103:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2626              		.loc 1 1103 0
 2627 007c 44B1     		cbz	r4, .L261
1103:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2628              		.loc 1 1103 0 is_stmt 0 discriminator 1
 2629 007e C7F30712 		ubfx	r2, r7, #4, #8
 2630              	.LVL367:
 2631              	.L262:
1103:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2632              		.loc 1 1103 0 discriminator 4
 2633 0082 0AF80920 		strb	r2, [r10, r9]
1104:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2634              		.loc 1 1104 0 is_stmt 1 discriminator 4
 2635 0086 0123     		movs	r3, #1
 2636 0088 F370     		strb	r3, [r6, #3]
1105:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2637              		.loc 1 1105 0 discriminator 4
 2638 008a 3BE0     		b	.L255
 2639              	.LVL368:
 2640              	.L259:
1098:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2641              		.loc 1 1098 0 discriminator 2
 2642 008c FBB2     		uxtb	r3, r7
 2643 008e E6E7     		b	.L260
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 156


 2644              	.LVL369:
 2645              	.L261:
1103:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2646              		.loc 1 1103 0 discriminator 2
 2647 0090 1AF90920 		ldrsb	r2, [r10, r9]
 2648 0094 22F00F02 		bic	r2, r2, #15
 2649 0098 C7F30327 		ubfx	r7, r7, #8, #4
 2650              	.LVL370:
 2651 009c 3A43     		orrs	r2, r2, r7
 2652 009e D2B2     		uxtb	r2, r2
 2653 00a0 EFE7     		b	.L262
 2654              	.LVL371:
 2655              	.L256:
1108:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 2656              		.loc 1 1108 0
 2657 00a2 C16A     		ldr	r1, [r0, #44]
 2658              	.LVL372:
 2659 00a4 01EB1421 		add	r1, r1, r4, lsr #8
 2660 00a8 FFF7FEFF 		bl	move_window
 2661              	.LVL373:
1109:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 2662              		.loc 1 1109 0
 2663 00ac 0546     		mov	r5, r0
 2664 00ae 48BB     		cbnz	r0, .L255
1110:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2665              		.loc 1 1110 0
 2666 00b0 06F13C00 		add	r0, r6, #60
 2667              	.LVL374:
 2668 00b4 6400     		lsls	r4, r4, #1
 2669              	.LVL375:
 2670 00b6 04F4FF74 		and	r4, r4, #510
 2671 00ba B9B2     		uxth	r1, r7
 2672 00bc 2044     		add	r0, r0, r4
 2673 00be FFF7FEFF 		bl	st_word
 2674              	.LVL376:
1111:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2675              		.loc 1 1111 0
 2676 00c2 0123     		movs	r3, #1
 2677 00c4 F370     		strb	r3, [r6, #3]
1112:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2678              		.loc 1 1112 0
 2679 00c6 1DE0     		b	.L255
 2680              	.LVL377:
 2681              	.L257:
1118:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 2682              		.loc 1 1118 0
 2683 00c8 C16A     		ldr	r1, [r0, #44]
 2684              	.LVL378:
 2685 00ca 01EBD411 		add	r1, r1, r4, lsr #7
 2686 00ce FFF7FEFF 		bl	move_window
 2687              	.LVL379:
1119:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 2688              		.loc 1 1119 0
 2689 00d2 0546     		mov	r5, r0
 2690 00d4 B0B9     		cbnz	r0, .L255
1121:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 2691              		.loc 1 1121 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 157


 2692 00d6 27F07047 		bic	r7, r7, #-268435456
 2693              	.LVL380:
 2694 00da 06F13C03 		add	r3, r6, #60
 2695 00de A100     		lsls	r1, r4, #2
 2696 00e0 01F4FE71 		and	r1, r1, #508
 2697 00e4 5C18     		adds	r4, r3, r1
 2698              	.LVL381:
 2699 00e6 2046     		mov	r0, r4
 2700              	.LVL382:
 2701 00e8 FFF7FEFF 		bl	ld_dword
 2702              	.LVL383:
 2703 00ec 00F07041 		and	r1, r0, #-268435456
 2704              	.LVL384:
1123:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2705              		.loc 1 1123 0
 2706 00f0 3943     		orrs	r1, r1, r7
 2707              	.LVL385:
 2708 00f2 2046     		mov	r0, r4
 2709 00f4 FFF7FEFF 		bl	st_dword
 2710              	.LVL386:
1124:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2711              		.loc 1 1124 0
 2712 00f8 0123     		movs	r3, #1
 2713 00fa F370     		strb	r3, [r6, #3]
1125:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2714              		.loc 1 1125 0
 2715 00fc 02E0     		b	.L255
 2716              	.LVL387:
 2717              	.L263:
1089:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2718              		.loc 1 1089 0
 2719 00fe 0225     		movs	r5, #2
 2720 0100 00E0     		b	.L255
 2721              	.L264:
 2722 0102 0225     		movs	r5, #2
 2723              	.LVL388:
 2724              	.L255:
1129:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2725              		.loc 1 1129 0
 2726 0104 2846     		mov	r0, r5
 2727 0106 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2728              		.cfi_endproc
 2729              	.LFE163:
 2731              		.section	.text.get_fat,"ax",%progbits
 2732              		.align	1
 2733              		.syntax unified
 2734              		.thumb
 2735              		.thumb_func
 2736              		.fpu fpv5-sp-d16
 2738              	get_fat:
 2739              	.LFB162:
1005:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT wc, bc;
 2740              		.loc 1 1005 0
 2741              		.cfi_startproc
 2742              		@ args = 0, pretend = 0, frame = 0
 2743              		@ frame_needed = 0, uses_anonymous_args = 0
 2744              	.LVL389:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 158


 2745 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2746              	.LCFI32:
 2747              		.cfi_def_cfa_offset 24
 2748              		.cfi_offset 3, -24
 2749              		.cfi_offset 4, -20
 2750              		.cfi_offset 5, -16
 2751              		.cfi_offset 6, -12
 2752              		.cfi_offset 7, -8
 2753              		.cfi_offset 14, -4
1008:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2754              		.loc 1 1008 0
 2755 0002 0668     		ldr	r6, [r0]
 2756              	.LVL390:
1011:Middlewares/Third_Party/FatFs/src/ff.c **** 		val = 1;	/* Internal error */
 2757              		.loc 1 1011 0
 2758 0004 0129     		cmp	r1, #1
 2759 0006 53D9     		bls	.L275
1011:Middlewares/Third_Party/FatFs/src/ff.c **** 		val = 1;	/* Internal error */
 2760              		.loc 1 1011 0 is_stmt 0 discriminator 1
 2761 0008 336A     		ldr	r3, [r6, #32]
 2762 000a 8B42     		cmp	r3, r1
 2763 000c 52D9     		bls	.L276
 2764 000e 0C46     		mov	r4, r1
 2765              	.LVL391:
1017:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT12 :
 2766              		.loc 1 1017 0 is_stmt 1
 2767 0010 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 2768 0012 022B     		cmp	r3, #2
 2769 0014 2BD0     		beq	.L271
 2770 0016 032B     		cmp	r3, #3
 2771 0018 39D0     		beq	.L272
 2772 001a 012B     		cmp	r3, #1
 2773 001c 01D0     		beq	.L284
1065:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2774              		.loc 1 1065 0
 2775 001e 0120     		movs	r0, #1
 2776              	.LVL392:
 2777 0020 47E0     		b	.L269
 2778              	.LVL393:
 2779              	.L284:
1019:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2780              		.loc 1 1019 0
 2781 0022 01EB5105 		add	r5, r1, r1, lsr #1
 2782              	.LVL394:
1020:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc = fs->win[bc++ % SS(fs)];
 2783              		.loc 1 1020 0
 2784 0026 F16A     		ldr	r1, [r6, #44]
 2785              	.LVL395:
 2786 0028 01EB5521 		add	r1, r1, r5, lsr #9
 2787 002c 3046     		mov	r0, r6
 2788              	.LVL396:
 2789 002e FFF7FEFF 		bl	move_window
 2790              	.LVL397:
 2791 0032 0028     		cmp	r0, #0
 2792 0034 40D1     		bne	.L278
1021:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2793              		.loc 1 1021 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 159


 2794 0036 6F1C     		adds	r7, r5, #1
 2795              	.LVL398:
 2796 0038 C5F30805 		ubfx	r5, r5, #0, #9
 2797 003c 3544     		add	r5, r5, r6
 2798 003e 95F83C50 		ldrb	r5, [r5, #60]	@ zero_extendqisi2
 2799              	.LVL399:
1022:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc |= fs->win[bc % SS(fs)] << 8;
 2800              		.loc 1 1022 0
 2801 0042 F16A     		ldr	r1, [r6, #44]
 2802 0044 01EB5721 		add	r1, r1, r7, lsr #9
 2803 0048 3046     		mov	r0, r6
 2804 004a FFF7FEFF 		bl	move_window
 2805              	.LVL400:
 2806 004e B0BB     		cbnz	r0, .L279
1023:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 2807              		.loc 1 1023 0
 2808 0050 C7F30803 		ubfx	r3, r7, #0, #9
 2809 0054 3344     		add	r3, r3, r6
 2810 0056 93F83C00 		ldrb	r0, [r3, #60]	@ zero_extendqisi2
 2811 005a 45EA0020 		orr	r0, r5, r0, lsl #8
 2812              	.LVL401:
1024:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2813              		.loc 1 1024 0
 2814 005e 14F0010F 		tst	r4, #1
 2815 0062 01D0     		beq	.L274
1024:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2816              		.loc 1 1024 0 is_stmt 0 discriminator 1
 2817 0064 0009     		lsrs	r0, r0, #4
 2818              	.LVL402:
 2819 0066 24E0     		b	.L269
 2820              	.LVL403:
 2821              	.L274:
1024:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2822              		.loc 1 1024 0 discriminator 2
 2823 0068 C0F30B00 		ubfx	r0, r0, #0, #12
 2824              	.LVL404:
 2825 006c 21E0     		b	.L269
 2826              	.LVL405:
 2827              	.L271:
1028:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = ld_word(fs->win + clst * 2 % SS(fs));
 2828              		.loc 1 1028 0 is_stmt 1
 2829 006e F16A     		ldr	r1, [r6, #44]
 2830              	.LVL406:
 2831 0070 01EB1421 		add	r1, r1, r4, lsr #8
 2832 0074 3046     		mov	r0, r6
 2833              	.LVL407:
 2834 0076 FFF7FEFF 		bl	move_window
 2835              	.LVL408:
 2836 007a 18BB     		cbnz	r0, .L280
1029:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2837              		.loc 1 1029 0
 2838 007c 06F13C00 		add	r0, r6, #60
 2839 0080 6100     		lsls	r1, r4, #1
 2840 0082 01F4FF71 		and	r1, r1, #510
 2841 0086 0844     		add	r0, r0, r1
 2842 0088 FFF7FEFF 		bl	ld_word
 2843              	.LVL409:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 160


1030:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2844              		.loc 1 1030 0
 2845 008c 11E0     		b	.L269
 2846              	.LVL410:
 2847              	.L272:
1033:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 2848              		.loc 1 1033 0
 2849 008e F16A     		ldr	r1, [r6, #44]
 2850              	.LVL411:
 2851 0090 01EBD411 		add	r1, r1, r4, lsr #7
 2852 0094 3046     		mov	r0, r6
 2853              	.LVL412:
 2854 0096 FFF7FEFF 		bl	move_window
 2855              	.LVL413:
 2856 009a B0B9     		cbnz	r0, .L281
1034:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2857              		.loc 1 1034 0
 2858 009c 3C36     		adds	r6, r6, #60
 2859              	.LVL414:
 2860 009e A100     		lsls	r1, r4, #2
 2861 00a0 01F4FE70 		and	r0, r1, #508
 2862 00a4 3044     		add	r0, r0, r6
 2863 00a6 FFF7FEFF 		bl	ld_dword
 2864              	.LVL415:
 2865 00aa 20F07040 		bic	r0, r0, #-268435456
 2866              	.LVL416:
1035:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 2867              		.loc 1 1035 0
 2868 00ae 00E0     		b	.L269
 2869              	.LVL417:
 2870              	.L275:
1012:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2871              		.loc 1 1012 0
 2872 00b0 0120     		movs	r0, #1
 2873              	.LVL418:
 2874              	.L269:
1070:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2875              		.loc 1 1070 0
 2876 00b2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2877              	.LVL419:
 2878              	.L276:
1012:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2879              		.loc 1 1012 0
 2880 00b4 0120     		movs	r0, #1
 2881              	.LVL420:
 2882 00b6 FCE7     		b	.L269
 2883              	.LVL421:
 2884              	.L278:
1015:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2885              		.loc 1 1015 0
 2886 00b8 4FF0FF30 		mov	r0, #-1
 2887 00bc F9E7     		b	.L269
 2888              	.LVL422:
 2889              	.L279:
 2890 00be 4FF0FF30 		mov	r0, #-1
 2891 00c2 F6E7     		b	.L269
 2892              	.LVL423:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 161


 2893              	.L280:
 2894 00c4 4FF0FF30 		mov	r0, #-1
 2895 00c8 F3E7     		b	.L269
 2896              	.L281:
 2897 00ca 4FF0FF30 		mov	r0, #-1
1069:Middlewares/Third_Party/FatFs/src/ff.c **** }
 2898              		.loc 1 1069 0
 2899 00ce F0E7     		b	.L269
 2900              		.cfi_endproc
 2901              	.LFE162:
 2903              		.section	.text.dir_sdi,"ax",%progbits
 2904              		.align	1
 2905              		.syntax unified
 2906              		.thumb
 2907              		.thumb_func
 2908              		.fpu fpv5-sp-d16
 2910              	dir_sdi:
 2911              	.LFB167:
1474:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD csz, clst;
 2912              		.loc 1 1474 0
 2913              		.cfi_startproc
 2914              		@ args = 0, pretend = 0, frame = 0
 2915              		@ frame_needed = 0, uses_anonymous_args = 0
 2916              	.LVL424:
 2917 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2918              	.LCFI33:
 2919              		.cfi_def_cfa_offset 24
 2920              		.cfi_offset 4, -24
 2921              		.cfi_offset 5, -20
 2922              		.cfi_offset 6, -16
 2923              		.cfi_offset 7, -12
 2924              		.cfi_offset 8, -8
 2925              		.cfi_offset 14, -4
1476:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2926              		.loc 1 1476 0
 2927 0004 0768     		ldr	r7, [r0]
 2928              	.LVL425:
1479:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_INT_ERR;
 2929              		.loc 1 1479 0
 2930 0006 B1F5001F 		cmp	r1, #2097152
 2931 000a 3BD2     		bcs	.L292
 2932 000c 0646     		mov	r6, r0
 2933 000e 0D46     		mov	r5, r1
1479:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_INT_ERR;
 2934              		.loc 1 1479 0 is_stmt 0 discriminator 1
 2935 0010 11F01F0F 		tst	r1, #31
 2936 0014 39D1     		bne	.L293
1482:Middlewares/Third_Party/FatFs/src/ff.c **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 2937              		.loc 1 1482 0 is_stmt 1
 2938 0016 7161     		str	r1, [r6, #20]
1483:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 2939              		.loc 1 1483 0
 2940 0018 8468     		ldr	r4, [r0, #8]
 2941              	.LVL426:
1484:Middlewares/Third_Party/FatFs/src/ff.c **** 		clst = fs->dirbase;
 2942              		.loc 1 1484 0
 2943 001a 1CB9     		cbnz	r4, .L287
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 162


1484:Middlewares/Third_Party/FatFs/src/ff.c **** 		clst = fs->dirbase;
 2944              		.loc 1 1484 0 is_stmt 0 discriminator 1
 2945 001c 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 2946 001e 022B     		cmp	r3, #2
 2947 0020 00D9     		bls	.L287
1485:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 2948              		.loc 1 1485 0 is_stmt 1
 2949 0022 3C6B     		ldr	r4, [r7, #48]
 2950              	.LVL427:
 2951              	.L287:
1489:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 2952              		.loc 1 1489 0
 2953 0024 94B9     		cbnz	r4, .L288
1490:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect = fs->dirbase;
 2954              		.loc 1 1490 0
 2955 0026 3B89     		ldrh	r3, [r7, #8]
 2956 0028 B3EB551F 		cmp	r3, r5, lsr #5
 2957 002c 2FD9     		bls	.L294
1491:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2958              		.loc 1 1491 0
 2959 002e 3B6B     		ldr	r3, [r7, #48]
 2960 0030 F361     		str	r3, [r6, #28]
 2961              	.LVL428:
 2962              	.L289:
1503:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp->sect) return FR_INT_ERR;
 2963              		.loc 1 1503 0
 2964 0032 B461     		str	r4, [r6, #24]
1504:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 2965              		.loc 1 1504 0
 2966 0034 F369     		ldr	r3, [r6, #28]
 2967 0036 93B3     		cbz	r3, .L298
1505:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 2968              		.loc 1 1505 0
 2969 0038 03EB5523 		add	r3, r3, r5, lsr #9
 2970 003c F361     		str	r3, [r6, #28]
1506:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2971              		.loc 1 1506 0
 2972 003e 3C37     		adds	r7, r7, #60
 2973              	.LVL429:
 2974 0040 C5F30805 		ubfx	r5, r5, #0, #9
 2975              	.LVL430:
 2976 0044 3D44     		add	r5, r5, r7
 2977 0046 3562     		str	r5, [r6, #32]
1508:Middlewares/Third_Party/FatFs/src/ff.c **** }
 2978              		.loc 1 1508 0
 2979 0048 0020     		movs	r0, #0
 2980 004a 1CE0     		b	.L286
 2981              	.LVL431:
 2982              	.L288:
1494:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (ofs >= csz) {				/* Follow cluster chain */
 2983              		.loc 1 1494 0
 2984 004c B7F80A80 		ldrh	r8, [r7, #10]
 2985 0050 4FEA4828 		lsl	r8, r8, #9
 2986              	.LVL432:
 2987              	.L290:
1495:Middlewares/Third_Party/FatFs/src/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 2988              		.loc 1 1495 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 163


 2989 0054 4545     		cmp	r5, r8
 2990 0056 0FD3     		bcc	.L300
1496:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2991              		.loc 1 1496 0
 2992 0058 2146     		mov	r1, r4
 2993 005a 3046     		mov	r0, r6
 2994 005c FFF7FEFF 		bl	get_fat
 2995              	.LVL433:
 2996 0060 0446     		mov	r4, r0
 2997              	.LVL434:
1497:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2998              		.loc 1 1497 0
 2999 0062 B0F1FF3F 		cmp	r0, #-1
 3000 0066 14D0     		beq	.L295
1498:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs -= csz;
 3001              		.loc 1 1498 0
 3002 0068 0128     		cmp	r0, #1
 3003 006a 14D9     		bls	.L296
1498:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs -= csz;
 3004              		.loc 1 1498 0 is_stmt 0 discriminator 2
 3005 006c 3B6A     		ldr	r3, [r7, #32]
 3006 006e 8342     		cmp	r3, r0
 3007 0070 13D9     		bls	.L297
1499:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3008              		.loc 1 1499 0 is_stmt 1
 3009 0072 A5EB0805 		sub	r5, r5, r8
 3010              	.LVL435:
 3011 0076 EDE7     		b	.L290
 3012              	.LVL436:
 3013              	.L300:
1501:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3014              		.loc 1 1501 0
 3015 0078 2146     		mov	r1, r4
 3016 007a 3846     		mov	r0, r7
 3017 007c FFF7FEFF 		bl	clust2sect
 3018              	.LVL437:
 3019 0080 F061     		str	r0, [r6, #28]
 3020 0082 D6E7     		b	.L289
 3021              	.LVL438:
 3022              	.L292:
1480:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3023              		.loc 1 1480 0
 3024 0084 0220     		movs	r0, #2
 3025              	.LVL439:
 3026              	.L286:
1509:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3027              		.loc 1 1509 0
 3028 0086 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3029              	.LVL440:
 3030              	.L293:
1480:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3031              		.loc 1 1480 0
 3032 008a 0220     		movs	r0, #2
 3033              	.LVL441:
 3034 008c FBE7     		b	.L286
 3035              	.LVL442:
 3036              	.L294:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 164


1490:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect = fs->dirbase;
 3037              		.loc 1 1490 0
 3038 008e 0220     		movs	r0, #2
 3039              	.LVL443:
 3040 0090 F9E7     		b	.L286
 3041              	.LVL444:
 3042              	.L295:
1497:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 3043              		.loc 1 1497 0
 3044 0092 0120     		movs	r0, #1
 3045              	.LVL445:
 3046 0094 F7E7     		b	.L286
 3047              	.LVL446:
 3048              	.L296:
1498:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs -= csz;
 3049              		.loc 1 1498 0
 3050 0096 0220     		movs	r0, #2
 3051              	.LVL447:
 3052 0098 F5E7     		b	.L286
 3053              	.LVL448:
 3054              	.L297:
 3055 009a 0220     		movs	r0, #2
 3056              	.LVL449:
 3057 009c F3E7     		b	.L286
 3058              	.LVL450:
 3059              	.L298:
1504:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 3060              		.loc 1 1504 0
 3061 009e 0220     		movs	r0, #2
 3062 00a0 F1E7     		b	.L286
 3063              		.cfi_endproc
 3064              	.LFE167:
 3066              		.section	.text.create_chain,"ax",%progbits
 3067              		.align	1
 3068              		.syntax unified
 3069              		.thumb
 3070              		.thumb_func
 3071              		.fpu fpv5-sp-d16
 3073              	create_chain:
 3074              	.LFB165:
1355:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cs, ncl, scl;
 3075              		.loc 1 1355 0
 3076              		.cfi_startproc
 3077              		@ args = 0, pretend = 0, frame = 0
 3078              		@ frame_needed = 0, uses_anonymous_args = 0
 3079              	.LVL451:
 3080 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3081              	.LCFI34:
 3082              		.cfi_def_cfa_offset 24
 3083              		.cfi_offset 4, -24
 3084              		.cfi_offset 5, -20
 3085              		.cfi_offset 6, -16
 3086              		.cfi_offset 7, -12
 3087              		.cfi_offset 8, -8
 3088              		.cfi_offset 14, -4
 3089 0004 0746     		mov	r7, r0
1358:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 165


 3090              		.loc 1 1358 0
 3091 0006 0668     		ldr	r6, [r0]
 3092              	.LVL452:
1361:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = fs->last_clst;				/* Get suggested cluster to start from */
 3093              		.loc 1 1361 0
 3094 0008 8846     		mov	r8, r1
 3095 000a 31B9     		cbnz	r1, .L302
1362:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 3096              		.loc 1 1362 0
 3097 000c 7569     		ldr	r5, [r6, #20]
 3098              	.LVL453:
1363:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3099              		.loc 1 1363 0
 3100 000e 8DB1     		cbz	r5, .L311
1363:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3101              		.loc 1 1363 0 is_stmt 0 discriminator 2
 3102 0010 336A     		ldr	r3, [r6, #32]
 3103 0012 AB42     		cmp	r3, r5
 3104 0014 0FD8     		bhi	.L303
1363:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3105              		.loc 1 1363 0
 3106 0016 0125     		movs	r5, #1
 3107              	.LVL454:
 3108 0018 0DE0     		b	.L303
 3109              	.LVL455:
 3110              	.L302:
1366:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs < 2) return 1;				/* Invalid FAT value */
 3111              		.loc 1 1366 0 is_stmt 1
 3112 001a FFF7FEFF 		bl	get_fat
 3113              	.LVL456:
 3114 001e 0346     		mov	r3, r0
 3115              	.LVL457:
1367:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 3116              		.loc 1 1367 0
 3117 0020 0128     		cmp	r0, #1
 3118 0022 4CD9     		bls	.L313
1368:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 3119              		.loc 1 1368 0
 3120 0024 B0F1FF3F 		cmp	r0, #-1
 3121 0028 4ED0     		beq	.L301
1369:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = clst;
 3122              		.loc 1 1369 0
 3123 002a 326A     		ldr	r2, [r6, #32]
 3124 002c 8242     		cmp	r2, r0
 3125 002e 4BD8     		bhi	.L301
1370:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3126              		.loc 1 1370 0
 3127 0030 4546     		mov	r5, r8
 3128 0032 00E0     		b	.L303
 3129              	.LVL458:
 3130              	.L311:
1363:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3131              		.loc 1 1363 0
 3132 0034 0125     		movs	r5, #1
 3133              	.LVL459:
 3134              	.L303:
1400:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 166


 3135              		.loc 1 1400 0
 3136 0036 2C46     		mov	r4, r5
 3137 0038 0CE0     		b	.L307
 3138              	.LVL460:
 3139              	.L305:
1407:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cs == 0) break;				/* Found a free cluster */
 3140              		.loc 1 1407 0
 3141 003a 2146     		mov	r1, r4
 3142 003c 3846     		mov	r0, r7
 3143 003e FFF7FEFF 		bl	get_fat
 3144              	.LVL461:
1408:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 3145              		.loc 1 1408 0
 3146 0042 0346     		mov	r3, r0
 3147 0044 70B1     		cbz	r0, .L306
1409:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == scl) return 0;		/* No free cluster */
 3148              		.loc 1 1409 0
 3149 0046 B0F1FF3F 		cmp	r0, #-1
 3150 004a 18BF     		it	ne
 3151 004c 0128     		cmpne	r0, #1
 3152 004e 3BD0     		beq	.L301
1410:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3153              		.loc 1 1410 0
 3154 0050 AC42     		cmp	r4, r5
 3155 0052 38D0     		beq	.L318
 3156              	.LVL462:
 3157              	.L307:
1402:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 3158              		.loc 1 1402 0
 3159 0054 0134     		adds	r4, r4, #1
 3160              	.LVL463:
1403:Middlewares/Third_Party/FatFs/src/ff.c **** 				ncl = 2;
 3161              		.loc 1 1403 0
 3162 0056 336A     		ldr	r3, [r6, #32]
 3163 0058 A342     		cmp	r3, r4
 3164 005a EED8     		bhi	.L305
 3165              	.LVL464:
1405:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3166              		.loc 1 1405 0
 3167 005c 012D     		cmp	r5, #1
 3168 005e 30D9     		bls	.L314
1404:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ncl > scl) return 0;	/* No free cluster */
 3169              		.loc 1 1404 0
 3170 0060 0224     		movs	r4, #2
 3171 0062 EAE7     		b	.L305
 3172              	.LVL465:
 3173              	.L306:
1412:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && clst != 0) {
 3174              		.loc 1 1412 0
 3175 0064 4FF0FF32 		mov	r2, #-1
 3176 0068 2146     		mov	r1, r4
 3177 006a 3046     		mov	r0, r6
 3178              	.LVL466:
 3179 006c FFF7FEFF 		bl	put_fat
 3180              	.LVL467:
1413:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 3181              		.loc 1 1413 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 167


 3182 0070 0246     		mov	r2, r0
 3183 0072 18F10003 		adds	r3, r8, #0
 3184 0076 18BF     		it	ne
 3185 0078 0123     		movne	r3, #1
 3186 007a 0028     		cmp	r0, #0
 3187 007c 0CBF     		ite	eq
 3188 007e 1846     		moveq	r0, r3
 3189 0080 0020     		movne	r0, #0
 3190              	.LVL468:
 3191 0082 70B9     		cbnz	r0, .L319
 3192              	.L308:
 3193              	.LVL469:
1418:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->last_clst = ncl;
 3194              		.loc 1 1418 0
 3195 0084 A2B9     		cbnz	r2, .L309
1419:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 3196              		.loc 1 1419 0
 3197 0086 7461     		str	r4, [r6, #20]
1420:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsi_flag |= 1;
 3198              		.loc 1 1420 0
 3199 0088 B269     		ldr	r2, [r6, #24]
 3200              	.LVL470:
 3201 008a 336A     		ldr	r3, [r6, #32]
 3202 008c 023B     		subs	r3, r3, #2
 3203 008e 9A42     		cmp	r2, r3
 3204 0090 01D8     		bhi	.L310
1420:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsi_flag |= 1;
 3205              		.loc 1 1420 0 is_stmt 0 discriminator 1
 3206 0092 013A     		subs	r2, r2, #1
 3207 0094 B261     		str	r2, [r6, #24]
 3208              	.L310:
1421:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
 3209              		.loc 1 1421 0 is_stmt 1
 3210 0096 3379     		ldrb	r3, [r6, #4]	@ zero_extendqisi2
 3211 0098 43F00103 		orr	r3, r3, #1
 3212 009c 3371     		strb	r3, [r6, #4]
 3213 009e 2346     		mov	r3, r4
 3214 00a0 12E0     		b	.L301
 3215              	.L319:
1414:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3216              		.loc 1 1414 0
 3217 00a2 2246     		mov	r2, r4
 3218 00a4 4146     		mov	r1, r8
 3219 00a6 3046     		mov	r0, r6
 3220 00a8 FFF7FEFF 		bl	put_fat
 3221              	.LVL471:
 3222 00ac 0246     		mov	r2, r0
 3223              	.LVL472:
 3224 00ae E9E7     		b	.L308
 3225              	.L309:
1423:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3226              		.loc 1 1423 0
 3227 00b0 012A     		cmp	r2, #1
 3228 00b2 01D0     		beq	.L320
 3229 00b4 0123     		movs	r3, #1
 3230 00b6 07E0     		b	.L301
 3231              	.L320:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 168


 3232 00b8 4FF0FF33 		mov	r3, #-1
 3233 00bc 04E0     		b	.L301
 3234              	.LVL473:
 3235              	.L313:
1367:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 3236              		.loc 1 1367 0
 3237 00be 0123     		movs	r3, #1
 3238 00c0 02E0     		b	.L301
 3239              	.LVL474:
 3240              	.L314:
1405:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3241              		.loc 1 1405 0
 3242 00c2 0023     		movs	r3, #0
 3243 00c4 00E0     		b	.L301
 3244              	.LVL475:
 3245              	.L318:
1410:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3246              		.loc 1 1410 0
 3247 00c6 0023     		movs	r3, #0
 3248              	.LVL476:
 3249              	.L301:
1427:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3250              		.loc 1 1427 0
 3251 00c8 1846     		mov	r0, r3
 3252 00ca BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3253              		.cfi_endproc
 3254              	.LFE165:
 3256              		.section	.text.remove_chain,"ax",%progbits
 3257              		.align	1
 3258              		.syntax unified
 3259              		.thumb
 3260              		.thumb_func
 3261              		.fpu fpv5-sp-d16
 3263              	remove_chain:
 3264              	.LFB164:
1276:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_OK;
 3265              		.loc 1 1276 0
 3266              		.cfi_startproc
 3267              		@ args = 0, pretend = 0, frame = 0
 3268              		@ frame_needed = 0, uses_anonymous_args = 0
 3269              	.LVL477:
 3270 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3271              	.LCFI35:
 3272              		.cfi_def_cfa_offset 24
 3273              		.cfi_offset 3, -24
 3274              		.cfi_offset 4, -20
 3275              		.cfi_offset 5, -16
 3276              		.cfi_offset 6, -12
 3277              		.cfi_offset 7, -8
 3278              		.cfi_offset 14, -4
 3279 0002 0E46     		mov	r6, r1
 3280              	.LVL478:
1279:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT || _USE_TRIM
 3281              		.loc 1 1279 0
 3282 0004 0568     		ldr	r5, [r0]
 3283              	.LVL479:
1287:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 169


 3284              		.loc 1 1287 0
 3285 0006 0129     		cmp	r1, #1
 3286 0008 2ED9     		bls	.L326
 3287 000a 0746     		mov	r7, r0
 3288 000c 1146     		mov	r1, r2
 3289              	.LVL480:
1287:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3290              		.loc 1 1287 0 is_stmt 0 discriminator 2
 3291 000e 2B6A     		ldr	r3, [r5, #32]
 3292 0010 B342     		cmp	r3, r6
 3293 0012 2CD9     		bls	.L327
1290:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
 3294              		.loc 1 1290 0 is_stmt 1
 3295 0014 52B1     		cbz	r2, .L325
1291:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
 3296              		.loc 1 1291 0
 3297 0016 4FF0FF32 		mov	r2, #-1
 3298              	.LVL481:
 3299 001a 2846     		mov	r0, r5
 3300              	.LVL482:
 3301 001c FFF7FEFF 		bl	put_fat
 3302              	.LVL483:
1292:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3303              		.loc 1 1292 0
 3304 0020 8446     		mov	ip, r0
 3305 0022 18B1     		cbz	r0, .L325
 3306 0024 25E0     		b	.L322
 3307              	.LVL484:
 3308              	.L324:
1327:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 3309              		.loc 1 1327 0
 3310 0026 2646     		mov	r6, r4
1328:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3311              		.loc 1 1328 0
 3312 0028 A242     		cmp	r2, r4
 3313 002a 22D9     		bls	.L322
 3314              	.LVL485:
 3315              	.L325:
1297:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 0) break;				/* Empty cluster? */
 3316              		.loc 1 1297 0
 3317 002c 3146     		mov	r1, r6
 3318 002e 3846     		mov	r0, r7
 3319 0030 FFF7FEFF 		bl	get_fat
 3320              	.LVL486:
1298:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 3321              		.loc 1 1298 0
 3322 0034 0446     		mov	r4, r0
 3323 0036 F0B1     		cbz	r0, .L328
1299:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 3324              		.loc 1 1299 0
 3325 0038 0128     		cmp	r0, #1
 3326 003a 1FD0     		beq	.L329
1300:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 3327              		.loc 1 1300 0
 3328 003c B0F1FF3F 		cmp	r0, #-1
 3329 0040 1FD0     		beq	.L330
1302:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 170


 3330              		.loc 1 1302 0
 3331 0042 0022     		movs	r2, #0
 3332 0044 3146     		mov	r1, r6
 3333 0046 2846     		mov	r0, r5
 3334              	.LVL487:
 3335 0048 FFF7FEFF 		bl	put_fat
 3336              	.LVL488:
1303:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3337              		.loc 1 1303 0
 3338 004c 8446     		mov	ip, r0
 3339 004e 80B9     		cbnz	r0, .L322
1305:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->free_clst++;
 3340              		.loc 1 1305 0
 3341 0050 AB69     		ldr	r3, [r5, #24]
 3342 0052 2A6A     		ldr	r2, [r5, #32]
 3343 0054 911E     		subs	r1, r2, #2
 3344 0056 8B42     		cmp	r3, r1
 3345 0058 E5D2     		bcs	.L324
1306:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag |= 1;
 3346              		.loc 1 1306 0
 3347 005a 0133     		adds	r3, r3, #1
 3348 005c AB61     		str	r3, [r5, #24]
1307:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3349              		.loc 1 1307 0
 3350 005e 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 3351 0060 43F00103 		orr	r3, r3, #1
 3352 0064 2B71     		strb	r3, [r5, #4]
 3353 0066 DEE7     		b	.L324
 3354              	.LVL489:
 3355              	.L326:
1287:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3356              		.loc 1 1287 0
 3357 0068 4FF0020C 		mov	ip, #2
 3358 006c 01E0     		b	.L322
 3359              	.LVL490:
 3360              	.L327:
 3361 006e 4FF0020C 		mov	ip, #2
 3362              	.LVL491:
 3363              	.L322:
1342:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3364              		.loc 1 1342 0
 3365 0072 6046     		mov	r0, ip
 3366 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3367              	.LVL492:
 3368              	.L328:
1341:Middlewares/Third_Party/FatFs/src/ff.c **** }
 3369              		.loc 1 1341 0
 3370 0076 4FF0000C 		mov	ip, #0
 3371 007a FAE7     		b	.L322
 3372              	.L329:
1299:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 3373              		.loc 1 1299 0
 3374 007c 4FF0020C 		mov	ip, #2
 3375 0080 F7E7     		b	.L322
 3376              	.L330:
1300:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 3377              		.loc 1 1300 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 171


 3378 0082 4FF0010C 		mov	ip, #1
 3379 0086 F4E7     		b	.L322
 3380              		.cfi_endproc
 3381              	.LFE164:
 3383              		.section	.text.dir_next,"ax",%progbits
 3384              		.align	1
 3385              		.syntax unified
 3386              		.thumb
 3387              		.thumb_func
 3388              		.fpu fpv5-sp-d16
 3390              	dir_next:
 3391              	.LFB168:
1523:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ofs, clst;
 3392              		.loc 1 1523 0
 3393              		.cfi_startproc
 3394              		@ args = 0, pretend = 0, frame = 0
 3395              		@ frame_needed = 0, uses_anonymous_args = 0
 3396              	.LVL493:
 3397 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3398              	.LCFI36:
 3399              		.cfi_def_cfa_offset 32
 3400              		.cfi_offset 3, -32
 3401              		.cfi_offset 4, -28
 3402              		.cfi_offset 5, -24
 3403              		.cfi_offset 6, -20
 3404              		.cfi_offset 7, -16
 3405              		.cfi_offset 8, -12
 3406              		.cfi_offset 9, -8
 3407              		.cfi_offset 14, -4
1525:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 3408              		.loc 1 1525 0
 3409 0004 0668     		ldr	r6, [r0]
 3410              	.LVL494:
1530:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) re
 3411              		.loc 1 1530 0
 3412 0006 4569     		ldr	r5, [r0, #20]
 3413              	.LVL495:
1531:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3414              		.loc 1 1531 0
 3415 0008 C369     		ldr	r3, [r0, #28]
 3416 000a 002B     		cmp	r3, #0
 3417 000c 6ED0     		beq	.L340
 3418 000e 2035     		adds	r5, r5, #32
 3419              	.LVL496:
1531:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3420              		.loc 1 1531 0 is_stmt 0 discriminator 2
 3421 0010 B5F5001F 		cmp	r5, #2097152
 3422 0014 6CD2     		bcs	.L341
 3423 0016 8846     		mov	r8, r1
 3424 0018 0446     		mov	r4, r0
1533:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect++;				/* Next sector */
 3425              		.loc 1 1533 0 is_stmt 1
 3426 001a C5F30807 		ubfx	r7, r5, #0, #9
 3427 001e 3FB9     		cbnz	r7, .L334
1534:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3428              		.loc 1 1534 0
 3429 0020 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 172


 3430 0022 C361     		str	r3, [r0, #28]
1536:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 3431              		.loc 1 1536 0
 3432 0024 8169     		ldr	r1, [r0, #24]
 3433              	.LVL497:
 3434 0026 79B9     		cbnz	r1, .L335
1537:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->sect = 0; return FR_NO_FILE;
 3435              		.loc 1 1537 0
 3436 0028 3389     		ldrh	r3, [r6, #8]
 3437 002a B3EB551F 		cmp	r3, r5, lsr #5
 3438 002e 07D9     		bls	.L350
 3439              	.LVL498:
 3440              	.L334:
1574:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 3441              		.loc 1 1574 0
 3442 0030 6561     		str	r5, [r4, #20]
1575:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3443              		.loc 1 1575 0
 3444 0032 06F13C03 		add	r3, r6, #60
 3445 0036 3B44     		add	r3, r3, r7
 3446 0038 2362     		str	r3, [r4, #32]
1577:Middlewares/Third_Party/FatFs/src/ff.c **** }
 3447              		.loc 1 1577 0
 3448 003a 0020     		movs	r0, #0
 3449              	.LVL499:
 3450              	.L333:
1578:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3451              		.loc 1 1578 0
 3452 003c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3453              	.LVL500:
 3454              	.L350:
1538:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3455              		.loc 1 1538 0
 3456 0040 0023     		movs	r3, #0
 3457 0042 C361     		str	r3, [r0, #28]
 3458 0044 0420     		movs	r0, #4
 3459              	.LVL501:
 3460 0046 F9E7     		b	.L333
 3461              	.LVL502:
 3462              	.L335:
1542:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 3463              		.loc 1 1542 0
 3464 0048 7389     		ldrh	r3, [r6, #10]
 3465 004a 013B     		subs	r3, r3, #1
 3466 004c 13EA5523 		ands	r3, r3, r5, lsr #9
 3467 0050 EED1     		bne	.L334
1543:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 3468              		.loc 1 1543 0
 3469 0052 FFF7FEFF 		bl	get_fat
 3470              	.LVL503:
 3471 0056 8146     		mov	r9, r0
 3472              	.LVL504:
1544:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 3473              		.loc 1 1544 0
 3474 0058 0128     		cmp	r0, #1
 3475 005a 4BD9     		bls	.L342
1545:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 173


 3476              		.loc 1 1545 0
 3477 005c B0F1FF3F 		cmp	r0, #-1
 3478 0060 4AD0     		beq	.L343
1546:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 3479              		.loc 1 1546 0
 3480 0062 336A     		ldr	r3, [r6, #32]
 3481 0064 8342     		cmp	r3, r0
 3482 0066 39D8     		bhi	.L336
1548:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->sect = 0; return FR_NO_FILE;
 3483              		.loc 1 1548 0
 3484 0068 B8F1000F 		cmp	r8, #0
 3485 006c 11D0     		beq	.L351
1551:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3486              		.loc 1 1551 0
 3487 006e A169     		ldr	r1, [r4, #24]
 3488 0070 2046     		mov	r0, r4
 3489              	.LVL505:
 3490 0072 FFF7FEFF 		bl	create_chain
 3491              	.LVL506:
1552:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 3492              		.loc 1 1552 0
 3493 0076 8146     		mov	r9, r0
 3494 0078 0028     		cmp	r0, #0
 3495 007a 3FD0     		beq	.L344
1553:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3496              		.loc 1 1553 0
 3497 007c 0128     		cmp	r0, #1
 3498 007e 3FD0     		beq	.L345
1554:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Clean-up the stretched table */
 3499              		.loc 1 1554 0
 3500 0080 B0F1FF3F 		cmp	r0, #-1
 3501 0084 3ED0     		beq	.L346
1557:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 3502              		.loc 1 1557 0
 3503 0086 3046     		mov	r0, r6
 3504              	.LVL507:
 3505 0088 FFF7FEFF 		bl	sync_window
 3506              	.LVL508:
 3507 008c 28B1     		cbz	r0, .L352
 3508 008e 0120     		movs	r0, #1
 3509 0090 D4E7     		b	.L333
 3510              	.LVL509:
 3511              	.L351:
1549:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 3512              		.loc 1 1549 0
 3513 0092 0023     		movs	r3, #0
 3514 0094 E361     		str	r3, [r4, #28]
 3515 0096 0420     		movs	r0, #4
 3516              	.LVL510:
 3517 0098 D0E7     		b	.L333
 3518              	.L352:
1558:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
 3519              		.loc 1 1558 0
 3520 009a 4FF40072 		mov	r2, #512
 3521 009e 0021     		movs	r1, #0
 3522 00a0 06F13C00 		add	r0, r6, #60
 3523 00a4 FFF7FEFF 		bl	mem_set
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 174


 3524              	.LVL511:
1559:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
 3525              		.loc 1 1559 0
 3526 00a8 4946     		mov	r1, r9
 3527 00aa 3046     		mov	r0, r6
 3528 00ac FFF7FEFF 		bl	clust2sect
 3529              	.LVL512:
 3530 00b0 B063     		str	r0, [r6, #56]
 3531 00b2 4FF00008 		mov	r8, #0
 3532              	.LVL513:
 3533              	.L338:
1559:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
 3534              		.loc 1 1559 0 is_stmt 0 discriminator 1
 3535 00b6 7389     		ldrh	r3, [r6, #10]
 3536 00b8 9845     		cmp	r8, r3
 3537 00ba 0BD2     		bcs	.L353
1560:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 3538              		.loc 1 1560 0 is_stmt 1
 3539 00bc 0123     		movs	r3, #1
 3540 00be F370     		strb	r3, [r6, #3]
1561:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 3541              		.loc 1 1561 0
 3542 00c0 3046     		mov	r0, r6
 3543 00c2 FFF7FEFF 		bl	sync_window
 3544              	.LVL514:
 3545 00c6 F8B9     		cbnz	r0, .L348
1559:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
 3546              		.loc 1 1559 0 discriminator 2
 3547 00c8 08F10108 		add	r8, r8, #1
 3548              	.LVL515:
 3549 00cc B36B     		ldr	r3, [r6, #56]
 3550 00ce 0133     		adds	r3, r3, #1
 3551 00d0 B363     		str	r3, [r6, #56]
 3552 00d2 F0E7     		b	.L338
 3553              	.L353:
1563:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 3554              		.loc 1 1563 0
 3555 00d4 B36B     		ldr	r3, [r6, #56]
 3556 00d6 A3EB0803 		sub	r3, r3, r8
 3557 00da B363     		str	r3, [r6, #56]
 3558              	.LVL516:
 3559              	.L336:
1569:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->sect = clust2sect(fs, clst);
 3560              		.loc 1 1569 0
 3561 00dc C4F81890 		str	r9, [r4, #24]
1570:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3562              		.loc 1 1570 0
 3563 00e0 4946     		mov	r1, r9
 3564 00e2 3046     		mov	r0, r6
 3565 00e4 FFF7FEFF 		bl	clust2sect
 3566              	.LVL517:
 3567 00e8 E061     		str	r0, [r4, #28]
 3568 00ea A1E7     		b	.L334
 3569              	.LVL518:
 3570              	.L340:
1531:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3571              		.loc 1 1531 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 175


 3572 00ec 0420     		movs	r0, #4
 3573              	.LVL519:
 3574 00ee A5E7     		b	.L333
 3575              	.LVL520:
 3576              	.L341:
 3577 00f0 0420     		movs	r0, #4
 3578              	.LVL521:
 3579 00f2 A3E7     		b	.L333
 3580              	.LVL522:
 3581              	.L342:
1544:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 3582              		.loc 1 1544 0
 3583 00f4 0220     		movs	r0, #2
 3584              	.LVL523:
 3585 00f6 A1E7     		b	.L333
 3586              	.LVL524:
 3587              	.L343:
1545:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 3588              		.loc 1 1545 0
 3589 00f8 0120     		movs	r0, #1
 3590              	.LVL525:
 3591 00fa 9FE7     		b	.L333
 3592              	.LVL526:
 3593              	.L344:
1552:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 3594              		.loc 1 1552 0
 3595 00fc 0720     		movs	r0, #7
 3596              	.LVL527:
 3597 00fe 9DE7     		b	.L333
 3598              	.LVL528:
 3599              	.L345:
1553:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3600              		.loc 1 1553 0
 3601 0100 0220     		movs	r0, #2
 3602              	.LVL529:
 3603 0102 9BE7     		b	.L333
 3604              	.LVL530:
 3605              	.L346:
1554:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Clean-up the stretched table */
 3606              		.loc 1 1554 0
 3607 0104 0120     		movs	r0, #1
 3608              	.LVL531:
 3609 0106 99E7     		b	.L333
 3610              	.LVL532:
 3611              	.L348:
1561:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 3612              		.loc 1 1561 0
 3613 0108 0120     		movs	r0, #1
 3614 010a 97E7     		b	.L333
 3615              		.cfi_endproc
 3616              	.LFE168:
 3618              		.section	.text.dir_alloc,"ax",%progbits
 3619              		.align	1
 3620              		.syntax unified
 3621              		.thumb
 3622              		.thumb_func
 3623              		.fpu fpv5-sp-d16
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 176


 3625              	dir_alloc:
 3626              	.LFB169:
1593:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 3627              		.loc 1 1593 0
 3628              		.cfi_startproc
 3629              		@ args = 0, pretend = 0, frame = 0
 3630              		@ frame_needed = 0, uses_anonymous_args = 0
 3631              	.LVL533:
 3632 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3633              	.LCFI37:
 3634              		.cfi_def_cfa_offset 24
 3635              		.cfi_offset 3, -24
 3636              		.cfi_offset 4, -20
 3637              		.cfi_offset 5, -16
 3638              		.cfi_offset 6, -12
 3639              		.cfi_offset 7, -8
 3640              		.cfi_offset 14, -4
 3641 0002 0446     		mov	r4, r0
 3642 0004 0F46     		mov	r7, r1
1596:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3643              		.loc 1 1596 0
 3644 0006 0668     		ldr	r6, [r0]
 3645              	.LVL534:
1599:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 3646              		.loc 1 1599 0
 3647 0008 0021     		movs	r1, #0
 3648              	.LVL535:
 3649 000a FFF7FEFF 		bl	dir_sdi
 3650              	.LVL536:
1600:Middlewares/Third_Party/FatFs/src/ff.c **** 		n = 0;
 3651              		.loc 1 1600 0
 3652 000e 0246     		mov	r2, r0
 3653 0010 B8B9     		cbnz	r0, .L355
1601:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
 3654              		.loc 1 1601 0
 3655 0012 0025     		movs	r5, #0
 3656 0014 06E0     		b	.L357
 3657              	.LVL537:
 3658              	.L359:
1612:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3659              		.loc 1 1612 0
 3660 0016 0025     		movs	r5, #0
 3661              	.LVL538:
 3662              	.L356:
1614:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 3663              		.loc 1 1614 0
 3664 0018 0121     		movs	r1, #1
 3665 001a 2046     		mov	r0, r4
 3666              	.LVL539:
 3667 001c FFF7FEFF 		bl	dir_next
 3668              	.LVL540:
1615:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3669              		.loc 1 1615 0
 3670 0020 0246     		mov	r2, r0
 3671 0022 70B9     		cbnz	r0, .L355
 3672              	.LVL541:
 3673              	.L357:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 177


1603:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 3674              		.loc 1 1603 0
 3675 0024 E169     		ldr	r1, [r4, #28]
 3676 0026 3046     		mov	r0, r6
 3677              	.LVL542:
 3678 0028 FFF7FEFF 		bl	move_window
 3679              	.LVL543:
1604:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 3680              		.loc 1 1604 0
 3681 002c 0246     		mov	r2, r0
 3682 002e 40B9     		cbnz	r0, .L355
1608:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 3683              		.loc 1 1608 0
 3684 0030 236A     		ldr	r3, [r4, #32]
 3685 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3686 0034 002B     		cmp	r3, #0
 3687 0036 18BF     		it	ne
 3688 0038 E52B     		cmpne	r3, #229
 3689 003a ECD1     		bne	.L359
1610:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 3690              		.loc 1 1610 0
 3691 003c 0135     		adds	r5, r5, #1
 3692              	.LVL544:
 3693 003e BD42     		cmp	r5, r7
 3694 0040 EAD1     		bne	.L356
 3695              	.LVL545:
 3696              	.L355:
1618:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 3697              		.loc 1 1618 0
 3698 0042 042A     		cmp	r2, #4
 3699 0044 01D0     		beq	.L362
 3700              	.LVL546:
 3701              	.L358:
1620:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3702              		.loc 1 1620 0
 3703 0046 1046     		mov	r0, r2
 3704 0048 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3705              	.LVL547:
 3706              	.L362:
1618:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 3707              		.loc 1 1618 0
 3708 004a 0722     		movs	r2, #7
 3709              	.LVL548:
 3710 004c FBE7     		b	.L358
 3711              		.cfi_endproc
 3712              	.LFE169:
 3714              		.section	.text.dir_read,"ax",%progbits
 3715              		.align	1
 3716              		.syntax unified
 3717              		.thumb
 3718              		.thumb_func
 3719              		.fpu fpv5-sp-d16
 3721              	dir_read:
 3722              	.LFB177:
2135:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_NO_FILE;
 3723              		.loc 1 2135 0
 3724              		.cfi_startproc
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 178


 3725              		@ args = 0, pretend = 0, frame = 0
 3726              		@ frame_needed = 0, uses_anonymous_args = 0
 3727              	.LVL549:
 3728 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3729              	.LCFI38:
 3730              		.cfi_def_cfa_offset 32
 3731              		.cfi_offset 3, -32
 3732              		.cfi_offset 4, -28
 3733              		.cfi_offset 5, -24
 3734              		.cfi_offset 6, -20
 3735              		.cfi_offset 7, -16
 3736              		.cfi_offset 8, -12
 3737              		.cfi_offset 9, -8
 3738              		.cfi_offset 14, -4
 3739 0004 0446     		mov	r4, r0
 3740 0006 8846     		mov	r8, r1
 3741              	.LVL550:
2137:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE a, c;
 3742              		.loc 1 2137 0
 3743 0008 0768     		ldr	r7, [r0]
 3744              	.LVL551:
2140:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 3745              		.loc 1 2140 0
 3746 000a 4FF0FF09 		mov	r9, #255
 3747 000e 4E46     		mov	r6, r9
2136:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3748              		.loc 1 2136 0
 3749 0010 0425     		movs	r5, #4
2143:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
 3750              		.loc 1 2143 0
 3751 0012 2CE0     		b	.L364
 3752              	.LVL552:
 3753              	.L381:
2172:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 3754              		.loc 1 2172 0
 3755 0014 0F2B     		cmp	r3, #15
 3756 0016 19D1     		bne	.L367
2173:Middlewares/Third_Party/FatFs/src/ff.c **** 						sum = dp->dir[LDIR_Chksum];
 3757              		.loc 1 2173 0
 3758 0018 12F0400F 		tst	r2, #64
 3759 001c 06D0     		beq	.L368
2174:Middlewares/Third_Party/FatFs/src/ff.c **** 						c &= (BYTE)~LLEF; ord = c;
 3760              		.loc 1 2174 0
 3761 001e 91F80D90 		ldrb	r9, [r1, #13]	@ zero_extendqisi2
 3762              	.LVL553:
2175:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->blk_ofs = dp->dptr;
 3763              		.loc 1 2175 0
 3764 0022 02F0BF02 		and	r2, r2, #191
 3765              	.LVL554:
2176:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 3766              		.loc 1 2176 0
 3767 0026 6369     		ldr	r3, [r4, #20]
 3768              	.LVL555:
 3769 0028 2363     		str	r3, [r4, #48]
2175:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->blk_ofs = dp->dptr;
 3770              		.loc 1 2175 0
 3771 002a 1646     		mov	r6, r2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 179


 3772              	.LVL556:
 3773              	.L368:
2179:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {					/* An SFN entry is found */
 3774              		.loc 1 2179 0
 3775 002c B242     		cmp	r2, r6
 3776 002e 01D0     		beq	.L379
 3777 0030 FF26     		movs	r6, #255
 3778              	.LVL557:
 3779 0032 16E0     		b	.L366
 3780              	.LVL558:
 3781              	.L379:
2179:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {					/* An SFN entry is found */
 3782              		.loc 1 2179 0 is_stmt 0 discriminator 1
 3783 0034 4B7B     		ldrb	r3, [r1, #13]	@ zero_extendqisi2
 3784 0036 4B45     		cmp	r3, r9
 3785 0038 01D0     		beq	.L380
2179:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {					/* An SFN entry is found */
 3786              		.loc 1 2179 0
 3787 003a FF26     		movs	r6, #255
 3788              	.LVL559:
 3789 003c 11E0     		b	.L366
 3790              	.LVL560:
 3791              	.L380:
2179:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {					/* An SFN entry is found */
 3792              		.loc 1 2179 0 discriminator 3
 3793 003e F868     		ldr	r0, [r7, #12]
 3794 0040 FFF7FEFF 		bl	pick_lfn
 3795              	.LVL561:
 3796 0044 78B3     		cbz	r0, .L377
2179:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {					/* An SFN entry is found */
 3797              		.loc 1 2179 0 discriminator 5
 3798 0046 013E     		subs	r6, r6, #1
 3799              	.LVL562:
 3800 0048 F6B2     		uxtb	r6, r6
 3801 004a 0AE0     		b	.L366
 3802              	.LVL563:
 3803              	.L367:
2181:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 3804              		.loc 1 2181 0 is_stmt 1
 3805 004c 26B9     		cbnz	r6, .L369
2181:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 3806              		.loc 1 2181 0 is_stmt 0 discriminator 1
 3807 004e 0846     		mov	r0, r1
 3808 0050 FFF7FEFF 		bl	sum_sfn
 3809              	.LVL564:
 3810 0054 4845     		cmp	r0, r9
 3811 0056 29D0     		beq	.L365
 3812              	.L369:
2182:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 3813              		.loc 1 2182 0 is_stmt 1
 3814 0058 4FF0FF33 		mov	r3, #-1
 3815 005c 2363     		str	r3, [r4, #48]
 3816 005e 25E0     		b	.L365
 3817              	.LVL565:
 3818              	.L373:
2170:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 3819              		.loc 1 2170 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 180


 3820 0060 FF26     		movs	r6, #255
 3821              	.LVL566:
 3822              	.L366:
2193:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
 3823              		.loc 1 2193 0
 3824 0062 0021     		movs	r1, #0
 3825 0064 2046     		mov	r0, r4
 3826 0066 FFF7FEFF 		bl	dir_next
 3827              	.LVL567:
2194:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3828              		.loc 1 2194 0
 3829 006a 0546     		mov	r5, r0
 3830 006c F0B9     		cbnz	r0, .L365
 3831              	.LVL568:
 3832              	.L364:
2143:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
 3833              		.loc 1 2143 0
 3834 006e E169     		ldr	r1, [r4, #28]
 3835 0070 E1B1     		cbz	r1, .L365
2144:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
 3836              		.loc 1 2144 0
 3837 0072 3846     		mov	r0, r7
 3838 0074 FFF7FEFF 		bl	move_window
 3839              	.LVL569:
2145:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = dp->dir[DIR_Name];	/* Test for the entry type */
 3840              		.loc 1 2145 0
 3841 0078 0546     		mov	r5, r0
 3842 007a B8B9     		cbnz	r0, .L365
2146:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) {
 3843              		.loc 1 2146 0
 3844 007c 216A     		ldr	r1, [r4, #32]
 3845 007e 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 3846              	.LVL570:
2147:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
 3847              		.loc 1 2147 0
 3848 0080 9AB1     		cbz	r2, .L372
2167:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
 3849              		.loc 1 2167 0
 3850 0082 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 3851 0084 03F03F03 		and	r3, r3, #63
 3852              	.LVL571:
 3853 0088 A371     		strb	r3, [r4, #6]
2169:Middlewares/Third_Party/FatFs/src/ff.c **** 				ord = 0xFF;
 3854              		.loc 1 2169 0
 3855 008a 2E2A     		cmp	r2, #46
 3856 008c 18BF     		it	ne
 3857 008e E52A     		cmpne	r2, #229
 3858 0090 E6D0     		beq	.L373
2169:Middlewares/Third_Party/FatFs/src/ff.c **** 				ord = 0xFF;
 3859              		.loc 1 2169 0 is_stmt 0 discriminator 1
 3860 0092 23F02000 		bic	r0, r3, #32
 3861              	.LVL572:
 3862 0096 0828     		cmp	r0, #8
 3863 0098 14BF     		ite	ne
 3864 009a 0020     		movne	r0, #0
 3865 009c 0120     		moveq	r0, #1
 3866 009e 4045     		cmp	r0, r8
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 181


 3867 00a0 B8D0     		beq	.L381
2170:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 3868              		.loc 1 2170 0 is_stmt 1
 3869 00a2 FF26     		movs	r6, #255
 3870              	.LVL573:
 3871 00a4 DDE7     		b	.L366
 3872              	.LVL574:
 3873              	.L377:
2179:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {					/* An SFN entry is found */
 3874              		.loc 1 2179 0
 3875 00a6 FF26     		movs	r6, #255
 3876              	.LVL575:
 3877 00a8 DBE7     		b	.L366
 3878              	.LVL576:
 3879              	.L372:
2148:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3880              		.loc 1 2148 0
 3881 00aa 0425     		movs	r5, #4
 3882              	.LVL577:
 3883              	.L365:
2197:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 3884              		.loc 1 2197 0
 3885 00ac 0DB1     		cbz	r5, .L371
2197:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 3886              		.loc 1 2197 0 is_stmt 0 discriminator 1
 3887 00ae 0023     		movs	r3, #0
 3888 00b0 E361     		str	r3, [r4, #28]
 3889              	.L371:
2199:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3890              		.loc 1 2199 0 is_stmt 1
 3891 00b2 2846     		mov	r0, r5
 3892 00b4 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3893              		.cfi_endproc
 3894              	.LFE177:
 3896              		.section	.text.dir_remove,"ax",%progbits
 3897              		.align	1
 3898              		.syntax unified
 3899              		.thumb
 3900              		.thumb_func
 3901              		.fpu fpv5-sp-d16
 3903              	dir_remove:
 3904              	.LFB180:
2399:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 3905              		.loc 1 2399 0
 3906              		.cfi_startproc
 3907              		@ args = 0, pretend = 0, frame = 0
 3908              		@ frame_needed = 0, uses_anonymous_args = 0
 3909              	.LVL578:
 3910 0000 70B5     		push	{r4, r5, r6, lr}
 3911              	.LCFI39:
 3912              		.cfi_def_cfa_offset 16
 3913              		.cfi_offset 4, -16
 3914              		.cfi_offset 5, -12
 3915              		.cfi_offset 6, -8
 3916              		.cfi_offset 14, -4
 3917 0002 0446     		mov	r4, r0
2401:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 182


 3918              		.loc 1 2401 0
 3919 0004 0568     		ldr	r5, [r0]
 3920              	.LVL579:
2403:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3921              		.loc 1 2403 0
 3922 0006 4669     		ldr	r6, [r0, #20]
 3923              	.LVL580:
2405:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 3924              		.loc 1 2405 0
 3925 0008 016B     		ldr	r1, [r0, #48]
 3926 000a B1F1FF3F 		cmp	r1, #-1
 3927 000e 18D1     		bne	.L389
 3928              	.LVL581:
 3929              	.L386:
2408:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 3930              		.loc 1 2408 0
 3931 0010 E169     		ldr	r1, [r4, #28]
 3932 0012 2846     		mov	r0, r5
 3933 0014 FFF7FEFF 		bl	move_window
 3934              	.LVL582:
2409:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Mark an entry 'deleted' */
 3935              		.loc 1 2409 0
 3936 0018 0346     		mov	r3, r0
 3937 001a 70B9     		cbnz	r0, .L385
2414:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3938              		.loc 1 2414 0
 3939 001c 226A     		ldr	r2, [r4, #32]
 3940 001e E521     		movs	r1, #229
 3941 0020 1170     		strb	r1, [r2]
2416:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been de
 3942              		.loc 1 2416 0
 3943 0022 0122     		movs	r2, #1
 3944 0024 EA70     		strb	r2, [r5, #3]
2417:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_next(dp, 0);	/* Next entry */
 3945              		.loc 1 2417 0
 3946 0026 6269     		ldr	r2, [r4, #20]
 3947 0028 B242     		cmp	r2, r6
 3948 002a 06D2     		bcs	.L385
2418:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (res == FR_OK);
 3949              		.loc 1 2418 0
 3950 002c 0021     		movs	r1, #0
 3951 002e 2046     		mov	r0, r4
 3952              	.LVL583:
 3953 0030 FFF7FEFF 		bl	dir_next
 3954              	.LVL584:
2419:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
 3955              		.loc 1 2419 0
 3956 0034 0346     		mov	r3, r0
 3957 0036 0028     		cmp	r0, #0
 3958 0038 EAD0     		beq	.L386
 3959              	.L385:
 3960              	.LVL585:
2420:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3961              		.loc 1 2420 0
 3962 003a 042B     		cmp	r3, #4
 3963 003c 07D0     		beq	.L390
 3964              	.LVL586:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 183


 3965              	.L384:
2432:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3966              		.loc 1 2432 0
 3967 003e 1846     		mov	r0, r3
 3968 0040 70BD     		pop	{r4, r5, r6, pc}
 3969              	.LVL587:
 3970              	.L389:
2405:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 3971              		.loc 1 2405 0 discriminator 1
 3972 0042 FFF7FEFF 		bl	dir_sdi
 3973              	.LVL588:
2406:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
 3974              		.loc 1 2406 0 discriminator 1
 3975 0046 0346     		mov	r3, r0
 3976 0048 0028     		cmp	r0, #0
 3977 004a E1D0     		beq	.L386
 3978 004c F7E7     		b	.L384
 3979              	.LVL589:
 3980              	.L390:
2420:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3981              		.loc 1 2420 0
 3982 004e 0223     		movs	r3, #2
 3983              	.LVL590:
 3984 0050 F5E7     		b	.L384
 3985              		.cfi_endproc
 3986              	.LFE180:
 3988              		.section	.text.unlock_fs,"ax",%progbits
 3989              		.align	1
 3990              		.syntax unified
 3991              		.thumb
 3992              		.thumb_func
 3993              		.fpu fpv5-sp-d16
 3995              	unlock_fs:
 3996              	.LFB152:
 755:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 3997              		.loc 1 755 0
 3998              		.cfi_startproc
 3999              		@ args = 0, pretend = 0, frame = 0
 4000              		@ frame_needed = 0, uses_anonymous_args = 0
 4001              	.LVL591:
 4002 0000 08B5     		push	{r3, lr}
 4003              	.LCFI40:
 4004              		.cfi_def_cfa_offset 8
 4005              		.cfi_offset 3, -8
 4006              		.cfi_offset 14, -4
 756:Middlewares/Third_Party/FatFs/src/ff.c **** 		ff_rel_grant(fs->sobj);
 4007              		.loc 1 756 0
 4008 0002 0246     		mov	r2, r0
 4009 0004 B1F10C03 		subs	r3, r1, #12
 4010 0008 18BF     		it	ne
 4011 000a 0123     		movne	r3, #1
 4012 000c 0028     		cmp	r0, #0
 4013 000e 14BF     		ite	ne
 4014 0010 1846     		movne	r0, r3
 4015 0012 0020     		moveq	r0, #0
 4016              	.LVL592:
 4017 0014 48B1     		cbz	r0, .L391
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 184


 756:Middlewares/Third_Party/FatFs/src/ff.c **** 		ff_rel_grant(fs->sobj);
 4018              		.loc 1 756 0 is_stmt 0 discriminator 1
 4019 0016 B1F10F03 		subs	r3, r1, #15
 4020 001a 18BF     		it	ne
 4021 001c 0123     		movne	r3, #1
 4022 001e 0B29     		cmp	r1, #11
 4023 0020 03D0     		beq	.L391
 4024 0022 13B1     		cbz	r3, .L391
 757:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 4025              		.loc 1 757 0 is_stmt 1
 4026 0024 1069     		ldr	r0, [r2, #16]
 4027 0026 FFF7FEFF 		bl	ff_rel_grant
 4028              	.LVL593:
 4029              	.L391:
 759:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4030              		.loc 1 759 0
 4031 002a 08BD     		pop	{r3, pc}
 4032              		.cfi_endproc
 4033              	.LFE152:
 4035              		.section	.text.create_name,"ax",%progbits
 4036              		.align	1
 4037              		.syntax unified
 4038              		.thumb
 4039              		.thumb_func
 4040              		.fpu fpv5-sp-d16
 4042              	create_name:
 4043              	.LFB182:
2622:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
 4044              		.loc 1 2622 0
 4045              		.cfi_startproc
 4046              		@ args = 0, pretend = 0, frame = 8
 4047              		@ frame_needed = 0, uses_anonymous_args = 0
 4048              	.LVL594:
 4049 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4050              	.LCFI41:
 4051              		.cfi_def_cfa_offset 36
 4052              		.cfi_offset 4, -36
 4053              		.cfi_offset 5, -32
 4054              		.cfi_offset 6, -28
 4055              		.cfi_offset 7, -24
 4056              		.cfi_offset 8, -20
 4057              		.cfi_offset 9, -16
 4058              		.cfi_offset 10, -12
 4059              		.cfi_offset 11, -8
 4060              		.cfi_offset 14, -4
 4061 0004 83B0     		sub	sp, sp, #12
 4062              	.LCFI42:
 4063              		.cfi_def_cfa_offset 48
 4064 0006 0746     		mov	r7, r0
 4065 0008 8A46     		mov	r10, r1
2630:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
 4066              		.loc 1 2630 0
 4067 000a D1F80090 		ldr	r9, [r1]
 4068              	.LVL595:
 4069 000e 0368     		ldr	r3, [r0]
 4070 0010 DD68     		ldr	r5, [r3, #12]
 4071              	.LVL596:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 185


 4072 0012 0024     		movs	r4, #0
 4073 0014 23E0     		b	.L401
 4074              	.LVL597:
 4075              	.L398:
2635:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 4076              		.loc 1 2635 0 discriminator 2
 4077 0016 08F10108 		add	r8, r8, #1
 4078              	.LVL598:
 4079              	.L396:
2635:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 4080              		.loc 1 2635 0 is_stmt 0 discriminator 1
 4081 001a 19F80830 		ldrb	r3, [r9, r8]	@ zero_extendqisi2
 4082 001e 5C2B     		cmp	r3, #92
 4083 0020 18BF     		it	ne
 4084 0022 2F2B     		cmpne	r3, #47
 4085 0024 F7D0     		beq	.L398
 4086              	.L395:
2652:Middlewares/Third_Party/FatFs/src/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 4087              		.loc 1 2652 0 is_stmt 1
 4088 0026 09EB0803 		add	r3, r9, r8
 4089 002a CAF80030 		str	r3, [r10]
2653:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
 4090              		.loc 1 2653 0
 4091 002e 1F28     		cmp	r0, #31
 4092 0030 33D8     		bhi	.L441
 4093 0032 4FF00408 		mov	r8, #4
 4094              	.LVL599:
 4095              	.L402:
2655:Middlewares/Third_Party/FatFs/src/ff.c **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 4096              		.loc 1 2655 0 discriminator 4
 4097 0036 012C     		cmp	r4, #1
 4098 0038 32D0     		beq	.L447
 4099              	.L403:
2655:Middlewares/Third_Party/FatFs/src/ff.c **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 4100              		.loc 1 2655 0 is_stmt 0 discriminator 3
 4101 003a 022C     		cmp	r4, #2
 4102 003c 3BD0     		beq	.L448
 4103              	.LVL600:
 4104              	.L410:
2664:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = lfn[di - 1];
 4105              		.loc 1 2664 0 is_stmt 1
 4106 003e 002C     		cmp	r4, #0
 4107 0040 59D0     		beq	.L409
2665:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w != ' ' && w != '.') break;
 4108              		.loc 1 2665 0
 4109 0042 6FF00043 		mvn	r3, #-2147483648
 4110 0046 2344     		add	r3, r3, r4
 4111 0048 35F81330 		ldrh	r3, [r5, r3, lsl #1]
 4112              	.LVL601:
2666:Middlewares/Third_Party/FatFs/src/ff.c **** 		di--;
 4113              		.loc 1 2666 0
 4114 004c 202B     		cmp	r3, #32
 4115 004e 18BF     		it	ne
 4116 0050 2E2B     		cmpne	r3, #46
 4117 0052 50D1     		bne	.L409
2667:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 4118              		.loc 1 2667 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 186


 4119 0054 013C     		subs	r4, r4, #1
 4120              	.LVL602:
 4121 0056 F2E7     		b	.L410
 4122              	.LVL603:
 4123              	.L400:
2650:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 4124              		.loc 1 2650 0
 4125 0058 25F81460 		strh	r6, [r5, r4, lsl #1]	@ movhi
2632:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w < ' ') break;				/* Break if end of the path name */
 4126              		.loc 1 2632 0
 4127 005c 4446     		mov	r4, r8
 4128              	.LVL604:
 4129              	.L401:
 4130 005e 04F10108 		add	r8, r4, #1
 4131              	.LVL605:
 4132 0062 19F80400 		ldrb	r0, [r9, r4]	@ zero_extendqisi2
 4133              	.LVL606:
2633:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 4134              		.loc 1 2633 0
 4135 0066 1F28     		cmp	r0, #31
 4136 0068 DDD9     		bls	.L395
2634:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 4137              		.loc 1 2634 0
 4138 006a 5C28     		cmp	r0, #92
 4139 006c 18BF     		it	ne
 4140 006e 2F28     		cmpne	r0, #47
 4141 0070 D3D0     		beq	.L396
2638:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
 4142              		.loc 1 2638 0
 4143 0072 FE2C     		cmp	r4, #254
 4144 0074 00F20181 		bhi	.L438
2646:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 4145              		.loc 1 2646 0
 4146 0078 0121     		movs	r1, #1
 4147 007a FFF7FEFF 		bl	ff_convert
 4148              	.LVL607:
2647:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4149              		.loc 1 2647 0
 4150 007e 0646     		mov	r6, r0
 4151 0080 0028     		cmp	r0, #0
 4152 0082 00F0FC80 		beq	.L439
2649:Middlewares/Third_Party/FatFs/src/ff.c **** 		lfn[di++] = w;					/* Store the Unicode character */
 4153              		.loc 1 2649 0
 4154 0086 7F28     		cmp	r0, #127
 4155 0088 E6D8     		bhi	.L400
2649:Middlewares/Third_Party/FatFs/src/ff.c **** 		lfn[di++] = w;					/* Store the Unicode character */
 4156              		.loc 1 2649 0 is_stmt 0 discriminator 1
 4157 008a 0146     		mov	r1, r0
 4158 008c 7F48     		ldr	r0, .L459
 4159              	.LVL608:
 4160 008e FFF7FEFF 		bl	chk_chr
 4161              	.LVL609:
 4162 0092 0028     		cmp	r0, #0
 4163 0094 E0D0     		beq	.L400
2649:Middlewares/Third_Party/FatFs/src/ff.c **** 		lfn[di++] = w;					/* Store the Unicode character */
 4164              		.loc 1 2649 0
 4165 0096 0620     		movs	r0, #6
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 187


 4166 0098 F2E0     		b	.L399
 4167              	.LVL610:
 4168              	.L441:
2653:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
 4169              		.loc 1 2653 0 is_stmt 1
 4170 009a 4FF00008 		mov	r8, #0
 4171              	.LVL611:
 4172 009e CAE7     		b	.L402
 4173              	.LVL612:
 4174              	.L447:
2655:Middlewares/Third_Party/FatFs/src/ff.c **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 4175              		.loc 1 2655 0 discriminator 1
 4176 00a0 6FF00043 		mvn	r3, #-2147483648
 4177 00a4 2344     		add	r3, r3, r4
 4178 00a6 35F81330 		ldrh	r3, [r5, r3, lsl #1]
 4179 00aa 2E2B     		cmp	r3, #46
 4180 00ac C5D1     		bne	.L403
 4181              	.L404:
2657:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 4182              		.loc 1 2657 0
 4183 00ae 0023     		movs	r3, #0
 4184 00b0 25F81430 		strh	r3, [r5, r4, lsl #1]	@ movhi
 4185              	.LVL613:
2658:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->fn[i] = (i < di) ? '.' : ' ';
 4186              		.loc 1 2658 0
 4187 00b4 12E0     		b	.L406
 4188              	.LVL614:
 4189              	.L448:
2656:Middlewares/Third_Party/FatFs/src/ff.c **** 		lfn[di] = 0;
 4190              		.loc 1 2656 0
 4191 00b6 6FF00043 		mvn	r3, #-2147483648
 4192 00ba 2344     		add	r3, r3, r4
 4193 00bc 35F81330 		ldrh	r3, [r5, r3, lsl #1]
 4194 00c0 2E2B     		cmp	r3, #46
 4195 00c2 BCD1     		bne	.L410
2656:Middlewares/Third_Party/FatFs/src/ff.c **** 		lfn[di] = 0;
 4196              		.loc 1 2656 0 is_stmt 0 discriminator 1
 4197 00c4 724B     		ldr	r3, .L459+4
 4198 00c6 2344     		add	r3, r3, r4
 4199 00c8 35F81330 		ldrh	r3, [r5, r3, lsl #1]
 4200 00cc 2E2B     		cmp	r3, #46
 4201 00ce B6D1     		bne	.L410
 4202 00d0 EDE7     		b	.L404
 4203              	.LVL615:
 4204              	.L442:
2659:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 4205              		.loc 1 2659 0 is_stmt 1
 4206 00d2 2021     		movs	r1, #32
 4207              	.L407:
2659:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 4208              		.loc 1 2659 0 is_stmt 0 discriminator 4
 4209 00d4 FA18     		adds	r2, r7, r3
 4210 00d6 82F82410 		strb	r1, [r2, #36]
2658:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->fn[i] = (i < di) ? '.' : ' ';
 4211              		.loc 1 2658 0 is_stmt 1 discriminator 4
 4212 00da 0133     		adds	r3, r3, #1
 4213              	.LVL616:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 188


 4214              	.L406:
2658:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->fn[i] = (i < di) ? '.' : ' ';
 4215              		.loc 1 2658 0 is_stmt 0 discriminator 2
 4216 00dc 0A2B     		cmp	r3, #10
 4217 00de 03D8     		bhi	.L449
2659:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 4218              		.loc 1 2659 0 is_stmt 1
 4219 00e0 A342     		cmp	r3, r4
 4220 00e2 F6D2     		bcs	.L442
 4221 00e4 2E21     		movs	r1, #46
 4222 00e6 F5E7     		b	.L407
 4223              	.L449:
2660:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_OK;
 4224              		.loc 1 2660 0
 4225 00e8 3B44     		add	r3, r3, r7
 4226              	.LVL617:
 4227 00ea 48F02008 		orr	r8, r8, #32
 4228              	.LVL618:
 4229 00ee 83F82480 		strb	r8, [r3, #36]
2661:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 4230              		.loc 1 2661 0
 4231 00f2 0020     		movs	r0, #0
 4232              	.LVL619:
 4233 00f4 C4E0     		b	.L399
 4234              	.LVL620:
 4235              	.L409:
2669:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 4236              		.loc 1 2669 0
 4237 00f6 0023     		movs	r3, #0
 4238 00f8 25F81430 		strh	r3, [r5, r4, lsl #1]	@ movhi
2670:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4239              		.loc 1 2670 0
 4240 00fc 002C     		cmp	r4, #0
 4241 00fe 00F0C280 		beq	.L443
2673:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 4242              		.loc 1 2673 0
 4243 0102 0B22     		movs	r2, #11
 4244 0104 2021     		movs	r1, #32
 4245 0106 07F12400 		add	r0, r7, #36
 4246 010a FFF7FEFF 		bl	mem_set
 4247              	.LVL621:
2674:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 4248              		.loc 1 2674 0
 4249 010e 0023     		movs	r3, #0
 4250 0110 00E0     		b	.L412
 4251              	.LVL622:
 4252              	.L413:
2674:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 4253              		.loc 1 2674 0 is_stmt 0 discriminator 3
 4254 0112 0133     		adds	r3, r3, #1
 4255              	.LVL623:
 4256              	.L412:
2674:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 4257              		.loc 1 2674 0 discriminator 1
 4258 0114 35F81320 		ldrh	r2, [r5, r3, lsl #1]
 4259 0118 2E2A     		cmp	r2, #46
 4260 011a 18BF     		it	ne
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 189


 4261 011c 202A     		cmpne	r2, #32
 4262 011e F8D0     		beq	.L413
2675:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 4263              		.loc 1 2675 0 is_stmt 1
 4264 0120 0BB1     		cbz	r3, .L415
2675:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 4265              		.loc 1 2675 0 is_stmt 0 discriminator 1
 4266 0122 48F00308 		orr	r8, r8, #3
 4267              	.LVL624:
 4268              	.L415:
2676:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4269              		.loc 1 2676 0 is_stmt 1 discriminator 1
 4270 0126 7CB1     		cbz	r4, .L444
2676:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4271              		.loc 1 2676 0 is_stmt 0 discriminator 2
 4272 0128 6FF00042 		mvn	r2, #-2147483648
 4273 012c 2244     		add	r2, r2, r4
 4274 012e 35F81220 		ldrh	r2, [r5, r2, lsl #1]
 4275 0132 2E2A     		cmp	r2, #46
 4276 0134 01D0     		beq	.L450
2676:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4277              		.loc 1 2676 0 discriminator 3
 4278 0136 013C     		subs	r4, r4, #1
 4279              	.LVL625:
 4280 0138 F5E7     		b	.L415
 4281              	.L450:
 4282 013a 4FF0080B 		mov	fp, #8
 4283 013e 4FF0000A 		mov	r10, #0
 4284              	.LVL626:
 4285 0142 CDF804A0 		str	r10, [sp, #4]
 4286 0146 08E0     		b	.L418
 4287              	.LVL627:
 4288              	.L444:
 4289 0148 A246     		mov	r10, r4
 4290              	.LVL628:
 4291 014a 4FF0080B 		mov	fp, #8
 4292 014e 0022     		movs	r2, #0
 4293 0150 0192     		str	r2, [sp, #4]
 4294 0152 02E0     		b	.L418
 4295              	.LVL629:
 4296              	.L420:
2683:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 4297              		.loc 1 2683 0 is_stmt 1
 4298 0154 48F00308 		orr	r8, r8, #3
 4299              	.LVL630:
2680:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
 4300              		.loc 1 2680 0
 4301 0158 4B46     		mov	r3, r9
 4302              	.LVL631:
 4303              	.L418:
 4304 015a 03F10109 		add	r9, r3, #1
 4305              	.LVL632:
 4306 015e 35F81360 		ldrh	r6, [r5, r3, lsl #1]
 4307              	.LVL633:
2681:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 4308              		.loc 1 2681 0
 4309 0162 BEB1     		cbz	r6, .L419
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 190


2682:Middlewares/Third_Party/FatFs/src/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
 4310              		.loc 1 2682 0
 4311 0164 202E     		cmp	r6, #32
 4312 0166 F5D0     		beq	.L420
2682:Middlewares/Third_Party/FatFs/src/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
 4313              		.loc 1 2682 0 is_stmt 0 discriminator 1
 4314 0168 2E2E     		cmp	r6, #46
 4315 016a 14BF     		ite	ne
 4316 016c 0023     		movne	r3, #0
 4317 016e 0123     		moveq	r3, #1
 4318 0170 4C45     		cmp	r4, r9
 4319 0172 08BF     		it	eq
 4320 0174 0023     		moveq	r3, #0
 4321 0176 002B     		cmp	r3, #0
 4322 0178 ECD1     		bne	.L420
2686:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ni == 11) {				/* Long extension */
 4323              		.loc 1 2686 0 is_stmt 1
 4324 017a 4C45     		cmp	r4, r9
 4325 017c 18BF     		it	ne
 4326 017e DA45     		cmpne	r10, fp
 4327 0180 35D3     		bcc	.L423
2687:Middlewares/Third_Party/FatFs/src/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
 4328              		.loc 1 2687 0
 4329 0182 BBF10B0F 		cmp	fp, #11
 4330 0186 25D0     		beq	.L451
2690:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (si > di) break;			/* No extension */
 4331              		.loc 1 2690 0
 4332 0188 4C45     		cmp	r4, r9
 4333 018a 01D0     		beq	.L425
2690:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (si > di) break;			/* No extension */
 4334              		.loc 1 2690 0 is_stmt 0 discriminator 1
 4335 018c 48F00308 		orr	r8, r8, #3
 4336              	.LVL634:
 4337              	.L425:
2691:Middlewares/Third_Party/FatFs/src/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
 4338              		.loc 1 2691 0 is_stmt 1
 4339 0190 4C45     		cmp	r4, r9
 4340 0192 22D2     		bcs	.L452
 4341              	.L419:
2727:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4342              		.loc 1 2727 0
 4343 0194 97F82430 		ldrb	r3, [r7, #36]	@ zero_extendqisi2
 4344 0198 E52B     		cmp	r3, #229
 4345 019a 5FD0     		beq	.L453
 4346              	.L432:
2729:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are com
 4347              		.loc 1 2729 0
 4348 019c BBF1080F 		cmp	fp, #8
 4349 01a0 60D0     		beq	.L454
 4350              	.L433:
 4351 01a2 019B     		ldr	r3, [sp, #4]
 4352 01a4 03F00C02 		and	r2, r3, #12
2730:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
 4353              		.loc 1 2730 0
 4354 01a8 0C2A     		cmp	r2, #12
 4355 01aa 03D0     		beq	.L434
2730:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 191


 4356              		.loc 1 2730 0 is_stmt 0 discriminator 2
 4357 01ac 03F00303 		and	r3, r3, #3
 4358 01b0 032B     		cmp	r3, #3
 4359 01b2 01D1     		bne	.L435
 4360              	.L434:
2730:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
 4361              		.loc 1 2730 0 discriminator 3
 4362 01b4 48F00208 		orr	r8, r8, #2
 4363              	.LVL635:
 4364              	.L435:
2731:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 4365              		.loc 1 2731 0 is_stmt 1
 4366 01b8 18F0020F 		tst	r8, #2
 4367 01bc 06D1     		bne	.L436
2732:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 4368              		.loc 1 2732 0
 4369 01be 019B     		ldr	r3, [sp, #4]
 4370 01c0 03F00303 		and	r3, r3, #3
 4371 01c4 012B     		cmp	r3, #1
 4372 01c6 52D0     		beq	.L455
 4373              	.L437:
2733:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 4374              		.loc 1 2733 0
 4375 01c8 042A     		cmp	r2, #4
 4376 01ca 53D0     		beq	.L456
 4377              	.L436:
2736:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4378              		.loc 1 2736 0
 4379 01cc 87F82F80 		strb	r8, [r7, #47]
2738:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4380              		.loc 1 2738 0
 4381 01d0 0020     		movs	r0, #0
 4382 01d2 55E0     		b	.L399
 4383              	.L451:
2688:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 4384              		.loc 1 2688 0
 4385 01d4 48F00308 		orr	r8, r8, #3
 4386              	.LVL636:
 4387 01d8 DCE7     		b	.L419
 4388              	.L452:
 4389              	.LVL637:
2693:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 4390              		.loc 1 2693 0
 4391 01da 019B     		ldr	r3, [sp, #4]
 4392 01dc 9B00     		lsls	r3, r3, #2
 4393 01de DBB2     		uxtb	r3, r3
 4394 01e0 0193     		str	r3, [sp, #4]
 4395              	.LVL638:
2692:Middlewares/Third_Party/FatFs/src/ff.c **** 			b <<= 2; continue;
 4396              		.loc 1 2692 0
 4397 01e2 2346     		mov	r3, r4
 4398 01e4 4FF00B0B 		mov	fp, #11
 4399 01e8 4FF0080A 		mov	r10, #8
2693:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 4400              		.loc 1 2693 0
 4401 01ec B5E7     		b	.L418
 4402              	.LVL639:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 192


 4403              	.L423:
2696:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
 4404              		.loc 1 2696 0
 4405 01ee 7F2E     		cmp	r6, #127
 4406 01f0 0BD8     		bhi	.L457
 4407              	.L426:
2712:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 4408              		.loc 1 2712 0
 4409 01f2 BEB9     		cbnz	r6, .L458
 4410              	.L428:
 4411              	.LVL640:
2713:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 4412              		.loc 1 2713 0
 4413 01f4 48F00308 		orr	r8, r8, #3
 4414              	.LVL641:
 4415 01f8 5F26     		movs	r6, #95
 4416              	.LVL642:
 4417              	.L430:
2724:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 4418              		.loc 1 2724 0
 4419 01fa 07EB0A03 		add	r3, r7, r10
 4420 01fe 83F82460 		strb	r6, [r3, #36]
2680:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
 4421              		.loc 1 2680 0
 4422 0202 4B46     		mov	r3, r9
2724:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 4423              		.loc 1 2724 0
 4424 0204 0AF1010A 		add	r10, r10, #1
 4425              	.LVL643:
 4426 0208 A7E7     		b	.L418
 4427              	.L457:
2698:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 4428              		.loc 1 2698 0
 4429 020a 0021     		movs	r1, #0
 4430 020c 3046     		mov	r0, r6
 4431 020e FFF7FEFF 		bl	ff_convert
 4432              	.LVL644:
2699:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 4433              		.loc 1 2699 0
 4434 0212 0646     		mov	r6, r0
 4435 0214 18B1     		cbz	r0, .L427
2699:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 4436              		.loc 1 2699 0 is_stmt 0 discriminator 1
 4437 0216 A0F18006 		sub	r6, r0, #128
 4438 021a 1E4B     		ldr	r3, .L459+8
 4439 021c 9E5D     		ldrb	r6, [r3, r6]	@ zero_extendqisi2
 4440              	.LVL645:
 4441              	.L427:
2703:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 4442              		.loc 1 2703 0 is_stmt 1
 4443 021e 48F00208 		orr	r8, r8, #2
 4444              	.LVL646:
 4445 0222 E6E7     		b	.L426
 4446              	.L458:
2712:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 4447              		.loc 1 2712 0 discriminator 1
 4448 0224 3146     		mov	r1, r6
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 193


 4449 0226 1C48     		ldr	r0, .L459+12
 4450 0228 FFF7FEFF 		bl	chk_chr
 4451              	.LVL647:
 4452 022c 0028     		cmp	r0, #0
 4453 022e E1D1     		bne	.L428
2715:Middlewares/Third_Party/FatFs/src/ff.c **** 					b |= 2;
 4454              		.loc 1 2715 0
 4455 0230 A6F14103 		sub	r3, r6, #65
 4456 0234 9BB2     		uxth	r3, r3
 4457 0236 192B     		cmp	r3, #25
 4458 0238 04D8     		bhi	.L431
2716:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
 4459              		.loc 1 2716 0
 4460 023a 019B     		ldr	r3, [sp, #4]
 4461 023c 43F00203 		orr	r3, r3, #2
 4462 0240 0193     		str	r3, [sp, #4]
 4463              	.LVL648:
 4464 0242 DAE7     		b	.L430
 4465              	.L431:
2718:Middlewares/Third_Party/FatFs/src/ff.c **** 						b |= 1; w -= 0x20;
 4466              		.loc 1 2718 0
 4467 0244 A6F16103 		sub	r3, r6, #97
 4468 0248 9BB2     		uxth	r3, r3
 4469 024a 192B     		cmp	r3, #25
 4470 024c D5D8     		bhi	.L430
2719:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 4471              		.loc 1 2719 0
 4472 024e 019B     		ldr	r3, [sp, #4]
 4473 0250 43F00103 		orr	r3, r3, #1
 4474 0254 0193     		str	r3, [sp, #4]
 4475              	.LVL649:
 4476 0256 203E     		subs	r6, r6, #32
 4477              	.LVL650:
 4478 0258 B6B2     		uxth	r6, r6
 4479              	.LVL651:
 4480 025a CEE7     		b	.L430
 4481              	.L453:
2727:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4482              		.loc 1 2727 0 discriminator 1
 4483 025c 0523     		movs	r3, #5
 4484 025e 87F82430 		strb	r3, [r7, #36]
 4485 0262 9BE7     		b	.L432
 4486              	.L454:
2729:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are com
 4487              		.loc 1 2729 0 discriminator 1
 4488 0264 019B     		ldr	r3, [sp, #4]
 4489 0266 9B00     		lsls	r3, r3, #2
 4490 0268 DBB2     		uxtb	r3, r3
 4491 026a 0193     		str	r3, [sp, #4]
 4492              	.LVL652:
 4493 026c 99E7     		b	.L433
 4494              	.L455:
2732:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 4495              		.loc 1 2732 0 discriminator 1
 4496 026e 48F01008 		orr	r8, r8, #16
 4497              	.LVL653:
 4498 0272 A9E7     		b	.L437
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 194


 4499              	.L456:
2733:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 4500              		.loc 1 2733 0 discriminator 1
 4501 0274 48F00808 		orr	r8, r8, #8
 4502              	.LVL654:
 4503 0278 A8E7     		b	.L436
 4504              	.LVL655:
 4505              	.L438:
2638:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
 4506              		.loc 1 2638 0
 4507 027a 0620     		movs	r0, #6
 4508              	.LVL656:
 4509 027c 00E0     		b	.L399
 4510              	.LVL657:
 4511              	.L439:
2647:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4512              		.loc 1 2647 0
 4513 027e 0620     		movs	r0, #6
 4514              	.LVL658:
 4515              	.L399:
2803:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4516              		.loc 1 2803 0
 4517 0280 03B0     		add	sp, sp, #12
 4518              	.LCFI43:
 4519              		.cfi_remember_state
 4520              		.cfi_def_cfa_offset 36
 4521              		@ sp needed
 4522 0282 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4523              	.LVL659:
 4524              	.L443:
 4525              	.LCFI44:
 4526              		.cfi_restore_state
2670:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4527              		.loc 1 2670 0
 4528 0286 0620     		movs	r0, #6
 4529 0288 FAE7     		b	.L399
 4530              	.L460:
 4531 028a 00BF     		.align	2
 4532              	.L459:
 4533 028c 00000000 		.word	.LC0
 4534 0290 FEFFFF7F 		.word	2147483646
 4535 0294 00000000 		.word	.LANCHOR5
 4536 0298 0C000000 		.word	.LC1
 4537              		.cfi_endproc
 4538              	.LFE182:
 4540              		.section	.text.get_fileinfo,"ax",%progbits
 4541              		.align	1
 4542              		.syntax unified
 4543              		.thumb
 4544              		.thumb_func
 4545              		.fpu fpv5-sp-d16
 4547              	get_fileinfo:
 4548              	.LFB181:
2448:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, j;
 4549              		.loc 1 2448 0
 4550              		.cfi_startproc
 4551              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 195


 4552              		@ frame_needed = 0, uses_anonymous_args = 0
 4553              	.LVL660:
 4554 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4555              	.LCFI45:
 4556              		.cfi_def_cfa_offset 24
 4557              		.cfi_offset 4, -24
 4558              		.cfi_offset 5, -20
 4559              		.cfi_offset 6, -16
 4560              		.cfi_offset 7, -12
 4561              		.cfi_offset 8, -8
 4562              		.cfi_offset 14, -4
2454:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4563              		.loc 1 2454 0
 4564 0004 D0F80080 		ldr	r8, [r0]
 4565              	.LVL661:
2458:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 4566              		.loc 1 2458 0
 4567 0008 0023     		movs	r3, #0
 4568 000a 8B75     		strb	r3, [r1, #22]
2459:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4569              		.loc 1 2459 0
 4570 000c C369     		ldr	r3, [r0, #28]
 4571 000e 002B     		cmp	r3, #0
 4572 0010 69D0     		beq	.L461
 4573 0012 0D46     		mov	r5, r1
 4574 0014 0646     		mov	r6, r0
2469:Middlewares/Third_Party/FatFs/src/ff.c **** 			i = j = 0;
 4575              		.loc 1 2469 0
 4576 0016 036B     		ldr	r3, [r0, #48]
 4577 0018 B3F1FF3F 		cmp	r3, #-1
 4578 001c 14D0     		beq	.L464
2470:Middlewares/Third_Party/FatFs/src/ff.c **** 			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 4579              		.loc 1 2470 0
 4580 001e 0024     		movs	r4, #0
 4581              	.LVL662:
 4582              	.L463:
2471:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
 4583              		.loc 1 2471 0
 4584 0020 D8F80C30 		ldr	r3, [r8, #12]
 4585 0024 671C     		adds	r7, r4, #1
 4586              	.LVL663:
 4587 0026 33F81400 		ldrh	r0, [r3, r4, lsl #1]
 4588              	.LVL664:
 4589 002a 50B1     		cbz	r0, .L465
2473:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 4590              		.loc 1 2473 0
 4591 002c 0021     		movs	r1, #0
 4592 002e FFF7FEFF 		bl	ff_convert
 4593              	.LVL665:
2474:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 4594              		.loc 1 2474 0
 4595 0032 28B1     		cbz	r0, .L478
2479:Middlewares/Third_Party/FatFs/src/ff.c **** 				fno->fname[i++] = (TCHAR)w;
 4596              		.loc 1 2479 0
 4597 0034 FE2C     		cmp	r4, #254
 4598 0036 0BD8     		bhi	.L479
 4599              	.LVL666:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 196


2480:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 4600              		.loc 1 2480 0
 4601 0038 2C44     		add	r4, r4, r5
 4602 003a A075     		strb	r0, [r4, #22]
 4603 003c 3C46     		mov	r4, r7
 4604 003e EFE7     		b	.L463
 4605              	.LVL667:
 4606              	.L478:
2474:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 4607              		.loc 1 2474 0
 4608 0040 0024     		movs	r4, #0
 4609              	.LVL668:
 4610              	.L465:
2482:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 4611              		.loc 1 2482 0
 4612 0042 2C44     		add	r4, r4, r5
 4613              	.LVL669:
 4614 0044 0023     		movs	r3, #0
 4615 0046 A375     		strb	r3, [r4, #22]
 4616              	.LVL670:
 4617              	.L464:
2487:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (i < 11) {		/* Copy name body and extension */
 4618              		.loc 1 2487 0
 4619 0048 AC7D     		ldrb	r4, [r5, #22]	@ zero_extendqisi2
 4620              	.LVL671:
2486:Middlewares/Third_Party/FatFs/src/ff.c **** 	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 4621              		.loc 1 2486 0
 4622 004a 0022     		movs	r2, #0
 4623 004c 1346     		mov	r3, r2
2488:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = (TCHAR)dp->dir[i++];
 4624              		.loc 1 2488 0
 4625 004e 12E0     		b	.L467
 4626              	.LVL672:
 4627              	.L479:
2479:Middlewares/Third_Party/FatFs/src/ff.c **** 				fno->fname[i++] = (TCHAR)w;
 4628              		.loc 1 2479 0
 4629 0050 0024     		movs	r4, #0
 4630              	.LVL673:
 4631 0052 F6E7     		b	.L465
 4632              	.LVL674:
 4633              	.L485:
2491:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == 9) {						/* Insert a . if extension is exist */
 4634              		.loc 1 2491 0
 4635 0054 E523     		movs	r3, #229
 4636              	.LVL675:
 4637 0056 17E0     		b	.L469
 4638              	.LVL676:
 4639              	.L486:
2493:Middlewares/Third_Party/FatFs/src/ff.c **** 			fno->altname[j++] = '.';
 4640              		.loc 1 2493 0
 4641 0058 14B9     		cbnz	r4, .L471
2493:Middlewares/Third_Party/FatFs/src/ff.c **** 			fno->altname[j++] = '.';
 4642              		.loc 1 2493 0 is_stmt 0 discriminator 1
 4643 005a A818     		adds	r0, r5, r2
 4644 005c 2E27     		movs	r7, #46
 4645 005e 8775     		strb	r7, [r0, #22]
 4646              	.L471:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 197


 4647              	.LVL677:
2494:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 4648              		.loc 1 2494 0 is_stmt 1
 4649 0060 A818     		adds	r0, r5, r2
 4650 0062 2E27     		movs	r7, #46
 4651 0064 4772     		strb	r7, [r0, #9]
 4652 0066 0132     		adds	r2, r2, #1
 4653              	.LVL678:
 4654 0068 10E0     		b	.L470
 4655              	.L487:
2505:Middlewares/Third_Party/FatFs/src/ff.c **** 				c += 0x20;			/* To lower */
 4656              		.loc 1 2505 0
 4657 006a 1020     		movs	r0, #16
 4658 006c 1CE0     		b	.L474
 4659              	.L473:
2508:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 4660              		.loc 1 2508 0
 4661 006e A818     		adds	r0, r5, r2
 4662 0070 8375     		strb	r3, [r0, #22]
 4663              	.L472:
2510:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 4664              		.loc 1 2510 0
 4665 0072 0132     		adds	r2, r2, #1
 4666              	.LVL679:
 4667              	.L468:
2505:Middlewares/Third_Party/FatFs/src/ff.c **** 				c += 0x20;			/* To lower */
 4668              		.loc 1 2505 0
 4669 0074 0B46     		mov	r3, r1
 4670              	.LVL680:
 4671              	.L467:
2488:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = (TCHAR)dp->dir[i++];
 4672              		.loc 1 2488 0
 4673 0076 0A2B     		cmp	r3, #10
 4674 0078 1BD8     		bhi	.L484
2489:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == ' ') continue;				/* Skip padding spaces */
 4675              		.loc 1 2489 0
 4676 007a 306A     		ldr	r0, [r6, #32]
 4677 007c 591C     		adds	r1, r3, #1
 4678              	.LVL681:
 4679 007e C35C     		ldrb	r3, [r0, r3]	@ zero_extendqisi2
 4680              	.LVL682:
2490:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 4681              		.loc 1 2490 0
 4682 0080 202B     		cmp	r3, #32
 4683 0082 F7D0     		beq	.L468
2491:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == 9) {						/* Insert a . if extension is exist */
 4684              		.loc 1 2491 0
 4685 0084 052B     		cmp	r3, #5
 4686 0086 E5D0     		beq	.L485
 4687              	.LVL683:
 4688              	.L469:
2492:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!lfv) fno->fname[j] = '.';
 4689              		.loc 1 2492 0
 4690 0088 0929     		cmp	r1, #9
 4691 008a E5D0     		beq	.L486
 4692              	.L470:
2503:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!lfv) {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 198


 4693              		.loc 1 2503 0
 4694 008c A818     		adds	r0, r5, r2
 4695 008e 4372     		strb	r3, [r0, #9]
2504:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 4696              		.loc 1 2504 0
 4697 0090 002C     		cmp	r4, #0
 4698 0092 EED1     		bne	.L472
2505:Middlewares/Third_Party/FatFs/src/ff.c **** 				c += 0x20;			/* To lower */
 4699              		.loc 1 2505 0
 4700 0094 A3F14100 		sub	r0, r3, #65
 4701 0098 C0B2     		uxtb	r0, r0
 4702 009a 1928     		cmp	r0, #25
 4703 009c E7D8     		bhi	.L473
2505:Middlewares/Third_Party/FatFs/src/ff.c **** 				c += 0x20;			/* To lower */
 4704              		.loc 1 2505 0 is_stmt 0 discriminator 1
 4705 009e 306A     		ldr	r0, [r6, #32]
 4706 00a0 077B     		ldrb	r7, [r0, #12]	@ zero_extendqisi2
 4707 00a2 0829     		cmp	r1, #8
 4708 00a4 E1D8     		bhi	.L487
2505:Middlewares/Third_Party/FatFs/src/ff.c **** 				c += 0x20;			/* To lower */
 4709              		.loc 1 2505 0
 4710 00a6 0820     		movs	r0, #8
 4711              	.L474:
2505:Middlewares/Third_Party/FatFs/src/ff.c **** 				c += 0x20;			/* To lower */
 4712              		.loc 1 2505 0 discriminator 5
 4713 00a8 0742     		tst	r7, r0
 4714 00aa E0D0     		beq	.L473
2506:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 4715              		.loc 1 2506 0 is_stmt 1
 4716 00ac 2033     		adds	r3, r3, #32
 4717              	.LVL684:
 4718 00ae DBB2     		uxtb	r3, r3
 4719              	.LVL685:
 4720 00b0 DDE7     		b	.L473
 4721              	.LVL686:
 4722              	.L484:
2512:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->fname[j] = 0;
 4723              		.loc 1 2512 0
 4724 00b2 34B9     		cbnz	r4, .L476
2513:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is ex
 4725              		.loc 1 2513 0
 4726 00b4 AB18     		adds	r3, r5, r2
 4727              	.LVL687:
 4728 00b6 0021     		movs	r1, #0
 4729 00b8 9975     		strb	r1, [r3, #22]
2514:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 4730              		.loc 1 2514 0
 4731 00ba 336A     		ldr	r3, [r6, #32]
 4732 00bc 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 4733 00be 03B9     		cbnz	r3, .L476
 4734 00c0 0A46     		mov	r2, r1
 4735              	.LVL688:
 4736              	.L476:
2516:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4737              		.loc 1 2516 0
 4738 00c2 2A44     		add	r2, r2, r5
 4739              	.LVL689:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 199


 4740 00c4 0023     		movs	r3, #0
 4741 00c6 5372     		strb	r3, [r2, #9]
2530:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 4742              		.loc 1 2530 0
 4743 00c8 336A     		ldr	r3, [r6, #32]
 4744 00ca DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 4745 00cc 2B72     		strb	r3, [r5, #8]
2531:Middlewares/Third_Party/FatFs/src/ff.c **** 	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 4746              		.loc 1 2531 0
 4747 00ce 306A     		ldr	r0, [r6, #32]
 4748 00d0 1C30     		adds	r0, r0, #28
 4749 00d2 FFF7FEFF 		bl	ld_dword
 4750              	.LVL690:
 4751 00d6 2860     		str	r0, [r5]
2532:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 4752              		.loc 1 2532 0
 4753 00d8 306A     		ldr	r0, [r6, #32]
 4754 00da 1630     		adds	r0, r0, #22
 4755 00dc FFF7FEFF 		bl	ld_dword
 4756              	.LVL691:
2533:Middlewares/Third_Party/FatFs/src/ff.c **** }
 4757              		.loc 1 2533 0
 4758 00e0 E880     		strh	r0, [r5, #6]	@ movhi
 4759 00e2 000C     		lsrs	r0, r0, #16
 4760              	.LVL692:
 4761 00e4 A880     		strh	r0, [r5, #4]	@ movhi
 4762              	.LVL693:
 4763              	.L461:
2534:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4764              		.loc 1 2534 0
 4765 00e6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4766              		.cfi_endproc
 4767              	.LFE181:
 4769              		.section	.text.cmp_lfn,"ax",%progbits
 4770              		.align	1
 4771              		.syntax unified
 4772              		.thumb
 4773              		.thumb_func
 4774              		.fpu fpv5-sp-d16
 4776              	cmp_lfn:
 4777              	.LFB172:
1681:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, s;
 4778              		.loc 1 1681 0
 4779              		.cfi_startproc
 4780              		@ args = 0, pretend = 0, frame = 0
 4781              		@ frame_needed = 0, uses_anonymous_args = 0
 4782              	.LVL694:
 4783 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4784              	.LCFI46:
 4785              		.cfi_def_cfa_offset 32
 4786              		.cfi_offset 4, -32
 4787              		.cfi_offset 5, -28
 4788              		.cfi_offset 6, -24
 4789              		.cfi_offset 7, -20
 4790              		.cfi_offset 8, -16
 4791              		.cfi_offset 9, -12
 4792              		.cfi_offset 10, -8
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 200


 4793              		.cfi_offset 14, -4
 4794 0004 8146     		mov	r9, r0
 4795 0006 0F46     		mov	r7, r1
1686:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4796              		.loc 1 1686 0
 4797 0008 01F11A00 		add	r0, r1, #26
 4798              	.LVL695:
 4799 000c FFF7FEFF 		bl	ld_word
 4800              	.LVL696:
 4801 0010 B8BB     		cbnz	r0, .L494
1688:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4802              		.loc 1 1688 0
 4803 0012 3D78     		ldrb	r5, [r7]	@ zero_extendqisi2
 4804 0014 05F03F05 		and	r5, r5, #63
 4805 0018 013D     		subs	r5, r5, #1
 4806 001a 05EB4503 		add	r3, r5, r5, lsl #1
 4807 001e 05EB8305 		add	r5, r5, r3, lsl #2
 4808              	.LVL697:
1690:Middlewares/Third_Party/FatFs/src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 4809              		.loc 1 1690 0
 4810 0022 4FF00108 		mov	r8, #1
 4811 0026 0024     		movs	r4, #0
 4812 0028 04E0     		b	.L490
 4813              	.LVL698:
 4814              	.L491:
1698:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 4815              		.loc 1 1698 0
 4816 002a 4FF6FF73 		movw	r3, #65535
 4817 002e 9842     		cmp	r0, r3
 4818 0030 2ED1     		bne	.L497
 4819              	.LVL699:
 4820              	.L492:
1690:Middlewares/Third_Party/FatFs/src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 4821              		.loc 1 1690 0 discriminator 2
 4822 0032 0134     		adds	r4, r4, #1
 4823              	.LVL700:
 4824              	.L490:
1690:Middlewares/Third_Party/FatFs/src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 4825              		.loc 1 1690 0 is_stmt 0 discriminator 1
 4826 0034 0C2C     		cmp	r4, #12
 4827 0036 18D8     		bhi	.L502
1691:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wc) {
 4828              		.loc 1 1691 0 is_stmt 1
 4829 0038 194B     		ldr	r3, .L503
 4830 003a 185D     		ldrb	r0, [r3, r4]	@ zero_extendqisi2
 4831 003c 3844     		add	r0, r0, r7
 4832 003e FFF7FEFF 		bl	ld_word
 4833              	.LVL701:
 4834 0042 0646     		mov	r6, r0
 4835              	.LVL702:
1692:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 4836              		.loc 1 1692 0
 4837 0044 B8F1000F 		cmp	r8, #0
 4838 0048 EFD0     		beq	.L491
1693:Middlewares/Third_Party/FatFs/src/ff.c **** 				return 0;					/* Not matched */
 4839              		.loc 1 1693 0
 4840 004a FE2D     		cmp	r5, #254
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 201


 4841 004c 1CD8     		bhi	.L495
1693:Middlewares/Third_Party/FatFs/src/ff.c **** 				return 0;					/* Not matched */
 4842              		.loc 1 1693 0 is_stmt 0 discriminator 1
 4843 004e FFF7FEFF 		bl	ff_wtoupper
 4844              	.LVL703:
 4845 0052 8046     		mov	r8, r0
 4846              	.LVL704:
 4847 0054 05F1010A 		add	r10, r5, #1
 4848              	.LVL705:
 4849 0058 39F81500 		ldrh	r0, [r9, r5, lsl #1]
 4850 005c FFF7FEFF 		bl	ff_wtoupper
 4851              	.LVL706:
 4852 0060 8045     		cmp	r8, r0
 4853 0062 13D1     		bne	.L496
1696:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 4854              		.loc 1 1696 0 is_stmt 1
 4855 0064 B046     		mov	r8, r6
1693:Middlewares/Third_Party/FatFs/src/ff.c **** 				return 0;					/* Not matched */
 4856              		.loc 1 1693 0
 4857 0066 5546     		mov	r5, r10
 4858 0068 E3E7     		b	.L492
 4859              	.LVL707:
 4860              	.L502:
1702:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4861              		.loc 1 1702 0
 4862 006a 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 4863 006c 13F0400F 		tst	r3, #64
 4864 0070 10D0     		beq	.L498
1702:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4865              		.loc 1 1702 0 is_stmt 0 discriminator 1
 4866 0072 B8F1000F 		cmp	r8, #0
 4867 0076 0FD0     		beq	.L499
1702:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4868              		.loc 1 1702 0 discriminator 2
 4869 0078 39F81530 		ldrh	r3, [r9, r5, lsl #1]
 4870 007c 73B9     		cbnz	r3, .L500
1704:Middlewares/Third_Party/FatFs/src/ff.c **** }
 4871              		.loc 1 1704 0 is_stmt 1
 4872 007e 0120     		movs	r0, #1
 4873 0080 00E0     		b	.L488
 4874              	.LVL708:
 4875              	.L494:
1686:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4876              		.loc 1 1686 0
 4877 0082 0020     		movs	r0, #0
 4878              	.L488:
1705:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4879              		.loc 1 1705 0
 4880 0084 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4881              	.LVL709:
 4882              	.L495:
1694:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 4883              		.loc 1 1694 0
 4884 0088 0020     		movs	r0, #0
 4885              	.LVL710:
 4886 008a FBE7     		b	.L488
 4887              	.LVL711:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 202


 4888              	.L496:
 4889 008c 0020     		movs	r0, #0
 4890 008e F9E7     		b	.L488
 4891              	.LVL712:
 4892              	.L497:
1698:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 4893              		.loc 1 1698 0
 4894 0090 0020     		movs	r0, #0
 4895              	.LVL713:
 4896 0092 F7E7     		b	.L488
 4897              	.L498:
1704:Middlewares/Third_Party/FatFs/src/ff.c **** }
 4898              		.loc 1 1704 0
 4899 0094 0120     		movs	r0, #1
 4900 0096 F5E7     		b	.L488
 4901              	.L499:
 4902 0098 0120     		movs	r0, #1
 4903 009a F3E7     		b	.L488
 4904              	.L500:
1702:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4905              		.loc 1 1702 0
 4906 009c 0020     		movs	r0, #0
 4907 009e F1E7     		b	.L488
 4908              	.L504:
 4909              		.align	2
 4910              	.L503:
 4911 00a0 00000000 		.word	.LANCHOR1
 4912              		.cfi_endproc
 4913              	.LFE172:
 4915              		.section	.text.dir_find,"ax",%progbits
 4916              		.align	1
 4917              		.syntax unified
 4918              		.thumb
 4919              		.thumb_func
 4920              		.fpu fpv5-sp-d16
 4922              	dir_find:
 4923              	.LFB178:
2213:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 4924              		.loc 1 2213 0
 4925              		.cfi_startproc
 4926              		@ args = 0, pretend = 0, frame = 0
 4927              		@ frame_needed = 0, uses_anonymous_args = 0
 4928              	.LVL714:
 4929 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4930              	.LCFI47:
 4931              		.cfi_def_cfa_offset 32
 4932              		.cfi_offset 3, -32
 4933              		.cfi_offset 4, -28
 4934              		.cfi_offset 5, -24
 4935              		.cfi_offset 6, -20
 4936              		.cfi_offset 7, -16
 4937              		.cfi_offset 8, -12
 4938              		.cfi_offset 9, -8
 4939              		.cfi_offset 14, -4
 4940 0004 0446     		mov	r4, r0
2215:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE c;
 4941              		.loc 1 2215 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 203


 4942 0006 D0F80080 		ldr	r8, [r0]
 4943              	.LVL715:
2221:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) return res;
 4944              		.loc 1 2221 0
 4945 000a 0021     		movs	r1, #0
 4946 000c FFF7FEFF 		bl	dir_sdi
 4947              	.LVL716:
2222:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 4948              		.loc 1 2222 0
 4949 0010 0646     		mov	r6, r0
 4950 0012 0028     		cmp	r0, #0
 4951 0014 64D1     		bne	.L506
 4952              	.LVL717:
2245:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4953              		.loc 1 2245 0
 4954 0016 4FF0FF33 		mov	r3, #-1
 4955 001a 2363     		str	r3, [r4, #48]
 4956 001c 4FF0FF09 		mov	r9, #255
 4957 0020 4F46     		mov	r7, r9
 4958 0022 0AE0     		b	.L514
 4959              	.LVL718:
 4960              	.L507:
2255:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 4961              		.loc 1 2255 0
 4962 0024 4FF0FF33 		mov	r3, #-1
 4963              	.LVL719:
 4964 0028 2363     		str	r3, [r4, #48]
 4965 002a FF27     		movs	r7, #255
 4966              	.LVL720:
 4967              	.L509:
2277:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (res == FR_OK);
 4968              		.loc 1 2277 0
 4969 002c 0021     		movs	r1, #0
 4970 002e 2046     		mov	r0, r4
 4971 0030 FFF7FEFF 		bl	dir_next
 4972              	.LVL721:
2278:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4973              		.loc 1 2278 0
 4974 0034 0646     		mov	r6, r0
 4975 0036 0028     		cmp	r0, #0
 4976 0038 52D1     		bne	.L506
 4977              	.LVL722:
 4978              	.L514:
2248:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
 4979              		.loc 1 2248 0
 4980 003a E169     		ldr	r1, [r4, #28]
 4981 003c 4046     		mov	r0, r8
 4982              	.LVL723:
 4983 003e FFF7FEFF 		bl	move_window
 4984              	.LVL724:
2249:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = dp->dir[DIR_Name];
 4985              		.loc 1 2249 0
 4986 0042 0646     		mov	r6, r0
 4987 0044 0028     		cmp	r0, #0
 4988 0046 4BD1     		bne	.L506
2250:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 4989              		.loc 1 2250 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 204


 4990 0048 256A     		ldr	r5, [r4, #32]
 4991 004a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 4992              	.LVL725:
2251:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
 4993              		.loc 1 2251 0
 4994 004c 002B     		cmp	r3, #0
 4995 004e 46D0     		beq	.L515
2253:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 4996              		.loc 1 2253 0
 4997 0050 E97A     		ldrb	r1, [r5, #11]	@ zero_extendqisi2
 4998 0052 01F03F02 		and	r2, r1, #63
 4999              	.LVL726:
 5000 0056 A271     		strb	r2, [r4, #6]
2254:Middlewares/Third_Party/FatFs/src/ff.c **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 5001              		.loc 1 2254 0
 5002 0058 E52B     		cmp	r3, #229
 5003 005a E3D0     		beq	.L507
2254:Middlewares/Third_Party/FatFs/src/ff.c **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 5004              		.loc 1 2254 0 is_stmt 0 discriminator 1
 5005 005c 11F0080F 		tst	r1, #8
 5006 0060 01D0     		beq	.L508
2254:Middlewares/Third_Party/FatFs/src/ff.c **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 5007              		.loc 1 2254 0 discriminator 2
 5008 0062 0F2A     		cmp	r2, #15
 5009 0064 DED1     		bne	.L507
 5010              	.L508:
2257:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 5011              		.loc 1 2257 0 is_stmt 1
 5012 0066 0F2A     		cmp	r2, #15
 5013 0068 16D0     		beq	.L520
2268:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 5014              		.loc 1 2268 0
 5015 006a 27B9     		cbnz	r7, .L512
2268:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 5016              		.loc 1 2268 0 is_stmt 0 discriminator 1
 5017 006c 2846     		mov	r0, r5
 5018              	.LVL727:
 5019 006e FFF7FEFF 		bl	sum_sfn
 5020              	.LVL728:
 5021 0072 4845     		cmp	r0, r9
 5022 0074 34D0     		beq	.L506
 5023              	.L512:
2269:Middlewares/Third_Party/FatFs/src/ff.c **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 5024              		.loc 1 2269 0 is_stmt 1
 5025 0076 94F82F30 		ldrb	r3, [r4, #47]	@ zero_extendqisi2
 5026 007a 13F0010F 		tst	r3, #1
 5027 007e 06D1     		bne	.L513
2269:Middlewares/Third_Party/FatFs/src/ff.c **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 5028              		.loc 1 2269 0 is_stmt 0 discriminator 1
 5029 0080 0B22     		movs	r2, #11
 5030 0082 04F12401 		add	r1, r4, #36
 5031 0086 2846     		mov	r0, r5
 5032 0088 FFF7FEFF 		bl	mem_cmp
 5033              	.LVL729:
 5034 008c 40B3     		cbz	r0, .L506
 5035              	.L513:
 5036              	.LVL730:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 205


2270:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5037              		.loc 1 2270 0 is_stmt 1
 5038 008e 4FF0FF33 		mov	r3, #-1
 5039 0092 2363     		str	r3, [r4, #48]
 5040 0094 FF27     		movs	r7, #255
 5041 0096 C9E7     		b	.L509
 5042              	.LVL731:
 5043              	.L520:
2258:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
 5044              		.loc 1 2258 0
 5045 0098 94F82F20 		ldrb	r2, [r4, #47]	@ zero_extendqisi2
 5046              	.LVL732:
 5047 009c 12F0400F 		tst	r2, #64
 5048 00a0 C4D1     		bne	.L509
2259:Middlewares/Third_Party/FatFs/src/ff.c **** 						sum = dp->dir[LDIR_Chksum];
 5049              		.loc 1 2259 0
 5050 00a2 13F0400F 		tst	r3, #64
 5051 00a6 06D0     		beq	.L511
2260:Middlewares/Third_Party/FatFs/src/ff.c **** 						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 5052              		.loc 1 2260 0
 5053 00a8 95F80D90 		ldrb	r9, [r5, #13]	@ zero_extendqisi2
 5054              	.LVL733:
2261:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 5055              		.loc 1 2261 0
 5056 00ac 03F0BF03 		and	r3, r3, #191
 5057              	.LVL734:
2262:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 5058              		.loc 1 2262 0
 5059 00b0 6269     		ldr	r2, [r4, #20]
 5060 00b2 2263     		str	r2, [r4, #48]
2261:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 5061              		.loc 1 2261 0
 5062 00b4 1F46     		mov	r7, r3
 5063              	.LVL735:
 5064              	.L511:
2265:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 5065              		.loc 1 2265 0
 5066 00b6 BB42     		cmp	r3, r7
 5067 00b8 01D0     		beq	.L521
 5068 00ba FF27     		movs	r7, #255
 5069              	.LVL736:
 5070 00bc B6E7     		b	.L509
 5071              	.LVL737:
 5072              	.L521:
2265:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 5073              		.loc 1 2265 0 is_stmt 0 discriminator 1
 5074 00be 6B7B     		ldrb	r3, [r5, #13]	@ zero_extendqisi2
 5075              	.LVL738:
 5076 00c0 4B45     		cmp	r3, r9
 5077 00c2 01D0     		beq	.L522
2265:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 5078              		.loc 1 2265 0
 5079 00c4 FF27     		movs	r7, #255
 5080              	.LVL739:
 5081 00c6 B1E7     		b	.L509
 5082              	.LVL740:
 5083              	.L522:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 206


2265:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 5084              		.loc 1 2265 0 discriminator 3
 5085 00c8 2946     		mov	r1, r5
 5086 00ca D8F80C00 		ldr	r0, [r8, #12]
 5087              	.LVL741:
 5088 00ce FFF7FEFF 		bl	cmp_lfn
 5089              	.LVL742:
 5090 00d2 10B1     		cbz	r0, .L518
2265:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 5091              		.loc 1 2265 0 discriminator 5
 5092 00d4 013F     		subs	r7, r7, #1
 5093              	.LVL743:
 5094 00d6 FFB2     		uxtb	r7, r7
 5095 00d8 A8E7     		b	.L509
 5096              	.LVL744:
 5097              	.L518:
2265:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 5098              		.loc 1 2265 0
 5099 00da FF27     		movs	r7, #255
 5100              	.LVL745:
 5101 00dc A6E7     		b	.L509
 5102              	.LVL746:
 5103              	.L515:
2251:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
 5104              		.loc 1 2251 0 is_stmt 1
 5105 00de 0426     		movs	r6, #4
 5106              	.LVL747:
 5107              	.L506:
2281:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5108              		.loc 1 2281 0
 5109 00e0 3046     		mov	r0, r6
 5110 00e2 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5111              		.cfi_endproc
 5112              	.LFE178:
 5114              		.section	.text.follow_path,"ax",%progbits
 5115              		.align	1
 5116              		.syntax unified
 5117              		.thumb
 5118              		.thumb_func
 5119              		.fpu fpv5-sp-d16
 5121              	follow_path:
 5122              	.LFB183:
2817:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 5123              		.loc 1 2817 0
 5124              		.cfi_startproc
 5125              		@ args = 0, pretend = 0, frame = 8
 5126              		@ frame_needed = 0, uses_anonymous_args = 0
 5127              	.LVL748:
 5128 0000 70B5     		push	{r4, r5, r6, lr}
 5129              	.LCFI48:
 5130              		.cfi_def_cfa_offset 16
 5131              		.cfi_offset 4, -16
 5132              		.cfi_offset 5, -12
 5133              		.cfi_offset 6, -8
 5134              		.cfi_offset 14, -4
 5135 0002 82B0     		sub	sp, sp, #8
 5136              	.LCFI49:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 207


 5137              		.cfi_def_cfa_offset 24
 5138 0004 0446     		mov	r4, r0
 5139 0006 0191     		str	r1, [sp, #4]
 5140              	.LVL749:
2821:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5141              		.loc 1 2821 0
 5142 0008 0568     		ldr	r5, [r0]
 5143              	.LVL750:
2825:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->sclust = fs->cdir;				/* Start from current directory */
 5144              		.loc 1 2825 0
 5145 000a 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 5146 000c 2F2B     		cmp	r3, #47
 5147 000e 18BF     		it	ne
 5148 0010 5C2B     		cmpne	r3, #92
 5149 0012 10D0     		beq	.L524
2826:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
 5150              		.loc 1 2826 0
 5151 0014 EB69     		ldr	r3, [r5, #28]
 5152 0016 8360     		str	r3, [r0, #8]
 5153              	.L525:
2850:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[NSFLAG] = NS_NONAME;
 5154              		.loc 1 2850 0
 5155 0018 019B     		ldr	r3, [sp, #4]
 5156 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5157 001c 1F2B     		cmp	r3, #31
 5158 001e 29D8     		bhi	.L527
2851:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_sdi(dp, 0);
 5159              		.loc 1 2851 0
 5160 0020 8023     		movs	r3, #128
 5161 0022 84F82F30 		strb	r3, [r4, #47]
2852:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5162              		.loc 1 2852 0
 5163 0026 0021     		movs	r1, #0
 5164              	.LVL751:
 5165 0028 2046     		mov	r0, r4
 5166              	.LVL752:
 5167 002a FFF7FEFF 		bl	dir_sdi
 5168              	.LVL753:
 5169 002e 0646     		mov	r6, r0
 5170              	.LVL754:
 5171 0030 38E0     		b	.L528
 5172              	.LVL755:
 5173              	.L526:
2830:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->sclust = 0;					/* Start from root directory */
 5174              		.loc 1 2830 0 discriminator 2
 5175 0032 0133     		adds	r3, r3, #1
 5176 0034 0193     		str	r3, [sp, #4]
 5177              	.L524:
2830:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->sclust = 0;					/* Start from root directory */
 5178              		.loc 1 2830 0 is_stmt 0 discriminator 1
 5179 0036 019B     		ldr	r3, [sp, #4]
 5180 0038 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5181 003a 5C2A     		cmp	r2, #92
 5182 003c 18BF     		it	ne
 5183 003e 2F2A     		cmpne	r2, #47
 5184 0040 F7D0     		beq	.L526
2831:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 208


 5185              		.loc 1 2831 0 is_stmt 1
 5186 0042 0023     		movs	r3, #0
 5187 0044 A360     		str	r3, [r4, #8]
 5188 0046 E7E7     		b	.L525
 5189              	.LVL756:
 5190              	.L530:
2867:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 5191              		.loc 1 2867 0
 5192 0048 13F0040F 		tst	r3, #4
 5193 004c 2FD0     		beq	.L533
2858:Middlewares/Third_Party/FatFs/src/ff.c **** 			ns = dp->fn[NSFLAG];
 5194              		.loc 1 2858 0
 5195 004e 0646     		mov	r6, r0
 5196 0050 28E0     		b	.L528
 5197              	.L529:
2872:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Get into the sub-directory */
 5198              		.loc 1 2872 0
 5199 0052 13F0040F 		tst	r3, #4
 5200 0056 2CD1     		bne	.L534
2874:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_NO_PATH; break;
 5201              		.loc 1 2874 0
 5202 0058 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5203              	.LVL757:
 5204 005a 13F0100F 		tst	r3, #16
 5205 005e 2AD0     		beq	.L535
2888:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5206              		.loc 1 2888 0
 5207 0060 05F13C01 		add	r1, r5, #60
 5208 0064 6369     		ldr	r3, [r4, #20]
 5209 0066 C3F30803 		ubfx	r3, r3, #0, #9
 5210 006a 1944     		add	r1, r1, r3
 5211 006c 2846     		mov	r0, r5
 5212              	.LVL758:
 5213 006e FFF7FEFF 		bl	ld_clust
 5214              	.LVL759:
 5215 0072 A060     		str	r0, [r4, #8]
 5216              	.L527:
2856:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 5217              		.loc 1 2856 0
 5218 0074 01A9     		add	r1, sp, #4
 5219 0076 2046     		mov	r0, r4
 5220 0078 FFF7FEFF 		bl	create_name
 5221              	.LVL760:
2857:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_find(dp);				/* Find an object with the segment name */
 5222              		.loc 1 2857 0
 5223 007c 0646     		mov	r6, r0
 5224 007e 88B9     		cbnz	r0, .L528
2858:Middlewares/Third_Party/FatFs/src/ff.c **** 			ns = dp->fn[NSFLAG];
 5225              		.loc 1 2858 0
 5226 0080 2046     		mov	r0, r4
 5227              	.LVL761:
 5228 0082 FFF7FEFF 		bl	dir_find
 5229              	.LVL762:
2859:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 5230              		.loc 1 2859 0
 5231 0086 94F82F30 		ldrb	r3, [r4, #47]	@ zero_extendqisi2
 5232              	.LVL763:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 209


2860:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 5233              		.loc 1 2860 0
 5234 008a 0028     		cmp	r0, #0
 5235 008c E1D0     		beq	.L529
2861:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 5236              		.loc 1 2861 0
 5237 008e 0428     		cmp	r0, #4
 5238 0090 0BD1     		bne	.L532
2862:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 5239              		.loc 1 2862 0
 5240 0092 13F0200F 		tst	r3, #32
 5241 0096 D7D0     		beq	.L530
2863:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->fn[NSFLAG] = NS_NONAME;
 5242              		.loc 1 2863 0
 5243 0098 13F0040F 		tst	r3, #4
 5244 009c EAD0     		beq	.L527
2864:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_OK;
 5245              		.loc 1 2864 0
 5246 009e 8023     		movs	r3, #128
 5247              	.LVL764:
 5248 00a0 84F82F30 		strb	r3, [r4, #47]
 5249              	.LVL765:
 5250              	.L528:
2894:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5251              		.loc 1 2894 0
 5252 00a4 3046     		mov	r0, r6
 5253 00a6 02B0     		add	sp, sp, #8
 5254              	.LCFI50:
 5255              		.cfi_remember_state
 5256              		.cfi_def_cfa_offset 16
 5257              		@ sp needed
 5258 00a8 70BD     		pop	{r4, r5, r6, pc}
 5259              	.LVL766:
 5260              	.L532:
 5261              	.LCFI51:
 5262              		.cfi_restore_state
2858:Middlewares/Third_Party/FatFs/src/ff.c **** 			ns = dp->fn[NSFLAG];
 5263              		.loc 1 2858 0
 5264 00aa 0646     		mov	r6, r0
 5265 00ac FAE7     		b	.L528
 5266              	.L533:
2867:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 5267              		.loc 1 2867 0
 5268 00ae 0526     		movs	r6, #5
 5269 00b0 F8E7     		b	.L528
 5270              	.L534:
2858:Middlewares/Third_Party/FatFs/src/ff.c **** 			ns = dp->fn[NSFLAG];
 5271              		.loc 1 2858 0
 5272 00b2 0646     		mov	r6, r0
 5273 00b4 F6E7     		b	.L528
 5274              	.LVL767:
 5275              	.L535:
2875:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5276              		.loc 1 2875 0
 5277 00b6 0526     		movs	r6, #5
 5278 00b8 F4E7     		b	.L528
 5279              		.cfi_endproc
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 210


 5280              	.LFE183:
 5282              		.section	.text.dir_register,"ax",%progbits
 5283              		.align	1
 5284              		.syntax unified
 5285              		.thumb
 5286              		.thumb_func
 5287              		.fpu fpv5-sp-d16
 5289              	dir_register:
 5290              	.LFB179:
2295:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 5291              		.loc 1 2295 0
 5292              		.cfi_startproc
 5293              		@ args = 0, pretend = 0, frame = 16
 5294              		@ frame_needed = 0, uses_anonymous_args = 0
 5295              	.LVL768:
 5296 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 5297              	.LCFI52:
 5298              		.cfi_def_cfa_offset 28
 5299              		.cfi_offset 4, -28
 5300              		.cfi_offset 5, -24
 5301              		.cfi_offset 6, -20
 5302              		.cfi_offset 7, -16
 5303              		.cfi_offset 8, -12
 5304              		.cfi_offset 9, -8
 5305              		.cfi_offset 14, -4
 5306 0004 85B0     		sub	sp, sp, #20
 5307              	.LCFI53:
 5308              		.cfi_def_cfa_offset 48
2297:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
 5309              		.loc 1 2297 0
 5310 0006 0668     		ldr	r6, [r0]
 5311              	.LVL769:
2303:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 5312              		.loc 1 2303 0
 5313 0008 90F82F30 		ldrb	r3, [r0, #47]	@ zero_extendqisi2
 5314 000c 13F0A00F 		tst	r3, #160
 5315 0010 40F08D80 		bne	.L548
2304:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5316              		.loc 1 2304 0
 5317 0014 0024     		movs	r4, #0
 5318 0016 00E0     		b	.L539
 5319              	.LVL770:
 5320              	.L540:
2304:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5321              		.loc 1 2304 0 is_stmt 0 discriminator 3
 5322 0018 0134     		adds	r4, r4, #1
 5323              	.LVL771:
 5324              	.L539:
2304:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5325              		.loc 1 2304 0 discriminator 1
 5326 001a F368     		ldr	r3, [r6, #12]
 5327 001c 33F81430 		ldrh	r3, [r3, r4, lsl #1]
 5328 0020 002B     		cmp	r3, #0
 5329 0022 F9D1     		bne	.L540
 5330 0024 0546     		mov	r5, r0
2335:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 5331              		.loc 1 2335 0 is_stmt 1
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 211


 5332 0026 00F12407 		add	r7, r0, #36
 5333 002a 0C22     		movs	r2, #12
 5334 002c 3946     		mov	r1, r7
 5335 002e 01A8     		add	r0, sp, #4
 5336              	.LVL772:
 5337 0030 FFF7FEFF 		bl	mem_cpy
 5338              	.LVL773:
2336:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 5339              		.loc 1 2336 0
 5340 0034 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 5341 0038 13F0010F 		tst	r3, #1
 5342 003c 1FD0     		beq	.L541
2337:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (n = 1; n < 100; n++) {
 5343              		.loc 1 2337 0
 5344 003e 4023     		movs	r3, #64
 5345 0040 85F82F30 		strb	r3, [r5, #47]
 5346              	.LVL774:
2338:Middlewares/Third_Party/FatFs/src/ff.c **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 5347              		.loc 1 2338 0
 5348 0044 4FF00108 		mov	r8, #1
 5349              	.LVL775:
 5350              	.L542:
2338:Middlewares/Third_Party/FatFs/src/ff.c **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 5351              		.loc 1 2338 0 is_stmt 0 discriminator 1
 5352 0048 B8F1630F 		cmp	r8, #99
 5353 004c 0DD8     		bhi	.L543
2339:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 5354              		.loc 1 2339 0 is_stmt 1
 5355 004e 4346     		mov	r3, r8
 5356 0050 F268     		ldr	r2, [r6, #12]
 5357 0052 01A9     		add	r1, sp, #4
 5358 0054 3846     		mov	r0, r7
 5359 0056 FFF7FEFF 		bl	gen_numname
 5360              	.LVL776:
2340:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 5361              		.loc 1 2340 0
 5362 005a 2846     		mov	r0, r5
 5363 005c FFF7FEFF 		bl	dir_find
 5364              	.LVL777:
2341:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 5365              		.loc 1 2341 0
 5366 0060 8146     		mov	r9, r0
 5367 0062 10B9     		cbnz	r0, .L543
2338:Middlewares/Third_Party/FatFs/src/ff.c **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 5368              		.loc 1 2338 0 discriminator 2
 5369 0064 08F10108 		add	r8, r8, #1
 5370              	.LVL778:
 5371 0068 EEE7     		b	.L542
 5372              	.LVL779:
 5373              	.L543:
2343:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 5374              		.loc 1 2343 0
 5375 006a B8F1640F 		cmp	r8, #100
 5376 006e 64D0     		beq	.L549
2344:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[NSFLAG] = sn[NSFLAG];
 5377              		.loc 1 2344 0
 5378 0070 B9F1040F 		cmp	r9, #4
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 212


 5379 0074 5DD1     		bne	.L538
2345:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 5380              		.loc 1 2345 0
 5381 0076 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 5382 007a 85F82F30 		strb	r3, [r5, #47]
 5383              	.LVL780:
 5384              	.L541:
2349:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_alloc(dp, nent);		/* Allocate entries */
 5385              		.loc 1 2349 0
 5386 007e 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 5387 0082 13F0020F 		tst	r3, #2
 5388 0086 2AD0     		beq	.L550
2349:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_alloc(dp, nent);		/* Allocate entries */
 5389              		.loc 1 2349 0 is_stmt 0 discriminator 1
 5390 0088 0C34     		adds	r4, r4, #12
 5391              	.LVL781:
 5392 008a 2D4B     		ldr	r3, .L553
 5393 008c A3FB0434 		umull	r3, r4, r3, r4
 5394              	.LVL782:
 5395 0090 A408     		lsrs	r4, r4, #2
 5396 0092 0134     		adds	r4, r4, #1
 5397              	.L545:
 5398              	.LVL783:
2350:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 5399              		.loc 1 2350 0 is_stmt 1 discriminator 4
 5400 0094 2146     		mov	r1, r4
 5401 0096 2846     		mov	r0, r5
 5402 0098 FFF7FEFF 		bl	dir_alloc
 5403              	.LVL784:
2351:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 5404              		.loc 1 2351 0 discriminator 4
 5405 009c 8146     		mov	r9, r0
 5406 009e 08B9     		cbnz	r0, .L546
 5407              	.LVL785:
2351:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 5408              		.loc 1 2351 0 is_stmt 0 discriminator 1
 5409 00a0 013C     		subs	r4, r4, #1
 5410              	.LVL786:
 5411 00a2 1ED1     		bne	.L552
 5412              	.L546:
 5413              	.LVL787:
2371:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
 5414              		.loc 1 2371 0 is_stmt 1
 5415 00a4 B9F1000F 		cmp	r9, #0
 5416 00a8 43D1     		bne	.L538
2372:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
 5417              		.loc 1 2372 0
 5418 00aa E969     		ldr	r1, [r5, #28]
 5419 00ac 3046     		mov	r0, r6
 5420 00ae FFF7FEFF 		bl	move_window
 5421              	.LVL788:
2373:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 5422              		.loc 1 2373 0
 5423 00b2 8146     		mov	r9, r0
 5424 00b4 0028     		cmp	r0, #0
 5425 00b6 3CD1     		bne	.L538
2374:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 213


 5426              		.loc 1 2374 0
 5427 00b8 2022     		movs	r2, #32
 5428 00ba 0021     		movs	r1, #0
 5429 00bc 286A     		ldr	r0, [r5, #32]
 5430              	.LVL789:
 5431 00be FFF7FEFF 		bl	mem_set
 5432              	.LVL790:
2375:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
 5433              		.loc 1 2375 0
 5434 00c2 0B22     		movs	r2, #11
 5435 00c4 3946     		mov	r1, r7
 5436 00c6 286A     		ldr	r0, [r5, #32]
 5437 00c8 FFF7FEFF 		bl	mem_cpy
 5438              	.LVL791:
2377:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5439              		.loc 1 2377 0
 5440 00cc 95F82F30 		ldrb	r3, [r5, #47]	@ zero_extendqisi2
 5441 00d0 2A6A     		ldr	r2, [r5, #32]
 5442 00d2 03F01803 		and	r3, r3, #24
 5443 00d6 1373     		strb	r3, [r2, #12]
2379:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 5444              		.loc 1 2379 0
 5445 00d8 0123     		movs	r3, #1
 5446 00da F370     		strb	r3, [r6, #3]
 5447 00dc 29E0     		b	.L538
 5448              	.LVL792:
 5449              	.L550:
2349:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_alloc(dp, nent);		/* Allocate entries */
 5450              		.loc 1 2349 0
 5451 00de 0124     		movs	r4, #1
 5452              	.LVL793:
 5453 00e0 D8E7     		b	.L545
 5454              	.LVL794:
 5455              	.L552:
2352:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
 5456              		.loc 1 2352 0
 5457 00e2 6969     		ldr	r1, [r5, #20]
 5458 00e4 A1EB4411 		sub	r1, r1, r4, lsl #5
 5459 00e8 2846     		mov	r0, r5
 5460              	.LVL795:
 5461 00ea FFF7FEFF 		bl	dir_sdi
 5462              	.LVL796:
2353:Middlewares/Third_Party/FatFs/src/ff.c **** 			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 5463              		.loc 1 2353 0
 5464 00ee 8146     		mov	r9, r0
 5465 00f0 0028     		cmp	r0, #0
 5466 00f2 D7D1     		bne	.L546
2354:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {					/* Store LFN entries in bottom first */
 5467              		.loc 1 2354 0
 5468 00f4 3846     		mov	r0, r7
 5469              	.LVL797:
 5470 00f6 FFF7FEFF 		bl	sum_sfn
 5471              	.LVL798:
 5472 00fa 8046     		mov	r8, r0
 5473              	.LVL799:
 5474              	.L547:
2356:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) break;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 214


 5475              		.loc 1 2356 0
 5476 00fc E969     		ldr	r1, [r5, #28]
 5477 00fe 3046     		mov	r0, r6
 5478 0100 FFF7FEFF 		bl	move_window
 5479              	.LVL800:
2357:Middlewares/Third_Party/FatFs/src/ff.c **** 				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 5480              		.loc 1 2357 0
 5481 0104 8146     		mov	r9, r0
 5482 0106 0028     		cmp	r0, #0
 5483 0108 CCD1     		bne	.L546
2358:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->wflag = 1;
 5484              		.loc 1 2358 0
 5485 010a 4346     		mov	r3, r8
 5486 010c E2B2     		uxtb	r2, r4
 5487 010e 296A     		ldr	r1, [r5, #32]
 5488 0110 F068     		ldr	r0, [r6, #12]
 5489              	.LVL801:
 5490 0112 FFF7FEFF 		bl	put_lfn
 5491              	.LVL802:
2359:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
 5492              		.loc 1 2359 0
 5493 0116 0123     		movs	r3, #1
 5494 0118 F370     		strb	r3, [r6, #3]
2360:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (res == FR_OK && --nent);
 5495              		.loc 1 2360 0
 5496 011a 0021     		movs	r1, #0
 5497 011c 2846     		mov	r0, r5
 5498 011e FFF7FEFF 		bl	dir_next
 5499              	.LVL803:
2361:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 5500              		.loc 1 2361 0
 5501 0122 8146     		mov	r9, r0
 5502 0124 0028     		cmp	r0, #0
 5503 0126 BDD1     		bne	.L546
 5504              	.LVL804:
2361:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 5505              		.loc 1 2361 0 is_stmt 0 discriminator 1
 5506 0128 013C     		subs	r4, r4, #1
 5507              	.LVL805:
 5508 012a E7D1     		bne	.L547
 5509 012c BAE7     		b	.L546
 5510              	.LVL806:
 5511              	.L548:
2303:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 5512              		.loc 1 2303 0 is_stmt 1
 5513 012e 4FF00609 		mov	r9, #6
 5514              	.LVL807:
 5515              	.L538:
2384:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5516              		.loc 1 2384 0
 5517 0132 4846     		mov	r0, r9
 5518 0134 05B0     		add	sp, sp, #20
 5519              	.LCFI54:
 5520              		.cfi_remember_state
 5521              		.cfi_def_cfa_offset 28
 5522              		@ sp needed
 5523 0136 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 215


 5524              	.LVL808:
 5525              	.L549:
 5526              	.LCFI55:
 5527              		.cfi_restore_state
2343:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 5528              		.loc 1 2343 0
 5529 013a 4FF00709 		mov	r9, #7
 5530              	.LVL809:
 5531 013e F8E7     		b	.L538
 5532              	.L554:
 5533              		.align	2
 5534              	.L553:
 5535 0140 4FECC44E 		.word	1321528399
 5536              		.cfi_endproc
 5537              	.LFE179:
 5539              		.section	.text.sync_fs,"ax",%progbits
 5540              		.align	1
 5541              		.syntax unified
 5542              		.thumb
 5543              		.thumb_func
 5544              		.fpu fpv5-sp-d16
 5546              	sync_fs:
 5547              	.LFB160:
 947:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 5548              		.loc 1 947 0
 5549              		.cfi_startproc
 5550              		@ args = 0, pretend = 0, frame = 0
 5551              		@ frame_needed = 0, uses_anonymous_args = 0
 5552              	.LVL810:
 5553 0000 70B5     		push	{r4, r5, r6, lr}
 5554              	.LCFI56:
 5555              		.cfi_def_cfa_offset 16
 5556              		.cfi_offset 4, -16
 5557              		.cfi_offset 5, -12
 5558              		.cfi_offset 6, -8
 5559              		.cfi_offset 14, -4
 5560 0002 0446     		mov	r4, r0
 951:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 5561              		.loc 1 951 0
 5562 0004 FFF7FEFF 		bl	sync_window
 5563              	.LVL811:
 952:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Update FSInfo sector if needed */
 5564              		.loc 1 952 0
 5565 0008 0546     		mov	r5, r0
 5566 000a 48B9     		cbnz	r0, .L556
 954:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Create FSInfo structure */
 5567              		.loc 1 954 0
 5568 000c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 5569 000e 032B     		cmp	r3, #3
 5570 0010 08D0     		beq	.L560
 5571              	.LVL812:
 5572              	.L557:
 968:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 5573              		.loc 1 968 0
 5574 0012 0022     		movs	r2, #0
 5575 0014 1146     		mov	r1, r2
 5576 0016 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 216


 5577 0018 FFF7FEFF 		bl	disk_ioctl
 5578              	.LVL813:
 5579 001c 00B1     		cbz	r0, .L556
 5580 001e 0125     		movs	r5, #1
 5581              	.L556:
 5582              	.LVL814:
 972:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5583              		.loc 1 972 0
 5584 0020 2846     		mov	r0, r5
 5585 0022 70BD     		pop	{r4, r5, r6, pc}
 5586              	.LVL815:
 5587              	.L560:
 954:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Create FSInfo structure */
 5588              		.loc 1 954 0 discriminator 1
 5589 0024 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 5590 0026 012B     		cmp	r3, #1
 5591 0028 F3D1     		bne	.L557
 956:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(fs->win + BS_55AA, 0xAA55);
 5592              		.loc 1 956 0
 5593 002a 04F13C06 		add	r6, r4, #60
 5594 002e 4FF40072 		mov	r2, #512
 5595 0032 0021     		movs	r1, #0
 5596 0034 3046     		mov	r0, r6
 5597              	.LVL816:
 5598 0036 FFF7FEFF 		bl	mem_set
 5599              	.LVL817:
 957:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 5600              		.loc 1 957 0
 5601 003a 4AF65521 		movw	r1, #43605
 5602 003e 04F23A20 		addw	r0, r4, #570
 5603 0042 FFF7FEFF 		bl	st_word
 5604              	.LVL818:
 958:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 5605              		.loc 1 958 0
 5606 0046 0F49     		ldr	r1, .L561
 5607 0048 3046     		mov	r0, r6
 5608 004a FFF7FEFF 		bl	st_dword
 5609              	.LVL819:
 959:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 5610              		.loc 1 959 0
 5611 004e 0E49     		ldr	r1, .L561+4
 5612 0050 04F50870 		add	r0, r4, #544
 5613 0054 FFF7FEFF 		bl	st_dword
 5614              	.LVL820:
 960:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 5615              		.loc 1 960 0
 5616 0058 A169     		ldr	r1, [r4, #24]
 5617 005a 04F50970 		add	r0, r4, #548
 5618 005e FFF7FEFF 		bl	st_dword
 5619              	.LVL821:
 961:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Write it into the FSInfo sector */
 5620              		.loc 1 961 0
 5621 0062 6169     		ldr	r1, [r4, #20]
 5622 0064 04F50A70 		add	r0, r4, #552
 5623 0068 FFF7FEFF 		bl	st_dword
 5624              	.LVL822:
 963:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(fs->drv, fs->win, fs->winsect, 1);
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 217


 5625              		.loc 1 963 0
 5626 006c A26A     		ldr	r2, [r4, #40]
 5627 006e 0132     		adds	r2, r2, #1
 5628 0070 A263     		str	r2, [r4, #56]
 964:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag = 0;
 5629              		.loc 1 964 0
 5630 0072 0123     		movs	r3, #1
 5631 0074 3146     		mov	r1, r6
 5632 0076 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 5633 0078 FFF7FEFF 		bl	disk_write
 5634              	.LVL823:
 965:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 5635              		.loc 1 965 0
 5636 007c 0023     		movs	r3, #0
 5637 007e 2371     		strb	r3, [r4, #4]
 5638 0080 C7E7     		b	.L557
 5639              	.L562:
 5640 0082 00BF     		.align	2
 5641              	.L561:
 5642 0084 52526141 		.word	1096897106
 5643 0088 72724161 		.word	1631679090
 5644              		.cfi_endproc
 5645              	.LFE160:
 5647              		.section	.text.f_mount,"ax",%progbits
 5648              		.align	1
 5649              		.global	f_mount
 5650              		.syntax unified
 5651              		.thumb
 5652              		.thumb_func
 5653              		.fpu fpv5-sp-d16
 5655              	f_mount:
 5656              	.LFB188:
3254:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *cfs;
 5657              		.loc 1 3254 0
 5658              		.cfi_startproc
 5659              		@ args = 0, pretend = 0, frame = 16
 5660              		@ frame_needed = 0, uses_anonymous_args = 0
 5661              	.LVL824:
 5662 0000 70B5     		push	{r4, r5, r6, lr}
 5663              	.LCFI57:
 5664              		.cfi_def_cfa_offset 16
 5665              		.cfi_offset 4, -16
 5666              		.cfi_offset 5, -12
 5667              		.cfi_offset 6, -8
 5668              		.cfi_offset 14, -4
 5669 0002 84B0     		sub	sp, sp, #16
 5670              	.LCFI58:
 5671              		.cfi_def_cfa_offset 32
 5672 0004 0190     		str	r0, [sp, #4]
 5673 0006 0091     		str	r1, [sp]
 5674 0008 1446     		mov	r4, r2
3258:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5675              		.loc 1 3258 0
 5676 000a 04A8     		add	r0, sp, #16
 5677              	.LVL825:
 5678 000c 40F8041D 		str	r1, [r0, #-4]!
3262:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 218


 5679              		.loc 1 3262 0
 5680 0010 FFF7FEFF 		bl	get_ldnumber
 5681              	.LVL826:
3263:Middlewares/Third_Party/FatFs/src/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 5682              		.loc 1 3263 0
 5683 0014 061E     		subs	r6, r0, #0
 5684 0016 31DB     		blt	.L567
3264:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5685              		.loc 1 3264 0
 5686 0018 1B4B     		ldr	r3, .L573
 5687 001a 53F82650 		ldr	r5, [r3, r6, lsl #2]
 5688              	.LVL827:
3266:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 5689              		.loc 1 3266 0
 5690 001e 45B1     		cbz	r5, .L565
3268:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5691              		.loc 1 3268 0
 5692 0020 2846     		mov	r0, r5
 5693              	.LVL828:
 5694 0022 FFF7FEFF 		bl	clear_lock
 5695              	.LVL829:
3271:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5696              		.loc 1 3271 0
 5697 0026 2869     		ldr	r0, [r5, #16]
 5698 0028 FFF7FEFF 		bl	ff_del_syncobj
 5699              	.LVL830:
 5700 002c 40B3     		cbz	r0, .L568
3273:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 5701              		.loc 1 3273 0
 5702 002e 0023     		movs	r3, #0
 5703 0030 2B70     		strb	r3, [r5]
 5704              	.L565:
3276:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
 5705              		.loc 1 3276 0
 5706 0032 019B     		ldr	r3, [sp, #4]
 5707 0034 3BB1     		cbz	r3, .L566
3277:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT						/* Create sync object for the new volume */
 5708              		.loc 1 3277 0
 5709 0036 0022     		movs	r2, #0
 5710 0038 1A70     		strb	r2, [r3]
3279:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5711              		.loc 1 3279 0
 5712 003a 0199     		ldr	r1, [sp, #4]
 5713 003c 1031     		adds	r1, r1, #16
 5714 003e F0B2     		uxtb	r0, r6
 5715 0040 FFF7FEFF 		bl	ff_cre_syncobj
 5716              	.LVL831:
 5717 0044 F0B1     		cbz	r0, .L569
 5718              	.L566:
3282:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5719              		.loc 1 3282 0
 5720 0046 019B     		ldr	r3, [sp, #4]
 5721 0048 0F4A     		ldr	r2, .L573
 5722 004a 42F82630 		str	r3, [r2, r6, lsl #2]
3284:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5723              		.loc 1 3284 0
 5724 004e 14F1FF34 		adds	r4, r4, #-1
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 219


 5725 0052 18BF     		it	ne
 5726 0054 0124     		movne	r4, #1
 5727 0056 002B     		cmp	r3, #0
 5728 0058 08BF     		it	eq
 5729 005a 0124     		moveq	r4, #1
 5730 005c 1CB1     		cbz	r4, .L572
 5731 005e 0024     		movs	r4, #0
 5732              	.LVL832:
 5733              	.L564:
3288:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5734              		.loc 1 3288 0
 5735 0060 2046     		mov	r0, r4
 5736 0062 04B0     		add	sp, sp, #16
 5737              	.LCFI59:
 5738              		.cfi_remember_state
 5739              		.cfi_def_cfa_offset 16
 5740              		@ sp needed
 5741 0064 70BD     		pop	{r4, r5, r6, pc}
 5742              	.LVL833:
 5743              	.L572:
 5744              	.LCFI60:
 5745              		.cfi_restore_state
3286:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
 5746              		.loc 1 3286 0
 5747 0066 0022     		movs	r2, #0
 5748 0068 01A9     		add	r1, sp, #4
 5749 006a 6846     		mov	r0, sp
 5750 006c FFF7FEFF 		bl	find_volume
 5751              	.LVL834:
 5752 0070 0446     		mov	r4, r0
 5753              	.LVL835:
3287:Middlewares/Third_Party/FatFs/src/ff.c **** }
 5754              		.loc 1 3287 0
 5755 0072 0146     		mov	r1, r0
 5756 0074 0198     		ldr	r0, [sp, #4]
 5757              	.LVL836:
 5758 0076 FFF7FEFF 		bl	unlock_fs
 5759              	.LVL837:
 5760 007a F1E7     		b	.L564
 5761              	.LVL838:
 5762              	.L567:
3263:Middlewares/Third_Party/FatFs/src/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 5763              		.loc 1 3263 0
 5764 007c 0B24     		movs	r4, #11
 5765 007e EFE7     		b	.L564
 5766              	.LVL839:
 5767              	.L568:
3271:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5768              		.loc 1 3271 0
 5769 0080 0224     		movs	r4, #2
 5770 0082 EDE7     		b	.L564
 5771              	.L569:
3279:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5772              		.loc 1 3279 0
 5773 0084 0224     		movs	r4, #2
 5774 0086 EBE7     		b	.L564
 5775              	.L574:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 220


 5776              		.align	2
 5777              	.L573:
 5778 0088 00000000 		.word	.LANCHOR3
 5779              		.cfi_endproc
 5780              	.LFE188:
 5782              		.section	.text.f_open,"ax",%progbits
 5783              		.align	1
 5784              		.global	f_open
 5785              		.syntax unified
 5786              		.thumb
 5787              		.thumb_func
 5788              		.fpu fpv5-sp-d16
 5790              	f_open:
 5791              	.LFB189:
3302:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 5792              		.loc 1 3302 0
 5793              		.cfi_startproc
 5794              		@ args = 0, pretend = 0, frame = 64
 5795              		@ frame_needed = 0, uses_anonymous_args = 0
 5796              	.LVL840:
 5797 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 5798              	.LCFI61:
 5799              		.cfi_def_cfa_offset 32
 5800              		.cfi_offset 4, -32
 5801              		.cfi_offset 5, -28
 5802              		.cfi_offset 6, -24
 5803              		.cfi_offset 7, -20
 5804              		.cfi_offset 8, -16
 5805              		.cfi_offset 9, -12
 5806              		.cfi_offset 10, -8
 5807              		.cfi_offset 14, -4
 5808 0004 90B0     		sub	sp, sp, #64
 5809              	.LCFI62:
 5810              		.cfi_def_cfa_offset 96
 5811 0006 0191     		str	r1, [sp, #4]
3313:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5812              		.loc 1 3313 0
 5813 0008 0028     		cmp	r0, #0
 5814 000a 00F02081 		beq	.L593
 5815 000e 0546     		mov	r5, r0
 5816 0010 1646     		mov	r6, r2
3316:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, mode);
 5817              		.loc 1 3316 0
 5818 0012 02F03F07 		and	r7, r2, #63
 5819              	.LVL841:
3317:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 5820              		.loc 1 3317 0
 5821 0016 3A46     		mov	r2, r7
 5822 0018 02A9     		add	r1, sp, #8
 5823              	.LVL842:
 5824 001a 01A8     		add	r0, sp, #4
 5825              	.LVL843:
 5826 001c FFF7FEFF 		bl	find_volume
 5827              	.LVL844:
3318:Middlewares/Third_Party/FatFs/src/ff.c **** 		dj.obj.fs = fs;
 5828              		.loc 1 3318 0
 5829 0020 0446     		mov	r4, r0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 221


 5830 0022 50B1     		cbz	r0, .L606
 5831              	.LVL845:
 5832              	.L577:
3488:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5833              		.loc 1 3488 0
 5834 0024 0CB1     		cbz	r4, .L592
3488:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5835              		.loc 1 3488 0 is_stmt 0 discriminator 1
 5836 0026 0023     		movs	r3, #0
 5837 0028 2B60     		str	r3, [r5]
 5838              	.L592:
3490:Middlewares/Third_Party/FatFs/src/ff.c **** }
 5839              		.loc 1 3490 0 is_stmt 1
 5840 002a 2146     		mov	r1, r4
 5841 002c 0298     		ldr	r0, [sp, #8]
 5842 002e FFF7FEFF 		bl	unlock_fs
 5843              	.LVL846:
 5844              	.L576:
3491:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5845              		.loc 1 3491 0
 5846 0032 2046     		mov	r0, r4
 5847 0034 10B0     		add	sp, sp, #64
 5848              	.LCFI63:
 5849              		.cfi_remember_state
 5850              		.cfi_def_cfa_offset 32
 5851              		@ sp needed
 5852 0036 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 5853              	.LVL847:
 5854              	.L606:
 5855              	.LCFI64:
 5856              		.cfi_restore_state
3319:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
 5857              		.loc 1 3319 0
 5858 003a 029B     		ldr	r3, [sp, #8]
 5859 003c 0393     		str	r3, [sp, #12]
3320:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 5860              		.loc 1 3320 0
 5861 003e 4FF40070 		mov	r0, #512
 5862              	.LVL848:
 5863 0042 FFF7FEFF 		bl	ff_memalloc
 5864              	.LVL849:
 5865 0046 8046     		mov	r8, r0
 5866 0048 0028     		cmp	r0, #0
 5867 004a 5DD0     		beq	.L607
3320:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 5868              		.loc 1 3320 0 is_stmt 0 discriminator 2
 5869 004c 029B     		ldr	r3, [sp, #8]
 5870 004e D860     		str	r0, [r3, #12]
3321:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY	/* R/W configuration */
 5871              		.loc 1 3321 0 is_stmt 1 discriminator 2
 5872 0050 0199     		ldr	r1, [sp, #4]
 5873 0052 03A8     		add	r0, sp, #12
 5874              	.LVL850:
 5875 0054 FFF7FEFF 		bl	follow_path
 5876              	.LVL851:
3323:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 5877              		.loc 1 3323 0 discriminator 2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 222


 5878 0058 0446     		mov	r4, r0
 5879 005a 60B9     		cbnz	r0, .L579
3324:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;
 5880              		.loc 1 3324 0
 5881 005c 9DF93B30 		ldrsb	r3, [sp, #59]
 5882 0060 002B     		cmp	r3, #0
 5883 0062 57DB     		blt	.L594
3329:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5884              		.loc 1 3329 0
 5885 0064 37F00103 		bics	r3, r7, #1
 5886 0068 14BF     		ite	ne
 5887 006a 0121     		movne	r1, #1
 5888 006c 0021     		moveq	r1, #0
 5889 006e 03A8     		add	r0, sp, #12
 5890              	.LVL852:
 5891 0070 FFF7FEFF 		bl	chk_lock
 5892              	.LVL853:
 5893 0074 0446     		mov	r4, r0
 5894              	.LVL854:
 5895              	.L579:
3334:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
 5896              		.loc 1 3334 0
 5897 0076 16F01C0F 		tst	r6, #28
 5898 007a 61D0     		beq	.L580
3335:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 5899              		.loc 1 3335 0
 5900 007c 002C     		cmp	r4, #0
 5901 007e 55D0     		beq	.L581
3336:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 5902              		.loc 1 3336 0
 5903 0080 042C     		cmp	r4, #4
 5904 0082 49D0     		beq	.L608
 5905              	.LVL855:
 5906              	.L582:
3343:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5907              		.loc 1 3343 0
 5908 0084 47F00807 		orr	r7, r7, #8
 5909              	.LVL856:
 5910              	.L583:
3352:Middlewares/Third_Party/FatFs/src/ff.c **** 				dw = GET_FATTIME();
 5911              		.loc 1 3352 0
 5912 0088 002C     		cmp	r4, #0
 5913 008a 68D1     		bne	.L584
3352:Middlewares/Third_Party/FatFs/src/ff.c **** 				dw = GET_FATTIME();
 5914              		.loc 1 3352 0 is_stmt 0 discriminator 1
 5915 008c 17F0080F 		tst	r7, #8
 5916 0090 65D0     		beq	.L584
3353:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 5917              		.loc 1 3353 0 is_stmt 1
 5918 0092 FFF7FEFF 		bl	get_fattime
 5919              	.LVL857:
 5920 0096 0646     		mov	r6, r0
 5921              	.LVL858:
3381:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 5922              		.loc 1 3381 0
 5923 0098 0146     		mov	r1, r0
 5924 009a 0B98     		ldr	r0, [sp, #44]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 223


 5925              	.LVL859:
 5926 009c 0E30     		adds	r0, r0, #14
 5927 009e FFF7FEFF 		bl	st_dword
 5928              	.LVL860:
3382:Middlewares/Third_Party/FatFs/src/ff.c **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 5929              		.loc 1 3382 0
 5930 00a2 3146     		mov	r1, r6
 5931 00a4 0B98     		ldr	r0, [sp, #44]
 5932 00a6 1630     		adds	r0, r0, #22
 5933 00a8 FFF7FEFF 		bl	st_dword
 5934              	.LVL861:
3383:Middlewares/Third_Party/FatFs/src/ff.c **** 					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 5935              		.loc 1 3383 0
 5936 00ac 0B9B     		ldr	r3, [sp, #44]
 5937 00ae 2022     		movs	r2, #32
 5938 00b0 DA72     		strb	r2, [r3, #11]
3384:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 5939              		.loc 1 3384 0
 5940 00b2 029E     		ldr	r6, [sp, #8]
 5941              	.LVL862:
 5942 00b4 DDF82C90 		ldr	r9, [sp, #44]
 5943 00b8 4946     		mov	r1, r9
 5944 00ba 3046     		mov	r0, r6
 5945 00bc FFF7FEFF 		bl	ld_clust
 5946              	.LVL863:
 5947 00c0 8246     		mov	r10, r0
 5948              	.LVL864:
3385:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dj.dir + DIR_FileSize, 0);
 5949              		.loc 1 3385 0
 5950 00c2 0022     		movs	r2, #0
 5951 00c4 4946     		mov	r1, r9
 5952 00c6 3046     		mov	r0, r6
 5953              	.LVL865:
 5954 00c8 FFF7FEFF 		bl	st_clust
 5955              	.LVL866:
3386:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
 5956              		.loc 1 3386 0
 5957 00cc 0021     		movs	r1, #0
 5958 00ce 0B98     		ldr	r0, [sp, #44]
 5959 00d0 1C30     		adds	r0, r0, #28
 5960 00d2 FFF7FEFF 		bl	st_dword
 5961              	.LVL867:
3387:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5962              		.loc 1 3387 0
 5963 00d6 029B     		ldr	r3, [sp, #8]
 5964 00d8 0122     		movs	r2, #1
 5965 00da DA70     		strb	r2, [r3, #3]
3389:Middlewares/Third_Party/FatFs/src/ff.c **** 						dw = fs->winsect;
 5966              		.loc 1 3389 0
 5967 00dc BAF1000F 		cmp	r10, #0
 5968 00e0 3DD0     		beq	.L584
3390:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = remove_chain(&dj.obj, cl, 0);
 5969              		.loc 1 3390 0
 5970 00e2 029B     		ldr	r3, [sp, #8]
 5971 00e4 9E6B     		ldr	r6, [r3, #56]
 5972              	.LVL868:
3391:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (res == FR_OK) {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 224


 5973              		.loc 1 3391 0
 5974 00e6 0022     		movs	r2, #0
 5975 00e8 5146     		mov	r1, r10
 5976 00ea 03A8     		add	r0, sp, #12
 5977 00ec FFF7FEFF 		bl	remove_chain
 5978              	.LVL869:
3392:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = move_window(fs, dw);
 5979              		.loc 1 3392 0
 5980 00f0 0446     		mov	r4, r0
 5981 00f2 A0BB     		cbnz	r0, .L584
3393:Middlewares/Third_Party/FatFs/src/ff.c **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 5982              		.loc 1 3393 0
 5983 00f4 3146     		mov	r1, r6
 5984 00f6 0298     		ldr	r0, [sp, #8]
 5985              	.LVL870:
 5986 00f8 FFF7FEFF 		bl	move_window
 5987              	.LVL871:
 5988 00fc 0446     		mov	r4, r0
 5989              	.LVL872:
3394:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
 5990              		.loc 1 3394 0
 5991 00fe 0AF1FF33 		add	r3, r10, #-1
 5992 0102 029A     		ldr	r2, [sp, #8]
 5993 0104 5361     		str	r3, [r2, #20]
 5994 0106 2AE0     		b	.L584
 5995              	.LVL873:
 5996              	.L607:
3320:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 5997              		.loc 1 3320 0 discriminator 1
 5998 0108 1121     		movs	r1, #17
 5999 010a 0298     		ldr	r0, [sp, #8]
 6000              	.LVL874:
 6001 010c FFF7FEFF 		bl	unlock_fs
 6002              	.LVL875:
 6003 0110 1124     		movs	r4, #17
 6004 0112 8EE7     		b	.L576
 6005              	.LVL876:
 6006              	.L594:
3325:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6007              		.loc 1 3325 0
 6008 0114 0624     		movs	r4, #6
 6009 0116 AEE7     		b	.L579
 6010              	.LVL877:
 6011              	.L608:
3338:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 6012              		.loc 1 3338 0
 6013 0118 FFF7FEFF 		bl	enq_lock
 6014              	.LVL878:
 6015 011c 08B9     		cbnz	r0, .L609
 6016 011e 1224     		movs	r4, #18
 6017              	.LVL879:
 6018 0120 B0E7     		b	.L582
 6019              	.LVL880:
 6020              	.L609:
3338:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 6021              		.loc 1 3338 0 is_stmt 0 discriminator 1
 6022 0122 03A8     		add	r0, sp, #12
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 225


 6023 0124 FFF7FEFF 		bl	dir_register
 6024              	.LVL881:
 6025 0128 0446     		mov	r4, r0
 6026              	.LVL882:
 6027 012a ABE7     		b	.L582
 6028              	.LVL883:
 6029              	.L581:
3346:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_DENIED;
 6030              		.loc 1 3346 0 is_stmt 1
 6031 012c 9DF81230 		ldrb	r3, [sp, #18]	@ zero_extendqisi2
 6032 0130 13F0110F 		tst	r3, #17
 6033 0134 12D1     		bne	.L596
3349:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6034              		.loc 1 3349 0
 6035 0136 16F0040F 		tst	r6, #4
 6036 013a A5D0     		beq	.L583
 6037 013c 0824     		movs	r4, #8
 6038              	.LVL884:
 6039 013e 0EE0     		b	.L584
 6040              	.LVL885:
 6041              	.L580:
3401:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 6042              		.loc 1 3401 0
 6043 0140 6CB9     		cbnz	r4, .L584
3402:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NO_FILE;
 6044              		.loc 1 3402 0
 6045 0142 9DF81230 		ldrb	r3, [sp, #18]	@ zero_extendqisi2
 6046 0146 13F0100F 		tst	r3, #16
 6047 014a 23D1     		bne	.L598
3405:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_DENIED;
 6048              		.loc 1 3405 0
 6049 014c 16F0020F 		tst	r6, #2
 6050 0150 05D0     		beq	.L584
3405:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_DENIED;
 6051              		.loc 1 3405 0 is_stmt 0 discriminator 1
 6052 0152 13F0010F 		tst	r3, #1
 6053 0156 02D0     		beq	.L584
3406:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 6054              		.loc 1 3406 0 is_stmt 1
 6055 0158 0724     		movs	r4, #7
 6056              	.LVL886:
 6057 015a 16E0     		b	.L585
 6058              	.LVL887:
 6059              	.L596:
3347:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
 6060              		.loc 1 3347 0
 6061 015c 0724     		movs	r4, #7
 6062              	.LVL888:
 6063              	.L584:
3411:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 6064              		.loc 1 3411 0
 6065 015e A4B9     		cbnz	r4, .L585
3412:Middlewares/Third_Party/FatFs/src/ff.c **** 				mode |= FA_MODIFIED;
 6066              		.loc 1 3412 0
 6067 0160 17F0080F 		tst	r7, #8
 6068 0164 01D0     		beq	.L586
3413:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 226


 6069              		.loc 1 3413 0
 6070 0166 47F04007 		orr	r7, r7, #64
 6071              	.LVL889:
 6072              	.L586:
3414:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->dir_ptr = dj.dir;
 6073              		.loc 1 3414 0
 6074 016a 029B     		ldr	r3, [sp, #8]
 6075 016c 9B6B     		ldr	r3, [r3, #56]
 6076 016e 6B62     		str	r3, [r5, #36]
3415:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 6077              		.loc 1 3415 0
 6078 0170 0B9B     		ldr	r3, [sp, #44]
 6079 0172 AB62     		str	r3, [r5, #40]
3417:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!fp->obj.lockid) res = FR_INT_ERR;
 6080              		.loc 1 3417 0
 6081 0174 37F00103 		bics	r3, r7, #1
 6082 0178 14BF     		ite	ne
 6083 017a 0121     		movne	r1, #1
 6084 017c 0021     		moveq	r1, #0
 6085 017e 03A8     		add	r0, sp, #12
 6086 0180 FFF7FEFF 		bl	inc_lock
 6087              	.LVL890:
 6088 0184 2861     		str	r0, [r5, #16]
3418:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 6089              		.loc 1 3418 0
 6090 0186 0028     		cmp	r0, #0
 6091 0188 5FD0     		beq	.L600
 6092              	.LVL891:
 6093              	.L585:
3433:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 6094              		.loc 1 3433 0
 6095 018a 2CB1     		cbz	r4, .L610
 6096              	.LVL892:
 6097              	.L587:
3485:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 6098              		.loc 1 3485 0
 6099 018c 4046     		mov	r0, r8
 6100 018e FFF7FEFF 		bl	ff_memfree
 6101              	.LVL893:
 6102 0192 47E7     		b	.L577
 6103              	.LVL894:
 6104              	.L598:
3403:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
 6105              		.loc 1 3403 0
 6106 0194 0424     		movs	r4, #4
 6107              	.LVL895:
 6108 0196 F8E7     		b	.L585
 6109              	.LVL896:
 6110              	.L610:
3445:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 6111              		.loc 1 3445 0
 6112 0198 029E     		ldr	r6, [sp, #8]
 6113 019a DDF82C90 		ldr	r9, [sp, #44]
 6114 019e 4946     		mov	r1, r9
 6115 01a0 3046     		mov	r0, r6
 6116 01a2 FFF7FEFF 		bl	ld_clust
 6117              	.LVL897:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 227


 6118 01a6 A860     		str	r0, [r5, #8]
3446:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6119              		.loc 1 3446 0
 6120 01a8 09F11C00 		add	r0, r9, #28
 6121 01ac FFF7FEFF 		bl	ld_dword
 6122              	.LVL898:
 6123 01b0 E860     		str	r0, [r5, #12]
3449:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 6124              		.loc 1 3449 0
 6125 01b2 0021     		movs	r1, #0
 6126 01b4 E962     		str	r1, [r5, #44]
3451:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.id = fs->id;
 6127              		.loc 1 3451 0
 6128 01b6 2E60     		str	r6, [r5]
3452:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->flag = mode;		/* Set file access mode */
 6129              		.loc 1 3452 0
 6130 01b8 F388     		ldrh	r3, [r6, #6]
 6131 01ba AB80     		strh	r3, [r5, #4]	@ movhi
3453:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->err = 0;			/* Clear error flag */
 6132              		.loc 1 3453 0
 6133 01bc 2F75     		strb	r7, [r5, #20]
3454:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->sect = 0;			/* Invalidate current data sector */
 6134              		.loc 1 3454 0
 6135 01be 6975     		strb	r1, [r5, #21]
3455:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->fptr = 0;			/* Set file pointer top of the file */
 6136              		.loc 1 3455 0
 6137 01c0 2962     		str	r1, [r5, #32]
3456:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 6138              		.loc 1 3456 0
 6139 01c2 A961     		str	r1, [r5, #24]
3459:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 6140              		.loc 1 3459 0
 6141 01c4 05F13009 		add	r9, r5, #48
 6142 01c8 4FF40072 		mov	r2, #512
 6143 01cc 4846     		mov	r0, r9
 6144 01ce FFF7FEFF 		bl	mem_set
 6145              	.LVL899:
3461:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 6146              		.loc 1 3461 0
 6147 01d2 17F0200F 		tst	r7, #32
 6148 01d6 D9D0     		beq	.L587
3461:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 6149              		.loc 1 3461 0 is_stmt 0 discriminator 1
 6150 01d8 EE68     		ldr	r6, [r5, #12]
 6151 01da 002E     		cmp	r6, #0
 6152 01dc D6D0     		beq	.L587
3462:Middlewares/Third_Party/FatFs/src/ff.c **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 6153              		.loc 1 3462 0 is_stmt 1
 6154 01de AE61     		str	r6, [r5, #24]
3463:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
 6155              		.loc 1 3463 0
 6156 01e0 029B     		ldr	r3, [sp, #8]
 6157 01e2 5F89     		ldrh	r7, [r3, #10]
 6158              	.LVL900:
 6159 01e4 7F02     		lsls	r7, r7, #9
 6160              	.LVL901:
3464:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 228


 6161              		.loc 1 3464 0
 6162 01e6 A968     		ldr	r1, [r5, #8]
 6163              	.LVL902:
3465:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 6164              		.loc 1 3465 0
 6165 01e8 03E0     		b	.L588
 6166              	.LVL903:
 6167              	.L589:
3468:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6168              		.loc 1 3468 0
 6169 01ea B1F1FF3F 		cmp	r1, #-1
 6170 01ee 10D0     		beq	.L611
 6171              	.LVL904:
 6172              	.L590:
3465:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 6173              		.loc 1 3465 0 discriminator 2
 6174 01f0 F61B     		subs	r6, r6, r7
 6175              	.LVL905:
 6176              	.L588:
3465:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 6177              		.loc 1 3465 0 is_stmt 0 discriminator 1
 6178 01f2 BE42     		cmp	r6, r7
 6179 01f4 94BF     		ite	ls
 6180 01f6 0023     		movls	r3, #0
 6181 01f8 0123     		movhi	r3, #1
 6182 01fa 002C     		cmp	r4, #0
 6183 01fc 18BF     		it	ne
 6184 01fe 0023     		movne	r3, #0
 6185 0200 4BB1     		cbz	r3, .L612
3466:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst <= 1) res = FR_INT_ERR;
 6186              		.loc 1 3466 0 is_stmt 1
 6187 0202 2846     		mov	r0, r5
 6188 0204 FFF7FEFF 		bl	get_fat
 6189              	.LVL906:
 6190 0208 0146     		mov	r1, r0
 6191              	.LVL907:
3467:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 6192              		.loc 1 3467 0
 6193 020a 0128     		cmp	r0, #1
 6194 020c EDD8     		bhi	.L589
 6195 020e 0224     		movs	r4, #2
 6196              	.LVL908:
 6197 0210 EBE7     		b	.L589
 6198              	.LVL909:
 6199              	.L611:
3468:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6200              		.loc 1 3468 0
 6201 0212 0124     		movs	r4, #1
 6202              	.LVL910:
 6203 0214 ECE7     		b	.L590
 6204              	.LVL911:
 6205              	.L612:
3470:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 6206              		.loc 1 3470 0
 6207 0216 E961     		str	r1, [r5, #28]
3471:Middlewares/Third_Party/FatFs/src/ff.c **** 					if ((sc = clust2sect(fs, clst)) == 0) {
 6208              		.loc 1 3471 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 229


 6209 0218 002C     		cmp	r4, #0
 6210 021a B7D1     		bne	.L587
3471:Middlewares/Third_Party/FatFs/src/ff.c **** 					if ((sc = clust2sect(fs, clst)) == 0) {
 6211              		.loc 1 3471 0 is_stmt 0 discriminator 1
 6212 021c C6F30803 		ubfx	r3, r6, #0, #9
 6213 0220 002B     		cmp	r3, #0
 6214 0222 B3D0     		beq	.L587
3472:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_INT_ERR;
 6215              		.loc 1 3472 0 is_stmt 1
 6216 0224 029F     		ldr	r7, [sp, #8]
 6217              	.LVL912:
 6218 0226 3846     		mov	r0, r7
 6219 0228 FFF7FEFF 		bl	clust2sect
 6220              	.LVL913:
 6221 022c 08B9     		cbnz	r0, .L613
3473:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {
 6222              		.loc 1 3473 0
 6223 022e 0224     		movs	r4, #2
 6224              	.LVL914:
 6225 0230 ACE7     		b	.L587
 6226              	.LVL915:
 6227              	.L613:
3475:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 6228              		.loc 1 3475 0
 6229 0232 00EB5622 		add	r2, r0, r6, lsr #9
 6230 0236 2A62     		str	r2, [r5, #32]
3477:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 6231              		.loc 1 3477 0
 6232 0238 0123     		movs	r3, #1
 6233 023a 4946     		mov	r1, r9
 6234 023c 7878     		ldrb	r0, [r7, #1]	@ zero_extendqisi2
 6235              	.LVL916:
 6236 023e FFF7FEFF 		bl	disk_read
 6237              	.LVL917:
 6238 0242 0028     		cmp	r0, #0
 6239 0244 A2D0     		beq	.L587
 6240 0246 0124     		movs	r4, #1
 6241              	.LVL918:
 6242 0248 A0E7     		b	.L587
 6243              	.LVL919:
 6244              	.L600:
3418:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 6245              		.loc 1 3418 0
 6246 024a 0224     		movs	r4, #2
 6247              	.LVL920:
 6248 024c 9EE7     		b	.L587
 6249              	.LVL921:
 6250              	.L593:
3313:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6251              		.loc 1 3313 0
 6252 024e 0924     		movs	r4, #9
 6253 0250 EFE6     		b	.L576
 6254              		.cfi_endproc
 6255              	.LFE189:
 6257              		.section	.text.f_read,"ax",%progbits
 6258              		.align	1
 6259              		.global	f_read
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 230


 6260              		.syntax unified
 6261              		.thumb
 6262              		.thumb_func
 6263              		.fpu fpv5-sp-d16
 6265              	f_read:
 6266              	.LFB190:
3506:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 6267              		.loc 1 3506 0
 6268              		.cfi_startproc
 6269              		@ args = 0, pretend = 0, frame = 16
 6270              		@ frame_needed = 0, uses_anonymous_args = 0
 6271              	.LVL922:
 6272 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 6273              	.LCFI65:
 6274              		.cfi_def_cfa_offset 36
 6275              		.cfi_offset 4, -36
 6276              		.cfi_offset 5, -32
 6277              		.cfi_offset 6, -28
 6278              		.cfi_offset 7, -24
 6279              		.cfi_offset 8, -20
 6280              		.cfi_offset 9, -16
 6281              		.cfi_offset 10, -12
 6282              		.cfi_offset 11, -8
 6283              		.cfi_offset 14, -4
 6284 0004 85B0     		sub	sp, sp, #20
 6285              	.LCFI66:
 6286              		.cfi_def_cfa_offset 56
 6287 0006 0446     		mov	r4, r0
 6288 0008 0F46     		mov	r7, r1
 6289 000a 1646     		mov	r6, r2
 6290 000c 9946     		mov	r9, r3
 6291              	.LVL923:
3515:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 6292              		.loc 1 3515 0
 6293 000e 0023     		movs	r3, #0
 6294              	.LVL924:
 6295 0010 C9F80030 		str	r3, [r9]
3516:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 6296              		.loc 1 3516 0
 6297 0014 0190     		str	r0, [sp, #4]
 6298 0016 03A9     		add	r1, sp, #12
 6299              	.LVL925:
 6300 0018 FFF7FEFF 		bl	validate
 6301              	.LVL926:
3517:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 6302              		.loc 1 3517 0
 6303 001c 0090     		str	r0, [sp]
 6304 001e 70B9     		cbnz	r0, .L615
3517:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 6305              		.loc 1 3517 0 is_stmt 0 discriminator 2
 6306 0020 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 6307 0022 0093     		str	r3, [sp]
 6308              	.LVL927:
 6309 0024 5BB9     		cbnz	r3, .L615
3518:Middlewares/Third_Party/FatFs/src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
 6310              		.loc 1 3518 0 is_stmt 1
 6311 0026 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 231


 6312              	.LVL928:
 6313 0028 13F0010F 		tst	r3, #1
 6314 002c 0FD0     		beq	.L643
3519:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 6315              		.loc 1 3519 0
 6316 002e E568     		ldr	r5, [r4, #12]
 6317 0030 A369     		ldr	r3, [r4, #24]
 6318 0032 ED1A     		subs	r5, r5, r3
 6319              	.LVL929:
3520:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6320              		.loc 1 3520 0
 6321 0034 B542     		cmp	r5, r6
 6322 0036 C0F08280 		bcc	.L638
 6323 003a 3546     		mov	r5, r6
 6324              	.LVL930:
 6325 003c 7FE0     		b	.L638
 6326              	.LVL931:
 6327              	.L615:
3517:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 6328              		.loc 1 3517 0 discriminator 3
 6329 003e 0099     		ldr	r1, [sp]
 6330 0040 0398     		ldr	r0, [sp, #12]
 6331 0042 FFF7FEFF 		bl	unlock_fs
 6332              	.LVL932:
 6333              	.L617:
3590:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6334              		.loc 1 3590 0
 6335 0046 0098     		ldr	r0, [sp]
 6336 0048 05B0     		add	sp, sp, #20
 6337              	.LCFI67:
 6338              		.cfi_remember_state
 6339              		.cfi_def_cfa_offset 36
 6340              		@ sp needed
 6341 004a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6342              	.LVL933:
 6343              	.L643:
 6344              	.LCFI68:
 6345              		.cfi_restore_state
3518:Middlewares/Third_Party/FatFs/src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
 6346              		.loc 1 3518 0 discriminator 1
 6347 004e 0721     		movs	r1, #7
 6348 0050 0398     		ldr	r0, [sp, #12]
 6349 0052 FFF7FEFF 		bl	unlock_fs
 6350              	.LVL934:
 6351 0056 0723     		movs	r3, #7
 6352 0058 0093     		str	r3, [sp]
 6353              	.LVL935:
 6354 005a F4E7     		b	.L617
 6355              	.LVL936:
 6356              	.L623:
3531:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 6357              		.loc 1 3531 0
 6358 005c E36A     		ldr	r3, [r4, #44]
 6359 005e 1BB1     		cbz	r3, .L625
3532:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
 6360              		.loc 1 3532 0
 6361 0060 2046     		mov	r0, r4
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 232


 6362 0062 FFF7FEFF 		bl	clmt_clust
 6363              	.LVL937:
 6364 0066 7BE0     		b	.L624
 6365              	.LVL938:
 6366              	.L625:
3536:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 6367              		.loc 1 3536 0
 6368 0068 E169     		ldr	r1, [r4, #28]
 6369 006a 0198     		ldr	r0, [sp, #4]
 6370 006c FFF7FEFF 		bl	get_fat
 6371              	.LVL939:
 6372 0070 76E0     		b	.L624
 6373              	.L647:
3539:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 6374              		.loc 1 3539 0 discriminator 1
 6375 0072 4FF00208 		mov	r8, #2
 6376 0076 84F81580 		strb	r8, [r4, #21]
 6377 007a 4146     		mov	r1, r8
 6378 007c 0398     		ldr	r0, [sp, #12]
 6379              	.LVL940:
 6380 007e FFF7FEFF 		bl	unlock_fs
 6381              	.LVL941:
 6382 0082 CDF80080 		str	r8, [sp]
 6383              	.LVL942:
 6384 0086 DEE7     		b	.L617
 6385              	.LVL943:
 6386              	.L648:
3540:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 6387              		.loc 1 3540 0 discriminator 1
 6388 0088 4FF00108 		mov	r8, #1
 6389 008c 84F81580 		strb	r8, [r4, #21]
 6390 0090 4146     		mov	r1, r8
 6391 0092 0398     		ldr	r0, [sp, #12]
 6392              	.LVL944:
 6393 0094 FFF7FEFF 		bl	unlock_fs
 6394              	.LVL945:
 6395 0098 CDF80080 		str	r8, [sp]
 6396              	.LVL946:
 6397 009c D3E7     		b	.L617
 6398              	.LVL947:
 6399              	.L649:
3544:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
 6400              		.loc 1 3544 0 discriminator 1
 6401 009e 4FF00208 		mov	r8, #2
 6402 00a2 84F81580 		strb	r8, [r4, #21]
 6403 00a6 4146     		mov	r1, r8
 6404 00a8 5846     		mov	r0, fp
 6405              	.LVL948:
 6406 00aa FFF7FEFF 		bl	unlock_fs
 6407              	.LVL949:
 6408 00ae CDF80080 		str	r8, [sp]
 6409              	.LVL950:
 6410 00b2 C8E7     		b	.L617
 6411              	.LVL951:
 6412              	.L650:
3551:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
 6413              		.loc 1 3551 0 discriminator 1
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 233


 6414 00b4 4FF00108 		mov	r8, #1
 6415              	.LVL952:
 6416 00b8 84F81580 		strb	r8, [r4, #21]
 6417 00bc 4146     		mov	r1, r8
 6418 00be 0398     		ldr	r0, [sp, #12]
 6419 00c0 FFF7FEFF 		bl	unlock_fs
 6420              	.LVL953:
 6421 00c4 CDF80080 		str	r8, [sp]
 6422              	.LVL954:
 6423 00c8 BDE7     		b	.L617
 6424              	.LVL955:
 6425              	.L651:
3558:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 6426              		.loc 1 3558 0 discriminator 1
 6427 00ca 206A     		ldr	r0, [r4, #32]
 6428 00cc A0EB0A00 		sub	r0, r0, r10
 6429 00d0 4045     		cmp	r0, r8
 6430 00d2 6DD2     		bcs	.L632
3559:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6431              		.loc 1 3559 0
 6432 00d4 4FF40072 		mov	r2, #512
 6433 00d8 04F13001 		add	r1, r4, #48
 6434 00dc 07EB4020 		add	r0, r7, r0, lsl #9
 6435 00e0 FFF7FEFF 		bl	mem_cpy
 6436              	.LVL956:
 6437 00e4 64E0     		b	.L632
 6438              	.L629:
3567:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 6439              		.loc 1 3567 0
 6440 00e6 226A     		ldr	r2, [r4, #32]
 6441 00e8 5245     		cmp	r2, r10
 6442 00ea 0DD0     		beq	.L634
3569:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 6443              		.loc 1 3569 0
 6444 00ec 94F91430 		ldrsb	r3, [r4, #20]
 6445 00f0 002B     		cmp	r3, #0
 6446 00f2 60DB     		blt	.L644
 6447              	.L635:
3574:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6448              		.loc 1 3574 0
 6449 00f4 0123     		movs	r3, #1
 6450 00f6 5246     		mov	r2, r10
 6451 00f8 04F13001 		add	r1, r4, #48
 6452 00fc 0398     		ldr	r0, [sp, #12]
 6453 00fe 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 6454 0100 FFF7FEFF 		bl	disk_read
 6455              	.LVL957:
 6456 0104 0028     		cmp	r0, #0
 6457 0106 6ED1     		bne	.L645
 6458              	.L634:
3577:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 6459              		.loc 1 3577 0
 6460 0108 C4F820A0 		str	r10, [r4, #32]
 6461              	.LVL958:
 6462              	.L621:
3579:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 6463              		.loc 1 3579 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 234


 6464 010c A369     		ldr	r3, [r4, #24]
 6465 010e C3F30803 		ubfx	r3, r3, #0, #9
 6466 0112 C3F50076 		rsb	r6, r3, #512
 6467              	.LVL959:
3580:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
 6468              		.loc 1 3580 0
 6469 0116 B542     		cmp	r5, r6
 6470 0118 00D2     		bcs	.L637
 6471 011a 2E46     		mov	r6, r5
 6472              	.LVL960:
 6473              	.L637:
3585:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 6474              		.loc 1 3585 0
 6475 011c 04F13001 		add	r1, r4, #48
 6476 0120 3246     		mov	r2, r6
 6477 0122 1944     		add	r1, r1, r3
 6478 0124 3846     		mov	r0, r7
 6479 0126 FFF7FEFF 		bl	mem_cpy
 6480              	.LVL961:
 6481              	.L633:
3523:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 6482              		.loc 1 3523 0
 6483 012a 3744     		add	r7, r7, r6
 6484              	.LVL962:
 6485 012c A369     		ldr	r3, [r4, #24]
 6486 012e 3344     		add	r3, r3, r6
 6487 0130 A361     		str	r3, [r4, #24]
 6488 0132 D9F80030 		ldr	r3, [r9]
 6489 0136 3344     		add	r3, r3, r6
 6490 0138 C9F80030 		str	r3, [r9]
 6491 013c AD1B     		subs	r5, r5, r6
 6492              	.LVL963:
 6493              	.L638:
3522:Middlewares/Third_Party/FatFs/src/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 6494              		.loc 1 3522 0
 6495 013e 002D     		cmp	r5, #0
 6496 0140 5CD0     		beq	.L646
3524:Middlewares/Third_Party/FatFs/src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 6497              		.loc 1 3524 0
 6498 0142 A169     		ldr	r1, [r4, #24]
 6499 0144 C1F30803 		ubfx	r3, r1, #0, #9
 6500 0148 002B     		cmp	r3, #0
 6501 014a DFD1     		bne	.L621
3525:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (csect == 0) {					/* On the cluster boundary? */
 6502              		.loc 1 3525 0
 6503 014c 039B     		ldr	r3, [sp, #12]
 6504 014e 5E89     		ldrh	r6, [r3, #10]
 6505 0150 013E     		subs	r6, r6, #1
 6506              	.LVL964:
3526:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 6507              		.loc 1 3526 0
 6508 0152 16EA5126 		ands	r6, r6, r1, lsr #9
 6509              	.LVL965:
 6510 0156 09D1     		bne	.L622
3527:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 6511              		.loc 1 3527 0
 6512 0158 0029     		cmp	r1, #0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 235


 6513 015a 7FF47FAF 		bne	.L623
3528:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {						/* Middle or end of the file */
 6514              		.loc 1 3528 0
 6515 015e A068     		ldr	r0, [r4, #8]
 6516              	.LVL966:
 6517              	.L624:
3539:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 6518              		.loc 1 3539 0
 6519 0160 0128     		cmp	r0, #1
 6520 0162 86D9     		bls	.L647
3540:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 6521              		.loc 1 3540 0
 6522 0164 B0F1FF3F 		cmp	r0, #-1
 6523 0168 8ED0     		beq	.L648
3541:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6524              		.loc 1 3541 0
 6525 016a E061     		str	r0, [r4, #28]
 6526              	.LVL967:
 6527              	.L622:
3543:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!sect) ABORT(fs, FR_INT_ERR);
 6528              		.loc 1 3543 0
 6529 016c DDF80CB0 		ldr	fp, [sp, #12]
 6530 0170 E169     		ldr	r1, [r4, #28]
 6531 0172 5846     		mov	r0, fp
 6532 0174 FFF7FEFF 		bl	clust2sect
 6533              	.LVL968:
3544:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
 6534              		.loc 1 3544 0
 6535 0178 8246     		mov	r10, r0
 6536 017a 0028     		cmp	r0, #0
 6537 017c 8FD0     		beq	.L649
3545:Middlewares/Third_Party/FatFs/src/ff.c **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 6538              		.loc 1 3545 0
 6539 017e B244     		add	r10, r10, r6
 6540              	.LVL969:
3547:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 6541              		.loc 1 3547 0
 6542 0180 5FEA5528 		lsrs	r8, r5, #9
 6543              	.LVL970:
 6544 0184 AFD0     		beq	.L629
3548:Middlewares/Third_Party/FatFs/src/ff.c **** 					cc = fs->csize - csect;
 6545              		.loc 1 3548 0
 6546 0186 06EB0803 		add	r3, r6, r8
 6547 018a BBF80A20 		ldrh	r2, [fp, #10]
 6548 018e 9342     		cmp	r3, r2
 6549 0190 01D9     		bls	.L630
3549:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6550              		.loc 1 3549 0
 6551 0192 A2EB0608 		sub	r8, r2, r6
 6552              	.LVL971:
 6553              	.L630:
3551:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
 6554              		.loc 1 3551 0
 6555 0196 4346     		mov	r3, r8
 6556 0198 5246     		mov	r2, r10
 6557 019a 3946     		mov	r1, r7
 6558 019c 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 236


 6559 01a0 FFF7FEFF 		bl	disk_read
 6560              	.LVL972:
 6561 01a4 0028     		cmp	r0, #0
 6562 01a6 85D1     		bne	.L650
3558:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 6563              		.loc 1 3558 0
 6564 01a8 94F91430 		ldrsb	r3, [r4, #20]
 6565 01ac 002B     		cmp	r3, #0
 6566 01ae 8CDB     		blt	.L651
 6567              	.L632:
3563:Middlewares/Third_Party/FatFs/src/ff.c **** 				continue;
 6568              		.loc 1 3563 0
 6569 01b0 4FEA4826 		lsl	r6, r8, #9
 6570              	.LVL973:
3564:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6571              		.loc 1 3564 0
 6572 01b4 B9E7     		b	.L633
 6573              	.LVL974:
 6574              	.L644:
3570:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 6575              		.loc 1 3570 0
 6576 01b6 0123     		movs	r3, #1
 6577 01b8 04F13001 		add	r1, r4, #48
 6578 01bc 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 6579 01c0 FFF7FEFF 		bl	disk_write
 6580              	.LVL975:
 6581 01c4 20B9     		cbnz	r0, .L652
3571:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6582              		.loc 1 3571 0
 6583 01c6 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6584 01c8 03F07F03 		and	r3, r3, #127
 6585 01cc 2375     		strb	r3, [r4, #20]
 6586 01ce 91E7     		b	.L635
 6587              	.L652:
3570:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 6588              		.loc 1 3570 0 discriminator 1
 6589 01d0 4FF00108 		mov	r8, #1
 6590              	.LVL976:
 6591 01d4 84F81580 		strb	r8, [r4, #21]
 6592 01d8 4146     		mov	r1, r8
 6593 01da 0398     		ldr	r0, [sp, #12]
 6594 01dc FFF7FEFF 		bl	unlock_fs
 6595              	.LVL977:
 6596 01e0 CDF80080 		str	r8, [sp]
 6597              	.LVL978:
 6598 01e4 2FE7     		b	.L617
 6599              	.LVL979:
 6600              	.L645:
3574:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6601              		.loc 1 3574 0 discriminator 1
 6602 01e6 4FF00108 		mov	r8, #1
 6603              	.LVL980:
 6604 01ea 84F81580 		strb	r8, [r4, #21]
 6605 01ee 4146     		mov	r1, r8
 6606 01f0 0398     		ldr	r0, [sp, #12]
 6607 01f2 FFF7FEFF 		bl	unlock_fs
 6608              	.LVL981:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 237


 6609 01f6 CDF80080 		str	r8, [sp]
 6610              	.LVL982:
 6611 01fa 24E7     		b	.L617
 6612              	.LVL983:
 6613              	.L646:
3589:Middlewares/Third_Party/FatFs/src/ff.c **** }
 6614              		.loc 1 3589 0
 6615 01fc 0021     		movs	r1, #0
 6616 01fe 0398     		ldr	r0, [sp, #12]
 6617 0200 FFF7FEFF 		bl	unlock_fs
 6618              	.LVL984:
 6619 0204 1FE7     		b	.L617
 6620              		.cfi_endproc
 6621              	.LFE190:
 6623              		.section	.text.f_write,"ax",%progbits
 6624              		.align	1
 6625              		.global	f_write
 6626              		.syntax unified
 6627              		.thumb
 6628              		.thumb_func
 6629              		.fpu fpv5-sp-d16
 6631              	f_write:
 6632              	.LFB191:
3606:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 6633              		.loc 1 3606 0
 6634              		.cfi_startproc
 6635              		@ args = 0, pretend = 0, frame = 16
 6636              		@ frame_needed = 0, uses_anonymous_args = 0
 6637              	.LVL985:
 6638 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 6639              	.LCFI69:
 6640              		.cfi_def_cfa_offset 36
 6641              		.cfi_offset 4, -36
 6642              		.cfi_offset 5, -32
 6643              		.cfi_offset 6, -28
 6644              		.cfi_offset 7, -24
 6645              		.cfi_offset 8, -20
 6646              		.cfi_offset 9, -16
 6647              		.cfi_offset 10, -12
 6648              		.cfi_offset 11, -8
 6649              		.cfi_offset 14, -4
 6650 0004 85B0     		sub	sp, sp, #20
 6651              	.LCFI70:
 6652              		.cfi_def_cfa_offset 56
 6653 0006 0446     		mov	r4, r0
 6654 0008 8846     		mov	r8, r1
 6655 000a 1646     		mov	r6, r2
 6656 000c 9946     		mov	r9, r3
 6657              	.LVL986:
3614:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 6658              		.loc 1 3614 0
 6659 000e 0023     		movs	r3, #0
 6660              	.LVL987:
 6661 0010 C9F80030 		str	r3, [r9]
3615:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 6662              		.loc 1 3615 0
 6663 0014 0190     		str	r0, [sp, #4]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 238


 6664 0016 03A9     		add	r1, sp, #12
 6665              	.LVL988:
 6666 0018 FFF7FEFF 		bl	validate
 6667              	.LVL989:
3616:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 6668              		.loc 1 3616 0
 6669 001c 0090     		str	r0, [sp]
 6670 001e 60B9     		cbnz	r0, .L654
3616:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 6671              		.loc 1 3616 0 is_stmt 0 discriminator 2
 6672 0020 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 6673 0022 0093     		str	r3, [sp]
 6674              	.LVL990:
 6675 0024 4BB9     		cbnz	r3, .L654
3617:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6676              		.loc 1 3617 0 is_stmt 1
 6677 0026 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6678              	.LVL991:
 6679 0028 13F0020F 		tst	r3, #2
 6680 002c 0DD0     		beq	.L681
3620:Middlewares/Third_Party/FatFs/src/ff.c **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 6681              		.loc 1 3620 0
 6682 002e A369     		ldr	r3, [r4, #24]
 6683 0030 F342     		cmn	r3, r6
 6684 0032 C0F0CA80 		bcc	.L677
3621:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 6685              		.loc 1 3621 0
 6686 0036 DE43     		mvns	r6, r3
 6687              	.LVL992:
 6688 0038 C7E0     		b	.L677
 6689              	.LVL993:
 6690              	.L654:
3616:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 6691              		.loc 1 3616 0 discriminator 3
 6692 003a 0099     		ldr	r1, [sp]
 6693 003c 0398     		ldr	r0, [sp, #12]
 6694 003e FFF7FEFF 		bl	unlock_fs
 6695              	.LVL994:
 6696              	.L656:
3712:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6697              		.loc 1 3712 0
 6698 0042 0098     		ldr	r0, [sp]
 6699 0044 05B0     		add	sp, sp, #20
 6700              	.LCFI71:
 6701              		.cfi_remember_state
 6702              		.cfi_def_cfa_offset 36
 6703              		@ sp needed
 6704 0046 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6705              	.LVL995:
 6706              	.L681:
 6707              	.LCFI72:
 6708              		.cfi_restore_state
3617:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6709              		.loc 1 3617 0 discriminator 1
 6710 004a 0721     		movs	r1, #7
 6711 004c 0398     		ldr	r0, [sp, #12]
 6712 004e FFF7FEFF 		bl	unlock_fs
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 239


 6713              	.LVL996:
 6714 0052 0723     		movs	r3, #7
 6715 0054 0093     		str	r3, [sp]
 6716              	.LVL997:
 6717 0056 F4E7     		b	.L656
 6718              	.LVL998:
 6719              	.L661:
3636:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 6720              		.loc 1 3636 0
 6721 0058 E36A     		ldr	r3, [r4, #44]
 6722 005a A3B3     		cbz	r3, .L663
3637:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
 6723              		.loc 1 3637 0
 6724 005c 2046     		mov	r0, r4
 6725 005e FFF7FEFF 		bl	clmt_clust
 6726              	.LVL999:
 6727              	.L662:
3644:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
 6728              		.loc 1 3644 0
 6729 0062 0028     		cmp	r0, #0
 6730 0064 00F0DE80 		beq	.L664
3645:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 6731              		.loc 1 3645 0
 6732 0068 0128     		cmp	r0, #1
 6733 006a 31D0     		beq	.L682
3646:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6734              		.loc 1 3646 0
 6735 006c B0F1FF3F 		cmp	r0, #-1
 6736 0070 39D0     		beq	.L683
3647:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 6737              		.loc 1 3647 0
 6738 0072 E061     		str	r0, [r4, #28]
3648:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6739              		.loc 1 3648 0
 6740 0074 A368     		ldr	r3, [r4, #8]
 6741 0076 03B9     		cbnz	r3, .L660
3648:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6742              		.loc 1 3648 0 is_stmt 0 discriminator 1
 6743 0078 A060     		str	r0, [r4, #8]
 6744              	.LVL1000:
 6745              	.L660:
3653:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 6746              		.loc 1 3653 0 is_stmt 1
 6747 007a 94F91430 		ldrsb	r3, [r4, #20]
 6748 007e 002B     		cmp	r3, #0
 6749 0080 3CDB     		blt	.L684
 6750              	.L667:
3658:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!sect) ABORT(fs, FR_INT_ERR);
 6751              		.loc 1 3658 0
 6752 0082 DDF80CB0 		ldr	fp, [sp, #12]
 6753 0086 E169     		ldr	r1, [r4, #28]
 6754 0088 5846     		mov	r0, fp
 6755 008a FFF7FEFF 		bl	clust2sect
 6756              	.LVL1001:
3659:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
 6757              		.loc 1 3659 0
 6758 008e 8246     		mov	r10, r0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 240


 6759 0090 0028     		cmp	r0, #0
 6760 0092 4CD0     		beq	.L685
3660:Middlewares/Third_Party/FatFs/src/ff.c **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 6761              		.loc 1 3660 0
 6762 0094 BA44     		add	r10, r10, r7
 6763              	.LVL1002:
3662:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 6764              		.loc 1 3662 0
 6765 0096 750A     		lsrs	r5, r6, #9
 6766              	.LVL1003:
 6767 0098 6CD0     		beq	.L670
3663:Middlewares/Third_Party/FatFs/src/ff.c **** 					cc = fs->csize - csect;
 6768              		.loc 1 3663 0
 6769 009a 7B19     		adds	r3, r7, r5
 6770 009c BBF80A20 		ldrh	r2, [fp, #10]
 6771 00a0 9342     		cmp	r3, r2
 6772 00a2 00D9     		bls	.L671
3664:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6773              		.loc 1 3664 0
 6774 00a4 D51B     		subs	r5, r2, r7
 6775              	.LVL1004:
 6776              	.L671:
3666:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 2
 6777              		.loc 1 3666 0
 6778 00a6 2B46     		mov	r3, r5
 6779 00a8 5246     		mov	r2, r10
 6780 00aa 4146     		mov	r1, r8
 6781 00ac 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 6782 00b0 FFF7FEFF 		bl	disk_write
 6783              	.LVL1005:
 6784 00b4 0028     		cmp	r0, #0
 6785 00b6 45D1     		bne	.L686
3674:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 6786              		.loc 1 3674 0
 6787 00b8 216A     		ldr	r1, [r4, #32]
 6788 00ba A1EB0A01 		sub	r1, r1, r10
 6789 00be A942     		cmp	r1, r5
 6790 00c0 4BD3     		bcc	.L687
 6791              	.L673:
3680:Middlewares/Third_Party/FatFs/src/ff.c **** 				continue;
 6792              		.loc 1 3680 0
 6793 00c2 6D02     		lsls	r5, r5, #9
 6794              	.LVL1006:
3681:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6795              		.loc 1 3681 0
 6796 00c4 72E0     		b	.L674
 6797              	.LVL1007:
 6798              	.L663:
3641:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 6799              		.loc 1 3641 0
 6800 00c6 E169     		ldr	r1, [r4, #28]
 6801 00c8 0198     		ldr	r0, [sp, #4]
 6802 00ca FFF7FEFF 		bl	create_chain
 6803              	.LVL1008:
 6804 00ce C8E7     		b	.L662
 6805              	.L682:
3645:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 241


 6806              		.loc 1 3645 0 discriminator 1
 6807 00d0 4FF0020A 		mov	r10, #2
 6808 00d4 84F815A0 		strb	r10, [r4, #21]
 6809 00d8 5146     		mov	r1, r10
 6810 00da 0398     		ldr	r0, [sp, #12]
 6811              	.LVL1009:
 6812 00dc FFF7FEFF 		bl	unlock_fs
 6813              	.LVL1010:
 6814 00e0 CDF800A0 		str	r10, [sp]
 6815              	.LVL1011:
 6816 00e4 ADE7     		b	.L656
 6817              	.LVL1012:
 6818              	.L683:
3646:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6819              		.loc 1 3646 0 discriminator 1
 6820 00e6 4FF0010A 		mov	r10, #1
 6821 00ea 84F815A0 		strb	r10, [r4, #21]
 6822 00ee 5146     		mov	r1, r10
 6823 00f0 0398     		ldr	r0, [sp, #12]
 6824              	.LVL1013:
 6825 00f2 FFF7FEFF 		bl	unlock_fs
 6826              	.LVL1014:
 6827 00f6 CDF800A0 		str	r10, [sp]
 6828              	.LVL1015:
 6829 00fa A2E7     		b	.L656
 6830              	.LVL1016:
 6831              	.L684:
3654:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 6832              		.loc 1 3654 0
 6833 00fc 0123     		movs	r3, #1
 6834 00fe 226A     		ldr	r2, [r4, #32]
 6835 0100 04F13001 		add	r1, r4, #48
 6836 0104 0398     		ldr	r0, [sp, #12]
 6837 0106 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 6838 0108 FFF7FEFF 		bl	disk_write
 6839              	.LVL1017:
 6840 010c 20B9     		cbnz	r0, .L688
3655:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6841              		.loc 1 3655 0
 6842 010e 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6843 0110 03F07F03 		and	r3, r3, #127
 6844 0114 2375     		strb	r3, [r4, #20]
 6845 0116 B4E7     		b	.L667
 6846              	.L688:
3654:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 6847              		.loc 1 3654 0 discriminator 1
 6848 0118 4FF0010A 		mov	r10, #1
 6849 011c 84F815A0 		strb	r10, [r4, #21]
 6850 0120 5146     		mov	r1, r10
 6851 0122 0398     		ldr	r0, [sp, #12]
 6852 0124 FFF7FEFF 		bl	unlock_fs
 6853              	.LVL1018:
 6854 0128 CDF800A0 		str	r10, [sp]
 6855              	.LVL1019:
 6856 012c 89E7     		b	.L656
 6857              	.LVL1020:
 6858              	.L685:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 242


3659:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
 6859              		.loc 1 3659 0 discriminator 1
 6860 012e 4FF0020A 		mov	r10, #2
 6861 0132 84F815A0 		strb	r10, [r4, #21]
 6862 0136 5146     		mov	r1, r10
 6863 0138 5846     		mov	r0, fp
 6864              	.LVL1021:
 6865 013a FFF7FEFF 		bl	unlock_fs
 6866              	.LVL1022:
 6867 013e CDF800A0 		str	r10, [sp]
 6868              	.LVL1023:
 6869 0142 7EE7     		b	.L656
 6870              	.LVL1024:
 6871              	.L686:
3666:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 2
 6872              		.loc 1 3666 0 discriminator 1
 6873 0144 4FF0010A 		mov	r10, #1
 6874              	.LVL1025:
 6875 0148 84F815A0 		strb	r10, [r4, #21]
 6876 014c 5146     		mov	r1, r10
 6877 014e 0398     		ldr	r0, [sp, #12]
 6878 0150 FFF7FEFF 		bl	unlock_fs
 6879              	.LVL1026:
 6880 0154 CDF800A0 		str	r10, [sp]
 6881              	.LVL1027:
 6882 0158 73E7     		b	.L656
 6883              	.LVL1028:
 6884              	.L687:
3675:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 6885              		.loc 1 3675 0
 6886 015a 4FF40072 		mov	r2, #512
 6887 015e 08EB4121 		add	r1, r8, r1, lsl #9
 6888 0162 04F13000 		add	r0, r4, #48
 6889 0166 FFF7FEFF 		bl	mem_cpy
 6890              	.LVL1029:
3676:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6891              		.loc 1 3676 0
 6892 016a 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6893 016c 03F07F03 		and	r3, r3, #127
 6894 0170 2375     		strb	r3, [r4, #20]
 6895 0172 A6E7     		b	.L673
 6896              	.L670:
3689:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 6897              		.loc 1 3689 0
 6898 0174 236A     		ldr	r3, [r4, #32]
 6899 0176 5345     		cmp	r3, r10
 6900 0178 03D0     		beq	.L675
3690:Middlewares/Third_Party/FatFs/src/ff.c **** 				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 6901              		.loc 1 3690 0 discriminator 1
 6902 017a A269     		ldr	r2, [r4, #24]
 6903 017c E368     		ldr	r3, [r4, #12]
3689:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 6904              		.loc 1 3689 0 discriminator 1
 6905 017e 9A42     		cmp	r2, r3
 6906 0180 3BD3     		bcc	.L689
 6907              	.L675:
3695:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 243


 6908              		.loc 1 3695 0
 6909 0182 C4F820A0 		str	r10, [r4, #32]
 6910              	.LVL1030:
 6911              	.L659:
3697:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 6912              		.loc 1 3697 0
 6913 0186 A369     		ldr	r3, [r4, #24]
 6914 0188 C3F30803 		ubfx	r3, r3, #0, #9
 6915 018c C3F50075 		rsb	r5, r3, #512
 6916              	.LVL1031:
3698:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
 6917              		.loc 1 3698 0
 6918 0190 AE42     		cmp	r6, r5
 6919 0192 00D2     		bcs	.L676
 6920 0194 3546     		mov	r5, r6
 6921              	.LVL1032:
 6922              	.L676:
3704:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->flag |= FA_DIRTY;
 6923              		.loc 1 3704 0
 6924 0196 04F13000 		add	r0, r4, #48
 6925 019a 2A46     		mov	r2, r5
 6926 019c 4146     		mov	r1, r8
 6927 019e 1844     		add	r0, r0, r3
 6928 01a0 FFF7FEFF 		bl	mem_cpy
 6929              	.LVL1033:
3705:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 6930              		.loc 1 3705 0
 6931 01a4 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6932 01a6 63F07F03 		orn	r3, r3, #127
 6933 01aa 2375     		strb	r3, [r4, #20]
 6934              	.L674:
3625:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 6935              		.loc 1 3625 0
 6936 01ac A844     		add	r8, r8, r5
 6937              	.LVL1034:
 6938 01ae A369     		ldr	r3, [r4, #24]
 6939 01b0 2B44     		add	r3, r3, r5
 6940 01b2 A361     		str	r3, [r4, #24]
 6941 01b4 E268     		ldr	r2, [r4, #12]
 6942 01b6 9342     		cmp	r3, r2
 6943 01b8 38BF     		it	cc
 6944 01ba 1346     		movcc	r3, r2
 6945 01bc E360     		str	r3, [r4, #12]
 6946 01be D9F80030 		ldr	r3, [r9]
 6947 01c2 2B44     		add	r3, r3, r5
 6948 01c4 C9F80030 		str	r3, [r9]
 6949 01c8 761B     		subs	r6, r6, r5
 6950              	.LVL1035:
 6951              	.L677:
3624:Middlewares/Third_Party/FatFs/src/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->
 6952              		.loc 1 3624 0
 6953 01ca 5EB3     		cbz	r6, .L664
3626:Middlewares/Third_Party/FatFs/src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 6954              		.loc 1 3626 0
 6955 01cc A169     		ldr	r1, [r4, #24]
 6956 01ce C1F30803 		ubfx	r3, r1, #0, #9
 6957 01d2 002B     		cmp	r3, #0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 244


 6958 01d4 D7D1     		bne	.L659
3627:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (csect == 0) {				/* On the cluster boundary? */
 6959              		.loc 1 3627 0
 6960 01d6 039B     		ldr	r3, [sp, #12]
 6961 01d8 5F89     		ldrh	r7, [r3, #10]
 6962 01da 013F     		subs	r7, r7, #1
 6963              	.LVL1036:
3628:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 6964              		.loc 1 3628 0
 6965 01dc 17EA5127 		ands	r7, r7, r1, lsr #9
 6966              	.LVL1037:
 6967 01e0 7FF44BAF 		bne	.L660
3629:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fp->obj.sclust;	/* Follow from the origin */
 6968              		.loc 1 3629 0
 6969 01e4 0029     		cmp	r1, #0
 6970 01e6 7FF437AF 		bne	.L661
3630:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0) {		/* If no cluster is allocated, */
 6971              		.loc 1 3630 0
 6972 01ea A068     		ldr	r0, [r4, #8]
 6973              	.LVL1038:
3631:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 6974              		.loc 1 3631 0
 6975 01ec 0028     		cmp	r0, #0
 6976 01ee 7FF438AF 		bne	.L662
3632:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 6977              		.loc 1 3632 0
 6978 01f2 0198     		ldr	r0, [sp, #4]
 6979              	.LVL1039:
 6980 01f4 FFF7FEFF 		bl	create_chain
 6981              	.LVL1040:
 6982 01f8 33E7     		b	.L662
 6983              	.LVL1041:
 6984              	.L689:
3691:Middlewares/Third_Party/FatFs/src/ff.c **** 					ABORT(fs, FR_DISK_ERR);
 6985              		.loc 1 3691 0
 6986 01fa 0123     		movs	r3, #1
 6987 01fc 5246     		mov	r2, r10
 6988 01fe 04F13001 		add	r1, r4, #48
 6989 0202 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 6990 0206 FFF7FEFF 		bl	disk_read
 6991              	.LVL1042:
3690:Middlewares/Third_Party/FatFs/src/ff.c **** 				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 6992              		.loc 1 3690 0
 6993 020a 0028     		cmp	r0, #0
 6994 020c B9D0     		beq	.L675
3692:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6995              		.loc 1 3692 0
 6996 020e 4FF0010A 		mov	r10, #1
 6997              	.LVL1043:
 6998 0212 84F815A0 		strb	r10, [r4, #21]
 6999 0216 5146     		mov	r1, r10
 7000 0218 0398     		ldr	r0, [sp, #12]
 7001 021a FFF7FEFF 		bl	unlock_fs
 7002              	.LVL1044:
 7003 021e CDF800A0 		str	r10, [sp]
 7004              	.LVL1045:
 7005 0222 0EE7     		b	.L656
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 245


 7006              	.LVL1046:
 7007              	.L664:
3709:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7008              		.loc 1 3709 0
 7009 0224 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 7010 0226 43F04003 		orr	r3, r3, #64
 7011 022a 2375     		strb	r3, [r4, #20]
3711:Middlewares/Third_Party/FatFs/src/ff.c **** }
 7012              		.loc 1 3711 0
 7013 022c 0021     		movs	r1, #0
 7014 022e 0398     		ldr	r0, [sp, #12]
 7015 0230 FFF7FEFF 		bl	unlock_fs
 7016              	.LVL1047:
 7017 0234 05E7     		b	.L656
 7018              		.cfi_endproc
 7019              	.LFE191:
 7021              		.section	.text.putc_bfd,"ax",%progbits
 7022              		.align	1
 7023              		.syntax unified
 7024              		.thumb
 7025              		.thumb_func
 7026              		.fpu fpv5-sp-d16
 7028              	putc_bfd:
 7029              	.LFB208:
5910:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT bw;
 7030              		.loc 1 5910 0
 7031              		.cfi_startproc
 7032              		@ args = 0, pretend = 0, frame = 8
 7033              		@ frame_needed = 0, uses_anonymous_args = 0
 7034              	.LVL1048:
 7035 0000 70B5     		push	{r4, r5, r6, lr}
 7036              	.LCFI73:
 7037              		.cfi_def_cfa_offset 16
 7038              		.cfi_offset 4, -16
 7039              		.cfi_offset 5, -12
 7040              		.cfi_offset 6, -8
 7041              		.cfi_offset 14, -4
 7042 0002 82B0     		sub	sp, sp, #8
 7043              	.LCFI74:
 7044              		.cfi_def_cfa_offset 24
 7045 0004 0446     		mov	r4, r0
 7046 0006 0D46     		mov	r5, r1
5915:Middlewares/Third_Party/FatFs/src/ff.c **** 		putc_bfd(pb, '\r');
 7047              		.loc 1 5915 0
 7048 0008 0A29     		cmp	r1, #10
 7049 000a 0DD0     		beq	.L697
 7050              	.LVL1049:
 7051              	.L691:
5919:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i < 0) return;
 7052              		.loc 1 5919 0
 7053 000c 6368     		ldr	r3, [r4, #4]
 7054              	.LVL1050:
5920:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7055              		.loc 1 5920 0
 7056 000e 002B     		cmp	r3, #0
 7057 0010 08DB     		blt	.L690
5949:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 246


 7058              		.loc 1 5949 0
 7059 0012 5E1C     		adds	r6, r3, #1
 7060              	.LVL1051:
 7061 0014 2344     		add	r3, r3, r4
 7062 0016 1D73     		strb	r5, [r3, #12]
5952:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 7063              		.loc 1 5952 0
 7064 0018 3C2E     		cmp	r6, #60
 7065 001a 09DC     		bgt	.L698
 7066              	.LVL1052:
 7067              	.L693:
5956:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->nchr++;
 7068              		.loc 1 5956 0
 7069 001c 6660     		str	r6, [r4, #4]
5957:Middlewares/Third_Party/FatFs/src/ff.c **** }
 7070              		.loc 1 5957 0
 7071 001e A368     		ldr	r3, [r4, #8]
 7072 0020 0133     		adds	r3, r3, #1
 7073 0022 A360     		str	r3, [r4, #8]
 7074              	.LVL1053:
 7075              	.L690:
5958:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7076              		.loc 1 5958 0
 7077 0024 02B0     		add	sp, sp, #8
 7078              	.LCFI75:
 7079              		.cfi_remember_state
 7080              		.cfi_def_cfa_offset 16
 7081              		@ sp needed
 7082 0026 70BD     		pop	{r4, r5, r6, pc}
 7083              	.LVL1054:
 7084              	.L697:
 7085              	.LCFI76:
 7086              		.cfi_restore_state
5916:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 7087              		.loc 1 5916 0
 7088 0028 0D21     		movs	r1, #13
 7089              	.LVL1055:
 7090 002a FFF7E9FF 		bl	putc_bfd
 7091              	.LVL1056:
 7092 002e EDE7     		b	.L691
 7093              	.LVL1057:
 7094              	.L698:
5953:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = (bw == (UINT)i) ? 0 : -1;
 7095              		.loc 1 5953 0
 7096 0030 01AB     		add	r3, sp, #4
 7097 0032 3246     		mov	r2, r6
 7098 0034 04F10C01 		add	r1, r4, #12
 7099 0038 2068     		ldr	r0, [r4]
 7100 003a FFF7FEFF 		bl	f_write
 7101              	.LVL1058:
5954:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 7102              		.loc 1 5954 0
 7103 003e 019B     		ldr	r3, [sp, #4]
 7104 0040 9E42     		cmp	r6, r3
 7105 0042 02D0     		beq	.L699
 7106 0044 4FF0FF36 		mov	r6, #-1
 7107              	.LVL1059:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 247


 7108 0048 E8E7     		b	.L693
 7109              	.LVL1060:
 7110              	.L699:
 7111 004a 0026     		movs	r6, #0
 7112              	.LVL1061:
 7113 004c E6E7     		b	.L693
 7114              		.cfi_endproc
 7115              	.LFE208:
 7117              		.section	.text.putc_flush,"ax",%progbits
 7118              		.align	1
 7119              		.syntax unified
 7120              		.thumb
 7121              		.thumb_func
 7122              		.fpu fpv5-sp-d16
 7124              	putc_flush:
 7125              	.LFB209:
5965:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nw;
 7126              		.loc 1 5965 0
 7127              		.cfi_startproc
 7128              		@ args = 0, pretend = 0, frame = 8
 7129              		@ frame_needed = 0, uses_anonymous_args = 0
 7130              	.LVL1062:
5968:Middlewares/Third_Party/FatFs/src/ff.c **** 		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 7131              		.loc 1 5968 0
 7132 0000 4268     		ldr	r2, [r0, #4]
 7133 0002 002A     		cmp	r2, #0
 7134 0004 10DB     		blt	.L702
5965:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nw;
 7135              		.loc 1 5965 0
 7136 0006 10B5     		push	{r4, lr}
 7137              	.LCFI77:
 7138              		.cfi_def_cfa_offset 8
 7139              		.cfi_offset 4, -8
 7140              		.cfi_offset 14, -4
 7141 0008 82B0     		sub	sp, sp, #8
 7142              	.LCFI78:
 7143              		.cfi_def_cfa_offset 16
 7144 000a 0446     		mov	r4, r0
5969:Middlewares/Third_Party/FatFs/src/ff.c **** 		&& (UINT)pb->idx == nw) return pb->nchr;
 7145              		.loc 1 5969 0
 7146 000c 01AB     		add	r3, sp, #4
 7147 000e 00F10C01 		add	r1, r0, #12
 7148 0012 0068     		ldr	r0, [r0]
 7149              	.LVL1063:
 7150 0014 FFF7FEFF 		bl	f_write
 7151              	.LVL1064:
 7152 0018 48B9     		cbnz	r0, .L703
5970:Middlewares/Third_Party/FatFs/src/ff.c **** 	return EOF;
 7153              		.loc 1 5970 0
 7154 001a 6268     		ldr	r2, [r4, #4]
 7155 001c 019B     		ldr	r3, [sp, #4]
 7156 001e 9A42     		cmp	r2, r3
 7157 0020 08D1     		bne	.L704
5970:Middlewares/Third_Party/FatFs/src/ff.c **** 	return EOF;
 7158              		.loc 1 5970 0 is_stmt 0 discriminator 1
 7159 0022 A068     		ldr	r0, [r4, #8]
 7160              	.L700:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 248


5972:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7161              		.loc 1 5972 0 is_stmt 1
 7162 0024 02B0     		add	sp, sp, #8
 7163              	.LCFI79:
 7164              		.cfi_def_cfa_offset 8
 7165              		@ sp needed
 7166 0026 10BD     		pop	{r4, pc}
 7167              	.LVL1065:
 7168              	.L702:
 7169              	.LCFI80:
 7170              		.cfi_def_cfa_offset 0
 7171              		.cfi_restore 4
 7172              		.cfi_restore 14
5971:Middlewares/Third_Party/FatFs/src/ff.c **** }
 7173              		.loc 1 5971 0
 7174 0028 4FF0FF30 		mov	r0, #-1
 7175              	.LVL1066:
5972:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7176              		.loc 1 5972 0
 7177 002c 7047     		bx	lr
 7178              	.LVL1067:
 7179              	.L703:
 7180              	.LCFI81:
 7181              		.cfi_def_cfa_offset 16
 7182              		.cfi_offset 4, -8
 7183              		.cfi_offset 14, -4
5971:Middlewares/Third_Party/FatFs/src/ff.c **** }
 7184              		.loc 1 5971 0
 7185 002e 4FF0FF30 		mov	r0, #-1
 7186 0032 F7E7     		b	.L700
 7187              	.L704:
 7188 0034 4FF0FF30 		mov	r0, #-1
 7189 0038 F4E7     		b	.L700
 7190              		.cfi_endproc
 7191              	.LFE209:
 7193              		.section	.text.f_sync,"ax",%progbits
 7194              		.align	1
 7195              		.global	f_sync
 7196              		.syntax unified
 7197              		.thumb
 7198              		.thumb_func
 7199              		.fpu fpv5-sp-d16
 7201              	f_sync:
 7202              	.LFB192:
3724:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 7203              		.loc 1 3724 0
 7204              		.cfi_startproc
 7205              		@ args = 0, pretend = 0, frame = 8
 7206              		@ frame_needed = 0, uses_anonymous_args = 0
 7207              	.LVL1068:
 7208 0000 70B5     		push	{r4, r5, r6, lr}
 7209              	.LCFI82:
 7210              		.cfi_def_cfa_offset 16
 7211              		.cfi_offset 4, -16
 7212              		.cfi_offset 5, -12
 7213              		.cfi_offset 6, -8
 7214              		.cfi_offset 14, -4
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 249


 7215 0002 82B0     		sub	sp, sp, #8
 7216              	.LCFI83:
 7217              		.cfi_def_cfa_offset 24
 7218 0004 0546     		mov	r5, r0
3734:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 7219              		.loc 1 3734 0
 7220 0006 01A9     		add	r1, sp, #4
 7221 0008 FFF7FEFF 		bl	validate
 7222              	.LVL1069:
3735:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 7223              		.loc 1 3735 0
 7224 000c 0446     		mov	r4, r0
 7225 000e 78B9     		cbnz	r0, .L710
3736:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 7226              		.loc 1 3736 0
 7227 0010 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 7228 0012 13F0400F 		tst	r3, #64
 7229 0016 0BD0     		beq	.L710
3738:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 7230              		.loc 1 3738 0
 7231 0018 13F0800F 		tst	r3, #128
 7232 001c 0FD1     		bne	.L715
 7233              	.LVL1070:
 7234              	.L711:
3744:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 7235              		.loc 1 3744 0
 7236 001e FFF7FEFF 		bl	get_fattime
 7237              	.LVL1071:
 7238 0022 0646     		mov	r6, r0
 7239              	.LVL1072:
3774:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
 7240              		.loc 1 3774 0
 7241 0024 696A     		ldr	r1, [r5, #36]
 7242 0026 0198     		ldr	r0, [sp, #4]
 7243              	.LVL1073:
 7244 0028 FFF7FEFF 		bl	move_window
 7245              	.LVL1074:
3775:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir = fp->dir_ptr;
 7246              		.loc 1 3775 0
 7247 002c 0446     		mov	r4, r0
 7248 002e D0B1     		cbz	r0, .L716
 7249              	.LVL1075:
 7250              	.L710:
3790:Middlewares/Third_Party/FatFs/src/ff.c **** }
 7251              		.loc 1 3790 0
 7252 0030 2146     		mov	r1, r4
 7253 0032 0198     		ldr	r0, [sp, #4]
 7254 0034 FFF7FEFF 		bl	unlock_fs
 7255              	.LVL1076:
 7256              	.L713:
3791:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7257              		.loc 1 3791 0
 7258 0038 2046     		mov	r0, r4
 7259 003a 02B0     		add	sp, sp, #8
 7260              	.LCFI84:
 7261              		.cfi_remember_state
 7262              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 250


 7263              		@ sp needed
 7264 003c 70BD     		pop	{r4, r5, r6, pc}
 7265              	.LVL1077:
 7266              	.L715:
 7267              	.LCFI85:
 7268              		.cfi_restore_state
3739:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 7269              		.loc 1 3739 0
 7270 003e 0123     		movs	r3, #1
 7271 0040 2A6A     		ldr	r2, [r5, #32]
 7272 0042 05F13001 		add	r1, r5, #48
 7273 0046 0198     		ldr	r0, [sp, #4]
 7274              	.LVL1078:
 7275 0048 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 7276 004a FFF7FEFF 		bl	disk_write
 7277              	.LVL1079:
 7278 004e 20B9     		cbnz	r0, .L717
3740:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 7279              		.loc 1 3740 0
 7280 0050 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 7281 0052 03F07F03 		and	r3, r3, #127
 7282 0056 2B75     		strb	r3, [r5, #20]
 7283 0058 E1E7     		b	.L711
 7284              	.L717:
3739:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 7285              		.loc 1 3739 0 discriminator 1
 7286 005a 0121     		movs	r1, #1
 7287 005c 0198     		ldr	r0, [sp, #4]
 7288 005e FFF7FEFF 		bl	unlock_fs
 7289              	.LVL1080:
 7290 0062 0124     		movs	r4, #1
 7291 0064 E8E7     		b	.L713
 7292              	.LVL1081:
 7293              	.L716:
3776:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 7294              		.loc 1 3776 0
 7295 0066 AC6A     		ldr	r4, [r5, #40]
 7296              	.LVL1082:
3777:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 7297              		.loc 1 3777 0
 7298 0068 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 7299 006a 43F02003 		orr	r3, r3, #32
 7300 006e E372     		strb	r3, [r4, #11]
3778:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 7301              		.loc 1 3778 0
 7302 0070 AA68     		ldr	r2, [r5, #8]
 7303 0072 2146     		mov	r1, r4
 7304 0074 2868     		ldr	r0, [r5]
 7305              	.LVL1083:
 7306 0076 FFF7FEFF 		bl	st_clust
 7307              	.LVL1084:
3779:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 7308              		.loc 1 3779 0
 7309 007a E968     		ldr	r1, [r5, #12]
 7310 007c 04F11C00 		add	r0, r4, #28
 7311 0080 FFF7FEFF 		bl	st_dword
 7312              	.LVL1085:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 251


3780:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_word(dir + DIR_LstAccDate, 0);
 7313              		.loc 1 3780 0
 7314 0084 3146     		mov	r1, r6
 7315 0086 04F11600 		add	r0, r4, #22
 7316 008a FFF7FEFF 		bl	st_dword
 7317              	.LVL1086:
3781:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
 7318              		.loc 1 3781 0
 7319 008e 0021     		movs	r1, #0
 7320 0090 04F11200 		add	r0, r4, #18
 7321 0094 FFF7FEFF 		bl	st_word
 7322              	.LVL1087:
3782:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_fs(fs);					/* Restore it to the directory */
 7323              		.loc 1 3782 0
 7324 0098 019B     		ldr	r3, [sp, #4]
 7325 009a 0122     		movs	r2, #1
 7326 009c DA70     		strb	r2, [r3, #3]
3783:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_MODIFIED;
 7327              		.loc 1 3783 0
 7328 009e 0198     		ldr	r0, [sp, #4]
 7329 00a0 FFF7FEFF 		bl	sync_fs
 7330              	.LVL1088:
 7331 00a4 0446     		mov	r4, r0
 7332              	.LVL1089:
3784:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7333              		.loc 1 3784 0
 7334 00a6 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 7335 00a8 23F04003 		bic	r3, r3, #64
 7336 00ac 2B75     		strb	r3, [r5, #20]
 7337 00ae BFE7     		b	.L710
 7338              		.cfi_endproc
 7339              	.LFE192:
 7341              		.section	.text.f_close,"ax",%progbits
 7342              		.align	1
 7343              		.global	f_close
 7344              		.syntax unified
 7345              		.thumb
 7346              		.thumb_func
 7347              		.fpu fpv5-sp-d16
 7349              	f_close:
 7350              	.LFB193:
3805:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 7351              		.loc 1 3805 0
 7352              		.cfi_startproc
 7353              		@ args = 0, pretend = 0, frame = 8
 7354              		@ frame_needed = 0, uses_anonymous_args = 0
 7355              	.LVL1090:
 7356 0000 30B5     		push	{r4, r5, lr}
 7357              	.LCFI86:
 7358              		.cfi_def_cfa_offset 12
 7359              		.cfi_offset 4, -12
 7360              		.cfi_offset 5, -8
 7361              		.cfi_offset 14, -4
 7362 0002 83B0     		sub	sp, sp, #12
 7363              	.LCFI87:
 7364              		.cfi_def_cfa_offset 24
 7365 0004 0546     		mov	r5, r0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 252


3810:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK)
 7366              		.loc 1 3810 0
 7367 0006 FFF7FEFF 		bl	f_sync
 7368              	.LVL1091:
3811:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 7369              		.loc 1 3811 0
 7370 000a 0446     		mov	r4, r0
 7371 000c 10B1     		cbz	r0, .L722
 7372              	.LVL1092:
 7373              	.L719:
3829:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7374              		.loc 1 3829 0
 7375 000e 2046     		mov	r0, r4
 7376 0010 03B0     		add	sp, sp, #12
 7377              	.LCFI88:
 7378              		.cfi_remember_state
 7379              		.cfi_def_cfa_offset 12
 7380              		@ sp needed
 7381 0012 30BD     		pop	{r4, r5, pc}
 7382              	.LVL1093:
 7383              	.L722:
 7384              	.LCFI89:
 7385              		.cfi_restore_state
3814:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
 7386              		.loc 1 3814 0
 7387 0014 01A9     		add	r1, sp, #4
 7388 0016 2846     		mov	r0, r5
 7389              	.LVL1094:
 7390 0018 FFF7FEFF 		bl	validate
 7391              	.LVL1095:
3815:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 7392              		.loc 1 3815 0
 7393 001c 0446     		mov	r4, r0
 7394 001e 0028     		cmp	r0, #0
 7395 0020 F5D1     		bne	.L719
3817:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK)
 7396              		.loc 1 3817 0
 7397 0022 2869     		ldr	r0, [r5, #16]
 7398              	.LVL1096:
 7399 0024 FFF7FEFF 		bl	dec_lock
 7400              	.LVL1097:
3818:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 7401              		.loc 1 3818 0
 7402 0028 0446     		mov	r4, r0
 7403 002a 08B9     		cbnz	r0, .L720
3821:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 7404              		.loc 1 3821 0
 7405 002c 0023     		movs	r3, #0
 7406 002e 2B60     		str	r3, [r5]
 7407              	.L720:
3824:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 7408              		.loc 1 3824 0
 7409 0030 0021     		movs	r1, #0
 7410 0032 0198     		ldr	r0, [sp, #4]
 7411              	.LVL1098:
 7412 0034 FFF7FEFF 		bl	unlock_fs
 7413              	.LVL1099:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 253


 7414 0038 E9E7     		b	.L719
 7415              		.cfi_endproc
 7416              	.LFE193:
 7418              		.section	.text.f_chdrive,"ax",%progbits
 7419              		.align	1
 7420              		.global	f_chdrive
 7421              		.syntax unified
 7422              		.thumb
 7423              		.thumb_func
 7424              		.fpu fpv5-sp-d16
 7426              	f_chdrive:
 7427              	.LFB194:
3843:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol;
 7428              		.loc 1 3843 0
 7429              		.cfi_startproc
 7430              		@ args = 0, pretend = 0, frame = 8
 7431              		@ frame_needed = 0, uses_anonymous_args = 0
 7432              	.LVL1100:
 7433 0000 00B5     		push	{lr}
 7434              	.LCFI90:
 7435              		.cfi_def_cfa_offset 4
 7436              		.cfi_offset 14, -4
 7437 0002 83B0     		sub	sp, sp, #12
 7438              	.LCFI91:
 7439              		.cfi_def_cfa_offset 16
 7440 0004 02AB     		add	r3, sp, #8
 7441 0006 43F8040D 		str	r0, [r3, #-4]!
3848:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 7442              		.loc 1 3848 0
 7443 000a 1846     		mov	r0, r3
 7444              	.LVL1101:
 7445 000c FFF7FEFF 		bl	get_ldnumber
 7446              	.LVL1102:
3849:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7447              		.loc 1 3849 0
 7448 0010 0028     		cmp	r0, #0
 7449 0012 05DB     		blt	.L725
3851:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7450              		.loc 1 3851 0
 7451 0014 034B     		ldr	r3, .L727
 7452 0016 1870     		strb	r0, [r3]
3853:Middlewares/Third_Party/FatFs/src/ff.c **** }
 7453              		.loc 1 3853 0
 7454 0018 0020     		movs	r0, #0
 7455              	.LVL1103:
 7456              	.L724:
3854:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 7457              		.loc 1 3854 0
 7458 001a 03B0     		add	sp, sp, #12
 7459              	.LCFI92:
 7460              		.cfi_remember_state
 7461              		.cfi_def_cfa_offset 4
 7462              		@ sp needed
 7463 001c 5DF804FB 		ldr	pc, [sp], #4
 7464              	.LVL1104:
 7465              	.L725:
 7466              	.LCFI93:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 254


 7467              		.cfi_restore_state
3849:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7468              		.loc 1 3849 0
 7469 0020 0B20     		movs	r0, #11
 7470              	.LVL1105:
 7471 0022 FAE7     		b	.L724
 7472              	.L728:
 7473              		.align	2
 7474              	.L727:
 7475 0024 00000000 		.word	.LANCHOR2
 7476              		.cfi_endproc
 7477              	.LFE194:
 7479              		.section	.text.f_chdir,"ax",%progbits
 7480              		.align	1
 7481              		.global	f_chdir
 7482              		.syntax unified
 7483              		.thumb
 7484              		.thumb_func
 7485              		.fpu fpv5-sp-d16
 7487              	f_chdir:
 7488              	.LFB195:
3861:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 7489              		.loc 1 3861 0
 7490              		.cfi_startproc
 7491              		@ args = 0, pretend = 0, frame = 64
 7492              		@ frame_needed = 0, uses_anonymous_args = 0
 7493              	.LVL1106:
 7494 0000 70B5     		push	{r4, r5, r6, lr}
 7495              	.LCFI94:
 7496              		.cfi_def_cfa_offset 16
 7497              		.cfi_offset 4, -16
 7498              		.cfi_offset 5, -12
 7499              		.cfi_offset 6, -8
 7500              		.cfi_offset 14, -4
 7501 0002 90B0     		sub	sp, sp, #64
 7502              	.LCFI95:
 7503              		.cfi_def_cfa_offset 80
 7504 0004 0190     		str	r0, [sp, #4]
3868:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 7505              		.loc 1 3868 0
 7506 0006 0022     		movs	r2, #0
 7507 0008 02A9     		add	r1, sp, #8
 7508 000a 01A8     		add	r0, sp, #4
 7509              	.LVL1107:
 7510 000c FFF7FEFF 		bl	find_volume
 7511              	.LVL1108:
3869:Middlewares/Third_Party/FatFs/src/ff.c **** 		dj.obj.fs = fs;
 7512              		.loc 1 3869 0
 7513 0010 0446     		mov	r4, r0
 7514 0012 68BB     		cbnz	r0, .L730
3870:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
 7515              		.loc 1 3870 0
 7516 0014 029B     		ldr	r3, [sp, #8]
 7517 0016 0393     		str	r3, [sp, #12]
3871:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
 7518              		.loc 1 3871 0
 7519 0018 4FF40070 		mov	r0, #512
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 255


 7520              	.LVL1109:
 7521 001c FFF7FEFF 		bl	ff_memalloc
 7522              	.LVL1110:
 7523 0020 0546     		mov	r5, r0
 7524 0022 B8B1     		cbz	r0, .L738
3871:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
 7525              		.loc 1 3871 0 is_stmt 0 discriminator 2
 7526 0024 029B     		ldr	r3, [sp, #8]
 7527 0026 D860     		str	r0, [r3, #12]
3872:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
 7528              		.loc 1 3872 0 is_stmt 1 discriminator 2
 7529 0028 0199     		ldr	r1, [sp, #4]
 7530 002a 03A8     		add	r0, sp, #12
 7531              	.LVL1111:
 7532 002c FFF7FEFF 		bl	follow_path
 7533              	.LVL1112:
3873:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
 7534              		.loc 1 3873 0 discriminator 2
 7535 0030 0446     		mov	r4, r0
 7536 0032 C0B9     		cbnz	r0, .L733
3874:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 7537              		.loc 1 3874 0
 7538 0034 9DF93B30 		ldrsb	r3, [sp, #59]
 7539 0038 002B     		cmp	r3, #0
 7540 003a 11DB     		blt	.L739
3884:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 7541              		.loc 1 3884 0
 7542 003c 9DF81230 		ldrb	r3, [sp, #18]	@ zero_extendqisi2
 7543 0040 13F0100F 		tst	r3, #16
 7544 0044 1BD0     		beq	.L735
3894:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 7545              		.loc 1 3894 0
 7546 0046 029E     		ldr	r6, [sp, #8]
 7547 0048 0B99     		ldr	r1, [sp, #44]
 7548 004a 3046     		mov	r0, r6
 7549              	.LVL1113:
 7550 004c FFF7FEFF 		bl	ld_clust
 7551              	.LVL1114:
 7552 0050 F061     		str	r0, [r6, #28]
 7553 0052 08E0     		b	.L733
 7554              	.LVL1115:
 7555              	.L738:
3871:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
 7556              		.loc 1 3871 0 discriminator 1
 7557 0054 1121     		movs	r1, #17
 7558 0056 0298     		ldr	r0, [sp, #8]
 7559              	.LVL1116:
 7560 0058 FFF7FEFF 		bl	unlock_fs
 7561              	.LVL1117:
 7562 005c 1124     		movs	r4, #17
 7563 005e 0BE0     		b	.L732
 7564              	.LVL1118:
 7565              	.L739:
3875:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 7566              		.loc 1 3875 0
 7567 0060 029B     		ldr	r3, [sp, #8]
 7568 0062 059A     		ldr	r2, [sp, #20]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 256


 7569 0064 DA61     		str	r2, [r3, #28]
 7570              	.LVL1119:
 7571              	.L733:
3901:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 7572              		.loc 1 3901 0
 7573 0066 2846     		mov	r0, r5
 7574 0068 FFF7FEFF 		bl	ff_memfree
 7575              	.LVL1120:
3902:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 7576              		.loc 1 3902 0
 7577 006c 042C     		cmp	r4, #4
 7578 006e 08D0     		beq	.L740
 7579              	.LVL1121:
 7580              	.L730:
3905:Middlewares/Third_Party/FatFs/src/ff.c **** }
 7581              		.loc 1 3905 0
 7582 0070 2146     		mov	r1, r4
 7583 0072 0298     		ldr	r0, [sp, #8]
 7584 0074 FFF7FEFF 		bl	unlock_fs
 7585              	.LVL1122:
 7586              	.L732:
3906:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7587              		.loc 1 3906 0
 7588 0078 2046     		mov	r0, r4
 7589 007a 10B0     		add	sp, sp, #64
 7590              	.LCFI96:
 7591              		.cfi_remember_state
 7592              		.cfi_def_cfa_offset 16
 7593              		@ sp needed
 7594 007c 70BD     		pop	{r4, r5, r6, pc}
 7595              	.LVL1123:
 7596              	.L735:
 7597              	.LCFI97:
 7598              		.cfi_restore_state
3897:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7599              		.loc 1 3897 0
 7600 007e 0524     		movs	r4, #5
 7601 0080 F1E7     		b	.L733
 7602              	.LVL1124:
 7603              	.L740:
3902:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 7604              		.loc 1 3902 0
 7605 0082 0524     		movs	r4, #5
 7606              	.LVL1125:
 7607 0084 F4E7     		b	.L730
 7608              		.cfi_endproc
 7609              	.LFE195:
 7611              		.section	.text.f_lseek,"ax",%progbits
 7612              		.align	1
 7613              		.global	f_lseek
 7614              		.syntax unified
 7615              		.thumb
 7616              		.thumb_func
 7617              		.fpu fpv5-sp-d16
 7619              	f_lseek:
 7620              	.LFB196:
3994:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 257


 7621              		.loc 1 3994 0
 7622              		.cfi_startproc
 7623              		@ args = 0, pretend = 0, frame = 16
 7624              		@ frame_needed = 0, uses_anonymous_args = 0
 7625              	.LVL1126:
 7626 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 7627              	.LCFI98:
 7628              		.cfi_def_cfa_offset 36
 7629              		.cfi_offset 4, -36
 7630              		.cfi_offset 5, -32
 7631              		.cfi_offset 6, -28
 7632              		.cfi_offset 7, -24
 7633              		.cfi_offset 8, -20
 7634              		.cfi_offset 9, -16
 7635              		.cfi_offset 10, -12
 7636              		.cfi_offset 11, -8
 7637              		.cfi_offset 14, -4
 7638 0004 85B0     		sub	sp, sp, #20
 7639              	.LCFI99:
 7640              		.cfi_def_cfa_offset 56
 7641 0006 0446     		mov	r4, r0
 7642 0008 0E46     		mov	r6, r1
4003:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) res = (FRESULT)fp->err;
 7643              		.loc 1 4003 0
 7644 000a 0190     		str	r0, [sp, #4]
 7645 000c 03A9     		add	r1, sp, #12
 7646              	.LVL1127:
 7647 000e FFF7FEFF 		bl	validate
 7648              	.LVL1128:
4004:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT && !_FS_READONLY
 7649              		.loc 1 4004 0
 7650 0012 0546     		mov	r5, r0
 7651 0014 00B9     		cbnz	r0, .L742
4004:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT && !_FS_READONLY
 7652              		.loc 1 4004 0 is_stmt 0 discriminator 1
 7653 0016 657D     		ldrb	r5, [r4, #21]	@ zero_extendqisi2
 7654              	.LVL1129:
 7655              	.L742:
4010:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7656              		.loc 1 4010 0 is_stmt 1
 7657 0018 ADB9     		cbnz	r5, .L787
4013:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 7658              		.loc 1 4013 0
 7659 001a E36A     		ldr	r3, [r4, #44]
 7660 001c 002B     		cmp	r3, #0
 7661 001e 00F0A880 		beq	.L745
4014:Middlewares/Third_Party/FatFs/src/ff.c **** 			tbl = fp->cltbl;
 7662              		.loc 1 4014 0
 7663 0022 B6F1FF3F 		cmp	r6, #-1
 7664 0026 13D0     		beq	.L788
4040:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
 7665              		.loc 1 4040 0
 7666 0028 E768     		ldr	r7, [r4, #12]
 7667 002a B742     		cmp	r7, r6
 7668 002c 00D3     		bcc	.L754
 7669 002e 3746     		mov	r7, r6
 7670              	.L754:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 258


 7671              	.LVL1130:
4041:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ofs) {
 7672              		.loc 1 4041 0
 7673 0030 A761     		str	r7, [r4, #24]
4042:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
 7674              		.loc 1 4042 0
 7675 0032 002F     		cmp	r7, #0
 7676 0034 51D1     		bne	.L789
 7677              	.LVL1131:
 7678              	.L753:
4141:Middlewares/Third_Party/FatFs/src/ff.c **** }
 7679              		.loc 1 4141 0
 7680 0036 2946     		mov	r1, r5
 7681 0038 0398     		ldr	r0, [sp, #12]
 7682 003a FFF7FEFF 		bl	unlock_fs
 7683              	.LVL1132:
 7684              	.L744:
4142:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7685              		.loc 1 4142 0
 7686 003e 2846     		mov	r0, r5
 7687 0040 05B0     		add	sp, sp, #20
 7688              	.LCFI100:
 7689              		.cfi_remember_state
 7690              		.cfi_def_cfa_offset 36
 7691              		@ sp needed
 7692 0042 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 7693              	.LVL1133:
 7694              	.L787:
 7695              	.LCFI101:
 7696              		.cfi_restore_state
4010:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7697              		.loc 1 4010 0 discriminator 1
 7698 0046 2946     		mov	r1, r5
 7699 0048 0398     		ldr	r0, [sp, #12]
 7700 004a FFF7FEFF 		bl	unlock_fs
 7701              	.LVL1134:
 7702 004e F6E7     		b	.L744
 7703              	.L788:
 7704              	.LVL1135:
4016:Middlewares/Third_Party/FatFs/src/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
 7705              		.loc 1 4016 0
 7706 0050 03F1040B 		add	fp, r3, #4
 7707              	.LVL1136:
 7708 0054 D3F800A0 		ldr	r10, [r3]
 7709              	.LVL1137:
4017:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cl) {
 7710              		.loc 1 4017 0
 7711 0058 D4F80890 		ldr	r9, [r4, #8]
 7712              	.LVL1138:
4018:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {
 7713              		.loc 1 4018 0
 7714 005c B9F1000F 		cmp	r9, #0
 7715 0060 2FD0     		beq	.L779
4016:Middlewares/Third_Party/FatFs/src/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
 7716              		.loc 1 4016 0
 7717 0062 4FF00208 		mov	r8, #2
 7718              	.LVL1139:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 259


 7719              	.L752:
4021:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
 7720              		.loc 1 4021 0
 7721 0066 08F10208 		add	r8, r8, #2
 7722              	.LVL1140:
 7723 006a 4E46     		mov	r6, r9
 7724 006c 0027     		movs	r7, #0
 7725              	.LVL1141:
 7726              	.L750:
4023:Middlewares/Third_Party/FatFs/src/ff.c **** 						cl = get_fat(&fp->obj, cl);
 7727              		.loc 1 4023 0
 7728 006e 0137     		adds	r7, r7, #1
 7729              	.LVL1142:
4024:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 7730              		.loc 1 4024 0
 7731 0070 3146     		mov	r1, r6
 7732 0072 0198     		ldr	r0, [sp, #4]
 7733 0074 FFF7FEFF 		bl	get_fat
 7734              	.LVL1143:
4025:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 7735              		.loc 1 4025 0
 7736 0078 0128     		cmp	r0, #1
 7737 007a 14D9     		bls	.L790
4026:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (cl == pcl + 1);
 7738              		.loc 1 4026 0
 7739 007c B0F1FF3F 		cmp	r0, #-1
 7740 0080 18D0     		beq	.L791
4027:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 7741              		.loc 1 4027 0
 7742 0082 731C     		adds	r3, r6, #1
4024:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 7743              		.loc 1 4024 0
 7744 0084 0646     		mov	r6, r0
 7745              	.LVL1144:
4027:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 7746              		.loc 1 4027 0
 7747 0086 8342     		cmp	r3, r0
 7748 0088 F1D0     		beq	.L750
4028:Middlewares/Third_Party/FatFs/src/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
 7749              		.loc 1 4028 0
 7750 008a C245     		cmp	r10, r8
 7751 008c 05D3     		bcc	.L751
 7752              	.LVL1145:
4029:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 7753              		.loc 1 4029 0
 7754 008e 5B46     		mov	r3, fp
 7755              	.LVL1146:
 7756 0090 43F8087B 		str	r7, [r3], #8
 7757              	.LVL1147:
 7758 0094 CBF80490 		str	r9, [fp, #4]
 7759 0098 9B46     		mov	fp, r3
 7760              	.LVL1148:
 7761              	.L751:
4031:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 7762              		.loc 1 4031 0
 7763 009a 039B     		ldr	r3, [sp, #12]
 7764 009c 1B6A     		ldr	r3, [r3, #32]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 260


 7765 009e 8342     		cmp	r3, r0
 7766 00a0 11D9     		bls	.L747
4024:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 7767              		.loc 1 4024 0
 7768 00a2 8146     		mov	r9, r0
 7769              	.LVL1149:
 7770 00a4 DFE7     		b	.L752
 7771              	.LVL1150:
 7772              	.L790:
4025:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 7773              		.loc 1 4025 0 discriminator 1
 7774 00a6 0225     		movs	r5, #2
 7775              	.LVL1151:
 7776 00a8 6575     		strb	r5, [r4, #21]
 7777 00aa 2946     		mov	r1, r5
 7778 00ac 0398     		ldr	r0, [sp, #12]
 7779              	.LVL1152:
 7780 00ae FFF7FEFF 		bl	unlock_fs
 7781              	.LVL1153:
 7782 00b2 C4E7     		b	.L744
 7783              	.LVL1154:
 7784              	.L791:
4026:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (cl == pcl + 1);
 7785              		.loc 1 4026 0 discriminator 1
 7786 00b4 0125     		movs	r5, #1
 7787              	.LVL1155:
 7788 00b6 6575     		strb	r5, [r4, #21]
 7789 00b8 2946     		mov	r1, r5
 7790 00ba 0398     		ldr	r0, [sp, #12]
 7791              	.LVL1156:
 7792 00bc FFF7FEFF 		bl	unlock_fs
 7793              	.LVL1157:
 7794 00c0 BDE7     		b	.L744
 7795              	.LVL1158:
 7796              	.L779:
4016:Middlewares/Third_Party/FatFs/src/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
 7797              		.loc 1 4016 0
 7798 00c2 4FF00208 		mov	r8, #2
 7799              	.LVL1159:
 7800              	.L747:
4033:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ulen <= tlen) {
 7801              		.loc 1 4033 0
 7802 00c6 E36A     		ldr	r3, [r4, #44]
 7803 00c8 C3F80080 		str	r8, [r3]
4034:Middlewares/Third_Party/FatFs/src/ff.c **** 				*tbl = 0;		/* Terminate table */
 7804              		.loc 1 4034 0
 7805 00cc D045     		cmp	r8, r10
 7806 00ce 00F21881 		bhi	.L781
4035:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 7807              		.loc 1 4035 0
 7808 00d2 0023     		movs	r3, #0
 7809 00d4 CBF80030 		str	r3, [fp]
 7810 00d8 ADE7     		b	.L753
 7811              	.LVL1160:
 7812              	.L789:
4043:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc = clust2sect(fs, fp->clust);
 7813              		.loc 1 4043 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 261


 7814 00da 07F1FF39 		add	r9, r7, #-1
 7815 00de 4946     		mov	r1, r9
 7816 00e0 2046     		mov	r0, r4
 7817 00e2 FFF7FEFF 		bl	clmt_clust
 7818              	.LVL1161:
 7819 00e6 0146     		mov	r1, r0
 7820 00e8 E061     		str	r0, [r4, #28]
4044:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!dsc) ABORT(fs, FR_INT_ERR);
 7821              		.loc 1 4044 0
 7822 00ea DDF80C80 		ldr	r8, [sp, #12]
 7823 00ee 4046     		mov	r0, r8
 7824 00f0 FFF7FEFF 		bl	clust2sect
 7825              	.LVL1162:
4045:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 7826              		.loc 1 4045 0
 7827 00f4 D8B1     		cbz	r0, .L792
4046:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 7828              		.loc 1 4046 0
 7829 00f6 B8F80A60 		ldrh	r6, [r8, #10]
 7830 00fa 013E     		subs	r6, r6, #1
 7831 00fc 06EA5926 		and	r6, r6, r9, lsr #9
 7832 0100 0644     		add	r6, r6, r0
 7833              	.LVL1163:
4047:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 7834              		.loc 1 4047 0
 7835 0102 C7F30807 		ubfx	r7, r7, #0, #9
 7836              	.LVL1164:
 7837 0106 002F     		cmp	r7, #0
 7838 0108 95D0     		beq	.L753
4047:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 7839              		.loc 1 4047 0 is_stmt 0 discriminator 1
 7840 010a 226A     		ldr	r2, [r4, #32]
 7841 010c B242     		cmp	r2, r6
 7842 010e 92D0     		beq	.L753
4050:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 7843              		.loc 1 4050 0 is_stmt 1
 7844 0110 94F91430 		ldrsb	r3, [r4, #20]
 7845 0114 002B     		cmp	r3, #0
 7846 0116 11DB     		blt	.L793
 7847              	.L756:
4055:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 7848              		.loc 1 4055 0
 7849 0118 0123     		movs	r3, #1
 7850 011a 3246     		mov	r2, r6
 7851 011c 04F13001 		add	r1, r4, #48
 7852 0120 0398     		ldr	r0, [sp, #12]
 7853 0122 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 7854 0124 FFF7FEFF 		bl	disk_read
 7855              	.LVL1165:
 7856 0128 E0B9     		cbnz	r0, .L794
4057:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7857              		.loc 1 4057 0
 7858 012a 2662     		str	r6, [r4, #32]
 7859 012c 83E7     		b	.L753
 7860              	.LVL1166:
 7861              	.L792:
4045:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 262


 7862              		.loc 1 4045 0 discriminator 1
 7863 012e 0225     		movs	r5, #2
 7864              	.LVL1167:
 7865 0130 6575     		strb	r5, [r4, #21]
 7866 0132 2946     		mov	r1, r5
 7867 0134 4046     		mov	r0, r8
 7868              	.LVL1168:
 7869 0136 FFF7FEFF 		bl	unlock_fs
 7870              	.LVL1169:
 7871 013a 80E7     		b	.L744
 7872              	.LVL1170:
 7873              	.L793:
4051:Middlewares/Third_Party/FatFs/src/ff.c **** 						fp->flag &= (BYTE)~FA_DIRTY;
 7874              		.loc 1 4051 0
 7875 013c 0123     		movs	r3, #1
 7876 013e 04F13001 		add	r1, r4, #48
 7877 0142 98F80100 		ldrb	r0, [r8, #1]	@ zero_extendqisi2
 7878 0146 FFF7FEFF 		bl	disk_write
 7879              	.LVL1171:
 7880 014a 20B9     		cbnz	r0, .L795
4052:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 7881              		.loc 1 4052 0
 7882 014c 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 7883 014e 03F07F03 		and	r3, r3, #127
 7884 0152 2375     		strb	r3, [r4, #20]
 7885 0154 E0E7     		b	.L756
 7886              	.L795:
4051:Middlewares/Third_Party/FatFs/src/ff.c **** 						fp->flag &= (BYTE)~FA_DIRTY;
 7887              		.loc 1 4051 0 discriminator 1
 7888 0156 0125     		movs	r5, #1
 7889              	.LVL1172:
 7890 0158 6575     		strb	r5, [r4, #21]
 7891 015a 2946     		mov	r1, r5
 7892 015c 0398     		ldr	r0, [sp, #12]
 7893 015e FFF7FEFF 		bl	unlock_fs
 7894              	.LVL1173:
 7895 0162 6CE7     		b	.L744
 7896              	.LVL1174:
 7897              	.L794:
4055:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 7898              		.loc 1 4055 0 discriminator 1
 7899 0164 0125     		movs	r5, #1
 7900              	.LVL1175:
 7901 0166 6575     		strb	r5, [r4, #21]
 7902 0168 2946     		mov	r1, r5
 7903 016a 0398     		ldr	r0, [sp, #12]
 7904 016c FFF7FEFF 		bl	unlock_fs
 7905              	.LVL1176:
 7906 0170 65E7     		b	.L744
 7907              	.LVL1177:
 7908              	.L745:
4069:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs = fp->obj.objsize;
 7909              		.loc 1 4069 0
 7910 0172 E368     		ldr	r3, [r4, #12]
 7911 0174 B342     		cmp	r3, r6
 7912 0176 04D2     		bcs	.L759
4069:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs = fp->obj.objsize;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 263


 7913              		.loc 1 4069 0 is_stmt 0 discriminator 1
 7914 0178 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 7915 017a 12F0020F 		tst	r2, #2
 7916 017e 00D1     		bne	.L759
4070:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 7917              		.loc 1 4070 0 is_stmt 1
 7918 0180 1E46     		mov	r6, r3
 7919              	.LVL1178:
 7920              	.L759:
4072:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->fptr = nsect = 0;
 7921              		.loc 1 4072 0
 7922 0182 A369     		ldr	r3, [r4, #24]
 7923              	.LVL1179:
4073:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs) {
 7924              		.loc 1 4073 0
 7925 0184 0022     		movs	r2, #0
 7926 0186 A261     		str	r2, [r4, #24]
4074:Middlewares/Third_Party/FatFs/src/ff.c **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 7927              		.loc 1 4074 0
 7928 0188 002E     		cmp	r6, #0
 7929 018a 7BD0     		beq	.L783
4075:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ifptr > 0 &&
 7930              		.loc 1 4075 0
 7931 018c 039A     		ldr	r2, [sp, #12]
 7932 018e B2F80A80 		ldrh	r8, [r2, #10]
 7933 0192 4FEA4828 		lsl	r8, r8, #9
 7934              	.LVL1180:
4076:Middlewares/Third_Party/FatFs/src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 7935              		.loc 1 4076 0
 7936 0196 73B1     		cbz	r3, .L761
4077:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 7937              		.loc 1 4077 0 discriminator 1
 7938 0198 721E     		subs	r2, r6, #1
 7939 019a B2FBF8F2 		udiv	r2, r2, r8
 7940 019e 013B     		subs	r3, r3, #1
 7941              	.LVL1181:
 7942 01a0 B3FBF8F1 		udiv	r1, r3, r8
4076:Middlewares/Third_Party/FatFs/src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 7943              		.loc 1 4076 0 discriminator 1
 7944 01a4 8A42     		cmp	r2, r1
 7945 01a6 06D3     		bcc	.L761
4078:Middlewares/Third_Party/FatFs/src/ff.c **** 				ofs -= fp->fptr;
 7946              		.loc 1 4078 0
 7947 01a8 C8F10002 		rsb	r2, r8, #0
 7948 01ac 1340     		ands	r3, r3, r2
 7949              	.LVL1182:
 7950 01ae A361     		str	r3, [r4, #24]
4079:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = fp->clust;
 7951              		.loc 1 4079 0
 7952 01b0 F61A     		subs	r6, r6, r3
 7953              	.LVL1183:
4080:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {									/* When seek to back cluster, */
 7954              		.loc 1 4080 0
 7955 01b2 E769     		ldr	r7, [r4, #28]
 7956              	.LVL1184:
 7957 01b4 02E0     		b	.L762
 7958              	.LVL1185:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 264


 7959              	.L761:
4082:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 7960              		.loc 1 4082 0
 7961 01b6 A768     		ldr	r7, [r4, #8]
 7962              	.LVL1186:
4084:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = create_chain(&fp->obj, 0);
 7963              		.loc 1 4084 0
 7964 01b8 17B1     		cbz	r7, .L796
 7965              	.L763:
4091:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 7966              		.loc 1 4091 0
 7967 01ba E761     		str	r7, [r4, #28]
 7968              	.L762:
4093:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 7969              		.loc 1 4093 0
 7970 01bc 4FBB     		cbnz	r7, .L766
 7971 01be 62E0     		b	.L760
 7972              	.L796:
4085:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
 7973              		.loc 1 4085 0
 7974 01c0 0021     		movs	r1, #0
 7975 01c2 2046     		mov	r0, r4
 7976 01c4 FFF7FEFF 		bl	create_chain
 7977              	.LVL1187:
 7978 01c8 0746     		mov	r7, r0
 7979              	.LVL1188:
4086:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 7980              		.loc 1 4086 0
 7981 01ca 0128     		cmp	r0, #1
 7982 01cc 04D0     		beq	.L797
4087:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.sclust = clst;
 7983              		.loc 1 4087 0
 7984 01ce B0F1FF3F 		cmp	r0, #-1
 7985 01d2 08D0     		beq	.L798
4088:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7986              		.loc 1 4088 0
 7987 01d4 A060     		str	r0, [r4, #8]
 7988 01d6 F0E7     		b	.L763
 7989              	.L797:
4086:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 7990              		.loc 1 4086 0 discriminator 1
 7991 01d8 0225     		movs	r5, #2
 7992              	.LVL1189:
 7993 01da 6575     		strb	r5, [r4, #21]
 7994 01dc 2946     		mov	r1, r5
 7995 01de 0398     		ldr	r0, [sp, #12]
 7996              	.LVL1190:
 7997 01e0 FFF7FEFF 		bl	unlock_fs
 7998              	.LVL1191:
 7999 01e4 2BE7     		b	.L744
 8000              	.LVL1192:
 8001              	.L798:
4087:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.sclust = clst;
 8002              		.loc 1 4087 0 discriminator 1
 8003 01e6 0125     		movs	r5, #1
 8004              	.LVL1193:
 8005 01e8 6575     		strb	r5, [r4, #21]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 265


 8006 01ea 2946     		mov	r1, r5
 8007 01ec 0398     		ldr	r0, [sp, #12]
 8008              	.LVL1194:
 8009 01ee FFF7FEFF 		bl	unlock_fs
 8010              	.LVL1195:
 8011 01f2 24E7     		b	.L744
 8012              	.LVL1196:
 8013              	.L767:
4109:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 8014              		.loc 1 4109 0
 8015 01f4 3946     		mov	r1, r7
 8016 01f6 0198     		ldr	r0, [sp, #4]
 8017 01f8 FFF7FEFF 		bl	get_fat
 8018              	.LVL1197:
 8019 01fc 0746     		mov	r7, r0
 8020              	.LVL1198:
 8021              	.L769:
4111:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8022              		.loc 1 4111 0
 8023 01fe B7F1FF3F 		cmp	r7, #-1
 8024 0202 2AD0     		beq	.L799
4112:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->clust = clst;
 8025              		.loc 1 4112 0
 8026 0204 012F     		cmp	r7, #1
 8027 0206 2FD9     		bls	.L771
4112:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->clust = clst;
 8028              		.loc 1 4112 0 is_stmt 0 discriminator 2
 8029 0208 039B     		ldr	r3, [sp, #12]
 8030 020a 1B6A     		ldr	r3, [r3, #32]
 8031 020c BB42     		cmp	r3, r7
 8032 020e 2BD9     		bls	.L771
4113:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8033              		.loc 1 4113 0 is_stmt 1
 8034 0210 E761     		str	r7, [r4, #28]
 8035              	.LVL1199:
 8036              	.L766:
4094:Middlewares/Third_Party/FatFs/src/ff.c **** 					ofs -= bcs; fp->fptr += bcs;
 8037              		.loc 1 4094 0
 8038 0212 4645     		cmp	r6, r8
 8039 0214 10D9     		bls	.L768
4095:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 8040              		.loc 1 4095 0
 8041 0216 A6EB0806 		sub	r6, r6, r8
 8042              	.LVL1200:
 8043 021a A369     		ldr	r3, [r4, #24]
 8044 021c 4344     		add	r3, r3, r8
 8045 021e A361     		str	r3, [r4, #24]
4097:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize t
 8046              		.loc 1 4097 0
 8047 0220 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 8048 0222 13F0020F 		tst	r3, #2
 8049 0226 E5D0     		beq	.L767
4102:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (clst == 0) {				/* Clip file size in case of disk full */
 8050              		.loc 1 4102 0
 8051 0228 3946     		mov	r1, r7
 8052 022a 0198     		ldr	r0, [sp, #4]
 8053 022c FFF7FEFF 		bl	create_chain
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 266


 8054              	.LVL1201:
4103:Middlewares/Third_Party/FatFs/src/ff.c **** 							ofs = 0; break;
 8055              		.loc 1 4103 0
 8056 0230 0746     		mov	r7, r0
 8057 0232 0028     		cmp	r0, #0
 8058 0234 E3D1     		bne	.L769
4104:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
 8059              		.loc 1 4104 0
 8060 0236 0026     		movs	r6, #0
 8061              	.LVL1202:
 8062              	.L768:
4115:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ofs % SS(fs)) {
 8063              		.loc 1 4115 0
 8064 0238 A369     		ldr	r3, [r4, #24]
 8065 023a 3344     		add	r3, r3, r6
 8066 023c A361     		str	r3, [r4, #24]
4116:Middlewares/Third_Party/FatFs/src/ff.c **** 					nsect = clust2sect(fs, clst);	/* Current sector */
 8067              		.loc 1 4116 0
 8068 023e C6F30803 		ubfx	r3, r6, #0, #9
 8069 0242 002B     		cmp	r3, #0
 8070 0244 40D0     		beq	.L785
4117:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!nsect) ABORT(fs, FR_INT_ERR);
 8071              		.loc 1 4117 0
 8072 0246 DDF80C80 		ldr	r8, [sp, #12]
 8073              	.LVL1203:
 8074 024a 3946     		mov	r1, r7
 8075 024c 4046     		mov	r0, r8
 8076 024e FFF7FEFF 		bl	clust2sect
 8077              	.LVL1204:
4118:Middlewares/Third_Party/FatFs/src/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
 8078              		.loc 1 4118 0
 8079 0252 80B1     		cbz	r0, .L800
4119:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8080              		.loc 1 4119 0
 8081 0254 00EB5627 		add	r7, r0, r6, lsr #9
 8082              	.LVL1205:
 8083 0258 15E0     		b	.L760
 8084              	.LVL1206:
 8085              	.L799:
4111:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8086              		.loc 1 4111 0 discriminator 1
 8087 025a 0125     		movs	r5, #1
 8088              	.LVL1207:
 8089 025c 6575     		strb	r5, [r4, #21]
 8090 025e 2946     		mov	r1, r5
 8091 0260 0398     		ldr	r0, [sp, #12]
 8092              	.LVL1208:
 8093 0262 FFF7FEFF 		bl	unlock_fs
 8094              	.LVL1209:
 8095 0266 EAE6     		b	.L744
 8096              	.LVL1210:
 8097              	.L771:
4112:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->clust = clst;
 8098              		.loc 1 4112 0 discriminator 3
 8099 0268 0225     		movs	r5, #2
 8100              	.LVL1211:
 8101 026a 6575     		strb	r5, [r4, #21]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 267


 8102 026c 2946     		mov	r1, r5
 8103 026e 0398     		ldr	r0, [sp, #12]
 8104              	.LVL1212:
 8105 0270 FFF7FEFF 		bl	unlock_fs
 8106              	.LVL1213:
 8107 0274 E3E6     		b	.L744
 8108              	.LVL1214:
 8109              	.L800:
4118:Middlewares/Third_Party/FatFs/src/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
 8110              		.loc 1 4118 0 discriminator 1
 8111 0276 0225     		movs	r5, #2
 8112              	.LVL1215:
 8113 0278 6575     		strb	r5, [r4, #21]
 8114 027a 2946     		mov	r1, r5
 8115 027c 4046     		mov	r0, r8
 8116              	.LVL1216:
 8117 027e FFF7FEFF 		bl	unlock_fs
 8118              	.LVL1217:
 8119 0282 DCE6     		b	.L744
 8120              	.LVL1218:
 8121              	.L783:
4073:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs) {
 8122              		.loc 1 4073 0
 8123 0284 0027     		movs	r7, #0
 8124              	.LVL1219:
 8125              	.L760:
4123:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.objsize = fp->fptr;
 8126              		.loc 1 4123 0
 8127 0286 A369     		ldr	r3, [r4, #24]
 8128 0288 E268     		ldr	r2, [r4, #12]
 8129 028a 9342     		cmp	r3, r2
 8130 028c 04D9     		bls	.L775
4124:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->flag |= FA_MODIFIED;
 8131              		.loc 1 4124 0
 8132 028e E360     		str	r3, [r4, #12]
4125:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8133              		.loc 1 4125 0
 8134 0290 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 8135 0292 42F04002 		orr	r2, r2, #64
 8136 0296 2275     		strb	r2, [r4, #20]
 8137              	.L775:
4127:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 8138              		.loc 1 4127 0
 8139 0298 C3F30803 		ubfx	r3, r3, #0, #9
 8140 029c 002B     		cmp	r3, #0
 8141 029e 3FF4CAAE 		beq	.L753
4127:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 8142              		.loc 1 4127 0 is_stmt 0 discriminator 1
 8143 02a2 226A     		ldr	r2, [r4, #32]
 8144 02a4 BA42     		cmp	r2, r7
 8145 02a6 3FF4C6AE 		beq	.L753
4130:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8146              		.loc 1 4130 0 is_stmt 1
 8147 02aa 94F91430 		ldrsb	r3, [r4, #20]
 8148 02ae 002B     		cmp	r3, #0
 8149 02b0 0CDB     		blt	.L801
 8150              	.L776:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 268


4135:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 8151              		.loc 1 4135 0
 8152 02b2 0123     		movs	r3, #1
 8153 02b4 3A46     		mov	r2, r7
 8154 02b6 04F13001 		add	r1, r4, #48
 8155 02ba 0398     		ldr	r0, [sp, #12]
 8156 02bc 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 8157 02be FFF7FEFF 		bl	disk_read
 8158              	.LVL1220:
 8159 02c2 B8B9     		cbnz	r0, .L802
4137:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8160              		.loc 1 4137 0
 8161 02c4 2762     		str	r7, [r4, #32]
 8162 02c6 B6E6     		b	.L753
 8163              	.LVL1221:
 8164              	.L785:
4073:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs) {
 8165              		.loc 1 4073 0
 8166 02c8 0027     		movs	r7, #0
 8167              	.LVL1222:
 8168 02ca DCE7     		b	.L760
 8169              	.LVL1223:
 8170              	.L801:
4131:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8171              		.loc 1 4131 0
 8172 02cc 0123     		movs	r3, #1
 8173 02ce 04F13001 		add	r1, r4, #48
 8174 02d2 0398     		ldr	r0, [sp, #12]
 8175 02d4 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 8176 02d6 FFF7FEFF 		bl	disk_write
 8177              	.LVL1224:
 8178 02da 20B9     		cbnz	r0, .L803
4132:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8179              		.loc 1 4132 0
 8180 02dc 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 8181 02de 03F07F03 		and	r3, r3, #127
 8182 02e2 2375     		strb	r3, [r4, #20]
 8183 02e4 E5E7     		b	.L776
 8184              	.L803:
4131:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8185              		.loc 1 4131 0 discriminator 1
 8186 02e6 0125     		movs	r5, #1
 8187              	.LVL1225:
 8188 02e8 6575     		strb	r5, [r4, #21]
 8189 02ea 2946     		mov	r1, r5
 8190 02ec 0398     		ldr	r0, [sp, #12]
 8191 02ee FFF7FEFF 		bl	unlock_fs
 8192              	.LVL1226:
 8193 02f2 A4E6     		b	.L744
 8194              	.LVL1227:
 8195              	.L802:
4135:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 8196              		.loc 1 4135 0 discriminator 1
 8197 02f4 0125     		movs	r5, #1
 8198              	.LVL1228:
 8199 02f6 6575     		strb	r5, [r4, #21]
 8200 02f8 2946     		mov	r1, r5
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 269


 8201 02fa 0398     		ldr	r0, [sp, #12]
 8202 02fc FFF7FEFF 		bl	unlock_fs
 8203              	.LVL1229:
 8204 0300 9DE6     		b	.L744
 8205              	.LVL1230:
 8206              	.L781:
4037:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8207              		.loc 1 4037 0
 8208 0302 1125     		movs	r5, #17
 8209              	.LVL1231:
 8210 0304 97E6     		b	.L753
 8211              		.cfi_endproc
 8212              	.LFE196:
 8214              		.section	.text.f_opendir,"ax",%progbits
 8215              		.align	1
 8216              		.global	f_opendir
 8217              		.syntax unified
 8218              		.thumb
 8219              		.thumb_func
 8220              		.fpu fpv5-sp-d16
 8222              	f_opendir:
 8223              	.LFB197:
4155:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 8224              		.loc 1 4155 0
 8225              		.cfi_startproc
 8226              		@ args = 0, pretend = 0, frame = 16
 8227              		@ frame_needed = 0, uses_anonymous_args = 0
 8228              	.LVL1232:
 8229 0000 70B5     		push	{r4, r5, r6, lr}
 8230              	.LCFI102:
 8231              		.cfi_def_cfa_offset 16
 8232              		.cfi_offset 4, -16
 8233              		.cfi_offset 5, -12
 8234              		.cfi_offset 6, -8
 8235              		.cfi_offset 14, -4
 8236 0002 84B0     		sub	sp, sp, #16
 8237              	.LCFI103:
 8238              		.cfi_def_cfa_offset 32
 8239 0004 0191     		str	r1, [sp, #4]
4162:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8240              		.loc 1 4162 0
 8241 0006 0028     		cmp	r0, #0
 8242 0008 52D0     		beq	.L813
 8243 000a 0546     		mov	r5, r0
 8244              	.LVL1233:
4166:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 8245              		.loc 1 4166 0
 8246 000c 0022     		movs	r2, #0
 8247 000e 03A9     		add	r1, sp, #12
 8248              	.LVL1234:
 8249 0010 01A8     		add	r0, sp, #4
 8250              	.LVL1235:
 8251 0012 FFF7FEFF 		bl	find_volume
 8252              	.LVL1236:
4167:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->fs = fs;
 8253              		.loc 1 4167 0
 8254 0016 0446     		mov	r4, r0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 270


 8255 0018 48B1     		cbz	r0, .L818
 8256              	.L806:
4209:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8257              		.loc 1 4209 0
 8258 001a 0CB1     		cbz	r4, .L812
 8259              	.L811:
4209:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8260              		.loc 1 4209 0 is_stmt 0 discriminator 1
 8261 001c 0023     		movs	r3, #0
 8262 001e 2B60     		str	r3, [r5]
 8263              	.L812:
4211:Middlewares/Third_Party/FatFs/src/ff.c **** }
 8264              		.loc 1 4211 0 is_stmt 1
 8265 0020 2146     		mov	r1, r4
 8266 0022 0398     		ldr	r0, [sp, #12]
 8267 0024 FFF7FEFF 		bl	unlock_fs
 8268              	.LVL1237:
 8269              	.L805:
4212:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8270              		.loc 1 4212 0
 8271 0028 2046     		mov	r0, r4
 8272 002a 04B0     		add	sp, sp, #16
 8273              	.LCFI104:
 8274              		.cfi_remember_state
 8275              		.cfi_def_cfa_offset 16
 8276              		@ sp needed
 8277 002c 70BD     		pop	{r4, r5, r6, pc}
 8278              	.LVL1238:
 8279              	.L818:
 8280              	.LCFI105:
 8281              		.cfi_restore_state
4168:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
 8282              		.loc 1 4168 0
 8283 002e 039B     		ldr	r3, [sp, #12]
 8284 0030 2B60     		str	r3, [r5]
4169:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 8285              		.loc 1 4169 0
 8286 0032 4FF40070 		mov	r0, #512
 8287 0036 FFF7FEFF 		bl	ff_memalloc
 8288              	.LVL1239:
 8289 003a 0646     		mov	r6, r0
 8290 003c 10B3     		cbz	r0, .L819
4169:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 8291              		.loc 1 4169 0 is_stmt 0 discriminator 2
 8292 003e 039B     		ldr	r3, [sp, #12]
 8293 0040 D860     		str	r0, [r3, #12]
4170:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 8294              		.loc 1 4170 0 is_stmt 1 discriminator 2
 8295 0042 0199     		ldr	r1, [sp, #4]
 8296 0044 2846     		mov	r0, r5
 8297              	.LVL1240:
 8298 0046 FFF7FEFF 		bl	follow_path
 8299              	.LVL1241:
4171:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8300              		.loc 1 4171 0 discriminator 2
 8301 004a 0446     		mov	r4, r0
 8302 004c 48BB     		cbnz	r0, .L808
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 271


4172:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8303              		.loc 1 4172 0
 8304 004e 95F92F30 		ldrsb	r3, [r5, #47]
 8305 0052 002B     		cmp	r3, #0
 8306 0054 08DB     		blt	.L809
4173:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 8307              		.loc 1 4173 0
 8308 0056 AB79     		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 8309 0058 13F0100F 		tst	r3, #16
 8310 005c 20D0     		beq	.L814
4185:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 8311              		.loc 1 4185 0
 8312 005e 296A     		ldr	r1, [r5, #32]
 8313 0060 0398     		ldr	r0, [sp, #12]
 8314 0062 FFF7FEFF 		bl	ld_clust
 8315              	.LVL1242:
 8316 0066 A860     		str	r0, [r5, #8]
 8317              	.L809:
4192:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 8318              		.loc 1 4192 0
 8319 0068 039B     		ldr	r3, [sp, #12]
 8320 006a DB88     		ldrh	r3, [r3, #6]
 8321 006c AB80     		strh	r3, [r5, #4]	@ movhi
4193:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 8322              		.loc 1 4193 0
 8323 006e 0021     		movs	r1, #0
 8324 0070 2846     		mov	r0, r5
 8325 0072 FFF7FEFF 		bl	dir_sdi
 8326              	.LVL1243:
4195:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (obj->sclust) {
 8327              		.loc 1 4195 0
 8328 0076 0446     		mov	r4, r0
 8329 0078 98B9     		cbnz	r0, .L808
4196:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8330              		.loc 1 4196 0
 8331 007a AB68     		ldr	r3, [r5, #8]
 8332 007c 43B9     		cbnz	r3, .L820
4200:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 8333              		.loc 1 4200 0
 8334 007e 0023     		movs	r3, #0
 8335 0080 2B61     		str	r3, [r5, #16]
 8336 0082 0EE0     		b	.L808
 8337              	.LVL1244:
 8338              	.L819:
4169:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 8339              		.loc 1 4169 0 discriminator 1
 8340 0084 1121     		movs	r1, #17
 8341 0086 0398     		ldr	r0, [sp, #12]
 8342              	.LVL1245:
 8343 0088 FFF7FEFF 		bl	unlock_fs
 8344              	.LVL1246:
 8345 008c 1124     		movs	r4, #17
 8346 008e CBE7     		b	.L805
 8347              	.LVL1247:
 8348              	.L820:
4197:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8349              		.loc 1 4197 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 272


 8350 0090 0021     		movs	r1, #0
 8351 0092 2846     		mov	r0, r5
 8352 0094 FFF7FEFF 		bl	inc_lock
 8353              	.LVL1248:
 8354 0098 2861     		str	r0, [r5, #16]
4198:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {
 8355              		.loc 1 4198 0
 8356 009a 10B9     		cbnz	r0, .L808
 8357              	.LVL1249:
 8358 009c 1224     		movs	r4, #18
 8359 009e 00E0     		b	.L808
 8360              	.LVL1250:
 8361              	.L814:
4188:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8362              		.loc 1 4188 0
 8363 00a0 0524     		movs	r4, #5
 8364              	.LVL1251:
 8365              	.L808:
4206:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8366              		.loc 1 4206 0
 8367 00a2 3046     		mov	r0, r6
 8368 00a4 FFF7FEFF 		bl	ff_memfree
 8369              	.LVL1252:
4207:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 8370              		.loc 1 4207 0
 8371 00a8 042C     		cmp	r4, #4
 8372 00aa B6D1     		bne	.L806
 8373              	.LVL1253:
 8374 00ac 0524     		movs	r4, #5
 8375 00ae B5E7     		b	.L811
 8376              	.LVL1254:
 8377              	.L813:
4162:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8378              		.loc 1 4162 0
 8379 00b0 0924     		movs	r4, #9
 8380 00b2 B9E7     		b	.L805
 8381              		.cfi_endproc
 8382              	.LFE197:
 8384              		.section	.text.f_closedir,"ax",%progbits
 8385              		.align	1
 8386              		.global	f_closedir
 8387              		.syntax unified
 8388              		.thumb
 8389              		.thumb_func
 8390              		.fpu fpv5-sp-d16
 8392              	f_closedir:
 8393              	.LFB198:
4224:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 8394              		.loc 1 4224 0
 8395              		.cfi_startproc
 8396              		@ args = 0, pretend = 0, frame = 8
 8397              		@ frame_needed = 0, uses_anonymous_args = 0
 8398              	.LVL1255:
 8399 0000 30B5     		push	{r4, r5, lr}
 8400              	.LCFI106:
 8401              		.cfi_def_cfa_offset 12
 8402              		.cfi_offset 4, -12
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 273


 8403              		.cfi_offset 5, -8
 8404              		.cfi_offset 14, -4
 8405 0002 83B0     		sub	sp, sp, #12
 8406              	.LCFI107:
 8407              		.cfi_def_cfa_offset 24
 8408 0004 0546     		mov	r5, r0
4229:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 8409              		.loc 1 4229 0
 8410 0006 01A9     		add	r1, sp, #4
 8411 0008 FFF7FEFF 		bl	validate
 8412              	.LVL1256:
4230:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 8413              		.loc 1 4230 0
 8414 000c 0446     		mov	r4, r0
 8415 000e 40B9     		cbnz	r0, .L822
4232:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dec_lock(dp->obj.lockid);
 8416              		.loc 1 4232 0
 8417 0010 2869     		ldr	r0, [r5, #16]
 8418              	.LVL1257:
 8419 0012 48B9     		cbnz	r0, .L826
 8420              	.L823:
 8421              	.LVL1258:
4235:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 8422              		.loc 1 4235 0
 8423 0014 0CB9     		cbnz	r4, .L824
4238:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8424              		.loc 1 4238 0
 8425 0016 0023     		movs	r3, #0
 8426 0018 2B60     		str	r3, [r5]
 8427              	.L824:
4241:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 8428              		.loc 1 4241 0
 8429 001a 0021     		movs	r1, #0
 8430 001c 0198     		ldr	r0, [sp, #4]
 8431 001e FFF7FEFF 		bl	unlock_fs
 8432              	.LVL1259:
 8433              	.L822:
4245:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8434              		.loc 1 4245 0
 8435 0022 2046     		mov	r0, r4
 8436 0024 03B0     		add	sp, sp, #12
 8437              	.LCFI108:
 8438              		.cfi_remember_state
 8439              		.cfi_def_cfa_offset 12
 8440              		@ sp needed
 8441 0026 30BD     		pop	{r4, r5, pc}
 8442              	.LVL1260:
 8443              	.L826:
 8444              	.LCFI109:
 8445              		.cfi_restore_state
4233:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8446              		.loc 1 4233 0
 8447 0028 FFF7FEFF 		bl	dec_lock
 8448              	.LVL1261:
 8449 002c 0446     		mov	r4, r0
 8450              	.LVL1262:
 8451 002e F1E7     		b	.L823
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 274


 8452              		.cfi_endproc
 8453              	.LFE198:
 8455              		.section	.text.f_readdir,"ax",%progbits
 8456              		.align	1
 8457              		.global	f_readdir
 8458              		.syntax unified
 8459              		.thumb
 8460              		.thumb_func
 8461              		.fpu fpv5-sp-d16
 8463              	f_readdir:
 8464              	.LFB199:
4258:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 8465              		.loc 1 4258 0
 8466              		.cfi_startproc
 8467              		@ args = 0, pretend = 0, frame = 8
 8468              		@ frame_needed = 0, uses_anonymous_args = 0
 8469              	.LVL1263:
 8470 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 8471              	.LCFI110:
 8472              		.cfi_def_cfa_offset 20
 8473              		.cfi_offset 4, -20
 8474              		.cfi_offset 5, -16
 8475              		.cfi_offset 6, -12
 8476              		.cfi_offset 7, -8
 8477              		.cfi_offset 14, -4
 8478 0002 83B0     		sub	sp, sp, #12
 8479              	.LCFI111:
 8480              		.cfi_def_cfa_offset 32
 8481 0004 0546     		mov	r5, r0
 8482 0006 0E46     		mov	r6, r1
4264:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 8483              		.loc 1 4264 0
 8484 0008 01A9     		add	r1, sp, #4
 8485              	.LVL1264:
 8486 000a FFF7FEFF 		bl	validate
 8487              	.LVL1265:
4265:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!fno) {
 8488              		.loc 1 4265 0
 8489 000e 0446     		mov	r4, r0
 8490 0010 58BB     		cbnz	r0, .L828
4266:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8491              		.loc 1 4266 0
 8492 0012 D6B1     		cbz	r6, .L836
4269:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8493              		.loc 1 4269 0
 8494 0014 4FF40070 		mov	r0, #512
 8495              	.LVL1266:
 8496 0018 FFF7FEFF 		bl	ff_memalloc
 8497              	.LVL1267:
 8498 001c 0746     		mov	r7, r0
 8499 001e D0B1     		cbz	r0, .L837
4269:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8500              		.loc 1 4269 0 is_stmt 0 discriminator 2
 8501 0020 019B     		ldr	r3, [sp, #4]
 8502 0022 D860     		str	r0, [r3, #12]
4270:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8503              		.loc 1 4270 0 is_stmt 1 discriminator 2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 275


 8504 0024 0021     		movs	r1, #0
 8505 0026 2846     		mov	r0, r5
 8506              	.LVL1268:
 8507 0028 FFF7FEFF 		bl	dir_read
 8508              	.LVL1269:
4271:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
 8509              		.loc 1 4271 0 discriminator 2
 8510 002c 0428     		cmp	r0, #4
 8511 002e 00D0     		beq	.L832
4272:Middlewares/Third_Party/FatFs/src/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 8512              		.loc 1 4272 0
 8513 0030 B8B9     		cbnz	r0, .L834
 8514              	.L832:
4273:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
 8515              		.loc 1 4273 0
 8516 0032 3146     		mov	r1, r6
 8517 0034 2846     		mov	r0, r5
 8518              	.LVL1270:
 8519 0036 FFF7FEFF 		bl	get_fileinfo
 8520              	.LVL1271:
4274:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8521              		.loc 1 4274 0
 8522 003a 0021     		movs	r1, #0
 8523 003c 2846     		mov	r0, r5
 8524 003e FFF7FEFF 		bl	dir_next
 8525              	.LVL1272:
4275:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8526              		.loc 1 4275 0
 8527 0042 0428     		cmp	r0, #4
 8528 0044 0ED0     		beq	.L833
4274:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8529              		.loc 1 4274 0
 8530 0046 0446     		mov	r4, r0
 8531 0048 0CE0     		b	.L833
 8532              	.LVL1273:
 8533              	.L836:
4267:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 8534              		.loc 1 4267 0
 8535 004a 0021     		movs	r1, #0
 8536 004c 2846     		mov	r0, r5
 8537              	.LVL1274:
 8538 004e FFF7FEFF 		bl	dir_sdi
 8539              	.LVL1275:
 8540 0052 0446     		mov	r4, r0
 8541              	.LVL1276:
 8542 0054 09E0     		b	.L828
 8543              	.LVL1277:
 8544              	.L837:
4269:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8545              		.loc 1 4269 0 discriminator 1
 8546 0056 1121     		movs	r1, #17
 8547 0058 0198     		ldr	r0, [sp, #4]
 8548              	.LVL1278:
 8549 005a FFF7FEFF 		bl	unlock_fs
 8550              	.LVL1279:
 8551 005e 1124     		movs	r4, #17
 8552 0060 07E0     		b	.L831
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 276


 8553              	.LVL1280:
 8554              	.L834:
4270:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8555              		.loc 1 4270 0
 8556 0062 0446     		mov	r4, r0
 8557              	.L833:
 8558              	.LVL1281:
4277:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8559              		.loc 1 4277 0
 8560 0064 3846     		mov	r0, r7
 8561 0066 FFF7FEFF 		bl	ff_memfree
 8562              	.LVL1282:
 8563              	.L828:
4280:Middlewares/Third_Party/FatFs/src/ff.c **** }
 8564              		.loc 1 4280 0
 8565 006a 2146     		mov	r1, r4
 8566 006c 0198     		ldr	r0, [sp, #4]
 8567 006e FFF7FEFF 		bl	unlock_fs
 8568              	.LVL1283:
 8569              	.L831:
4281:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8570              		.loc 1 4281 0
 8571 0072 2046     		mov	r0, r4
 8572 0074 03B0     		add	sp, sp, #12
 8573              	.LCFI112:
 8574              		.cfi_def_cfa_offset 20
 8575              		@ sp needed
 8576 0076 F0BD     		pop	{r4, r5, r6, r7, pc}
 8577              		.cfi_endproc
 8578              	.LFE199:
 8580              		.section	.text.f_stat,"ax",%progbits
 8581              		.align	1
 8582              		.global	f_stat
 8583              		.syntax unified
 8584              		.thumb
 8585              		.thumb_func
 8586              		.fpu fpv5-sp-d16
 8588              	f_stat:
 8589              	.LFB200:
4346:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 8590              		.loc 1 4346 0
 8591              		.cfi_startproc
 8592              		@ args = 0, pretend = 0, frame = 64
 8593              		@ frame_needed = 0, uses_anonymous_args = 0
 8594              	.LVL1284:
 8595 0000 70B5     		push	{r4, r5, r6, lr}
 8596              	.LCFI113:
 8597              		.cfi_def_cfa_offset 16
 8598              		.cfi_offset 4, -16
 8599              		.cfi_offset 5, -12
 8600              		.cfi_offset 6, -8
 8601              		.cfi_offset 14, -4
 8602 0002 90B0     		sub	sp, sp, #64
 8603              	.LCFI114:
 8604              		.cfi_def_cfa_offset 80
 8605 0004 0190     		str	r0, [sp, #4]
 8606 0006 0E46     		mov	r6, r1
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 277


4353:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 8607              		.loc 1 4353 0
 8608 0008 0022     		movs	r2, #0
 8609 000a 03A9     		add	r1, sp, #12
 8610              	.LVL1285:
 8611 000c 01A8     		add	r0, sp, #4
 8612              	.LVL1286:
 8613 000e FFF7FEFF 		bl	find_volume
 8614              	.LVL1287:
4354:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(dj.obj.fs);
 8615              		.loc 1 4354 0
 8616 0012 0446     		mov	r4, r0
 8617 0014 08BB     		cbnz	r0, .L839
4355:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8618              		.loc 1 4355 0
 8619 0016 4FF40070 		mov	r0, #512
 8620              	.LVL1288:
 8621 001a FFF7FEFF 		bl	ff_memalloc
 8622              	.LVL1289:
 8623 001e 0546     		mov	r5, r0
 8624 0020 88B1     		cbz	r0, .L845
4355:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8625              		.loc 1 4355 0 is_stmt 0 discriminator 2
 8626 0022 039B     		ldr	r3, [sp, #12]
 8627 0024 D860     		str	r0, [r3, #12]
4356:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 8628              		.loc 1 4356 0 is_stmt 1 discriminator 2
 8629 0026 0199     		ldr	r1, [sp, #4]
 8630 0028 03A8     		add	r0, sp, #12
 8631              	.LVL1290:
 8632 002a FFF7FEFF 		bl	follow_path
 8633              	.LVL1291:
4357:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8634              		.loc 1 4357 0 discriminator 2
 8635 002e 0446     		mov	r4, r0
 8636 0030 80B9     		cbnz	r0, .L842
4358:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;
 8637              		.loc 1 4358 0
 8638 0032 9DF93B30 		ldrsb	r3, [sp, #59]
 8639 0036 002B     		cmp	r3, #0
 8640 0038 0BDB     		blt	.L843
4361:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8641              		.loc 1 4361 0
 8642 003a 5EB1     		cbz	r6, .L842
4361:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8643              		.loc 1 4361 0 is_stmt 0 discriminator 1
 8644 003c 3146     		mov	r1, r6
 8645 003e 03A8     		add	r0, sp, #12
 8646              	.LVL1292:
 8647 0040 FFF7FEFF 		bl	get_fileinfo
 8648              	.LVL1293:
 8649 0044 06E0     		b	.L842
 8650              	.LVL1294:
 8651              	.L845:
4355:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8652              		.loc 1 4355 0 is_stmt 1 discriminator 1
 8653 0046 1121     		movs	r1, #17
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 278


 8654 0048 0398     		ldr	r0, [sp, #12]
 8655              	.LVL1295:
 8656 004a FFF7FEFF 		bl	unlock_fs
 8657              	.LVL1296:
 8658 004e 1124     		movs	r4, #17
 8659 0050 07E0     		b	.L841
 8660              	.LVL1297:
 8661              	.L843:
4359:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {							/* Found an object */
 8662              		.loc 1 4359 0
 8663 0052 0624     		movs	r4, #6
 8664              	.LVL1298:
 8665              	.L842:
4364:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 8666              		.loc 1 4364 0
 8667 0054 2846     		mov	r0, r5
 8668 0056 FFF7FEFF 		bl	ff_memfree
 8669              	.LVL1299:
 8670              	.L839:
4367:Middlewares/Third_Party/FatFs/src/ff.c **** }
 8671              		.loc 1 4367 0
 8672 005a 2146     		mov	r1, r4
 8673 005c 0398     		ldr	r0, [sp, #12]
 8674 005e FFF7FEFF 		bl	unlock_fs
 8675              	.LVL1300:
 8676              	.L841:
4368:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8677              		.loc 1 4368 0
 8678 0062 2046     		mov	r0, r4
 8679 0064 10B0     		add	sp, sp, #64
 8680              	.LCFI115:
 8681              		.cfi_def_cfa_offset 16
 8682              		@ sp needed
 8683 0066 70BD     		pop	{r4, r5, r6, pc}
 8684              		.cfi_endproc
 8685              	.LFE200:
 8687              		.section	.text.f_getfree,"ax",%progbits
 8688              		.align	1
 8689              		.global	f_getfree
 8690              		.syntax unified
 8691              		.thumb
 8692              		.thumb_func
 8693              		.fpu fpv5-sp-d16
 8695              	f_getfree:
 8696              	.LFB201:
4382:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 8697              		.loc 1 4382 0
 8698              		.cfi_startproc
 8699              		@ args = 0, pretend = 0, frame = 32
 8700              		@ frame_needed = 0, uses_anonymous_args = 0
 8701              	.LVL1301:
 8702 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 8703              	.LCFI116:
 8704              		.cfi_def_cfa_offset 32
 8705              		.cfi_offset 4, -32
 8706              		.cfi_offset 5, -28
 8707              		.cfi_offset 6, -24
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 279


 8708              		.cfi_offset 7, -20
 8709              		.cfi_offset 8, -16
 8710              		.cfi_offset 9, -12
 8711              		.cfi_offset 10, -8
 8712              		.cfi_offset 14, -4
 8713 0004 88B0     		sub	sp, sp, #32
 8714              	.LCFI117:
 8715              		.cfi_def_cfa_offset 64
 8716 0006 0190     		str	r0, [sp, #4]
 8717 0008 8A46     		mov	r10, r1
 8718 000a 1446     		mov	r4, r2
4392:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 8719              		.loc 1 4392 0
 8720 000c 0022     		movs	r2, #0
 8721              	.LVL1302:
 8722 000e 07A9     		add	r1, sp, #28
 8723              	.LVL1303:
 8724 0010 01A8     		add	r0, sp, #4
 8725              	.LVL1304:
 8726 0012 FFF7FEFF 		bl	find_volume
 8727              	.LVL1305:
4393:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fatfs = fs;				/* Return ptr to the fs object */
 8728              		.loc 1 4393 0
 8729 0016 0746     		mov	r7, r0
 8730 0018 0028     		cmp	r0, #0
 8731 001a 5ED1     		bne	.L847
4394:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* If free_clst is valid, return it without full cluster scan */
 8732              		.loc 1 4394 0
 8733 001c 079B     		ldr	r3, [sp, #28]
 8734 001e 2360     		str	r3, [r4]
4396:Middlewares/Third_Party/FatFs/src/ff.c **** 			*nclst = fs->free_clst;
 8735              		.loc 1 4396 0
 8736 0020 9A69     		ldr	r2, [r3, #24]
 8737 0022 1D6A     		ldr	r5, [r3, #32]
 8738 0024 A91E     		subs	r1, r5, #2
 8739 0026 8A42     		cmp	r2, r1
 8740 0028 08D9     		bls	.L862
 8741              	.LVL1306:
4401:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = 2; obj.fs = fs;
 8742              		.loc 1 4401 0
 8743 002a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 8744 002c 012A     		cmp	r2, #1
 8745 002e 08D0     		beq	.L863
 8746              	.LVL1307:
4429:Middlewares/Third_Party/FatFs/src/ff.c **** 					i = 0; p = 0;
 8747              		.loc 1 4429 0
 8748 0030 D3F82C90 		ldr	r9, [r3, #44]
 8749              	.LVL1308:
4430:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
 8750              		.loc 1 4430 0
 8751 0034 0024     		movs	r4, #0
 8752              	.LVL1309:
 8753 0036 2646     		mov	r6, r4
4400:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8754              		.loc 1 4400 0
 8755 0038 A046     		mov	r8, r4
 8756 003a 35E0     		b	.L858
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 280


 8757              	.LVL1310:
 8758              	.L862:
4397:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 8759              		.loc 1 4397 0
 8760 003c CAF80020 		str	r2, [r10]
 8761 0040 4BE0     		b	.L847
 8762              	.LVL1311:
 8763              	.L863:
4402:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {
 8764              		.loc 1 4402 0
 8765 0042 0293     		str	r3, [sp, #8]
 8766 0044 0224     		movs	r4, #2
 8767              	.LVL1312:
4400:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8768              		.loc 1 4400 0
 8769 0046 4FF00008 		mov	r8, #0
 8770 004a 04E0     		b	.L852
 8771              	.LVL1313:
 8772              	.L851:
4408:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 8773              		.loc 1 4408 0
 8774 004c 0134     		adds	r4, r4, #1
 8775              	.LVL1314:
 8776 004e 079B     		ldr	r3, [sp, #28]
 8777 0050 1B6A     		ldr	r3, [r3, #32]
 8778 0052 A342     		cmp	r3, r4
 8779 0054 38D9     		bls	.L850
 8780              	.LVL1315:
 8781              	.L852:
4404:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8782              		.loc 1 4404 0
 8783 0056 2146     		mov	r1, r4
 8784 0058 02A8     		add	r0, sp, #8
 8785 005a FFF7FEFF 		bl	get_fat
 8786              	.LVL1316:
4405:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 8787              		.loc 1 4405 0
 8788 005e B0F1FF3F 		cmp	r0, #-1
 8789 0062 30D0     		beq	.L859
4406:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 0) nfree++;
 8790              		.loc 1 4406 0
 8791 0064 0128     		cmp	r0, #1
 8792 0066 40D0     		beq	.L860
4407:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (++clst < fs->n_fatent);
 8793              		.loc 1 4407 0
 8794 0068 0028     		cmp	r0, #0
 8795 006a EFD1     		bne	.L851
4407:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (++clst < fs->n_fatent);
 8796              		.loc 1 4407 0 is_stmt 0 discriminator 1
 8797 006c 08F10108 		add	r8, r8, #1
 8798              	.LVL1317:
 8799 0070 ECE7     		b	.L851
 8800              	.LVL1318:
 8801              	.L864:
4433:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res != FR_OK) break;
 8802              		.loc 1 4433 0 is_stmt 1
 8803 0072 09F10106 		add	r6, r9, #1
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 281


 8804              	.LVL1319:
 8805 0076 4946     		mov	r1, r9
 8806 0078 0798     		ldr	r0, [sp, #28]
 8807 007a FFF7FEFF 		bl	move_window
 8808              	.LVL1320:
4434:Middlewares/Third_Party/FatFs/src/ff.c **** 							p = fs->win;
 8809              		.loc 1 4434 0
 8810 007e 0746     		mov	r7, r0
 8811 0080 10BB     		cbnz	r0, .L850
4435:Middlewares/Third_Party/FatFs/src/ff.c **** 							i = SS(fs);
 8812              		.loc 1 4435 0
 8813 0082 079C     		ldr	r4, [sp, #28]
 8814              	.LVL1321:
 8815 0084 3C34     		adds	r4, r4, #60
 8816              	.LVL1322:
4433:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res != FR_OK) break;
 8817              		.loc 1 4433 0
 8818 0086 B146     		mov	r9, r6
4436:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
 8819              		.loc 1 4436 0
 8820 0088 4FF40076 		mov	r6, #512
 8821              	.LVL1323:
 8822 008c 0EE0     		b	.L853
 8823              	.LVL1324:
 8824              	.L865:
4439:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 2; i -= 2;
 8825              		.loc 1 4439 0
 8826 008e 2046     		mov	r0, r4
 8827 0090 FFF7FEFF 		bl	ld_word
 8828              	.LVL1325:
 8829 0094 08B9     		cbnz	r0, .L855
4439:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 2; i -= 2;
 8830              		.loc 1 4439 0 is_stmt 0 discriminator 1
 8831 0096 08F10108 		add	r8, r8, #1
 8832              	.LVL1326:
 8833              	.L855:
4440:Middlewares/Third_Party/FatFs/src/ff.c **** 						} else {
 8834              		.loc 1 4440 0 is_stmt 1
 8835 009a 0234     		adds	r4, r4, #2
 8836              	.LVL1327:
 8837 009c 023E     		subs	r6, r6, #2
 8838              	.LVL1328:
 8839 009e 01E0     		b	.L856
 8840              	.L857:
4443:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
 8841              		.loc 1 4443 0
 8842 00a0 0434     		adds	r4, r4, #4
 8843              	.LVL1329:
 8844 00a2 043E     		subs	r6, r6, #4
 8845              	.LVL1330:
 8846              	.L856:
4445:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8847              		.loc 1 4445 0
 8848 00a4 013D     		subs	r5, r5, #1
 8849              	.LVL1331:
 8850 00a6 0FD0     		beq	.L850
 8851              	.LVL1332:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 282


 8852              	.L858:
4432:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = move_window(fs, sect++);
 8853              		.loc 1 4432 0
 8854 00a8 002E     		cmp	r6, #0
 8855 00aa E2D0     		beq	.L864
 8856              	.LVL1333:
 8857              	.L853:
4438:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (ld_word(p) == 0) nfree++;
 8858              		.loc 1 4438 0
 8859 00ac 079B     		ldr	r3, [sp, #28]
 8860 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8861 00b0 022B     		cmp	r3, #2
 8862 00b2 ECD0     		beq	.L865
4442:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 4; i -= 4;
 8863              		.loc 1 4442 0
 8864 00b4 2046     		mov	r0, r4
 8865 00b6 FFF7FEFF 		bl	ld_dword
 8866              	.LVL1334:
 8867 00ba 30F07043 		bics	r3, r0, #-268435456
 8868 00be EFD1     		bne	.L857
4442:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 4; i -= 4;
 8869              		.loc 1 4442 0 is_stmt 0 discriminator 1
 8870 00c0 08F10108 		add	r8, r8, #1
 8871              	.LVL1335:
 8872 00c4 ECE7     		b	.L857
 8873              	.LVL1336:
 8874              	.L859:
4405:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 8875              		.loc 1 4405 0 is_stmt 1
 8876 00c6 0127     		movs	r7, #1
 8877              	.LVL1337:
 8878              	.L850:
4448:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->free_clst = nfree;	/* Now free_clst is valid */
 8879              		.loc 1 4448 0
 8880 00c8 CAF80080 		str	r8, [r10]
4449:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8881              		.loc 1 4449 0
 8882 00cc 079B     		ldr	r3, [sp, #28]
 8883 00ce C3F81880 		str	r8, [r3, #24]
4450:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8884              		.loc 1 4450 0
 8885 00d2 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 8886 00d4 42F00102 		orr	r2, r2, #1
 8887 00d8 1A71     		strb	r2, [r3, #4]
 8888              	.LVL1338:
 8889              	.L847:
4454:Middlewares/Third_Party/FatFs/src/ff.c **** }
 8890              		.loc 1 4454 0
 8891 00da 3946     		mov	r1, r7
 8892 00dc 0798     		ldr	r0, [sp, #28]
 8893 00de FFF7FEFF 		bl	unlock_fs
 8894              	.LVL1339:
4455:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8895              		.loc 1 4455 0
 8896 00e2 3846     		mov	r0, r7
 8897 00e4 08B0     		add	sp, sp, #32
 8898              	.LCFI118:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 283


 8899              		.cfi_remember_state
 8900              		.cfi_def_cfa_offset 32
 8901              		@ sp needed
 8902 00e6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 8903              	.LVL1340:
 8904              	.L860:
 8905              	.LCFI119:
 8906              		.cfi_restore_state
4406:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 0) nfree++;
 8907              		.loc 1 4406 0
 8908 00ea 0227     		movs	r7, #2
 8909 00ec ECE7     		b	.L850
 8910              		.cfi_endproc
 8911              	.LFE201:
 8913              		.section	.text.f_truncate,"ax",%progbits
 8914              		.align	1
 8915              		.global	f_truncate
 8916              		.syntax unified
 8917              		.thumb
 8918              		.thumb_func
 8919              		.fpu fpv5-sp-d16
 8921              	f_truncate:
 8922              	.LFB202:
4467:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 8923              		.loc 1 4467 0
 8924              		.cfi_startproc
 8925              		@ args = 0, pretend = 0, frame = 8
 8926              		@ frame_needed = 0, uses_anonymous_args = 0
 8927              	.LVL1341:
 8928 0000 30B5     		push	{r4, r5, lr}
 8929              	.LCFI120:
 8930              		.cfi_def_cfa_offset 12
 8931              		.cfi_offset 4, -12
 8932              		.cfi_offset 5, -8
 8933              		.cfi_offset 14, -4
 8934 0002 83B0     		sub	sp, sp, #12
 8935              	.LCFI121:
 8936              		.cfi_def_cfa_offset 24
 8937 0004 0546     		mov	r5, r0
4473:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 8938              		.loc 1 4473 0
 8939 0006 01A9     		add	r1, sp, #4
 8940 0008 FFF7FEFF 		bl	validate
 8941              	.LVL1342:
4474:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8942              		.loc 1 4474 0
 8943 000c 0446     		mov	r4, r0
 8944 000e 18BB     		cbnz	r0, .L867
4474:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8945              		.loc 1 4474 0 is_stmt 0 discriminator 2
 8946 0010 6C7D     		ldrb	r4, [r5, #21]	@ zero_extendqisi2
 8947              	.LVL1343:
 8948 0012 0CBB     		cbnz	r4, .L867
4475:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8949              		.loc 1 4475 0 is_stmt 1
 8950 0014 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 8951 0016 13F0020F 		tst	r3, #2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 284


 8952 001a 24D0     		beq	.L881
4477:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8953              		.loc 1 4477 0
 8954 001c AB69     		ldr	r3, [r5, #24]
 8955 001e EA68     		ldr	r2, [r5, #12]
 8956 0020 9342     		cmp	r3, r2
 8957 0022 14D2     		bcs	.L871
4478:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8958              		.loc 1 4478 0
 8959 0024 2BBB     		cbnz	r3, .L872
4479:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.sclust = 0;
 8960              		.loc 1 4479 0
 8961 0026 0022     		movs	r2, #0
 8962 0028 A968     		ldr	r1, [r5, #8]
 8963 002a 2846     		mov	r0, r5
 8964 002c FFF7FEFF 		bl	remove_chain
 8965              	.LVL1344:
 8966 0030 0446     		mov	r4, r0
 8967              	.LVL1345:
4480:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
 8968              		.loc 1 4480 0
 8969 0032 0023     		movs	r3, #0
 8970 0034 AB60     		str	r3, [r5, #8]
 8971              	.LVL1346:
 8972              	.L873:
4490:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->flag |= FA_MODIFIED;
 8973              		.loc 1 4490 0
 8974 0036 AB69     		ldr	r3, [r5, #24]
 8975 0038 EB60     		str	r3, [r5, #12]
4491:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 8976              		.loc 1 4491 0
 8977 003a 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 8978 003c 43F04003 		orr	r3, r3, #64
 8979 0040 2B75     		strb	r3, [r5, #20]
4493:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8980              		.loc 1 4493 0
 8981 0042 14B9     		cbnz	r4, .L875
4493:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8982              		.loc 1 4493 0 is_stmt 0 discriminator 1
 8983 0044 13F0800F 		tst	r3, #128
 8984 0048 2DD1     		bne	.L882
 8985              	.L875:
4501:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 8986              		.loc 1 4501 0 is_stmt 1
 8987 004a 002C     		cmp	r4, #0
 8988 004c 3AD1     		bne	.L876
 8989              	.L871:
4504:Middlewares/Third_Party/FatFs/src/ff.c **** }
 8990              		.loc 1 4504 0
 8991 004e 2146     		mov	r1, r4
 8992 0050 0198     		ldr	r0, [sp, #4]
 8993 0052 FFF7FEFF 		bl	unlock_fs
 8994              	.LVL1347:
 8995 0056 03E0     		b	.L869
 8996              	.LVL1348:
 8997              	.L867:
4474:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 285


 8998              		.loc 1 4474 0 discriminator 3
 8999 0058 2146     		mov	r1, r4
 9000 005a 0198     		ldr	r0, [sp, #4]
 9001 005c FFF7FEFF 		bl	unlock_fs
 9002              	.LVL1349:
 9003              	.L869:
4505:Middlewares/Third_Party/FatFs/src/ff.c **** 
 9004              		.loc 1 4505 0
 9005 0060 2046     		mov	r0, r4
 9006 0062 03B0     		add	sp, sp, #12
 9007              	.LCFI122:
 9008              		.cfi_remember_state
 9009              		.cfi_def_cfa_offset 12
 9010              		@ sp needed
 9011 0064 30BD     		pop	{r4, r5, pc}
 9012              	.LVL1350:
 9013              	.L881:
 9014              	.LCFI123:
 9015              		.cfi_restore_state
4475:Middlewares/Third_Party/FatFs/src/ff.c **** 
 9016              		.loc 1 4475 0 discriminator 1
 9017 0066 0721     		movs	r1, #7
 9018 0068 0198     		ldr	r0, [sp, #4]
 9019 006a FFF7FEFF 		bl	unlock_fs
 9020              	.LVL1351:
 9021 006e 0724     		movs	r4, #7
 9022              	.LVL1352:
 9023 0070 F6E7     		b	.L869
 9024              	.LVL1353:
 9025              	.L872:
4482:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
 9026              		.loc 1 4482 0
 9027 0072 E969     		ldr	r1, [r5, #28]
 9028 0074 2846     		mov	r0, r5
 9029 0076 FFF7FEFF 		bl	get_fat
 9030              	.LVL1354:
4484:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
 9031              		.loc 1 4484 0
 9032 007a B0F1FF3F 		cmp	r0, #-1
 9033 007e 0ED0     		beq	.L883
 9034              	.L874:
 9035              	.LVL1355:
4485:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 9036              		.loc 1 4485 0
 9037 0080 0128     		cmp	r0, #1
 9038 0082 0ED0     		beq	.L878
4486:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 9039              		.loc 1 4486 0
 9040 0084 002C     		cmp	r4, #0
 9041 0086 D6D1     		bne	.L873
4486:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 9042              		.loc 1 4486 0 is_stmt 0 discriminator 1
 9043 0088 019B     		ldr	r3, [sp, #4]
 9044 008a 1B6A     		ldr	r3, [r3, #32]
 9045 008c 8342     		cmp	r3, r0
 9046 008e D2D9     		bls	.L873
4487:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 286


 9047              		.loc 1 4487 0 is_stmt 1
 9048 0090 EA69     		ldr	r2, [r5, #28]
 9049 0092 0146     		mov	r1, r0
 9050 0094 2846     		mov	r0, r5
 9051              	.LVL1356:
 9052 0096 FFF7FEFF 		bl	remove_chain
 9053              	.LVL1357:
 9054 009a 0446     		mov	r4, r0
 9055              	.LVL1358:
 9056 009c CBE7     		b	.L873
 9057              	.LVL1359:
 9058              	.L883:
4484:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
 9059              		.loc 1 4484 0
 9060 009e 0124     		movs	r4, #1
 9061 00a0 EEE7     		b	.L874
 9062              	.LVL1360:
 9063              	.L878:
4485:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 9064              		.loc 1 4485 0
 9065 00a2 0224     		movs	r4, #2
 9066              	.LVL1361:
 9067 00a4 C7E7     		b	.L873
 9068              	.LVL1362:
 9069              	.L882:
4494:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_DISK_ERR;
 9070              		.loc 1 4494 0
 9071 00a6 0123     		movs	r3, #1
 9072 00a8 2A6A     		ldr	r2, [r5, #32]
 9073 00aa 05F13001 		add	r1, r5, #48
 9074 00ae 0198     		ldr	r0, [sp, #4]
 9075 00b0 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 9076 00b2 FFF7FEFF 		bl	disk_write
 9077              	.LVL1363:
 9078 00b6 20B9     		cbnz	r0, .L879
4497:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 9079              		.loc 1 4497 0
 9080 00b8 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 9081 00ba 03F07F03 		and	r3, r3, #127
 9082 00be 2B75     		strb	r3, [r5, #20]
 9083 00c0 C3E7     		b	.L875
 9084              	.L879:
4495:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 9085              		.loc 1 4495 0
 9086 00c2 0124     		movs	r4, #1
 9087              	.LVL1364:
 9088              	.L876:
4501:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 9089              		.loc 1 4501 0 discriminator 1
 9090 00c4 6C75     		strb	r4, [r5, #21]
 9091 00c6 2146     		mov	r1, r4
 9092 00c8 0198     		ldr	r0, [sp, #4]
 9093 00ca FFF7FEFF 		bl	unlock_fs
 9094              	.LVL1365:
 9095 00ce C7E7     		b	.L869
 9096              		.cfi_endproc
 9097              	.LFE202:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 287


 9099              		.section	.text.f_unlink,"ax",%progbits
 9100              		.align	1
 9101              		.global	f_unlink
 9102              		.syntax unified
 9103              		.thumb
 9104              		.thumb_func
 9105              		.fpu fpv5-sp-d16
 9107              	f_unlink:
 9108              	.LFB203:
4517:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 9109              		.loc 1 4517 0
 9110              		.cfi_startproc
 9111              		@ args = 0, pretend = 0, frame = 120
 9112              		@ frame_needed = 0, uses_anonymous_args = 0
 9113              	.LVL1366:
 9114 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 9115              	.LCFI124:
 9116              		.cfi_def_cfa_offset 24
 9117              		.cfi_offset 4, -24
 9118              		.cfi_offset 5, -20
 9119              		.cfi_offset 6, -16
 9120              		.cfi_offset 7, -12
 9121              		.cfi_offset 8, -8
 9122              		.cfi_offset 14, -4
 9123 0004 9EB0     		sub	sp, sp, #120
 9124              	.LCFI125:
 9125              		.cfi_def_cfa_offset 144
 9126 0006 0190     		str	r0, [sp, #4]
 9127              	.LVL1367:
4529:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
 9128              		.loc 1 4529 0
 9129 0008 0222     		movs	r2, #2
 9130 000a 03A9     		add	r1, sp, #12
 9131 000c 01A8     		add	r0, sp, #4
 9132              	.LVL1368:
 9133 000e FFF7FEFF 		bl	find_volume
 9134              	.LVL1369:
4530:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 9135              		.loc 1 4530 0
 9136 0012 039B     		ldr	r3, [sp, #12]
 9137 0014 1193     		str	r3, [sp, #68]
4531:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
 9138              		.loc 1 4531 0
 9139 0016 0446     		mov	r4, r0
 9140 0018 0028     		cmp	r0, #0
 9141 001a 60D1     		bne	.L885
4532:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9142              		.loc 1 4532 0
 9143 001c 4FF40070 		mov	r0, #512
 9144              	.LVL1370:
 9145 0020 FFF7FEFF 		bl	ff_memalloc
 9146              	.LVL1371:
 9147 0024 0546     		mov	r5, r0
 9148 0026 68B3     		cbz	r0, .L900
4532:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9149              		.loc 1 4532 0 is_stmt 0 discriminator 2
 9150 0028 039B     		ldr	r3, [sp, #12]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 288


 9151 002a D860     		str	r0, [r3, #12]
4533:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 9152              		.loc 1 4533 0 is_stmt 1 discriminator 2
 9153 002c 0199     		ldr	r1, [sp, #4]
 9154 002e 11A8     		add	r0, sp, #68
 9155              	.LVL1372:
 9156 0030 FFF7FEFF 		bl	follow_path
 9157              	.LVL1373:
4534:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 9158              		.loc 1 4534 0 discriminator 2
 9159 0034 0446     		mov	r4, r0
 9160 0036 20B9     		cbnz	r0, .L888
4534:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 9161              		.loc 1 4534 0 is_stmt 0 discriminator 1
 9162 0038 9DF87330 		ldrb	r3, [sp, #115]	@ zero_extendqisi2
 9163 003c 13F0200F 		tst	r3, #32
 9164 0040 26D1     		bne	.L894
 9165              	.L888:
 9166              	.LVL1374:
4538:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 9167              		.loc 1 4538 0 is_stmt 1
 9168 0042 24B9     		cbnz	r4, .L889
4538:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 9169              		.loc 1 4538 0 is_stmt 0 discriminator 1
 9170 0044 0221     		movs	r1, #2
 9171 0046 11A8     		add	r0, sp, #68
 9172 0048 FFF7FEFF 		bl	chk_lock
 9173              	.LVL1375:
 9174 004c 0446     		mov	r4, r0
 9175              	.LVL1376:
 9176              	.L889:
4540:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
 9177              		.loc 1 4540 0 is_stmt 1
 9178 004e 002C     		cmp	r4, #0
 9179 0050 42D1     		bne	.L890
4541:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 9180              		.loc 1 4541 0
 9181 0052 9DF97330 		ldrsb	r3, [sp, #115]
 9182 0056 002B     		cmp	r3, #0
 9183 0058 2EDB     		blt	.L895
4544:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 9184              		.loc 1 4544 0
 9185 005a 9DF84A70 		ldrb	r7, [sp, #74]	@ zero_extendqisi2
 9186 005e 17F0010F 		tst	r7, #1
 9187 0062 44D1     		bne	.L896
4558:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 9188              		.loc 1 4558 0
 9189 0064 DDF80C80 		ldr	r8, [sp, #12]
 9190 0068 1999     		ldr	r1, [sp, #100]
 9191 006a 4046     		mov	r0, r8
 9192 006c FFF7FEFF 		bl	ld_clust
 9193              	.LVL1377:
 9194 0070 0646     		mov	r6, r0
 9195              	.LVL1378:
4560:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
 9196              		.loc 1 4560 0
 9197 0072 17F0100F 		tst	r7, #16
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 289


 9198 0076 21D0     		beq	.L891
4562:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_DENIED;
 9199              		.loc 1 4562 0
 9200 0078 D8F81C30 		ldr	r3, [r8, #28]
 9201 007c 8342     		cmp	r3, r0
 9202 007e 09D1     		bne	.L901
4563:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
 9203              		.loc 1 4563 0
 9204 0080 0724     		movs	r4, #7
 9205              	.LVL1379:
 9206 0082 29E0     		b	.L890
 9207              	.LVL1380:
 9208              	.L900:
4532:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9209              		.loc 1 4532 0 discriminator 1
 9210 0084 1121     		movs	r1, #17
 9211 0086 0398     		ldr	r0, [sp, #12]
 9212              	.LVL1381:
 9213 0088 FFF7FEFF 		bl	unlock_fs
 9214              	.LVL1382:
 9215 008c 1124     		movs	r4, #17
 9216 008e 2AE0     		b	.L887
 9217              	.LVL1383:
 9218              	.L894:
4535:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 9219              		.loc 1 4535 0
 9220 0090 0624     		movs	r4, #6
 9221 0092 DCE7     		b	.L889
 9222              	.LVL1384:
 9223              	.L901:
4567:Middlewares/Third_Party/FatFs/src/ff.c **** 						sdj.obj.sclust = dclst;
 9224              		.loc 1 4567 0
 9225 0094 CDF81080 		str	r8, [sp, #16]
4568:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 9226              		.loc 1 4568 0
 9227 0098 0690     		str	r0, [sp, #24]
4575:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (res == FR_OK) {
 9228              		.loc 1 4575 0
 9229 009a 0021     		movs	r1, #0
 9230 009c 04A8     		add	r0, sp, #16
 9231              	.LVL1385:
 9232 009e FFF7FEFF 		bl	dir_sdi
 9233              	.LVL1386:
4576:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = dir_read(&sdj, 0);			/* Read an item */
 9234              		.loc 1 4576 0
 9235 00a2 0446     		mov	r4, r0
 9236 00a4 50B9     		cbnz	r0, .L891
4577:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 9237              		.loc 1 4577 0
 9238 00a6 0021     		movs	r1, #0
 9239 00a8 04A8     		add	r0, sp, #16
 9240              	.LVL1387:
 9241 00aa FFF7FEFF 		bl	dir_read
 9242              	.LVL1388:
4578:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 9243              		.loc 1 4578 0
 9244 00ae 0446     		mov	r4, r0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 290


 9245 00b0 00B3     		cbz	r0, .L898
4579:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
 9246              		.loc 1 4579 0
 9247 00b2 0428     		cmp	r0, #4
 9248 00b4 02D1     		bne	.L891
 9249 00b6 02E0     		b	.L892
 9250              	.LVL1389:
 9251              	.L895:
4520:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
 9252              		.loc 1 4520 0
 9253 00b8 0026     		movs	r6, #0
4542:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 9254              		.loc 1 4542 0
 9255 00ba 0624     		movs	r4, #6
 9256              	.LVL1390:
 9257              	.L891:
4584:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_remove(&dj);			/* Remove the directory entry */
 9258              		.loc 1 4584 0
 9259 00bc 64B9     		cbnz	r4, .L890
 9260              	.LVL1391:
 9261              	.L892:
4585:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 9262              		.loc 1 4585 0
 9263 00be 11A8     		add	r0, sp, #68
 9264 00c0 FFF7FEFF 		bl	dir_remove
 9265              	.LVL1392:
4586:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 9266              		.loc 1 4586 0
 9267 00c4 0446     		mov	r4, r0
 9268 00c6 331C     		adds	r3, r6, #0
 9269 00c8 18BF     		it	ne
 9270 00ca 0123     		movne	r3, #1
 9271 00cc 0028     		cmp	r0, #0
 9272 00ce 0CBF     		ite	eq
 9273 00d0 1846     		moveq	r0, r3
 9274 00d2 0020     		movne	r0, #0
 9275              	.LVL1393:
 9276 00d4 80B9     		cbnz	r0, .L902
 9277              	.L893:
 9278              	.LVL1394:
4593:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 9279              		.loc 1 4593 0
 9280 00d6 B4B1     		cbz	r4, .L903
 9281              	.LVL1395:
 9282              	.L890:
4596:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 9283              		.loc 1 4596 0
 9284 00d8 2846     		mov	r0, r5
 9285 00da FFF7FEFF 		bl	ff_memfree
 9286              	.LVL1396:
 9287              	.L885:
4599:Middlewares/Third_Party/FatFs/src/ff.c **** }
 9288              		.loc 1 4599 0
 9289 00de 2146     		mov	r1, r4
 9290 00e0 0398     		ldr	r0, [sp, #12]
 9291 00e2 FFF7FEFF 		bl	unlock_fs
 9292              	.LVL1397:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 291


 9293              	.L887:
4600:Middlewares/Third_Party/FatFs/src/ff.c **** 
 9294              		.loc 1 4600 0
 9295 00e6 2046     		mov	r0, r4
 9296 00e8 1EB0     		add	sp, sp, #120
 9297              	.LCFI126:
 9298              		.cfi_remember_state
 9299              		.cfi_def_cfa_offset 24
 9300              		@ sp needed
 9301 00ea BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 9302              	.LVL1398:
 9303              	.L896:
 9304              	.LCFI127:
 9305              		.cfi_restore_state
4520:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
 9306              		.loc 1 4520 0
 9307 00ee 0026     		movs	r6, #0
4545:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 9308              		.loc 1 4545 0
 9309 00f0 0724     		movs	r4, #7
 9310              	.LVL1399:
 9311 00f2 E3E7     		b	.L891
 9312              	.LVL1400:
 9313              	.L898:
4578:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 9314              		.loc 1 4578 0
 9315 00f4 0724     		movs	r4, #7
 9316 00f6 E1E7     		b	.L891
 9317              	.LVL1401:
 9318              	.L902:
4590:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 9319              		.loc 1 4590 0
 9320 00f8 0022     		movs	r2, #0
 9321 00fa 3146     		mov	r1, r6
 9322 00fc 11A8     		add	r0, sp, #68
 9323 00fe FFF7FEFF 		bl	remove_chain
 9324              	.LVL1402:
 9325 0102 0446     		mov	r4, r0
 9326              	.LVL1403:
 9327 0104 E7E7     		b	.L893
 9328              	.L903:
4593:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 9329              		.loc 1 4593 0 discriminator 1
 9330 0106 0398     		ldr	r0, [sp, #12]
 9331 0108 FFF7FEFF 		bl	sync_fs
 9332              	.LVL1404:
 9333 010c 0446     		mov	r4, r0
 9334              	.LVL1405:
 9335 010e E3E7     		b	.L890
 9336              		.cfi_endproc
 9337              	.LFE203:
 9339              		.section	.text.f_mkdir,"ax",%progbits
 9340              		.align	1
 9341              		.global	f_mkdir
 9342              		.syntax unified
 9343              		.thumb
 9344              		.thumb_func
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 292


 9345              		.fpu fpv5-sp-d16
 9347              	f_mkdir:
 9348              	.LFB204:
4612:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 9349              		.loc 1 4612 0
 9350              		.cfi_startproc
 9351              		@ args = 0, pretend = 0, frame = 64
 9352              		@ frame_needed = 0, uses_anonymous_args = 0
 9353              	.LVL1406:
 9354 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 9355              	.LCFI128:
 9356              		.cfi_def_cfa_offset 36
 9357              		.cfi_offset 4, -36
 9358              		.cfi_offset 5, -32
 9359              		.cfi_offset 6, -28
 9360              		.cfi_offset 7, -24
 9361              		.cfi_offset 8, -20
 9362              		.cfi_offset 9, -16
 9363              		.cfi_offset 10, -12
 9364              		.cfi_offset 11, -8
 9365              		.cfi_offset 14, -4
 9366 0004 91B0     		sub	sp, sp, #68
 9367              	.LCFI129:
 9368              		.cfi_def_cfa_offset 104
 9369 0006 0190     		str	r0, [sp, #4]
4623:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
 9370              		.loc 1 4623 0
 9371 0008 0222     		movs	r2, #2
 9372 000a 02A9     		add	r1, sp, #8
 9373 000c 01A8     		add	r0, sp, #4
 9374              	.LVL1407:
 9375 000e FFF7FEFF 		bl	find_volume
 9376              	.LVL1408:
4624:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 9377              		.loc 1 4624 0
 9378 0012 029B     		ldr	r3, [sp, #8]
 9379 0014 0393     		str	r3, [sp, #12]
4625:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
 9380              		.loc 1 4625 0
 9381 0016 0446     		mov	r4, r0
 9382 0018 18BB     		cbnz	r0, .L905
4626:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9383              		.loc 1 4626 0
 9384 001a 4FF40070 		mov	r0, #512
 9385              	.LVL1409:
 9386 001e FFF7FEFF 		bl	ff_memalloc
 9387              	.LVL1410:
 9388 0022 0546     		mov	r5, r0
 9389 0024 80B1     		cbz	r0, .L926
4626:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9390              		.loc 1 4626 0 is_stmt 0 discriminator 2
 9391 0026 029B     		ldr	r3, [sp, #8]
 9392 0028 D860     		str	r0, [r3, #12]
4627:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 9393              		.loc 1 4627 0 is_stmt 1 discriminator 2
 9394 002a 0199     		ldr	r1, [sp, #4]
 9395 002c 03A8     		add	r0, sp, #12
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 293


 9396              	.LVL1411:
 9397 002e FFF7FEFF 		bl	follow_path
 9398              	.LVL1412:
4628:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 9399              		.loc 1 4628 0 discriminator 2
 9400 0032 0646     		mov	r6, r0
 9401 0034 70B1     		cbz	r0, .L919
4629:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_INVALID_NAME;
 9402              		.loc 1 4629 0
 9403 0036 0428     		cmp	r0, #4
 9404 0038 0DD1     		bne	.L908
4629:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_INVALID_NAME;
 9405              		.loc 1 4629 0 is_stmt 0 discriminator 1
 9406 003a 9DF83B30 		ldrb	r3, [sp, #59]	@ zero_extendqisi2
 9407 003e 13F0200F 		tst	r3, #32
 9408 0042 08D0     		beq	.L908
4630:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 9409              		.loc 1 4630 0 is_stmt 1
 9410 0044 0626     		movs	r6, #6
 9411 0046 08E0     		b	.L909
 9412              	.LVL1413:
 9413              	.L926:
4626:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9414              		.loc 1 4626 0 discriminator 1
 9415 0048 1121     		movs	r1, #17
 9416 004a 0298     		ldr	r0, [sp, #8]
 9417              	.LVL1414:
 9418 004c FFF7FEFF 		bl	unlock_fs
 9419              	.LVL1415:
 9420 0050 1124     		movs	r4, #17
 9421 0052 0AE0     		b	.L907
 9422              	.LVL1416:
 9423              	.L919:
4628:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 9424              		.loc 1 4628 0
 9425 0054 0826     		movs	r6, #8
 9426              	.L908:
 9427              	.LVL1417:
4632:Middlewares/Third_Party/FatFs/src/ff.c **** 			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 9428              		.loc 1 4632 0
 9429 0056 042E     		cmp	r6, #4
 9430 0058 0BD0     		beq	.L927
 9431              	.LVL1418:
 9432              	.L909:
4693:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 9433              		.loc 1 4693 0
 9434 005a 2846     		mov	r0, r5
 9435 005c FFF7FEFF 		bl	ff_memfree
 9436              	.LVL1419:
 9437 0060 3446     		mov	r4, r6
 9438              	.LVL1420:
 9439              	.L905:
4696:Middlewares/Third_Party/FatFs/src/ff.c **** }
 9440              		.loc 1 4696 0
 9441 0062 2146     		mov	r1, r4
 9442 0064 0298     		ldr	r0, [sp, #8]
 9443 0066 FFF7FEFF 		bl	unlock_fs
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 294


 9444              	.LVL1421:
 9445              	.L907:
4697:Middlewares/Third_Party/FatFs/src/ff.c **** 
 9446              		.loc 1 4697 0
 9447 006a 2046     		mov	r0, r4
 9448 006c 11B0     		add	sp, sp, #68
 9449              	.LCFI130:
 9450              		.cfi_remember_state
 9451              		.cfi_def_cfa_offset 36
 9452              		@ sp needed
 9453 006e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9454              	.LVL1422:
 9455              	.L927:
 9456              	.LCFI131:
 9457              		.cfi_restore_state
4633:Middlewares/Third_Party/FatFs/src/ff.c **** 			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 9458              		.loc 1 4633 0
 9459 0072 0021     		movs	r1, #0
 9460 0074 03A8     		add	r0, sp, #12
 9461 0076 FFF7FEFF 		bl	create_chain
 9462              	.LVL1423:
4634:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
 9463              		.loc 1 4634 0
 9464 007a 029A     		ldr	r2, [sp, #8]
 9465 007c 5389     		ldrh	r3, [r2, #10]
 9466 007e 5B02     		lsls	r3, r3, #9
 9467 0080 0693     		str	r3, [sp, #24]
 9468              	.LVL1424:
4636:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 9469              		.loc 1 4636 0
 9470 0082 0746     		mov	r7, r0
 9471 0084 00B9     		cbnz	r0, .L910
 9472 0086 0724     		movs	r4, #7
 9473              	.L910:
 9474              	.LVL1425:
4637:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 9475              		.loc 1 4637 0
 9476 0088 012F     		cmp	r7, #1
 9477 008a 20D0     		beq	.L928
 9478              	.LVL1426:
 9479              	.L911:
4638:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 9480              		.loc 1 4638 0
 9481 008c B7F1FF3F 		cmp	r7, #-1
 9482 0090 24D0     		beq	.L923
4639:Middlewares/Third_Party/FatFs/src/ff.c **** 			tm = GET_FATTIME();
 9483              		.loc 1 4639 0
 9484 0092 F4B1     		cbz	r4, .L929
 9485              	.LVL1427:
 9486              	.L912:
4640:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 9487              		.loc 1 4640 0
 9488 0094 FFF7FEFF 		bl	get_fattime
 9489              	.LVL1428:
 9490 0098 0090     		str	r0, [sp]
 9491              	.LVL1429:
4641:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc = clust2sect(fs, dcl);
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 295


 9492              		.loc 1 4641 0
 9493 009a 0CB3     		cbz	r4, .L930
 9494              	.LVL1430:
 9495              	.L913:
4664:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_register(&dj);	/* Register the object to the directoy */
 9496              		.loc 1 4664 0
 9497 009c 002C     		cmp	r4, #0
 9498 009e 76D0     		beq	.L931
 9499              	.L917:
4667:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 9500              		.loc 1 4667 0
 9501 00a0 002C     		cmp	r4, #0
 9502 00a2 79D1     		bne	.L918
4680:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 9503              		.loc 1 4680 0
 9504 00a4 0B9C     		ldr	r4, [sp, #44]
 9505              	.LVL1431:
4681:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir, dcl);				/* Table start cluster */
 9506              		.loc 1 4681 0
 9507 00a6 0099     		ldr	r1, [sp]
 9508 00a8 04F11600 		add	r0, r4, #22
 9509 00ac FFF7FEFF 		bl	st_dword
 9510              	.LVL1432:
4682:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 9511              		.loc 1 4682 0
 9512 00b0 3A46     		mov	r2, r7
 9513 00b2 2146     		mov	r1, r4
 9514 00b4 0298     		ldr	r0, [sp, #8]
 9515 00b6 FFF7FEFF 		bl	st_clust
 9516              	.LVL1433:
4683:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
 9517              		.loc 1 4683 0
 9518 00ba 1023     		movs	r3, #16
 9519 00bc E372     		strb	r3, [r4, #11]
4684:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 9520              		.loc 1 4684 0
 9521 00be 029B     		ldr	r3, [sp, #8]
 9522 00c0 0122     		movs	r2, #1
 9523 00c2 DA70     		strb	r2, [r3, #3]
4687:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 9524              		.loc 1 4687 0
 9525 00c4 0298     		ldr	r0, [sp, #8]
 9526 00c6 FFF7FEFF 		bl	sync_fs
 9527              	.LVL1434:
 9528 00ca 0646     		mov	r6, r0
 9529              	.LVL1435:
 9530 00cc C5E7     		b	.L909
 9531              	.LVL1436:
 9532              	.L928:
4637:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 9533              		.loc 1 4637 0
 9534 00ce 0224     		movs	r4, #2
 9535              	.LVL1437:
 9536 00d0 DCE7     		b	.L911
 9537              	.LVL1438:
 9538              	.L929:
4639:Middlewares/Third_Party/FatFs/src/ff.c **** 			tm = GET_FATTIME();
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 296


 9539              		.loc 1 4639 0 discriminator 1
 9540 00d2 1046     		mov	r0, r2
 9541              	.LVL1439:
 9542 00d4 FFF7FEFF 		bl	sync_window
 9543              	.LVL1440:
 9544 00d8 0446     		mov	r4, r0
 9545              	.LVL1441:
 9546 00da DBE7     		b	.L912
 9547              	.LVL1442:
 9548              	.L923:
4638:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 9549              		.loc 1 4638 0
 9550 00dc 0124     		movs	r4, #1
 9551              	.LVL1443:
 9552 00de D9E7     		b	.L912
 9553              	.LVL1444:
 9554              	.L930:
4642:Middlewares/Third_Party/FatFs/src/ff.c **** 				dir = fs->win;
 9555              		.loc 1 4642 0
 9556 00e0 DDF80890 		ldr	r9, [sp, #8]
 9557 00e4 3946     		mov	r1, r7
 9558 00e6 4846     		mov	r0, r9
 9559              	.LVL1445:
 9560 00e8 FFF7FEFF 		bl	clust2sect
 9561              	.LVL1446:
 9562 00ec 0646     		mov	r6, r0
 9563              	.LVL1447:
4643:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_set(dir, 0, SS(fs));
 9564              		.loc 1 4643 0
 9565 00ee 09F13C08 		add	r8, r9, #60
 9566              	.LVL1448:
4644:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 9567              		.loc 1 4644 0
 9568 00f2 4FF40072 		mov	r2, #512
 9569 00f6 0021     		movs	r1, #0
 9570 00f8 4046     		mov	r0, r8
 9571              	.LVL1449:
 9572 00fa FFF7FEFF 		bl	mem_set
 9573              	.LVL1450:
4646:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Name] = '.';
 9574              		.loc 1 4646 0
 9575 00fe 0B22     		movs	r2, #11
 9576 0100 2021     		movs	r1, #32
 9577 0102 4046     		mov	r0, r8
 9578 0104 FFF7FEFF 		bl	mem_set
 9579              	.LVL1451:
4647:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] = AM_DIR;
 9580              		.loc 1 4647 0
 9581 0108 4FF02E0B 		mov	fp, #46
 9582 010c 89F83CB0 		strb	fp, [r9, #60]
4648:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);
 9583              		.loc 1 4648 0
 9584 0110 1023     		movs	r3, #16
 9585 0112 89F84730 		strb	r3, [r9, #71]
4649:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir, dcl);
 9586              		.loc 1 4649 0
 9587 0116 0099     		ldr	r1, [sp]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 297


 9588 0118 09F15200 		add	r0, r9, #82
 9589 011c FFF7FEFF 		bl	st_dword
 9590              	.LVL1452:
4650:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 9591              		.loc 1 4650 0
 9592 0120 3A46     		mov	r2, r7
 9593 0122 4146     		mov	r1, r8
 9594 0124 0298     		ldr	r0, [sp, #8]
 9595 0126 FFF7FEFF 		bl	st_clust
 9596              	.LVL1453:
4651:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 9597              		.loc 1 4651 0
 9598 012a 09F15C0A 		add	r10, r9, #92
 9599 012e 2022     		movs	r2, #32
 9600 0130 4146     		mov	r1, r8
 9601 0132 5046     		mov	r0, r10
 9602 0134 FFF7FEFF 		bl	mem_cpy
 9603              	.LVL1454:
4652:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 9604              		.loc 1 4652 0
 9605 0138 89F85DB0 		strb	fp, [r9, #93]
 9606 013c 059A     		ldr	r2, [sp, #20]
 9607              	.LVL1455:
4653:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir + SZDIRE, pcl);
 9608              		.loc 1 4653 0
 9609 013e 0298     		ldr	r0, [sp, #8]
 9610 0140 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9611 0142 032B     		cmp	r3, #3
 9612 0144 1ED0     		beq	.L932
 9613              	.LVL1456:
 9614              	.L914:
4654:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 9615              		.loc 1 4654 0
 9616 0146 5146     		mov	r1, r10
 9617 0148 FFF7FEFF 		bl	st_clust
 9618              	.LVL1457:
4656:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->winsect = dsc++;
 9619              		.loc 1 4656 0
 9620 014c 029B     		ldr	r3, [sp, #8]
 9621 014e B3F80A90 		ldrh	r9, [r3, #10]
 9622              	.LVL1458:
 9623              	.L915:
4656:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->winsect = dsc++;
 9624              		.loc 1 4656 0 is_stmt 0 discriminator 1
 9625 0152 B9F1000F 		cmp	r9, #0
 9626 0156 A1D0     		beq	.L913
4657:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
 9627              		.loc 1 4657 0 is_stmt 1
 9628 0158 06F1010B 		add	fp, r6, #1
 9629              	.LVL1459:
 9630 015c 029B     		ldr	r3, [sp, #8]
 9631 015e 9E63     		str	r6, [r3, #56]
4658:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_window(fs);
 9632              		.loc 1 4658 0
 9633 0160 0122     		movs	r2, #1
 9634 0162 DA70     		strb	r2, [r3, #3]
4659:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res != FR_OK) break;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 298


 9635              		.loc 1 4659 0
 9636 0164 0298     		ldr	r0, [sp, #8]
 9637 0166 FFF7FEFF 		bl	sync_window
 9638              	.LVL1460:
4660:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_set(dir, 0, SS(fs));
 9639              		.loc 1 4660 0
 9640 016a 0446     		mov	r4, r0
 9641 016c 0028     		cmp	r0, #0
 9642 016e 95D1     		bne	.L913
4661:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 9643              		.loc 1 4661 0 discriminator 2
 9644 0170 4FF40072 		mov	r2, #512
 9645 0174 0021     		movs	r1, #0
 9646 0176 4046     		mov	r0, r8
 9647              	.LVL1461:
 9648 0178 FFF7FEFF 		bl	mem_set
 9649              	.LVL1462:
4656:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->winsect = dsc++;
 9650              		.loc 1 4656 0 discriminator 2
 9651 017c 09F1FF39 		add	r9, r9, #-1
 9652              	.LVL1463:
4657:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
 9653              		.loc 1 4657 0 discriminator 2
 9654 0180 5E46     		mov	r6, fp
 9655 0182 E6E7     		b	.L915
 9656              	.LVL1464:
 9657              	.L932:
4653:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir + SZDIRE, pcl);
 9658              		.loc 1 4653 0 discriminator 1
 9659 0184 036B     		ldr	r3, [r0, #48]
 9660 0186 9342     		cmp	r3, r2
 9661 0188 DDD1     		bne	.L914
4653:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir + SZDIRE, pcl);
 9662              		.loc 1 4653 0 is_stmt 0
 9663 018a 0022     		movs	r2, #0
 9664              	.LVL1465:
 9665 018c DBE7     		b	.L914
 9666              	.LVL1466:
 9667              	.L931:
4665:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 9668              		.loc 1 4665 0 is_stmt 1
 9669 018e 03A8     		add	r0, sp, #12
 9670 0190 FFF7FEFF 		bl	dir_register
 9671              	.LVL1467:
 9672 0194 0446     		mov	r4, r0
 9673              	.LVL1468:
 9674 0196 83E7     		b	.L917
 9675              	.L918:
4690:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 9676              		.loc 1 4690 0
 9677 0198 0022     		movs	r2, #0
 9678 019a 3946     		mov	r1, r7
 9679 019c 03A8     		add	r0, sp, #12
 9680 019e FFF7FEFF 		bl	remove_chain
 9681              	.LVL1469:
 9682 01a2 2646     		mov	r6, r4
 9683 01a4 59E7     		b	.L909
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 299


 9684              		.cfi_endproc
 9685              	.LFE204:
 9687              		.section	.text.f_rename,"ax",%progbits
 9688              		.align	1
 9689              		.global	f_rename
 9690              		.syntax unified
 9691              		.thumb
 9692              		.thumb_func
 9693              		.fpu fpv5-sp-d16
 9695              	f_rename:
 9696              	.LFB205:
4710:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 9697              		.loc 1 4710 0
 9698              		.cfi_startproc
 9699              		@ args = 0, pretend = 0, frame = 144
 9700              		@ frame_needed = 0, uses_anonymous_args = 0
 9701              	.LVL1470:
 9702 0000 70B5     		push	{r4, r5, r6, lr}
 9703              	.LCFI132:
 9704              		.cfi_def_cfa_offset 16
 9705              		.cfi_offset 4, -16
 9706              		.cfi_offset 5, -12
 9707              		.cfi_offset 6, -8
 9708              		.cfi_offset 14, -4
 9709 0002 A4B0     		sub	sp, sp, #144
 9710              	.LCFI133:
 9711              		.cfi_def_cfa_offset 160
 9712 0004 0190     		str	r0, [sp, #4]
 9713 0006 24A8     		add	r0, sp, #144
 9714              	.LVL1471:
 9715 0008 40F8901D 		str	r1, [r0, #-144]!
4719:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 9716              		.loc 1 4719 0
 9717 000c FFF7FEFF 		bl	get_ldnumber
 9718              	.LVL1472:
4720:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 9719              		.loc 1 4720 0
 9720 0010 0222     		movs	r2, #2
 9721 0012 09A9     		add	r1, sp, #36
 9722 0014 01A8     		add	r0, sp, #4
 9723 0016 FFF7FEFF 		bl	find_volume
 9724              	.LVL1473:
4721:Middlewares/Third_Party/FatFs/src/ff.c **** 		djo.obj.fs = fs;
 9725              		.loc 1 4721 0
 9726 001a 0446     		mov	r4, r0
 9727 001c F0B9     		cbnz	r0, .L934
4722:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
 9728              		.loc 1 4722 0
 9729 001e 099B     		ldr	r3, [sp, #36]
 9730 0020 1793     		str	r3, [sp, #92]
4723:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9731              		.loc 1 4723 0
 9732 0022 4FF40070 		mov	r0, #512
 9733              	.LVL1474:
 9734 0026 FFF7FEFF 		bl	ff_memalloc
 9735              	.LVL1475:
 9736 002a 0546     		mov	r5, r0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 300


 9737 002c E8B1     		cbz	r0, .L947
4723:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9738              		.loc 1 4723 0 is_stmt 0 discriminator 2
 9739 002e 099B     		ldr	r3, [sp, #36]
 9740 0030 D860     		str	r0, [r3, #12]
4724:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
 9741              		.loc 1 4724 0 is_stmt 1 discriminator 2
 9742 0032 0199     		ldr	r1, [sp, #4]
 9743 0034 17A8     		add	r0, sp, #92
 9744              	.LVL1476:
 9745 0036 FFF7FEFF 		bl	follow_path
 9746              	.LVL1477:
4725:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 9747              		.loc 1 4725 0 discriminator 2
 9748 003a 0446     		mov	r4, r0
 9749 003c 20B9     		cbnz	r0, .L937
4725:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 9750              		.loc 1 4725 0 is_stmt 0 discriminator 1
 9751 003e 9DF88B30 		ldrb	r3, [sp, #139]	@ zero_extendqisi2
 9752 0042 13F0A00F 		tst	r3, #160
 9753 0046 16D1     		bne	.L943
 9754              	.L937:
 9755              	.LVL1478:
4727:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = chk_lock(&djo, 2);
 9756              		.loc 1 4727 0 is_stmt 1
 9757 0048 24B9     		cbnz	r4, .L938
4728:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 9758              		.loc 1 4728 0
 9759 004a 0221     		movs	r1, #2
 9760 004c 17A8     		add	r0, sp, #92
 9761 004e FFF7FEFF 		bl	chk_lock
 9762              	.LVL1479:
 9763 0052 0446     		mov	r4, r0
 9764              	.LVL1480:
 9765              	.L938:
4731:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 9766              		.loc 1 4731 0
 9767 0054 8CB1     		cbz	r4, .L948
 9768              	.LVL1481:
 9769              	.L939:
4796:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 9770              		.loc 1 4796 0
 9771 0056 2846     		mov	r0, r5
 9772 0058 FFF7FEFF 		bl	ff_memfree
 9773              	.LVL1482:
 9774              	.L934:
4799:Middlewares/Third_Party/FatFs/src/ff.c **** }
 9775              		.loc 1 4799 0
 9776 005c 2146     		mov	r1, r4
 9777 005e 0998     		ldr	r0, [sp, #36]
 9778 0060 FFF7FEFF 		bl	unlock_fs
 9779              	.LVL1483:
 9780              	.L936:
4800:Middlewares/Third_Party/FatFs/src/ff.c **** 
 9781              		.loc 1 4800 0
 9782 0064 2046     		mov	r0, r4
 9783 0066 24B0     		add	sp, sp, #144
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 301


 9784              	.LCFI134:
 9785              		.cfi_remember_state
 9786              		.cfi_def_cfa_offset 16
 9787              		@ sp needed
 9788 0068 70BD     		pop	{r4, r5, r6, pc}
 9789              	.LVL1484:
 9790              	.L947:
 9791              	.LCFI135:
 9792              		.cfi_restore_state
4723:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9793              		.loc 1 4723 0 discriminator 1
 9794 006a 1121     		movs	r1, #17
 9795 006c 0998     		ldr	r0, [sp, #36]
 9796              	.LVL1485:
 9797 006e FFF7FEFF 		bl	unlock_fs
 9798              	.LVL1486:
 9799 0072 1124     		movs	r4, #17
 9800 0074 F6E7     		b	.L936
 9801              	.LVL1487:
 9802              	.L943:
4725:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 9803              		.loc 1 4725 0
 9804 0076 0624     		movs	r4, #6
 9805 0078 ECE7     		b	.L938
 9806              	.LVL1488:
 9807              	.L948:
4758:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 9808              		.loc 1 4758 0
 9809 007a 1522     		movs	r2, #21
 9810 007c 1F99     		ldr	r1, [sp, #124]
 9811 007e 0B31     		adds	r1, r1, #11
 9812 0080 03A8     		add	r0, sp, #12
 9813 0082 FFF7FEFF 		bl	mem_cpy
 9814              	.LVL1489:
4759:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 9815              		.loc 1 4759 0
 9816 0086 3422     		movs	r2, #52
 9817 0088 17A9     		add	r1, sp, #92
 9818 008a 0AA8     		add	r0, sp, #40
 9819 008c FFF7FEFF 		bl	mem_cpy
 9820              	.LVL1490:
4760:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 9821              		.loc 1 4760 0
 9822 0090 0099     		ldr	r1, [sp]
 9823 0092 0AA8     		add	r0, sp, #40
 9824 0094 FFF7FEFF 		bl	follow_path
 9825              	.LVL1491:
4761:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 9826              		.loc 1 4761 0
 9827 0098 0446     		mov	r4, r0
 9828 009a 58B9     		cbnz	r0, .L940
4762:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 9829              		.loc 1 4762 0
 9830 009c 0C9A     		ldr	r2, [sp, #48]
 9831 009e 199B     		ldr	r3, [sp, #100]
 9832 00a0 9A42     		cmp	r2, r3
 9833 00a2 01D0     		beq	.L949
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 302


 9834 00a4 0824     		movs	r4, #8
 9835 00a6 07E0     		b	.L941
 9836              	.L949:
4762:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 9837              		.loc 1 4762 0 is_stmt 0 discriminator 1
 9838 00a8 0F9A     		ldr	r2, [sp, #60]
 9839 00aa 1C9B     		ldr	r3, [sp, #112]
 9840 00ac 9A42     		cmp	r2, r3
 9841 00ae 10D0     		beq	.L942
 9842 00b0 0824     		movs	r4, #8
 9843 00b2 01E0     		b	.L941
 9844              	.L940:
4764:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 9845              		.loc 1 4764 0 is_stmt 1
 9846 00b4 0428     		cmp	r0, #4
 9847 00b6 0CD0     		beq	.L942
 9848              	.LVL1492:
 9849              	.L941:
4788:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_remove(&djo);		/* Remove old entry */
 9850              		.loc 1 4788 0
 9851 00b8 002C     		cmp	r4, #0
 9852 00ba CCD1     		bne	.L939
4789:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
 9853              		.loc 1 4789 0
 9854 00bc 17A8     		add	r0, sp, #92
 9855 00be FFF7FEFF 		bl	dir_remove
 9856              	.LVL1493:
4790:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_fs(fs);
 9857              		.loc 1 4790 0
 9858 00c2 0446     		mov	r4, r0
 9859 00c4 0028     		cmp	r0, #0
 9860 00c6 C6D1     		bne	.L939
4791:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 9861              		.loc 1 4791 0
 9862 00c8 0998     		ldr	r0, [sp, #36]
 9863              	.LVL1494:
 9864 00ca FFF7FEFF 		bl	sync_fs
 9865              	.LVL1495:
 9866 00ce 0446     		mov	r4, r0
 9867              	.LVL1496:
 9868 00d0 C1E7     		b	.L939
 9869              	.LVL1497:
 9870              	.L942:
4765:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
 9871              		.loc 1 4765 0
 9872 00d2 0AA8     		add	r0, sp, #40
 9873              	.LVL1498:
 9874 00d4 FFF7FEFF 		bl	dir_register
 9875              	.LVL1499:
4766:Middlewares/Third_Party/FatFs/src/ff.c **** 						dir = djn.dir;					/* Copy information about object except name */
 9876              		.loc 1 4766 0
 9877 00d8 0446     		mov	r4, r0
 9878 00da 0028     		cmp	r0, #0
 9879 00dc ECD1     		bne	.L941
4767:Middlewares/Third_Party/FatFs/src/ff.c **** 						mem_cpy(dir + 13, buf + 2, 19);
 9880              		.loc 1 4767 0
 9881 00de 129E     		ldr	r6, [sp, #72]
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 303


 9882              	.LVL1500:
4768:Middlewares/Third_Party/FatFs/src/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 9883              		.loc 1 4768 0
 9884 00e0 1322     		movs	r2, #19
 9885 00e2 0DF10E01 		add	r1, sp, #14
 9886 00e6 06F10D00 		add	r0, r6, #13
 9887              	.LVL1501:
 9888 00ea FFF7FEFF 		bl	mem_cpy
 9889              	.LVL1502:
4769:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
 9890              		.loc 1 4769 0
 9891 00ee 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 9892 00f2 43F02003 		orr	r3, r3, #32
 9893 00f6 F372     		strb	r3, [r6, #11]
4770:Middlewares/Third_Party/FatFs/src/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
 9894              		.loc 1 4770 0
 9895 00f8 099B     		ldr	r3, [sp, #36]
 9896 00fa 0122     		movs	r2, #1
 9897 00fc DA70     		strb	r2, [r3, #3]
4771:Middlewares/Third_Party/FatFs/src/ff.c **** 							dw = clust2sect(fs, ld_clust(fs, dir));
 9898              		.loc 1 4771 0
 9899 00fe F37A     		ldrb	r3, [r6, #11]	@ zero_extendqisi2
 9900 0100 13F0100F 		tst	r3, #16
 9901 0104 D8D0     		beq	.L941
4771:Middlewares/Third_Party/FatFs/src/ff.c **** 							dw = clust2sect(fs, ld_clust(fs, dir));
 9902              		.loc 1 4771 0 is_stmt 0 discriminator 1
 9903 0106 199A     		ldr	r2, [sp, #100]
 9904 0108 0C9B     		ldr	r3, [sp, #48]
 9905 010a 9A42     		cmp	r2, r3
 9906 010c D4D0     		beq	.L941
4772:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (!dw) {
 9907              		.loc 1 4772 0 is_stmt 1
 9908 010e 099C     		ldr	r4, [sp, #36]
 9909 0110 3146     		mov	r1, r6
 9910 0112 2046     		mov	r0, r4
 9911 0114 FFF7FEFF 		bl	ld_clust
 9912              	.LVL1503:
 9913 0118 0146     		mov	r1, r0
 9914 011a 2046     		mov	r0, r4
 9915 011c FFF7FEFF 		bl	clust2sect
 9916              	.LVL1504:
4773:Middlewares/Third_Party/FatFs/src/ff.c **** 								res = FR_INT_ERR;
 9917              		.loc 1 4773 0
 9918 0120 0146     		mov	r1, r0
 9919 0122 08B9     		cbnz	r0, .L950
4774:Middlewares/Third_Party/FatFs/src/ff.c **** 							} else {
 9920              		.loc 1 4774 0
 9921 0124 0224     		movs	r4, #2
 9922 0126 96E7     		b	.L939
 9923              	.L950:
4777:Middlewares/Third_Party/FatFs/src/ff.c **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 9924              		.loc 1 4777 0
 9925 0128 2046     		mov	r0, r4
 9926              	.LVL1505:
 9927 012a FFF7FEFF 		bl	move_window
 9928              	.LVL1506:
4778:Middlewares/Third_Party/FatFs/src/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 304


 9929              		.loc 1 4778 0
 9930 012e 099B     		ldr	r3, [sp, #36]
 9931 0130 03F15C01 		add	r1, r3, #92
 9932              	.LVL1507:
4779:Middlewares/Third_Party/FatFs/src/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
 9933              		.loc 1 4779 0
 9934 0134 0446     		mov	r4, r0
 9935 0136 0028     		cmp	r0, #0
 9936 0138 BED1     		bne	.L941
4779:Middlewares/Third_Party/FatFs/src/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
 9937              		.loc 1 4779 0 is_stmt 0 discriminator 1
 9938 013a 93F85D20 		ldrb	r2, [r3, #93]	@ zero_extendqisi2
 9939 013e 2E2A     		cmp	r2, #46
 9940 0140 BAD1     		bne	.L941
4780:Middlewares/Third_Party/FatFs/src/ff.c **** 									fs->wflag = 1;
 9941              		.loc 1 4780 0 is_stmt 1
 9942 0142 0C9A     		ldr	r2, [sp, #48]
 9943 0144 1846     		mov	r0, r3
 9944              	.LVL1508:
 9945 0146 FFF7FEFF 		bl	st_clust
 9946              	.LVL1509:
4781:Middlewares/Third_Party/FatFs/src/ff.c **** 								}
 9947              		.loc 1 4781 0
 9948 014a 099B     		ldr	r3, [sp, #36]
 9949 014c 0122     		movs	r2, #1
 9950 014e DA70     		strb	r2, [r3, #3]
 9951 0150 B2E7     		b	.L941
 9952              		.cfi_endproc
 9953              	.LFE205:
 9955              		.section	.text.f_mkfs,"ax",%progbits
 9956              		.align	1
 9957              		.global	f_mkfs
 9958              		.syntax unified
 9959              		.thumb
 9960              		.thumb_func
 9961              		.fpu fpv5-sp-d16
 9963              	f_mkfs:
 9964              	.LFB206:
5297:Middlewares/Third_Party/FatFs/src/ff.c **** 	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 9965              		.loc 1 5297 0
 9966              		.cfi_startproc
 9967              		@ args = 4, pretend = 0, frame = 40
 9968              		@ frame_needed = 0, uses_anonymous_args = 0
 9969              	.LVL1510:
 9970 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 9971              	.LCFI136:
 9972              		.cfi_def_cfa_offset 36
 9973              		.cfi_offset 4, -36
 9974              		.cfi_offset 5, -32
 9975              		.cfi_offset 6, -28
 9976              		.cfi_offset 7, -24
 9977              		.cfi_offset 8, -20
 9978              		.cfi_offset 9, -16
 9979              		.cfi_offset 10, -12
 9980              		.cfi_offset 11, -8
 9981              		.cfi_offset 14, -4
 9982 0004 8BB0     		sub	sp, sp, #44
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 305


 9983              	.LCFI137:
 9984              		.cfi_def_cfa_offset 80
 9985 0006 0AAC     		add	r4, sp, #40
 9986 0008 44F80C0D 		str	r0, [r4, #-12]!
 9987 000c 8846     		mov	r8, r1
 9988 000e 1546     		mov	r5, r2
 9989 0010 1E46     		mov	r6, r3
 9990              	.LVL1511:
5316:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 9991              		.loc 1 5316 0
 9992 0012 2046     		mov	r0, r4
 9993              	.LVL1512:
 9994 0014 FFF7FEFF 		bl	get_ldnumber
 9995              	.LVL1513:
5317:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 9996              		.loc 1 5317 0
 9997 0018 0028     		cmp	r0, #0
 9998 001a C0F2DF82 		blt	.L995
5318:Middlewares/Third_Party/FatFs/src/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
 9999              		.loc 1 5318 0
 10000 001e 924B     		ldr	r3, .L1042
 10001 0020 53F82030 		ldr	r3, [r3, r0, lsl #2]
 10002 0024 0BB1     		cbz	r3, .L953
5318:Middlewares/Third_Party/FatFs/src/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
 10003              		.loc 1 5318 0 is_stmt 0 discriminator 1
 10004 0026 0022     		movs	r2, #0
 10005 0028 1A70     		strb	r2, [r3]
 10006              	.L953:
5319:Middlewares/Third_Party/FatFs/src/ff.c **** 	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 10007              		.loc 1 5319 0 is_stmt 1
 10008 002a C4B2     		uxtb	r4, r0
 10009              	.LVL1514:
5323:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
 10010              		.loc 1 5323 0
 10011 002c 2046     		mov	r0, r4
 10012              	.LVL1515:
 10013 002e FFF7FEFF 		bl	disk_initialize
 10014              	.LVL1516:
5324:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 10015              		.loc 1 5324 0
 10016 0032 10F0010F 		tst	r0, #1
 10017 0036 40F0D382 		bne	.L996
5325:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & 
 10018              		.loc 1 5325 0
 10019 003a 10F0040F 		tst	r0, #4
 10020 003e 40F0D182 		bne	.L997
5326:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
 10021              		.loc 1 5326 0
 10022 0042 09AA     		add	r2, sp, #36
 10023 0044 0321     		movs	r1, #3
 10024 0046 2046     		mov	r0, r4
 10025              	.LVL1517:
 10026 0048 FFF7FEFF 		bl	disk_ioctl
 10027              	.LVL1518:
 10028 004c 38B9     		cbnz	r0, .L954
5326:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
 10029              		.loc 1 5326 0 is_stmt 0 discriminator 2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 306


 10030 004e 099B     		ldr	r3, [sp, #36]
 10031 0050 2BB1     		cbz	r3, .L954
5326:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
 10032              		.loc 1 5326 0 discriminator 4
 10033 0052 B3F5004F 		cmp	r3, #32768
 10034 0056 02D8     		bhi	.L954
5326:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
 10035              		.loc 1 5326 0 discriminator 6
 10036 0058 5A1E     		subs	r2, r3, #1
 10037 005a 1342     		tst	r3, r2
 10038 005c 01D0     		beq	.L955
 10039              	.L954:
5326:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
 10040              		.loc 1 5326 0 discriminator 7
 10041 005e 0123     		movs	r3, #1
 10042 0060 0993     		str	r3, [sp, #36]
 10043              	.L955:
 10044              	.LVL1519:
5333:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 10045              		.loc 1 5333 0 is_stmt 1
 10046 0062 1DB1     		cbz	r5, .L956
5333:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 10047              		.loc 1 5333 0 is_stmt 0 discriminator 1
 10048 0064 B5F5007F 		cmp	r5, #512
 10049 0068 C0F0C082 		bcc	.L998
 10050              	.L956:
5333:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 10051              		.loc 1 5333 0 discriminator 4
 10052 006c B5F1807F 		cmp	r5, #16777216
 10053 0070 00F2BE82 		bhi	.L999
5333:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 10054              		.loc 1 5333 0 discriminator 6
 10055 0074 6B1E     		subs	r3, r5, #1
 10056 0076 2B42     		tst	r3, r5
 10057 0078 40F0BC82 		bne	.L1000
5334:Middlewares/Third_Party/FatFs/src/ff.c **** 
 10058              		.loc 1 5334 0 is_stmt 1
 10059 007c 6D0A     		lsrs	r5, r5, #9
 10060              	.LVL1520:
5338:Middlewares/Third_Party/FatFs/src/ff.c **** 	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 10061              		.loc 1 5338 0
 10062 007e 149B     		ldr	r3, [sp, #80]
 10063 0080 4FEA532A 		lsr	r10, r3, #9
 10064              	.LVL1521:
5339:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!szb_buf) return FR_MKFS_ABORTED;
 10065              		.loc 1 5339 0
 10066 0084 794F     		ldr	r7, .L1042+4
 10067 0086 1F40     		ands	r7, r7, r3
 10068              	.LVL1522:
5340:Middlewares/Third_Party/FatFs/src/ff.c **** 
 10069              		.loc 1 5340 0
 10070 0088 002F     		cmp	r7, #0
 10071 008a 00F0B582 		beq	.L1001
5353:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 10072              		.loc 1 5353 0
 10073 008e 08AA     		add	r2, sp, #32
 10074 0090 0121     		movs	r1, #1
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 307


 10075 0092 2046     		mov	r0, r4
 10076 0094 FFF7FEFF 		bl	disk_ioctl
 10077              	.LVL1523:
 10078 0098 0028     		cmp	r0, #0
 10079 009a 40F0AF82 		bne	.L1002
5354:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 10080              		.loc 1 5354 0
 10081 009e 18F00803 		ands	r3, r8, #8
 10082 00a2 0093     		str	r3, [sp]
 10083 00a4 70D0     		beq	.L1003
 10084 00a6 4FF00009 		mov	r9, #0
 10085              	.L957:
 10086              	.LVL1524:
5355:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_vol -= b_vol;						/* Volume size */
 10087              		.loc 1 5355 0 discriminator 4
 10088 00aa 089B     		ldr	r3, [sp, #32]
 10089 00ac 4B45     		cmp	r3, r9
 10090 00ae C0F0A782 		bcc	.L1004
5356:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 10091              		.loc 1 5356 0
 10092 00b2 A3EB0903 		sub	r3, r3, r9
 10093 00b6 0893     		str	r3, [sp, #32]
5358:Middlewares/Third_Party/FatFs/src/ff.c **** 
 10094              		.loc 1 5358 0
 10095 00b8 7F2B     		cmp	r3, #127
 10096 00ba 40F2A382 		bls	.L1005
5367:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (opt & FM_FAT32) {	/* FAT32 possible? */
 10097              		.loc 1 5367 0
 10098 00be 802D     		cmp	r5, #128
 10099 00c0 00F2A282 		bhi	.L1006
5368:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 10100              		.loc 1 5368 0
 10101 00c4 18F00200 		ands	r0, r8, #2
 10102 00c8 06D0     		beq	.L958
5369:Middlewares/Third_Party/FatFs/src/ff.c **** 				fmt = FS_FAT32; break;
 10103              		.loc 1 5369 0
 10104 00ca 08F00702 		and	r2, r8, #7
 10105 00ce 022A     		cmp	r2, #2
 10106 00d0 5DD0     		beq	.L1007
5369:Middlewares/Third_Party/FatFs/src/ff.c **** 				fmt = FS_FAT32; break;
 10107              		.loc 1 5369 0 is_stmt 0 discriminator 1
 10108 00d2 18F0010F 		tst	r8, #1
 10109 00d6 61D0     		beq	.L1008
 10110              	.L958:
5373:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT16;
 10111              		.loc 1 5373 0 is_stmt 1
 10112 00d8 18F0010F 		tst	r8, #1
 10113 00dc 00F09682 		beq	.L1009
5374:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (0);
 10114              		.loc 1 5374 0
 10115 00e0 4FF0020B 		mov	fp, #2
 10116 00e4 0194     		str	r4, [sp, #4]
 10117 00e6 CDF808A0 		str	r10, [sp, #8]
 10118 00ea 0397     		str	r7, [sp, #12]
 10119              	.LVL1525:
 10120              	.L960:
5544:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!pau) {	/* au auto-selection */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 308


 10121              		.loc 1 5544 0
 10122 00ec BBF1030F 		cmp	fp, #3
 10123 00f0 5FD0     		beq	.L978
5555:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 10124              		.loc 1 5555 0
 10125 00f2 002D     		cmp	r5, #0
 10126 00f4 00F08180 		beq	.L1034
 10127 00f8 A846     		mov	r8, r5
 10128              	.LVL1526:
 10129              	.L966:
5559:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst > MAX_FAT12) {
 10130              		.loc 1 5559 0
 10131 00fa B3FBF8F2 		udiv	r2, r3, r8
 10132              	.LVL1527:
5560:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = n_clst * 2 + 4;		/* FAT size [byte] */
 10133              		.loc 1 5560 0
 10134 00fe 40F6F571 		movw	r1, #4085
 10135 0102 8A42     		cmp	r2, r1
 10136 0104 40F28A80 		bls	.L969
5561:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
 10137              		.loc 1 5561 0
 10138 0108 0232     		adds	r2, r2, #2
 10139              	.LVL1528:
 10140 010a 5200     		lsls	r2, r2, #1
 10141              	.LVL1529:
 10142              	.L970:
5566:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv = 1;						/* Number of reserved sectors */
 10143              		.loc 1 5566 0
 10144 010c 02F2FF12 		addw	r2, r2, #511
 10145              	.LVL1530:
 10146 0110 520A     		lsrs	r2, r2, #9
 10147              	.LVL1531:
5568:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 10148              		.loc 1 5568 0
 10149 0112 4FF0200E 		mov	lr, #32
5567:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 10150              		.loc 1 5567 0
 10151 0116 4FF0010C 		mov	ip, #1
 10152              	.LVL1532:
 10153              	.L965:
5570:Middlewares/Third_Party/FatFs/src/ff.c **** 			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 10154              		.loc 1 5570 0
 10155 011a 0CEB090A 		add	r10, ip, r9
 10156              	.LVL1533:
5571:Middlewares/Third_Party/FatFs/src/ff.c **** 
 10157              		.loc 1 5571 0
 10158 011e 02EB0A01 		add	r1, r2, r10
 10159 0122 7144     		add	r1, r1, lr
 10160              	.LVL1534:
5574:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 10161              		.loc 1 5574 0
 10162 0124 099F     		ldr	r7, [sp, #36]
 10163 0126 7C18     		adds	r4, r7, r1
 10164 0128 013C     		subs	r4, r4, #1
 10165 012a 7F42     		negs	r7, r7
 10166 012c 3C40     		ands	r4, r4, r7
 10167 012e 641A     		subs	r4, r4, r1
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 309


 10168              	.LVL1535:
5575:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv += n; b_fat += n;
 10169              		.loc 1 5575 0
 10170 0130 BBF1030F 		cmp	fp, #3
 10171 0134 7AD0     		beq	.L1035
5578:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 10172              		.loc 1 5578 0
 10173 0136 2244     		add	r2, r2, r4
 10174              	.LVL1536:
 10175              	.L972:
5582:Middlewares/Third_Party/FatFs/src/ff.c **** 			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 10176              		.loc 1 5582 0
 10177 0138 01EB0811 		add	r1, r1, r8, lsl #4
 10178              	.LVL1537:
 10179 013c A1EB0901 		sub	r1, r1, r9
 10180 0140 8B42     		cmp	r3, r1
 10181 0142 C0F06782 		bcc	.L1013
5583:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
 10182              		.loc 1 5583 0
 10183 0146 A3EB0C01 		sub	r1, r3, ip
 10184 014a 891A     		subs	r1, r1, r2
 10185 014c A1EB0E01 		sub	r1, r1, lr
 10186 0150 B1FBF8F1 		udiv	r1, r1, r8
 10187              	.LVL1538:
5584:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 10188              		.loc 1 5584 0
 10189 0154 BBF1030F 		cmp	fp, #3
 10190 0158 6BD0     		beq	.L1036
 10191              	.LVL1539:
 10192              	.L973:
5590:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 10193              		.loc 1 5590 0
 10194 015a BBF1020F 		cmp	fp, #2
 10195 015e 40F08F80 		bne	.L975
5591:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (pau * 2) <= 64) {
 10196              		.loc 1 5591 0
 10197 0162 4FF6F574 		movw	r4, #65525
 10198 0166 A142     		cmp	r1, r4
 10199 0168 70D9     		bls	.L976
5592:Middlewares/Third_Party/FatFs/src/ff.c **** 						au = pau * 2; continue;		/* Adjust cluster size and retry */
 10200              		.loc 1 5592 0
 10201 016a 1DB9     		cbnz	r5, .L977
5592:Middlewares/Third_Party/FatFs/src/ff.c **** 						au = pau * 2; continue;		/* Adjust cluster size and retry */
 10202              		.loc 1 5592 0 is_stmt 0 discriminator 1
 10203 016c 4FEA4802 		lsl	r2, r8, #1
 10204              	.LVL1540:
 10205 0170 402A     		cmp	r2, #64
 10206 0172 1AD9     		bls	.L1015
 10207              	.L977:
5595:Middlewares/Third_Party/FatFs/src/ff.c **** 						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 10208              		.loc 1 5595 0 is_stmt 1
 10209 0174 D8B9     		cbnz	r0, .L1016
5598:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 10210              		.loc 1 5598 0
 10211 0176 002D     		cmp	r5, #0
 10212 0178 40F05082 		bne	.L1017
5598:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 310


 10213              		.loc 1 5598 0 is_stmt 0 discriminator 1
 10214 017c 4FEA4805 		lsl	r5, r8, #1
 10215              	.LVL1541:
 10216 0180 802D     		cmp	r5, #128
 10217 0182 B3D9     		bls	.L960
5599:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 10218              		.loc 1 5599 0 is_stmt 1
 10219 0184 0E20     		movs	r0, #14
 10220 0186 2EE2     		b	.L952
 10221              	.LVL1542:
 10222              	.L1003:
5354:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 10223              		.loc 1 5354 0
 10224 0188 4FF03F09 		mov	r9, #63
 10225 018c 8DE7     		b	.L957
 10226              	.LVL1543:
 10227              	.L1007:
5370:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 10228              		.loc 1 5370 0
 10229 018e 4FF0030B 		mov	fp, #3
 10230 0192 0194     		str	r4, [sp, #4]
 10231 0194 CDF808A0 		str	r10, [sp, #8]
 10232 0198 0397     		str	r7, [sp, #12]
 10233 019a A7E7     		b	.L960
 10234              	.L1008:
 10235 019c 4FF0030B 		mov	fp, #3
 10236 01a0 0194     		str	r4, [sp, #4]
 10237 01a2 CDF808A0 		str	r10, [sp, #8]
 10238 01a6 0397     		str	r7, [sp, #12]
 10239 01a8 A0E7     		b	.L960
 10240              	.LVL1544:
 10241              	.L1015:
5593:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 10242              		.loc 1 5593 0
 10243 01aa 1546     		mov	r5, r2
 10244              	.LVL1545:
 10245 01ac 9EE7     		b	.L960
 10246              	.LVL1546:
 10247              	.L1016:
5596:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 10248              		.loc 1 5596 0
 10249 01ae 4FF0030B 		mov	fp, #3
 10250              	.LVL1547:
 10251              	.L978:
5545:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 10252              		.loc 1 5545 0
 10253 01b2 95B1     		cbz	r5, .L1037
 10254 01b4 A846     		mov	r8, r5
 10255              	.L962:
 10256              	.LVL1548:
5549:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 10257              		.loc 1 5549 0
 10258 01b6 B3FBF8F1 		udiv	r1, r3, r8
 10259              	.LVL1549:
5550:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv = 32;	/* Number of reserved sectors */
 10260              		.loc 1 5550 0
 10261 01ba 8A1C     		adds	r2, r1, #2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 311


 10262 01bc 9200     		lsls	r2, r2, #2
 10263 01be 02F2FF12 		addw	r2, r2, #511
 10264 01c2 520A     		lsrs	r2, r2, #9
 10265              	.LVL1550:
5553:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {				/* FAT12/16 volume */
 10266              		.loc 1 5553 0
 10267 01c4 2A4C     		ldr	r4, .L1042+8
 10268 01c6 0C44     		add	r4, r4, r1
 10269 01c8 2A49     		ldr	r1, .L1042+12
 10270              	.LVL1551:
 10271 01ca 8C42     		cmp	r4, r1
 10272 01cc 00F22082 		bhi	.L1011
5552:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 10273              		.loc 1 5552 0
 10274 01d0 4FF0000E 		mov	lr, #0
5551:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_dir = 0;		/* No static directory */
 10275              		.loc 1 5551 0
 10276 01d4 4FF0200C 		mov	ip, #32
 10277 01d8 9FE7     		b	.L965
 10278              	.LVL1552:
 10279              	.L1037:
5546:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 10280              		.loc 1 5546 0
 10281 01da 5C0C     		lsrs	r4, r3, #17
 10282              	.LVL1553:
5547:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 10283              		.loc 1 5547 0
 10284 01dc 0021     		movs	r1, #0
 10285 01de 4FF00108 		mov	r8, #1
 10286 01e2 02E0     		b	.L963
 10287              	.LVL1554:
 10288              	.L964:
5547:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 10289              		.loc 1 5547 0 is_stmt 0 discriminator 4
 10290 01e4 0131     		adds	r1, r1, #1
 10291              	.LVL1555:
 10292 01e6 4FEA4808 		lsl	r8, r8, #1
 10293              	.LVL1556:
 10294              	.L963:
5547:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 10295              		.loc 1 5547 0 discriminator 1
 10296 01ea 234A     		ldr	r2, .L1042+16
 10297 01ec 32F81120 		ldrh	r2, [r2, r1, lsl #1]
 10298 01f0 002A     		cmp	r2, #0
 10299 01f2 E0D0     		beq	.L962
5547:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 10300              		.loc 1 5547 0 discriminator 3
 10301 01f4 A242     		cmp	r2, r4
 10302 01f6 F5D9     		bls	.L964
 10303 01f8 DDE7     		b	.L962
 10304              	.LVL1557:
 10305              	.L1034:
5556:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 10306              		.loc 1 5556 0 is_stmt 1
 10307 01fa 1C0B     		lsrs	r4, r3, #12
 10308              	.LVL1558:
5557:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 312


 10309              		.loc 1 5557 0
 10310 01fc 0021     		movs	r1, #0
 10311 01fe 4FF00108 		mov	r8, #1
 10312 0202 02E0     		b	.L967
 10313              	.LVL1559:
 10314              	.L968:
5557:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 10315              		.loc 1 5557 0 is_stmt 0 discriminator 4
 10316 0204 0131     		adds	r1, r1, #1
 10317              	.LVL1560:
 10318 0206 4FEA4808 		lsl	r8, r8, #1
 10319              	.LVL1561:
 10320              	.L967:
5557:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 10321              		.loc 1 5557 0 discriminator 1
 10322 020a 1C4A     		ldr	r2, .L1042+20
 10323 020c 32F81120 		ldrh	r2, [r2, r1, lsl #1]
 10324 0210 002A     		cmp	r2, #0
 10325 0212 3FF472AF 		beq	.L966
5557:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 10326              		.loc 1 5557 0 discriminator 3
 10327 0216 A242     		cmp	r2, r4
 10328 0218 F4D9     		bls	.L968
 10329 021a 6EE7     		b	.L966
 10330              	.LVL1562:
 10331              	.L969:
5564:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 10332              		.loc 1 5564 0 is_stmt 1
 10333 021c 02EB4202 		add	r2, r2, r2, lsl #1
 10334              	.LVL1563:
 10335 0220 0132     		adds	r2, r2, #1
 10336 0222 5208     		lsrs	r2, r2, #1
 10337 0224 0332     		adds	r2, r2, #3
 10338              	.LVL1564:
5563:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 10339              		.loc 1 5563 0
 10340 0226 4FF0010B 		mov	fp, #1
 10341 022a 6FE7     		b	.L970
 10342              	.LVL1565:
 10343              	.L1035:
5576:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {					/* FAT12/16: Expand FAT size */
 10344              		.loc 1 5576 0
 10345 022c A444     		add	ip, ip, r4
 10346              	.LVL1566:
 10347 022e A244     		add	r10, r10, r4
 10348              	.LVL1567:
 10349 0230 82E7     		b	.L972
 10350              	.LVL1568:
 10351              	.L1036:
5585:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 10352              		.loc 1 5585 0
 10353 0232 4FF6F574 		movw	r4, #65525
 10354              	.LVL1569:
 10355 0236 A142     		cmp	r1, r4
 10356 0238 8FD8     		bhi	.L973
5586:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 10357              		.loc 1 5586 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 313


 10358 023a 002D     		cmp	r5, #0
 10359 023c 40F0EC81 		bne	.L1014
 10360              	.LVL1570:
5586:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 10361              		.loc 1 5586 0 is_stmt 0 discriminator 1
 10362 0240 5FEA5805 		lsrs	r5, r8, #1
 10363              	.LVL1571:
 10364 0244 7FF452AF 		bne	.L960
5587:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 10365              		.loc 1 5587 0 is_stmt 1
 10366 0248 0E20     		movs	r0, #14
 10367 024a CCE1     		b	.L952
 10368              	.L976:
5601:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 10369              		.loc 1 5601 0
 10370 024c 40F6F574 		movw	r4, #4085
 10371 0250 A142     		cmp	r1, r4
 10372 0252 15D8     		bhi	.L975
5602:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 10373              		.loc 1 5602 0
 10374 0254 002D     		cmp	r5, #0
 10375 0256 40F0E381 		bne	.L1018
5602:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 10376              		.loc 1 5602 0 is_stmt 0 discriminator 1
 10377 025a 4FEA4805 		lsl	r5, r8, #1
 10378              	.LVL1572:
 10379 025e 802D     		cmp	r5, #128
 10380 0260 7FF644AF 		bls	.L960
5603:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 10381              		.loc 1 5603 0 is_stmt 1
 10382 0264 0E20     		movs	r0, #14
 10383 0266 BEE1     		b	.L952
 10384              	.L1043:
 10385              		.align	2
 10386              	.L1042:
 10387 0268 00000000 		.word	.LANCHOR3
 10388 026c 00FEFFFF 		.word	-512
 10389 0270 0A00FFFF 		.word	-65526
 10390 0274 FFFFFE0F 		.word	268369919
 10391 0278 00000000 		.word	.LANCHOR6
 10392 027c 00000000 		.word	.LANCHOR7
 10393              	.L975:
 10394 0280 CDF818E0 		str	lr, [sp, #24]
 10395 0284 6546     		mov	r5, ip
 10396              	.LVL1573:
 10397 0286 0592     		str	r2, [sp, #20]
 10398 0288 CDF810A0 		str	r10, [sp, #16]
 10399 028c 019C     		ldr	r4, [sp, #4]
 10400 028e DDF808A0 		ldr	r10, [sp, #8]
 10401              	.LVL1574:
 10402 0292 039F     		ldr	r7, [sp, #12]
 10403 0294 0B46     		mov	r3, r1
 10404 0296 0291     		str	r1, [sp, #8]
 10405              	.LVL1575:
5606:Middlewares/Third_Party/FatFs/src/ff.c **** 
 10406              		.loc 1 5606 0
 10407 0298 40F6F572 		movw	r2, #4085
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 314


 10408              	.LVL1576:
 10409 029c BBF1010F 		cmp	fp, #1
 10410 02a0 14BF     		ite	ne
 10411 02a2 0023     		movne	r3, #0
 10412 02a4 0123     		moveq	r3, #1
 10413 02a6 9142     		cmp	r1, r2
 10414 02a8 98BF     		it	ls
 10415 02aa 0023     		movls	r3, #0
 10416 02ac 002B     		cmp	r3, #0
 10417 02ae 40F0B981 		bne	.L1019
 10418              	.LVL1577:
5617:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 10419              		.loc 1 5617 0
 10420 02b2 4FF40072 		mov	r2, #512
 10421 02b6 0021     		movs	r1, #0
 10422              	.LVL1578:
 10423 02b8 3046     		mov	r0, r6
 10424 02ba FFF7FEFF 		bl	mem_set
 10425              	.LVL1579:
5618:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 10426              		.loc 1 5618 0
 10427 02be 0B22     		movs	r2, #11
 10428 02c0 DA49     		ldr	r1, .L1044
 10429 02c2 3046     		mov	r0, r6
 10430 02c4 FFF7FEFF 		bl	mem_cpy
 10431              	.LVL1580:
5619:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 10432              		.loc 1 5619 0
 10433 02c8 4FF40071 		mov	r1, #512
 10434 02cc 06F10B00 		add	r0, r6, #11
 10435 02d0 FFF7FEFF 		bl	st_word
 10436              	.LVL1581:
5620:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 10437              		.loc 1 5620 0
 10438 02d4 86F80D80 		strb	r8, [r6, #13]
5621:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 10439              		.loc 1 5621 0
 10440 02d8 A9B2     		uxth	r1, r5
 10441 02da 06F10E00 		add	r0, r6, #14
 10442 02de FFF7FEFF 		bl	st_word
 10443              	.LVL1582:
5622:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root direc
 10444              		.loc 1 5622 0
 10445 02e2 0123     		movs	r3, #1
 10446 02e4 3374     		strb	r3, [r6, #16]
5623:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < 0x10000) {
 10447              		.loc 1 5623 0
 10448 02e6 06F11100 		add	r0, r6, #17
 10449 02ea BBF1030F 		cmp	fp, #3
 10450 02ee 00F0D880 		beq	.L1020
 10451 02f2 4FF40071 		mov	r1, #512
 10452              	.L979:
5623:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < 0x10000) {
 10453              		.loc 1 5623 0 is_stmt 0 discriminator 4
 10454 02f6 FFF7FEFF 		bl	st_word
 10455              	.LVL1583:
5624:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 315


 10456              		.loc 1 5624 0 is_stmt 1 discriminator 4
 10457 02fa 0899     		ldr	r1, [sp, #32]
 10458 02fc B1F5803F 		cmp	r1, #65536
 10459 0300 80F0D180 		bcs	.L980
5625:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 10460              		.loc 1 5625 0
 10461 0304 89B2     		uxth	r1, r1
 10462 0306 06F11300 		add	r0, r6, #19
 10463 030a FFF7FEFF 		bl	st_word
 10464              	.LVL1584:
 10465              	.L981:
5629:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 10466              		.loc 1 5629 0
 10467 030e F823     		movs	r3, #248
 10468 0310 7375     		strb	r3, [r6, #21]
5630:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 10469              		.loc 1 5630 0
 10470 0312 3F21     		movs	r1, #63
 10471 0314 06F11800 		add	r0, r6, #24
 10472 0318 FFF7FEFF 		bl	st_word
 10473              	.LVL1585:
5631:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 10474              		.loc 1 5631 0
 10475 031c FF21     		movs	r1, #255
 10476 031e 06F11A00 		add	r0, r6, #26
 10477 0322 FFF7FEFF 		bl	st_word
 10478              	.LVL1586:
5632:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
 10479              		.loc 1 5632 0
 10480 0326 4946     		mov	r1, r9
 10481 0328 06F11C00 		add	r0, r6, #28
 10482 032c FFF7FEFF 		bl	st_dword
 10483              	.LVL1587:
5633:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 10484              		.loc 1 5633 0
 10485 0330 BBF1030F 		cmp	fp, #3
 10486 0334 40F0BC80 		bne	.L982
5634:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 10487              		.loc 1 5634 0
 10488 0338 FFF7FEFF 		bl	get_fattime
 10489              	.LVL1588:
 10490 033c 0146     		mov	r1, r0
 10491 033e 06F14300 		add	r0, r6, #67
 10492 0342 FFF7FEFF 		bl	st_dword
 10493              	.LVL1589:
5635:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 10494              		.loc 1 5635 0
 10495 0346 0599     		ldr	r1, [sp, #20]
 10496 0348 06F12400 		add	r0, r6, #36
 10497 034c FFF7FEFF 		bl	st_dword
 10498              	.LVL1590:
5636:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 10499              		.loc 1 5636 0
 10500 0350 0221     		movs	r1, #2
 10501 0352 06F12C00 		add	r0, r6, #44
 10502 0356 FFF7FEFF 		bl	st_dword
 10503              	.LVL1591:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 316


5637:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 10504              		.loc 1 5637 0
 10505 035a 0121     		movs	r1, #1
 10506 035c 06F13000 		add	r0, r6, #48
 10507 0360 FFF7FEFF 		bl	st_word
 10508              	.LVL1592:
5638:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 10509              		.loc 1 5638 0
 10510 0364 0621     		movs	r1, #6
 10511 0366 06F13200 		add	r0, r6, #50
 10512 036a FFF7FEFF 		bl	st_word
 10513              	.LVL1593:
5639:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 10514              		.loc 1 5639 0
 10515 036e 8023     		movs	r3, #128
 10516 0370 86F84030 		strb	r3, [r6, #64]
5640:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 10517              		.loc 1 5640 0
 10518 0374 2923     		movs	r3, #41
 10519 0376 86F84230 		strb	r3, [r6, #66]
5641:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 10520              		.loc 1 5641 0
 10521 037a 1322     		movs	r2, #19
 10522 037c AC49     		ldr	r1, .L1044+4
 10523 037e 06F14700 		add	r0, r6, #71
 10524 0382 FFF7FEFF 		bl	mem_cpy
 10525              	.LVL1594:
 10526              	.L983:
5649:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector 
 10527              		.loc 1 5649 0
 10528 0386 06F5FF73 		add	r3, r6, #510
 10529 038a 0193     		str	r3, [sp, #4]
 10530              	.LVL1595:
 10531 038c 4AF65521 		movw	r1, #43605
 10532 0390 1846     		mov	r0, r3
 10533 0392 FFF7FEFF 		bl	st_word
 10534              	.LVL1596:
5650:Middlewares/Third_Party/FatFs/src/ff.c **** 
 10535              		.loc 1 5650 0
 10536 0396 0123     		movs	r3, #1
 10537 0398 4A46     		mov	r2, r9
 10538 039a 3146     		mov	r1, r6
 10539 039c 2046     		mov	r0, r4
 10540 039e FFF7FEFF 		bl	disk_write
 10541              	.LVL1597:
 10542 03a2 0028     		cmp	r0, #0
 10543 03a4 40F04081 		bne	.L1021
5653:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 10544              		.loc 1 5653 0
 10545 03a8 BBF1030F 		cmp	fp, #3
 10546 03ac 00F09A80 		beq	.L1038
 10547              	.L984:
5666:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_fat;		/* FAT start sector */
 10548              		.loc 1 5666 0
 10549 03b0 3A46     		mov	r2, r7
 10550 03b2 0021     		movs	r1, #0
 10551 03b4 3046     		mov	r0, r6
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 317


 10552 03b6 FFF7FEFF 		bl	mem_set
 10553              	.LVL1598:
5668:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
 10554              		.loc 1 5668 0
 10555 03ba 0025     		movs	r5, #0
 10556              	.LVL1599:
 10557 03bc CDF80880 		str	r8, [sp, #8]
 10558              	.LVL1600:
 10559              	.L985:
5668:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
 10560              		.loc 1 5668 0 is_stmt 0 discriminator 1
 10561 03c0 002D     		cmp	r5, #0
 10562 03c2 00F0C480 		beq	.L990
 10563 03c6 DDF80880 		ldr	r8, [sp, #8]
5686:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
 10564              		.loc 1 5686 0 is_stmt 1
 10565 03ca BBF1030F 		cmp	fp, #3
 10566 03ce 00F0F880 		beq	.L1039
 10567 03d2 069F     		ldr	r7, [sp, #24]
 10568 03d4 DDF81080 		ldr	r8, [sp, #16]
 10569              	.LVL1601:
 10570              	.L992:
5688:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 10571              		.loc 1 5688 0
 10572 03d8 3D46     		mov	r5, r7
 10573 03da 5745     		cmp	r7, r10
 10574 03dc 28BF     		it	cs
 10575 03de 5546     		movcs	r5, r10
 10576              	.LVL1602:
5689:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
 10577              		.loc 1 5689 0
 10578 03e0 2B46     		mov	r3, r5
 10579 03e2 4246     		mov	r2, r8
 10580 03e4 3146     		mov	r1, r6
 10581 03e6 2046     		mov	r0, r4
 10582 03e8 FFF7FEFF 		bl	disk_write
 10583              	.LVL1603:
 10584 03ec 0028     		cmp	r0, #0
 10585 03ee 40F02B81 		bne	.L1024
5690:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (nsect);
 10586              		.loc 1 5690 0
 10587 03f2 A844     		add	r8, r8, r5
 10588              	.LVL1604:
5691:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 10589              		.loc 1 5691 0
 10590 03f4 7F1B     		subs	r7, r7, r5
 10591              	.LVL1605:
 10592 03f6 EFD1     		bne	.L992
5698:Middlewares/Third_Party/FatFs/src/ff.c **** 			sys = 0x0C;		/* FAT32X */
 10593              		.loc 1 5698 0
 10594 03f8 BBF1030F 		cmp	fp, #3
 10595 03fc 00F0E580 		beq	.L1025
5701:Middlewares/Third_Party/FatFs/src/ff.c **** 				sys = 0x06;	/* FAT12/16 (>=64KS) */
 10596              		.loc 1 5701 0
 10597 0400 089B     		ldr	r3, [sp, #32]
 10598 0402 B3F5803F 		cmp	r3, #65536
 10599 0406 80F0E380 		bcs	.L1026
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 318


5704:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 10600              		.loc 1 5704 0
 10601 040a BBF1020F 		cmp	fp, #2
 10602 040e 40F0E280 		bne	.L1027
 10603 0412 4FF00408 		mov	r8, #4
 10604              	.LVL1606:
 10605              	.L993:
5716:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
 10606              		.loc 1 5716 0
 10607 0416 009B     		ldr	r3, [sp]
 10608 0418 CBBB     		cbnz	r3, .L994
5717:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 10609              		.loc 1 5717 0
 10610 041a 4FF40072 		mov	r2, #512
 10611 041e 0021     		movs	r1, #0
 10612 0420 3046     		mov	r0, r6
 10613 0422 FFF7FEFF 		bl	mem_set
 10614              	.LVL1607:
5718:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 10615              		.loc 1 5718 0
 10616 0426 4AF65521 		movw	r1, #43605
 10617 042a 0198     		ldr	r0, [sp, #4]
 10618 042c FFF7FEFF 		bl	st_word
 10619              	.LVL1608:
5720:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StHead] = 1;				/* Start head */
 10620              		.loc 1 5720 0
 10621 0430 0025     		movs	r5, #0
 10622              	.LVL1609:
 10623 0432 86F8BE51 		strb	r5, [r6, #446]
5721:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StSec] = 1;					/* Start sector */
 10624              		.loc 1 5721 0
 10625 0436 0127     		movs	r7, #1
 10626              	.LVL1610:
 10627 0438 86F8BF71 		strb	r7, [r6, #447]
5722:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StCyl] = 0;					/* Start cylinder */
 10628              		.loc 1 5722 0
 10629 043c 86F8C071 		strb	r7, [r6, #448]
5723:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_System] = sys;				/* System type */
 10630              		.loc 1 5723 0
 10631 0440 86F8C151 		strb	r5, [r6, #449]
5724:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 10632              		.loc 1 5724 0
 10633 0444 86F8C281 		strb	r8, [r6, #450]
5725:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdHead] = 254;				/* End head */
 10634              		.loc 1 5725 0
 10635 0448 089B     		ldr	r3, [sp, #32]
 10636 044a 4B44     		add	r3, r3, r9
 10637 044c 43F6C162 		movw	r2, #16065
 10638 0450 B3FBF2F3 		udiv	r3, r3, r2
 10639              	.LVL1611:
5726:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 10640              		.loc 1 5726 0
 10641 0454 FE22     		movs	r2, #254
 10642 0456 86F8C321 		strb	r2, [r6, #451]
5727:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 10643              		.loc 1 5727 0
 10644 045a 9A08     		lsrs	r2, r3, #2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 319


 10645 045c 42F03F02 		orr	r2, r2, #63
 10646 0460 86F8C421 		strb	r2, [r6, #452]
5728:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 10647              		.loc 1 5728 0
 10648 0464 86F8C531 		strb	r3, [r6, #453]
5729:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 10649              		.loc 1 5729 0
 10650 0468 4946     		mov	r1, r9
 10651 046a 06F5E370 		add	r0, r6, #454
 10652 046e FFF7FEFF 		bl	st_dword
 10653              	.LVL1612:
5730:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 10654              		.loc 1 5730 0
 10655 0472 0899     		ldr	r1, [sp, #32]
 10656 0474 06F5E570 		add	r0, r6, #458
 10657 0478 FFF7FEFF 		bl	st_dword
 10658              	.LVL1613:
5731:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 10659              		.loc 1 5731 0
 10660 047c 3B46     		mov	r3, r7
 10661 047e 2A46     		mov	r2, r5
 10662 0480 3146     		mov	r1, r6
 10663 0482 2046     		mov	r0, r4
 10664 0484 FFF7FEFF 		bl	disk_write
 10665              	.LVL1614:
 10666 0488 0028     		cmp	r0, #0
 10667 048a 40F0DF80 		bne	.L1028
 10668              	.LVL1615:
 10669              	.L994:
5735:Middlewares/Third_Party/FatFs/src/ff.c **** 
 10670              		.loc 1 5735 0
 10671 048e 0022     		movs	r2, #0
 10672 0490 1146     		mov	r1, r2
 10673 0492 2046     		mov	r0, r4
 10674 0494 FFF7FEFF 		bl	disk_ioctl
 10675              	.LVL1616:
 10676 0498 0028     		cmp	r0, #0
 10677 049a 00F0D980 		beq	.L1029
 10678 049e 0120     		movs	r0, #1
 10679 04a0 A1E0     		b	.L952
 10680              	.LVL1617:
 10681              	.L1020:
5623:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < 0x10000) {
 10682              		.loc 1 5623 0
 10683 04a2 0021     		movs	r1, #0
 10684 04a4 27E7     		b	.L979
 10685              	.L980:
5627:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 10686              		.loc 1 5627 0
 10687 04a6 06F12000 		add	r0, r6, #32
 10688 04aa FFF7FEFF 		bl	st_dword
 10689              	.LVL1618:
 10690 04ae 2EE7     		b	.L981
 10691              	.L982:
5643:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 10692              		.loc 1 5643 0
 10693 04b0 FFF7FEFF 		bl	get_fattime
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 320


 10694              	.LVL1619:
 10695 04b4 0146     		mov	r1, r0
 10696 04b6 06F12700 		add	r0, r6, #39
 10697 04ba FFF7FEFF 		bl	st_dword
 10698              	.LVL1620:
5644:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 10699              		.loc 1 5644 0
 10700 04be BDF81410 		ldrh	r1, [sp, #20]
 10701 04c2 06F11600 		add	r0, r6, #22
 10702 04c6 FFF7FEFF 		bl	st_word
 10703              	.LVL1621:
5645:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 10704              		.loc 1 5645 0
 10705 04ca 8023     		movs	r3, #128
 10706 04cc 86F82430 		strb	r3, [r6, #36]
5646:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 10707              		.loc 1 5646 0
 10708 04d0 2923     		movs	r3, #41
 10709 04d2 86F82630 		strb	r3, [r6, #38]
5647:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 10710              		.loc 1 5647 0
 10711 04d6 1322     		movs	r2, #19
 10712 04d8 5649     		ldr	r1, .L1044+8
 10713 04da 06F12B00 		add	r0, r6, #43
 10714 04de FFF7FEFF 		bl	mem_cpy
 10715              	.LVL1622:
 10716 04e2 50E7     		b	.L983
 10717              	.LVL1623:
 10718              	.L1038:
5654:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
 10719              		.loc 1 5654 0
 10720 04e4 0123     		movs	r3, #1
 10721 04e6 09F10602 		add	r2, r9, #6
 10722 04ea 3146     		mov	r1, r6
 10723 04ec 2046     		mov	r0, r4
 10724 04ee FFF7FEFF 		bl	disk_write
 10725              	.LVL1624:
5655:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_LeadSig, 0x41615252);
 10726              		.loc 1 5655 0
 10727 04f2 4FF40072 		mov	r2, #512
 10728 04f6 0021     		movs	r1, #0
 10729 04f8 3046     		mov	r0, r6
 10730 04fa FFF7FEFF 		bl	mem_set
 10731              	.LVL1625:
5656:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_StrucSig, 0x61417272);
 10732              		.loc 1 5656 0
 10733 04fe 4E49     		ldr	r1, .L1044+12
 10734 0500 3046     		mov	r0, r6
 10735 0502 FFF7FEFF 		bl	st_dword
 10736              	.LVL1626:
5657:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 10737              		.loc 1 5657 0
 10738 0506 4D49     		ldr	r1, .L1044+16
 10739 0508 06F5F270 		add	r0, r6, #484
 10740 050c FFF7FEFF 		bl	st_dword
 10741              	.LVL1627:
5658:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 321


 10742              		.loc 1 5658 0
 10743 0510 029B     		ldr	r3, [sp, #8]
 10744 0512 591E     		subs	r1, r3, #1
 10745 0514 06F5F470 		add	r0, r6, #488
 10746 0518 FFF7FEFF 		bl	st_dword
 10747              	.LVL1628:
5659:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);
 10748              		.loc 1 5659 0
 10749 051c 0221     		movs	r1, #2
 10750 051e 06F5F670 		add	r0, r6, #492
 10751 0522 FFF7FEFF 		bl	st_dword
 10752              	.LVL1629:
5660:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 10753              		.loc 1 5660 0
 10754 0526 4AF65521 		movw	r1, #43605
 10755 052a 0198     		ldr	r0, [sp, #4]
 10756 052c FFF7FEFF 		bl	st_word
 10757              	.LVL1630:
5661:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 10758              		.loc 1 5661 0
 10759 0530 0123     		movs	r3, #1
 10760 0532 09F10702 		add	r2, r9, #7
 10761 0536 3146     		mov	r1, r6
 10762 0538 2046     		mov	r0, r4
 10763 053a FFF7FEFF 		bl	disk_write
 10764              	.LVL1631:
5662:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 10765              		.loc 1 5662 0
 10766 053e 0123     		movs	r3, #1
 10767 0540 09EB0302 		add	r2, r9, r3
 10768 0544 3146     		mov	r1, r6
 10769 0546 2046     		mov	r0, r4
 10770 0548 FFF7FEFF 		bl	disk_write
 10771              	.LVL1632:
 10772 054c 30E7     		b	.L984
 10773              	.LVL1633:
 10774              	.L990:
5669:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 10775              		.loc 1 5669 0
 10776 054e BBF1030F 		cmp	fp, #3
 10777 0552 23D0     		beq	.L1040
5674:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 10778              		.loc 1 5674 0
 10779 0554 BBF1010F 		cmp	fp, #1
 10780 0558 31D0     		beq	.L1041
 10781 055a 6FF00701 		mvn	r1, #7
 10782              	.L988:
5674:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 10783              		.loc 1 5674 0 is_stmt 0 discriminator 4
 10784 055e 3046     		mov	r0, r6
 10785 0560 FFF7FEFF 		bl	st_dword
 10786              	.LVL1634:
 10787              	.L987:
5674:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 10788              		.loc 1 5674 0
 10789 0564 DDF81480 		ldr	r8, [sp, #20]
 10790              	.L989:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 322


 10791              	.LVL1635:
5678:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 10792              		.loc 1 5678 0 is_stmt 1
 10793 0568 4746     		mov	r7, r8
 10794 056a D045     		cmp	r8, r10
 10795 056c 28BF     		it	cs
 10796 056e 5746     		movcs	r7, r10
 10797              	.LVL1636:
5679:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_set(buf, 0, ss);
 10798              		.loc 1 5679 0
 10799 0570 3B46     		mov	r3, r7
 10800 0572 049A     		ldr	r2, [sp, #16]
 10801 0574 3146     		mov	r1, r6
 10802 0576 2046     		mov	r0, r4
 10803 0578 FFF7FEFF 		bl	disk_write
 10804              	.LVL1637:
 10805 057c 0028     		cmp	r0, #0
 10806 057e 61D1     		bne	.L1023
5680:Middlewares/Third_Party/FatFs/src/ff.c **** 				sect += n; nsect -= n;
 10807              		.loc 1 5680 0
 10808 0580 4FF40072 		mov	r2, #512
 10809 0584 0021     		movs	r1, #0
 10810 0586 3046     		mov	r0, r6
 10811 0588 FFF7FEFF 		bl	mem_set
 10812              	.LVL1638:
5681:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (nsect);
 10813              		.loc 1 5681 0
 10814 058c 049B     		ldr	r3, [sp, #16]
 10815 058e 3B44     		add	r3, r3, r7
 10816 0590 0493     		str	r3, [sp, #16]
 10817              	.LVL1639:
5682:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 10818              		.loc 1 5682 0
 10819 0592 B8EB0708 		subs	r8, r8, r7
 10820              	.LVL1640:
 10821 0596 E7D1     		bne	.L989
5668:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
 10822              		.loc 1 5668 0 discriminator 2
 10823 0598 0135     		adds	r5, r5, #1
 10824              	.LVL1641:
 10825 059a 11E7     		b	.L985
 10826              	.LVL1642:
 10827              	.L1040:
5670:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 10828              		.loc 1 5670 0
 10829 059c 6FF00701 		mvn	r1, #7
 10830 05a0 3046     		mov	r0, r6
 10831 05a2 FFF7FEFF 		bl	st_dword
 10832              	.LVL1643:
5671:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 10833              		.loc 1 5671 0
 10834 05a6 4FF0FF31 		mov	r1, #-1
 10835 05aa 301D     		adds	r0, r6, #4
 10836 05ac FFF7FEFF 		bl	st_dword
 10837              	.LVL1644:
5672:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 10838              		.loc 1 5672 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 323


 10839 05b0 6FF07041 		mvn	r1, #-268435456
 10840 05b4 06F10800 		add	r0, r6, #8
 10841 05b8 FFF7FEFF 		bl	st_dword
 10842              	.LVL1645:
 10843 05bc D2E7     		b	.L987
 10844              	.L1041:
5674:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 10845              		.loc 1 5674 0
 10846 05be 2049     		ldr	r1, .L1044+20
 10847 05c0 CDE7     		b	.L988
 10848              	.L1039:
5686:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
 10849              		.loc 1 5686 0
 10850 05c2 4746     		mov	r7, r8
 10851 05c4 DDF81080 		ldr	r8, [sp, #16]
 10852 05c8 06E7     		b	.L992
 10853              	.LVL1646:
 10854              	.L1025:
5699:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 10855              		.loc 1 5699 0
 10856 05ca 4FF00C08 		mov	r8, #12
 10857              	.LVL1647:
 10858 05ce 22E7     		b	.L993
 10859              	.LVL1648:
 10860              	.L1026:
5702:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 10861              		.loc 1 5702 0
 10862 05d0 4FF00608 		mov	r8, #6
 10863              	.LVL1649:
 10864 05d4 1FE7     		b	.L993
 10865              	.LVL1650:
 10866              	.L1027:
5704:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 10867              		.loc 1 5704 0
 10868 05d6 4FF00108 		mov	r8, #1
 10869              	.LVL1651:
 10870 05da 1CE7     		b	.L993
 10871              	.LVL1652:
 10872              	.L995:
5317:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 10873              		.loc 1 5317 0
 10874 05dc 0B20     		movs	r0, #11
 10875              	.LVL1653:
 10876 05de 02E0     		b	.L952
 10877              	.LVL1654:
 10878              	.L996:
5324:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 10879              		.loc 1 5324 0
 10880 05e0 0320     		movs	r0, #3
 10881              	.LVL1655:
 10882 05e2 00E0     		b	.L952
 10883              	.LVL1656:
 10884              	.L997:
5325:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & 
 10885              		.loc 1 5325 0
 10886 05e4 0A20     		movs	r0, #10
 10887              	.LVL1657:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 324


 10888              	.L952:
5738:Middlewares/Third_Party/FatFs/src/ff.c **** 
 10889              		.loc 1 5738 0
 10890 05e6 0BB0     		add	sp, sp, #44
 10891              	.LCFI138:
 10892              		.cfi_remember_state
 10893              		.cfi_def_cfa_offset 36
 10894              		@ sp needed
 10895 05e8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 10896              	.LVL1658:
 10897              	.L998:
 10898              	.LCFI139:
 10899              		.cfi_restore_state
5333:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 10900              		.loc 1 5333 0
 10901 05ec 1320     		movs	r0, #19
 10902 05ee FAE7     		b	.L952
 10903              	.L999:
 10904 05f0 1320     		movs	r0, #19
 10905 05f2 F8E7     		b	.L952
 10906              	.L1000:
 10907 05f4 1320     		movs	r0, #19
 10908 05f6 F6E7     		b	.L952
 10909              	.LVL1659:
 10910              	.L1001:
5340:Middlewares/Third_Party/FatFs/src/ff.c **** 
 10911              		.loc 1 5340 0
 10912 05f8 0E20     		movs	r0, #14
 10913 05fa F4E7     		b	.L952
 10914              	.L1002:
5353:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 10915              		.loc 1 5353 0
 10916 05fc 0120     		movs	r0, #1
 10917 05fe F2E7     		b	.L952
 10918              	.LVL1660:
 10919              	.L1004:
5355:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_vol -= b_vol;						/* Volume size */
 10920              		.loc 1 5355 0
 10921 0600 0E20     		movs	r0, #14
 10922 0602 F0E7     		b	.L952
 10923              	.L1005:
5358:Middlewares/Third_Party/FatFs/src/ff.c **** 
 10924              		.loc 1 5358 0
 10925 0604 0E20     		movs	r0, #14
 10926 0606 EEE7     		b	.L952
 10927              	.L1006:
5367:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (opt & FM_FAT32) {	/* FAT32 possible? */
 10928              		.loc 1 5367 0
 10929 0608 1320     		movs	r0, #19
 10930 060a ECE7     		b	.L952
 10931              	.L1009:
5373:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT16;
 10932              		.loc 1 5373 0
 10933 060c 1320     		movs	r0, #19
 10934 060e EAE7     		b	.L952
 10935              	.LVL1661:
 10936              	.L1011:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 325


5553:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {				/* FAT12/16 volume */
 10937              		.loc 1 5553 0
 10938 0610 0E20     		movs	r0, #14
 10939 0612 E8E7     		b	.L952
 10940              	.LVL1662:
 10941              	.L1013:
5582:Middlewares/Third_Party/FatFs/src/ff.c **** 			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 10942              		.loc 1 5582 0
 10943 0614 0E20     		movs	r0, #14
 10944 0616 E6E7     		b	.L952
 10945              	.LVL1663:
 10946              	.L1014:
5587:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 10947              		.loc 1 5587 0
 10948 0618 0E20     		movs	r0, #14
 10949 061a E4E7     		b	.L952
 10950              	.LVL1664:
 10951              	.L1017:
5599:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 10952              		.loc 1 5599 0
 10953 061c 0E20     		movs	r0, #14
 10954 061e E2E7     		b	.L952
 10955              	.LVL1665:
 10956              	.L1018:
5603:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 10957              		.loc 1 5603 0
 10958 0620 0E20     		movs	r0, #14
 10959 0622 E0E7     		b	.L952
 10960              	.LVL1666:
 10961              	.L1019:
5606:Middlewares/Third_Party/FatFs/src/ff.c **** 
 10962              		.loc 1 5606 0
 10963 0624 0E20     		movs	r0, #14
 10964 0626 DEE7     		b	.L952
 10965              	.LVL1667:
 10966              	.L1021:
5650:Middlewares/Third_Party/FatFs/src/ff.c **** 
 10967              		.loc 1 5650 0
 10968 0628 0120     		movs	r0, #1
 10969 062a DCE7     		b	.L952
 10970              	.L1045:
 10971              		.align	2
 10972              	.L1044:
 10973 062c 00000000 		.word	.LC2
 10974 0630 0C000000 		.word	.LC3
 10975 0634 20000000 		.word	.LC4
 10976 0638 52526141 		.word	1096897106
 10977 063c 72724161 		.word	1631679090
 10978 0640 F8FFFF00 		.word	16777208
 10979              	.LVL1668:
 10980              	.L1023:
5679:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_set(buf, 0, ss);
 10981              		.loc 1 5679 0
 10982 0644 0120     		movs	r0, #1
 10983 0646 CEE7     		b	.L952
 10984              	.LVL1669:
 10985              	.L1024:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 326


5689:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
 10986              		.loc 1 5689 0
 10987 0648 0120     		movs	r0, #1
 10988 064a CCE7     		b	.L952
 10989              	.LVL1670:
 10990              	.L1028:
5731:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 10991              		.loc 1 5731 0
 10992 064c 0120     		movs	r0, #1
 10993 064e CAE7     		b	.L952
 10994              	.LVL1671:
 10995              	.L1029:
5737:Middlewares/Third_Party/FatFs/src/ff.c **** }
 10996              		.loc 1 5737 0
 10997 0650 0020     		movs	r0, #0
 10998 0652 C8E7     		b	.L952
 10999              		.cfi_endproc
 11000              	.LFE206:
 11002              		.section	.text.f_gets,"ax",%progbits
 11003              		.align	1
 11004              		.global	f_gets
 11005              		.syntax unified
 11006              		.thumb
 11007              		.thumb_func
 11008              		.fpu fpv5-sp-d16
 11010              	f_gets:
 11011              	.LFB207:
5824:Middlewares/Third_Party/FatFs/src/ff.c **** 	int n = 0;
 11012              		.loc 1 5824 0
 11013              		.cfi_startproc
 11014              		@ args = 0, pretend = 0, frame = 8
 11015              		@ frame_needed = 0, uses_anonymous_args = 0
 11016              	.LVL1672:
 11017 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 11018              	.LCFI140:
 11019              		.cfi_def_cfa_offset 24
 11020              		.cfi_offset 4, -24
 11021              		.cfi_offset 5, -20
 11022              		.cfi_offset 6, -16
 11023              		.cfi_offset 7, -12
 11024              		.cfi_offset 8, -8
 11025              		.cfi_offset 14, -4
 11026 0004 82B0     		sub	sp, sp, #8
 11027              	.LCFI141:
 11028              		.cfi_def_cfa_offset 32
 11029 0006 8046     		mov	r8, r0
 11030 0008 0E46     		mov	r6, r1
 11031 000a 1746     		mov	r7, r2
 11032              	.LVL1673:
5826:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE s[2];
 11033              		.loc 1 5826 0
 11034 000c 0446     		mov	r4, r0
5825:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c, *p = buff;
 11035              		.loc 1 5825 0
 11036 000e 0025     		movs	r5, #0
5831:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
 11037              		.loc 1 5831 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 327


 11038 0010 01E0     		b	.L1047
 11039              	.LVL1674:
 11040              	.L1052:
 11041 0012 2246     		mov	r2, r4
 11042              	.LVL1675:
 11043              	.L1049:
 11044 0014 1446     		mov	r4, r2
 11045              	.LVL1676:
 11046              	.L1047:
 11047 0016 731E     		subs	r3, r6, #1
 11048 0018 AB42     		cmp	r3, r5
 11049 001a 12DD     		ble	.L1048
5876:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 1) break;
 11050              		.loc 1 5876 0
 11051 001c 6B46     		mov	r3, sp
 11052 001e 0122     		movs	r2, #1
 11053 0020 01A9     		add	r1, sp, #4
 11054 0022 3846     		mov	r0, r7
 11055 0024 FFF7FEFF 		bl	f_read
 11056              	.LVL1677:
5877:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[0];
 11057              		.loc 1 5877 0
 11058 0028 009B     		ldr	r3, [sp]
 11059 002a 012B     		cmp	r3, #1
 11060 002c 09D1     		bne	.L1048
5878:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 11061              		.loc 1 5878 0
 11062 002e 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 11063              	.LVL1678:
5880:Middlewares/Third_Party/FatFs/src/ff.c **** 		*p++ = c;
 11064              		.loc 1 5880 0
 11065 0032 0D2B     		cmp	r3, #13
 11066 0034 EDD0     		beq	.L1052
5881:Middlewares/Third_Party/FatFs/src/ff.c **** 		n++;
 11067              		.loc 1 5881 0
 11068 0036 621C     		adds	r2, r4, #1
 11069              	.LVL1679:
 11070 0038 2370     		strb	r3, [r4]
5882:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
 11071              		.loc 1 5882 0
 11072 003a 0135     		adds	r5, r5, #1
 11073              	.LVL1680:
5883:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 11074              		.loc 1 5883 0
 11075 003c 0A2B     		cmp	r3, #10
 11076 003e E9D1     		bne	.L1049
5881:Middlewares/Third_Party/FatFs/src/ff.c **** 		n++;
 11077              		.loc 1 5881 0
 11078 0040 1446     		mov	r4, r2
 11079              	.LVL1681:
 11080              	.L1048:
5885:Middlewares/Third_Party/FatFs/src/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 11081              		.loc 1 5885 0
 11082 0042 0023     		movs	r3, #0
 11083 0044 2370     		strb	r3, [r4]
5886:Middlewares/Third_Party/FatFs/src/ff.c **** }
 11084              		.loc 1 5886 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 328


 11085 0046 1DB1     		cbz	r5, .L1054
 11086 0048 4046     		mov	r0, r8
 11087              	.L1046:
5887:Middlewares/Third_Party/FatFs/src/ff.c **** 
 11088              		.loc 1 5887 0
 11089 004a 02B0     		add	sp, sp, #8
 11090              	.LCFI142:
 11091              		.cfi_remember_state
 11092              		.cfi_def_cfa_offset 24
 11093              		@ sp needed
 11094 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11095              	.LVL1682:
 11096              	.L1054:
 11097              	.LCFI143:
 11098              		.cfi_restore_state
5886:Middlewares/Third_Party/FatFs/src/ff.c **** }
 11099              		.loc 1 5886 0
 11100 0050 0020     		movs	r0, #0
 11101 0052 FAE7     		b	.L1046
 11102              		.cfi_endproc
 11103              	.LFE207:
 11105              		.section	.text.f_putc,"ax",%progbits
 11106              		.align	1
 11107              		.global	f_putc
 11108              		.syntax unified
 11109              		.thumb
 11110              		.thumb_func
 11111              		.fpu fpv5-sp-d16
 11113              	f_putc:
 11114              	.LFB211:
5984:Middlewares/Third_Party/FatFs/src/ff.c **** 
5985:Middlewares/Third_Party/FatFs/src/ff.c **** 
5986:Middlewares/Third_Party/FatFs/src/ff.c **** 
5987:Middlewares/Third_Party/FatFs/src/ff.c **** int f_putc (
5988:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c,	/* A character to be output */
5989:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp		/* Pointer to the file object */
5990:Middlewares/Third_Party/FatFs/src/ff.c **** )
5991:Middlewares/Third_Party/FatFs/src/ff.c **** {
 11115              		.loc 1 5991 0
 11116              		.cfi_startproc
 11117              		@ args = 0, pretend = 0, frame = 80
 11118              		@ frame_needed = 0, uses_anonymous_args = 0
 11119              	.LVL1683:
 11120 0000 10B5     		push	{r4, lr}
 11121              	.LCFI144:
 11122              		.cfi_def_cfa_offset 8
 11123              		.cfi_offset 4, -8
 11124              		.cfi_offset 14, -4
 11125 0002 94B0     		sub	sp, sp, #80
 11126              	.LCFI145:
 11127              		.cfi_def_cfa_offset 88
 11128 0004 0446     		mov	r4, r0
5992:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff pb;
5993:Middlewares/Third_Party/FatFs/src/ff.c **** 
5994:Middlewares/Third_Party/FatFs/src/ff.c **** 
5995:Middlewares/Third_Party/FatFs/src/ff.c **** 	putc_init(&pb, fp);
 11129              		.loc 1 5995 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 329


 11130 0006 01A8     		add	r0, sp, #4
 11131              	.LVL1684:
 11132 0008 FFF7FEFF 		bl	putc_init
 11133              	.LVL1685:
5996:Middlewares/Third_Party/FatFs/src/ff.c **** 	putc_bfd(&pb, c);	/* Put the character */
 11134              		.loc 1 5996 0
 11135 000c 2146     		mov	r1, r4
 11136 000e 01A8     		add	r0, sp, #4
 11137 0010 FFF7FEFF 		bl	putc_bfd
 11138              	.LVL1686:
5997:Middlewares/Third_Party/FatFs/src/ff.c **** 	return putc_flush(&pb);
 11139              		.loc 1 5997 0
 11140 0014 01A8     		add	r0, sp, #4
 11141 0016 FFF7FEFF 		bl	putc_flush
 11142              	.LVL1687:
5998:Middlewares/Third_Party/FatFs/src/ff.c **** }
 11143              		.loc 1 5998 0
 11144 001a 14B0     		add	sp, sp, #80
 11145              	.LCFI146:
 11146              		.cfi_def_cfa_offset 8
 11147              		@ sp needed
 11148 001c 10BD     		pop	{r4, pc}
 11149              		.cfi_endproc
 11150              	.LFE211:
 11152              		.section	.text.f_puts,"ax",%progbits
 11153              		.align	1
 11154              		.global	f_puts
 11155              		.syntax unified
 11156              		.thumb
 11157              		.thumb_func
 11158              		.fpu fpv5-sp-d16
 11160              	f_puts:
 11161              	.LFB212:
5999:Middlewares/Third_Party/FatFs/src/ff.c **** 
6000:Middlewares/Third_Party/FatFs/src/ff.c **** 
6001:Middlewares/Third_Party/FatFs/src/ff.c **** 
6002:Middlewares/Third_Party/FatFs/src/ff.c **** 
6003:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
6004:Middlewares/Third_Party/FatFs/src/ff.c **** /* Put a string to the file                                              */
6005:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
6006:Middlewares/Third_Party/FatFs/src/ff.c **** 
6007:Middlewares/Third_Party/FatFs/src/ff.c **** int f_puts (
6008:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* str,	/* Pointer to the string to be output */
6009:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp				/* Pointer to the file object */
6010:Middlewares/Third_Party/FatFs/src/ff.c **** )
6011:Middlewares/Third_Party/FatFs/src/ff.c **** {
 11162              		.loc 1 6011 0
 11163              		.cfi_startproc
 11164              		@ args = 0, pretend = 0, frame = 80
 11165              		@ frame_needed = 0, uses_anonymous_args = 0
 11166              	.LVL1688:
 11167 0000 10B5     		push	{r4, lr}
 11168              	.LCFI147:
 11169              		.cfi_def_cfa_offset 8
 11170              		.cfi_offset 4, -8
 11171              		.cfi_offset 14, -4
 11172 0002 94B0     		sub	sp, sp, #80
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 330


 11173              	.LCFI148:
 11174              		.cfi_def_cfa_offset 88
 11175 0004 0446     		mov	r4, r0
6012:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff pb;
6013:Middlewares/Third_Party/FatFs/src/ff.c **** 
6014:Middlewares/Third_Party/FatFs/src/ff.c **** 
6015:Middlewares/Third_Party/FatFs/src/ff.c **** 	putc_init(&pb, fp);
 11176              		.loc 1 6015 0
 11177 0006 01A8     		add	r0, sp, #4
 11178              	.LVL1689:
 11179 0008 FFF7FEFF 		bl	putc_init
 11180              	.LVL1690:
6016:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 11181              		.loc 1 6016 0
 11182 000c 03E0     		b	.L1059
 11183              	.L1060:
 11184              		.loc 1 6016 0 is_stmt 0 discriminator 2
 11185 000e 0134     		adds	r4, r4, #1
 11186              	.LVL1691:
 11187 0010 01A8     		add	r0, sp, #4
 11188 0012 FFF7FEFF 		bl	putc_bfd
 11189              	.LVL1692:
 11190              	.L1059:
 11191              		.loc 1 6016 0 discriminator 1
 11192 0016 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 11193 0018 0029     		cmp	r1, #0
 11194 001a F8D1     		bne	.L1060
6017:Middlewares/Third_Party/FatFs/src/ff.c **** 	return putc_flush(&pb);
 11195              		.loc 1 6017 0 is_stmt 1
 11196 001c 01A8     		add	r0, sp, #4
 11197 001e FFF7FEFF 		bl	putc_flush
 11198              	.LVL1693:
6018:Middlewares/Third_Party/FatFs/src/ff.c **** }
 11199              		.loc 1 6018 0
 11200 0022 14B0     		add	sp, sp, #80
 11201              	.LCFI149:
 11202              		.cfi_def_cfa_offset 8
 11203              		@ sp needed
 11204 0024 10BD     		pop	{r4, pc}
 11205              		.cfi_endproc
 11206              	.LFE212:
 11208              		.section	.text.f_printf,"ax",%progbits
 11209              		.align	1
 11210              		.global	f_printf
 11211              		.syntax unified
 11212              		.thumb
 11213              		.thumb_func
 11214              		.fpu fpv5-sp-d16
 11216              	f_printf:
 11217              	.LFB213:
6019:Middlewares/Third_Party/FatFs/src/ff.c **** 
6020:Middlewares/Third_Party/FatFs/src/ff.c **** 
6021:Middlewares/Third_Party/FatFs/src/ff.c **** 
6022:Middlewares/Third_Party/FatFs/src/ff.c **** 
6023:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
6024:Middlewares/Third_Party/FatFs/src/ff.c **** /* Put a formatted string to the file                                    */
6025:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 331


6026:Middlewares/Third_Party/FatFs/src/ff.c **** 
6027:Middlewares/Third_Party/FatFs/src/ff.c **** int f_printf (
6028:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,			/* Pointer to the file object */
6029:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* fmt,	/* Pointer to the format string */
6030:Middlewares/Third_Party/FatFs/src/ff.c **** 	...					/* Optional arguments... */
6031:Middlewares/Third_Party/FatFs/src/ff.c **** )
6032:Middlewares/Third_Party/FatFs/src/ff.c **** {
 11218              		.loc 1 6032 0
 11219              		.cfi_startproc
 11220              		@ args = 4, pretend = 12, frame = 112
 11221              		@ frame_needed = 0, uses_anonymous_args = 1
 11222              	.LVL1694:
 11223 0000 0EB4     		push	{r1, r2, r3}
 11224              	.LCFI150:
 11225              		.cfi_def_cfa_offset 12
 11226              		.cfi_offset 1, -12
 11227              		.cfi_offset 2, -8
 11228              		.cfi_offset 3, -4
 11229 0002 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 11230              	.LCFI151:
 11231              		.cfi_def_cfa_offset 44
 11232              		.cfi_offset 4, -44
 11233              		.cfi_offset 5, -40
 11234              		.cfi_offset 6, -36
 11235              		.cfi_offset 7, -32
 11236              		.cfi_offset 8, -28
 11237              		.cfi_offset 9, -24
 11238              		.cfi_offset 10, -20
 11239              		.cfi_offset 14, -16
 11240 0006 9DB0     		sub	sp, sp, #116
 11241              	.LCFI152:
 11242              		.cfi_def_cfa_offset 160
 11243 0008 25AC     		add	r4, sp, #148
 11244 000a 54F8045B 		ldr	r5, [r4], #4
6033:Middlewares/Third_Party/FatFs/src/ff.c **** 	va_list arp;
6034:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff pb;
6035:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE f, r;
6036:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, j, w;
6037:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD v;
6038:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c, d, str[32], *p;
6039:Middlewares/Third_Party/FatFs/src/ff.c **** 
6040:Middlewares/Third_Party/FatFs/src/ff.c **** 
6041:Middlewares/Third_Party/FatFs/src/ff.c **** 	putc_init(&pb, fp);
 11245              		.loc 1 6041 0
 11246 000e 0146     		mov	r1, r0
 11247 0010 08A8     		add	r0, sp, #32
 11248              	.LVL1695:
 11249 0012 FFF7FEFF 		bl	putc_init
 11250              	.LVL1696:
6042:Middlewares/Third_Party/FatFs/src/ff.c **** 
6043:Middlewares/Third_Party/FatFs/src/ff.c **** 	va_start(arp, fmt);
 11251              		.loc 1 6043 0
 11252 0016 1B94     		str	r4, [sp, #108]
 11253 0018 03E0     		b	.L1063
 11254              	.LVL1697:
 11255              	.L1112:
6044:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 332


6045:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
6046:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = *fmt++;
6047:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) break;			/* End of string */
6048:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c != '%') {				/* Non escape character */
6049:Middlewares/Third_Party/FatFs/src/ff.c **** 			putc_bfd(&pb, c);
 11256              		.loc 1 6049 0
 11257 001a 08A8     		add	r0, sp, #32
 11258 001c FFF7FEFF 		bl	putc_bfd
 11259              	.LVL1698:
6046:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) break;			/* End of string */
 11260              		.loc 1 6046 0
 11261 0020 2546     		mov	r5, r4
 11262              	.LVL1699:
 11263              	.L1063:
 11264 0022 6C1C     		adds	r4, r5, #1
 11265              	.LVL1700:
 11266 0024 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 11267              	.LVL1701:
6047:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c != '%') {				/* Non escape character */
 11268              		.loc 1 6047 0
 11269 0026 0029     		cmp	r1, #0
 11270 0028 00F00881 		beq	.L1064
6048:Middlewares/Third_Party/FatFs/src/ff.c **** 			putc_bfd(&pb, c);
 11271              		.loc 1 6048 0
 11272 002c 2529     		cmp	r1, #37
 11273 002e F4D1     		bne	.L1112
 11274              	.LVL1702:
6050:Middlewares/Third_Party/FatFs/src/ff.c **** 			continue;
6051:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6052:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = f = 0;
6053:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = *fmt++;
 11275              		.loc 1 6053 0
 11276 0030 AB1C     		adds	r3, r5, #2
 11277              	.LVL1703:
 11278 0032 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 11279              	.LVL1704:
6054:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 11280              		.loc 1 6054 0
 11281 0034 3029     		cmp	r1, #48
 11282 0036 05D0     		beq	.L1113
6055:Middlewares/Third_Party/FatFs/src/ff.c **** 			f = 1; c = *fmt++;
6056:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
6057:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c == '-') {			/* Flag: left justified */
 11283              		.loc 1 6057 0
 11284 0038 2D29     		cmp	r1, #45
 11285 003a 07D0     		beq	.L1114
6053:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 11286              		.loc 1 6053 0
 11287 003c 1D46     		mov	r5, r3
6052:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = *fmt++;
 11288              		.loc 1 6052 0
 11289 003e 0026     		movs	r6, #0
 11290              	.LVL1705:
 11291              	.L1068:
6055:Middlewares/Third_Party/FatFs/src/ff.c **** 			f = 1; c = *fmt++;
 11292              		.loc 1 6055 0
 11293 0040 0024     		movs	r4, #0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 333


 11294 0042 0FE0     		b	.L1069
 11295              	.LVL1706:
 11296              	.L1113:
 11297 0044 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 11298              	.LVL1707:
 11299 0046 0335     		adds	r5, r5, #3
 11300              	.LVL1708:
 11301 0048 0126     		movs	r6, #1
 11302 004a F9E7     		b	.L1068
 11303              	.LVL1709:
 11304              	.L1114:
6058:Middlewares/Third_Party/FatFs/src/ff.c **** 				f = 2; c = *fmt++;
 11305              		.loc 1 6058 0
 11306 004c A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 11307              	.LVL1710:
 11308 004e 0335     		adds	r5, r5, #3
 11309              	.LVL1711:
 11310 0050 0226     		movs	r6, #2
 11311 0052 F5E7     		b	.L1068
 11312              	.LVL1712:
 11313              	.L1070:
6059:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
6060:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6061:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (IsDigit(c)) {		/* Precision */
6062:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = w * 10 + c - '0';
 11314              		.loc 1 6062 0
 11315 0054 04EB8404 		add	r4, r4, r4, lsl #2
 11316              	.LVL1713:
 11317 0058 6300     		lsls	r3, r4, #1
 11318 005a 1944     		add	r1, r1, r3
 11319              	.LVL1714:
 11320 005c A1F13004 		sub	r4, r1, #48
 11321              	.LVL1715:
6063:Middlewares/Third_Party/FatFs/src/ff.c **** 			c = *fmt++;
 11322              		.loc 1 6063 0
 11323 0060 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 11324              	.LVL1716:
 11325 0062 0135     		adds	r5, r5, #1
 11326              	.LVL1717:
 11327              	.L1069:
6061:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = w * 10 + c - '0';
 11328              		.loc 1 6061 0
 11329 0064 A1F13003 		sub	r3, r1, #48
 11330 0068 DBB2     		uxtb	r3, r3
 11331 006a 092B     		cmp	r3, #9
 11332 006c F2D9     		bls	.L1070
6064:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6065:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 11333              		.loc 1 6065 0
 11334 006e 4C29     		cmp	r1, #76
 11335 0070 18BF     		it	ne
 11336 0072 6C29     		cmpne	r1, #108
 11337 0074 03D1     		bne	.L1071
6066:Middlewares/Third_Party/FatFs/src/ff.c **** 			f |= 4; c = *fmt++;
 11338              		.loc 1 6066 0
 11339 0076 46F00406 		orr	r6, r6, #4
 11340              	.LVL1718:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 334


 11341 007a 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 11342              	.LVL1719:
 11343 007c 0135     		adds	r5, r5, #1
 11344              	.LVL1720:
 11345              	.L1071:
6067:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6068:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!c) break;
 11346              		.loc 1 6068 0
 11347 007e 0029     		cmp	r1, #0
 11348 0080 00F0DC80 		beq	.L1064
 11349              	.LVL1721:
6069:Middlewares/Third_Party/FatFs/src/ff.c **** 		d = c;
6070:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsLower(d)) d -= 0x20;
 11350              		.loc 1 6070 0
 11351 0084 A1F16103 		sub	r3, r1, #97
 11352 0088 DBB2     		uxtb	r3, r3
 11353 008a 192B     		cmp	r3, #25
 11354 008c 14D8     		bhi	.L1106
 11355              		.loc 1 6070 0 is_stmt 0 discriminator 1
 11356 008e A1F12003 		sub	r3, r1, #32
 11357 0092 DBB2     		uxtb	r3, r3
 11358              	.LVL1722:
 11359              	.L1072:
6071:Middlewares/Third_Party/FatFs/src/ff.c **** 		switch (d) {				/* Type is... */
 11360              		.loc 1 6071 0 is_stmt 1
 11361 0094 A3F14202 		sub	r2, r3, #66
 11362 0098 162A     		cmp	r2, #22
 11363 009a 4CD8     		bhi	.L1073
 11364 009c DFE802F0 		tbb	[pc, r2]
 11365              	.L1075:
 11366 00a0 4F       		.byte	(.L1074-.L1075)/2
 11367 00a1 3D       		.byte	(.L1076-.L1075)/2
 11368 00a2 45       		.byte	(.L1077-.L1075)/2
 11369 00a3 4B       		.byte	(.L1073-.L1075)/2
 11370 00a4 4B       		.byte	(.L1073-.L1075)/2
 11371 00a5 4B       		.byte	(.L1073-.L1075)/2
 11372 00a6 4B       		.byte	(.L1073-.L1075)/2
 11373 00a7 4B       		.byte	(.L1073-.L1075)/2
 11374 00a8 4B       		.byte	(.L1073-.L1075)/2
 11375 00a9 4B       		.byte	(.L1073-.L1075)/2
 11376 00aa 4B       		.byte	(.L1073-.L1075)/2
 11377 00ab 4B       		.byte	(.L1073-.L1075)/2
 11378 00ac 4B       		.byte	(.L1073-.L1075)/2
 11379 00ad 52       		.byte	(.L1107-.L1075)/2
 11380 00ae 4B       		.byte	(.L1073-.L1075)/2
 11381 00af 4B       		.byte	(.L1073-.L1075)/2
 11382 00b0 4B       		.byte	(.L1073-.L1075)/2
 11383 00b1 0E       		.byte	(.L1079-.L1075)/2
 11384 00b2 4B       		.byte	(.L1073-.L1075)/2
 11385 00b3 45       		.byte	(.L1077-.L1075)/2
 11386 00b4 4B       		.byte	(.L1073-.L1075)/2
 11387 00b5 4B       		.byte	(.L1073-.L1075)/2
 11388 00b6 48       		.byte	(.L1080-.L1075)/2
 11389              	.LVL1723:
 11390 00b7 00       		.p2align 1
 11391              	.L1106:
6069:Middlewares/Third_Party/FatFs/src/ff.c **** 		d = c;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 335


 11392              		.loc 1 6069 0
 11393 00b8 0B46     		mov	r3, r1
 11394 00ba EBE7     		b	.L1072
 11395              	.LVL1724:
 11396              	.L1079:
6072:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'S' :					/* String */
6073:Middlewares/Third_Party/FatFs/src/ff.c **** 			p = va_arg(arp, TCHAR*);
 11397              		.loc 1 6073 0
 11398 00bc 1B9B     		ldr	r3, [sp, #108]
 11399              	.LVL1725:
 11400 00be 1A1D     		adds	r2, r3, #4
 11401 00c0 1B92     		str	r2, [sp, #108]
 11402 00c2 D3F80080 		ldr	r8, [r3]
 11403              	.LVL1726:
6074:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (j = 0; p[j]; j++) ;
 11404              		.loc 1 6074 0
 11405 00c6 0027     		movs	r7, #0
 11406 00c8 00E0     		b	.L1081
 11407              	.LVL1727:
 11408              	.L1082:
 11409              		.loc 1 6074 0 is_stmt 0 discriminator 3
 11410 00ca 0137     		adds	r7, r7, #1
 11411              	.LVL1728:
 11412              	.L1081:
 11413              		.loc 1 6074 0 discriminator 1
 11414 00cc 18F80730 		ldrb	r3, [r8, r7]	@ zero_extendqisi2
 11415 00d0 002B     		cmp	r3, #0
 11416 00d2 FAD1     		bne	.L1082
6075:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!(f & 2)) {
 11417              		.loc 1 6075 0 is_stmt 1
 11418 00d4 16F0020F 		tst	r6, #2
 11419 00d8 10D1     		bne	.L1086
 11420 00da 05E0     		b	.L1083
 11421              	.LVL1729:
 11422              	.L1085:
6076:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ');
 11423              		.loc 1 6076 0 discriminator 2
 11424 00dc 2021     		movs	r1, #32
 11425 00de 0DEB0100 		add	r0, sp, r1
 11426 00e2 FFF7FEFF 		bl	putc_bfd
 11427              	.LVL1730:
 11428 00e6 3746     		mov	r7, r6
 11429              	.LVL1731:
 11430              	.L1083:
 11431              		.loc 1 6076 0 is_stmt 0 discriminator 1
 11432 00e8 7E1C     		adds	r6, r7, #1
 11433              	.LVL1732:
 11434 00ea A742     		cmp	r7, r4
 11435 00ec F6D3     		bcc	.L1085
 11436              		.loc 1 6076 0
 11437 00ee 3746     		mov	r7, r6
 11438 00f0 04E0     		b	.L1086
 11439              	.LVL1733:
 11440              	.L1087:
6077:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
6078:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (*p) putc_bfd(&pb, *p++);
 11441              		.loc 1 6078 0 is_stmt 1 discriminator 2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 336


 11442 00f2 08F10108 		add	r8, r8, #1
 11443              	.LVL1734:
 11444 00f6 08A8     		add	r0, sp, #32
 11445 00f8 FFF7FEFF 		bl	putc_bfd
 11446              	.LVL1735:
 11447              	.L1086:
 11448              		.loc 1 6078 0 is_stmt 0 discriminator 1
 11449 00fc 98F80010 		ldrb	r1, [r8]	@ zero_extendqisi2
 11450 0100 0029     		cmp	r1, #0
 11451 0102 F6D1     		bne	.L1087
 11452 0104 05E0     		b	.L1088
 11453              	.LVL1736:
 11454              	.L1089:
6079:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
 11455              		.loc 1 6079 0 is_stmt 1 discriminator 2
 11456 0106 2021     		movs	r1, #32
 11457 0108 0DEB0100 		add	r0, sp, r1
 11458 010c FFF7FEFF 		bl	putc_bfd
 11459              	.LVL1737:
 11460 0110 3746     		mov	r7, r6
 11461              	.LVL1738:
 11462              	.L1088:
 11463              		.loc 1 6079 0 is_stmt 0 discriminator 1
 11464 0112 7E1C     		adds	r6, r7, #1
 11465              	.LVL1739:
 11466 0114 A742     		cmp	r7, r4
 11467 0116 F6D3     		bcc	.L1089
 11468 0118 83E7     		b	.L1063
 11469              	.LVL1740:
 11470              	.L1076:
6080:Middlewares/Third_Party/FatFs/src/ff.c **** 			continue;
6081:Middlewares/Third_Party/FatFs/src/ff.c **** 
6082:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'C' :					/* Character */
6083:Middlewares/Third_Party/FatFs/src/ff.c **** 			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 11471              		.loc 1 6083 0 is_stmt 1
 11472 011a 1B9B     		ldr	r3, [sp, #108]
 11473              	.LVL1741:
 11474 011c 1A1D     		adds	r2, r3, #4
 11475 011e 1B92     		str	r2, [sp, #108]
 11476 0120 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 11477              	.LVL1742:
 11478 0122 08A8     		add	r0, sp, #32
 11479 0124 FFF7FEFF 		bl	putc_bfd
 11480              	.LVL1743:
 11481 0128 7BE7     		b	.L1063
 11482              	.LVL1744:
 11483              	.L1077:
6084:Middlewares/Third_Party/FatFs/src/ff.c **** 
6085:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'B' :					/* Binary */
6086:Middlewares/Third_Party/FatFs/src/ff.c **** 			r = 2; break;
6087:Middlewares/Third_Party/FatFs/src/ff.c **** 
6088:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'O' :					/* Octal */
6089:Middlewares/Third_Party/FatFs/src/ff.c **** 			r = 8; break;
6090:Middlewares/Third_Party/FatFs/src/ff.c **** 
6091:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'D' :					/* Signed decimal */
6092:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'U' :					/* Unsigned decimal */
6093:Middlewares/Third_Party/FatFs/src/ff.c **** 			r = 10; break;
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 337


 11484              		.loc 1 6093 0
 11485 012a 4FF00A0E 		mov	lr, #10
 11486 012e 0BE0     		b	.L1078
 11487              	.LVL1745:
 11488              	.L1080:
6094:Middlewares/Third_Party/FatFs/src/ff.c **** 
6095:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'X' :					/* Hexdecimal */
6096:Middlewares/Third_Party/FatFs/src/ff.c **** 			r = 16; break;
 11489              		.loc 1 6096 0
 11490 0130 4FF0100E 		mov	lr, #16
 11491 0134 08E0     		b	.L1078
 11492              	.LVL1746:
 11493              	.L1073:
6097:Middlewares/Third_Party/FatFs/src/ff.c **** 
6098:Middlewares/Third_Party/FatFs/src/ff.c **** 		default:					/* Unknown type (pass-through) */
6099:Middlewares/Third_Party/FatFs/src/ff.c **** 			putc_bfd(&pb, c); continue;
 11494              		.loc 1 6099 0
 11495 0136 08A8     		add	r0, sp, #32
 11496 0138 FFF7FEFF 		bl	putc_bfd
 11497              	.LVL1747:
 11498 013c 71E7     		b	.L1063
 11499              	.LVL1748:
 11500              	.L1074:
6086:Middlewares/Third_Party/FatFs/src/ff.c **** 
 11501              		.loc 1 6086 0
 11502 013e 4FF0020E 		mov	lr, #2
 11503 0142 01E0     		b	.L1078
 11504              	.L1107:
6089:Middlewares/Third_Party/FatFs/src/ff.c **** 
 11505              		.loc 1 6089 0
 11506 0144 4FF0080E 		mov	lr, #8
 11507              	.L1078:
 11508              	.LVL1749:
6100:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6101:Middlewares/Third_Party/FatFs/src/ff.c **** 
6102:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Get an argument and put it in numeral */
6103:Middlewares/Third_Party/FatFs/src/ff.c **** 		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_
 11509              		.loc 1 6103 0
 11510 0148 16F0040F 		tst	r6, #4
 11511 014c 13D0     		beq	.L1090
 11512 014e 1B9A     		ldr	r2, [sp, #108]
 11513 0150 101D     		adds	r0, r2, #4
 11514 0152 1B90     		str	r0, [sp, #108]
 11515 0154 D2F80080 		ldr	r8, [r2]
 11516              	.L1091:
 11517              	.LVL1750:
6104:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 11518              		.loc 1 6104 0 discriminator 8
 11519 0158 4FEAD872 		lsr	r2, r8, #31
 11520 015c 442B     		cmp	r3, #68
 11521 015e 14BF     		ite	ne
 11522 0160 0023     		movne	r3, #0
 11523 0162 02F00103 		andeq	r3, r2, #1
 11524              	.LVL1751:
 11525 0166 1BB1     		cbz	r3, .L1093
6105:Middlewares/Third_Party/FatFs/src/ff.c **** 			v = 0 - v;
 11526              		.loc 1 6105 0
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 338


 11527 0168 C8F10008 		rsb	r8, r8, #0
 11528              	.LVL1752:
6106:Middlewares/Third_Party/FatFs/src/ff.c **** 			f |= 8;
 11529              		.loc 1 6106 0
 11530 016c 46F00806 		orr	r6, r6, #8
 11531              	.LVL1753:
 11532              	.L1093:
6107:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6108:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = 0;
 11533              		.loc 1 6108 0
 11534 0170 4FF0000C 		mov	ip, #0
 11535 0174 20E0     		b	.L1096
 11536              	.LVL1754:
 11537              	.L1090:
6103:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 11538              		.loc 1 6103 0 discriminator 2
 11539 0176 442B     		cmp	r3, #68
 11540 0178 05D0     		beq	.L1115
6103:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 11541              		.loc 1 6103 0 is_stmt 0
 11542 017a 1B9A     		ldr	r2, [sp, #108]
 11543 017c 101D     		adds	r0, r2, #4
 11544 017e 1B90     		str	r0, [sp, #108]
 11545 0180 D2F80080 		ldr	r8, [r2]
 11546 0184 E8E7     		b	.L1091
 11547              	.L1115:
 11548 0186 1B9A     		ldr	r2, [sp, #108]
 11549 0188 101D     		adds	r0, r2, #4
 11550 018a 1B90     		str	r0, [sp, #108]
 11551 018c D2F80080 		ldr	r8, [r2]
 11552 0190 E2E7     		b	.L1091
 11553              	.LVL1755:
 11554              	.L1117:
6109:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
6110:Middlewares/Third_Party/FatFs/src/ff.c **** 			d = (TCHAR)(v % r); v /= r;
6111:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 11555              		.loc 1 6111 0 is_stmt 1
 11556 0192 2722     		movs	r2, #39
 11557              	.L1095:
 11558              		.loc 1 6111 0 is_stmt 0 discriminator 5
 11559 0194 1344     		add	r3, r3, r2
 11560              	.LVL1756:
 11561 0196 DBB2     		uxtb	r3, r3
 11562              	.LVL1757:
 11563              	.L1094:
6112:Middlewares/Third_Party/FatFs/src/ff.c **** 			str[i++] = d + '0';
 11564              		.loc 1 6112 0 is_stmt 1
 11565 0198 0CF10107 		add	r7, ip, #1
 11566              	.LVL1758:
 11567 019c 3033     		adds	r3, r3, #48
 11568              	.LVL1759:
 11569 019e 1CAA     		add	r2, sp, #112
 11570 01a0 6244     		add	r2, r2, ip
 11571 01a2 02F8703C 		strb	r3, [r2, #-112]
6113:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (v && i < sizeof str / sizeof str[0]);
 11572              		.loc 1 6113 0
 11573 01a6 1F2F     		cmp	r7, #31
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 339


 11574 01a8 8CBF     		ite	hi
 11575 01aa 0022     		movhi	r2, #0
 11576 01ac 0122     		movls	r2, #1
 11577 01ae 0028     		cmp	r0, #0
 11578 01b0 08BF     		it	eq
 11579 01b2 0022     		moveq	r2, #0
 11580 01b4 62B1     		cbz	r2, .L1116
6112:Middlewares/Third_Party/FatFs/src/ff.c **** 			str[i++] = d + '0';
 11581              		.loc 1 6112 0
 11582 01b6 BC46     		mov	ip, r7
 11583              	.LVL1760:
 11584              	.L1096:
6110:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 11585              		.loc 1 6110 0
 11586 01b8 B8FBFEF0 		udiv	r0, r8, lr
 11587 01bc 0EFB1083 		mls	r3, lr, r0, r8
 11588 01c0 DBB2     		uxtb	r3, r3
 11589              	.LVL1761:
 11590 01c2 8046     		mov	r8, r0
 11591              	.LVL1762:
6111:Middlewares/Third_Party/FatFs/src/ff.c **** 			str[i++] = d + '0';
 11592              		.loc 1 6111 0
 11593 01c4 092B     		cmp	r3, #9
 11594 01c6 E7D9     		bls	.L1094
6111:Middlewares/Third_Party/FatFs/src/ff.c **** 			str[i++] = d + '0';
 11595              		.loc 1 6111 0 is_stmt 0 discriminator 1
 11596 01c8 7829     		cmp	r1, #120
 11597 01ca E2D0     		beq	.L1117
6111:Middlewares/Third_Party/FatFs/src/ff.c **** 			str[i++] = d + '0';
 11598              		.loc 1 6111 0
 11599 01cc 0722     		movs	r2, #7
 11600 01ce E1E7     		b	.L1095
 11601              	.LVL1763:
 11602              	.L1116:
6114:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (f & 8) str[i++] = '-';
 11603              		.loc 1 6114 0 is_stmt 1
 11604 01d0 16F0080F 		tst	r6, #8
 11605 01d4 06D0     		beq	.L1097
 11606              	.LVL1764:
 11607              		.loc 1 6114 0 is_stmt 0 discriminator 1
 11608 01d6 1CAB     		add	r3, sp, #112
 11609 01d8 1F44     		add	r7, r7, r3
 11610 01da 2D23     		movs	r3, #45
 11611 01dc 07F8703C 		strb	r3, [r7, #-112]
 11612 01e0 0CF10207 		add	r7, ip, #2
 11613              	.LVL1765:
 11614              	.L1097:
6115:Middlewares/Third_Party/FatFs/src/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 11615              		.loc 1 6115 0 is_stmt 1
 11616 01e4 16F0010F 		tst	r6, #1
 11617 01e8 03D0     		beq	.L1110
 11618 01ea 4FF0300A 		mov	r10, #48
 11619              	.L1098:
 11620              	.LVL1766:
 11621              		.loc 1 6115 0 is_stmt 0 discriminator 4
 11622 01ee B846     		mov	r8, r7
6116:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 340


 11623              		.loc 1 6116 0 is_stmt 1 discriminator 4
 11624 01f0 07E0     		b	.L1099
 11625              	.LVL1767:
 11626              	.L1110:
6115:Middlewares/Third_Party/FatFs/src/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 11627              		.loc 1 6115 0
 11628 01f2 4FF0200A 		mov	r10, #32
 11629 01f6 FAE7     		b	.L1098
 11630              	.LVL1768:
 11631              	.L1101:
 11632              		.loc 1 6116 0 discriminator 3
 11633 01f8 5146     		mov	r1, r10
 11634 01fa 08A8     		add	r0, sp, #32
 11635 01fc FFF7FEFF 		bl	putc_bfd
 11636              	.LVL1769:
 11637 0200 C846     		mov	r8, r9
 11638              	.LVL1770:
 11639              	.L1099:
 11640              		.loc 1 6116 0 is_stmt 0 discriminator 1
 11641 0202 16F0020F 		tst	r6, #2
 11642 0206 04D1     		bne	.L1102
 11643              		.loc 1 6116 0 discriminator 2
 11644 0208 08F10109 		add	r9, r8, #1
 11645              	.LVL1771:
 11646 020c A045     		cmp	r8, r4
 11647 020e F3D3     		bcc	.L1101
 11648              		.loc 1 6116 0
 11649 0210 C846     		mov	r8, r9
 11650              	.LVL1772:
 11651              	.L1102:
6117:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
6118:Middlewares/Third_Party/FatFs/src/ff.c **** 			putc_bfd(&pb, str[--i]);
 11652              		.loc 1 6118 0 is_stmt 1 discriminator 1
 11653 0212 013F     		subs	r7, r7, #1
 11654              	.LVL1773:
 11655 0214 1CAB     		add	r3, sp, #112
 11656 0216 3B44     		add	r3, r3, r7
 11657 0218 13F8701C 		ldrb	r1, [r3, #-112]	@ zero_extendqisi2
 11658 021c 08A8     		add	r0, sp, #32
 11659 021e FFF7FEFF 		bl	putc_bfd
 11660              	.LVL1774:
6119:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (i);
 11661              		.loc 1 6119 0 discriminator 1
 11662 0222 002F     		cmp	r7, #0
 11663 0224 F5D1     		bne	.L1102
 11664 0226 04E0     		b	.L1103
 11665              	.LVL1775:
 11666              	.L1104:
6120:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (j++ < w) putc_bfd(&pb, d);
 11667              		.loc 1 6120 0 discriminator 2
 11668 0228 5146     		mov	r1, r10
 11669 022a 08A8     		add	r0, sp, #32
 11670 022c FFF7FEFF 		bl	putc_bfd
 11671              	.LVL1776:
 11672 0230 B046     		mov	r8, r6
 11673              	.LVL1777:
 11674              	.L1103:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 341


 11675              		.loc 1 6120 0 is_stmt 0 discriminator 1
 11676 0232 08F10106 		add	r6, r8, #1
 11677              	.LVL1778:
 11678 0236 A045     		cmp	r8, r4
 11679 0238 F6D3     		bcc	.L1104
 11680 023a F2E6     		b	.L1063
 11681              	.LVL1779:
 11682              	.L1064:
6121:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
6122:Middlewares/Third_Party/FatFs/src/ff.c **** 
6123:Middlewares/Third_Party/FatFs/src/ff.c **** 	va_end(arp);
6124:Middlewares/Third_Party/FatFs/src/ff.c **** 
6125:Middlewares/Third_Party/FatFs/src/ff.c **** 	return putc_flush(&pb);
 11683              		.loc 1 6125 0 is_stmt 1
 11684 023c 08A8     		add	r0, sp, #32
 11685 023e FFF7FEFF 		bl	putc_flush
 11686              	.LVL1780:
6126:Middlewares/Third_Party/FatFs/src/ff.c **** }
 11687              		.loc 1 6126 0
 11688 0242 1DB0     		add	sp, sp, #116
 11689              	.LCFI153:
 11690              		.cfi_def_cfa_offset 44
 11691              		@ sp needed
 11692 0244 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 11693              	.LCFI154:
 11694              		.cfi_restore 14
 11695              		.cfi_restore 10
 11696              		.cfi_restore 9
 11697              		.cfi_restore 8
 11698              		.cfi_restore 7
 11699              		.cfi_restore 6
 11700              		.cfi_restore 5
 11701              		.cfi_restore 4
 11702              		.cfi_def_cfa_offset 12
 11703 0248 03B0     		add	sp, sp, #12
 11704              	.LCFI155:
 11705              		.cfi_restore 3
 11706              		.cfi_restore 2
 11707              		.cfi_restore 1
 11708              		.cfi_def_cfa_offset 0
 11709 024a 7047     		bx	lr
 11710              		.cfi_endproc
 11711              	.LFE213:
 11713              		.section	.bss.CurrVol,"aw",%nobits
 11714              		.set	.LANCHOR2,. + 0
 11717              	CurrVol:
 11718 0000 00       		.space	1
 11719              		.section	.bss.FatFs,"aw",%nobits
 11720              		.align	2
 11721              		.set	.LANCHOR3,. + 0
 11724              	FatFs:
 11725 0000 00000000 		.space	8
 11725      00000000 
 11726              		.section	.bss.Files,"aw",%nobits
 11727              		.align	2
 11728              		.set	.LANCHOR0,. + 0
 11731              	Files:
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 342


 11732 0000 00000000 		.space	32
 11732      00000000 
 11732      00000000 
 11732      00000000 
 11732      00000000 
 11733              		.section	.bss.Fsid,"aw",%nobits
 11734              		.align	1
 11735              		.set	.LANCHOR4,. + 0
 11738              	Fsid:
 11739 0000 0000     		.space	2
 11740              		.section	.rodata.ExCvt,"a",%progbits
 11741              		.align	2
 11742              		.set	.LANCHOR5,. + 0
 11745              	ExCvt:
 11746 0000 43       		.byte	67
 11747 0001 55       		.byte	85
 11748 0002 45       		.byte	69
 11749 0003 41       		.byte	65
 11750 0004 41       		.byte	65
 11751 0005 41       		.byte	65
 11752 0006 41       		.byte	65
 11753 0007 43       		.byte	67
 11754 0008 45       		.byte	69
 11755 0009 45       		.byte	69
 11756 000a 45       		.byte	69
 11757 000b 49       		.byte	73
 11758 000c 49       		.byte	73
 11759 000d 49       		.byte	73
 11760 000e 41       		.byte	65
 11761 000f 41       		.byte	65
 11762 0010 45       		.byte	69
 11763 0011 92       		.byte	-110
 11764 0012 92       		.byte	-110
 11765 0013 4F       		.byte	79
 11766 0014 4F       		.byte	79
 11767 0015 4F       		.byte	79
 11768 0016 55       		.byte	85
 11769 0017 55       		.byte	85
 11770 0018 59       		.byte	89
 11771 0019 4F       		.byte	79
 11772 001a 55       		.byte	85
 11773 001b 4F       		.byte	79
 11774 001c 9C       		.byte	-100
 11775 001d 4F       		.byte	79
 11776 001e 9E       		.byte	-98
 11777 001f 9F       		.byte	-97
 11778 0020 41       		.byte	65
 11779 0021 49       		.byte	73
 11780 0022 4F       		.byte	79
 11781 0023 55       		.byte	85
 11782 0024 A5       		.byte	-91
 11783 0025 A5       		.byte	-91
 11784 0026 A6       		.byte	-90
 11785 0027 A7       		.byte	-89
 11786 0028 A8       		.byte	-88
 11787 0029 A9       		.byte	-87
 11788 002a AA       		.byte	-86
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 343


 11789 002b AB       		.byte	-85
 11790 002c AC       		.byte	-84
 11791 002d AD       		.byte	-83
 11792 002e AE       		.byte	-82
 11793 002f AF       		.byte	-81
 11794 0030 B0       		.byte	-80
 11795 0031 B1       		.byte	-79
 11796 0032 B2       		.byte	-78
 11797 0033 B3       		.byte	-77
 11798 0034 B4       		.byte	-76
 11799 0035 41       		.byte	65
 11800 0036 41       		.byte	65
 11801 0037 41       		.byte	65
 11802 0038 B8       		.byte	-72
 11803 0039 B9       		.byte	-71
 11804 003a BA       		.byte	-70
 11805 003b BB       		.byte	-69
 11806 003c BC       		.byte	-68
 11807 003d BD       		.byte	-67
 11808 003e BE       		.byte	-66
 11809 003f BF       		.byte	-65
 11810 0040 C0       		.byte	-64
 11811 0041 C1       		.byte	-63
 11812 0042 C2       		.byte	-62
 11813 0043 C3       		.byte	-61
 11814 0044 C4       		.byte	-60
 11815 0045 C5       		.byte	-59
 11816 0046 41       		.byte	65
 11817 0047 41       		.byte	65
 11818 0048 C8       		.byte	-56
 11819 0049 C9       		.byte	-55
 11820 004a CA       		.byte	-54
 11821 004b CB       		.byte	-53
 11822 004c CC       		.byte	-52
 11823 004d CD       		.byte	-51
 11824 004e CE       		.byte	-50
 11825 004f CF       		.byte	-49
 11826 0050 D1       		.byte	-47
 11827 0051 D1       		.byte	-47
 11828 0052 45       		.byte	69
 11829 0053 45       		.byte	69
 11830 0054 45       		.byte	69
 11831 0055 49       		.byte	73
 11832 0056 49       		.byte	73
 11833 0057 49       		.byte	73
 11834 0058 49       		.byte	73
 11835 0059 D9       		.byte	-39
 11836 005a DA       		.byte	-38
 11837 005b DB       		.byte	-37
 11838 005c DC       		.byte	-36
 11839 005d DD       		.byte	-35
 11840 005e 49       		.byte	73
 11841 005f DF       		.byte	-33
 11842 0060 4F       		.byte	79
 11843 0061 E1       		.byte	-31
 11844 0062 4F       		.byte	79
 11845 0063 4F       		.byte	79
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 344


 11846 0064 4F       		.byte	79
 11847 0065 4F       		.byte	79
 11848 0066 E6       		.byte	-26
 11849 0067 E8       		.byte	-24
 11850 0068 E8       		.byte	-24
 11851 0069 55       		.byte	85
 11852 006a 55       		.byte	85
 11853 006b 55       		.byte	85
 11854 006c 59       		.byte	89
 11855 006d 59       		.byte	89
 11856 006e EE       		.byte	-18
 11857 006f EF       		.byte	-17
 11858 0070 F0       		.byte	-16
 11859 0071 F1       		.byte	-15
 11860 0072 F2       		.byte	-14
 11861 0073 F3       		.byte	-13
 11862 0074 F4       		.byte	-12
 11863 0075 F5       		.byte	-11
 11864 0076 F6       		.byte	-10
 11865 0077 F7       		.byte	-9
 11866 0078 F8       		.byte	-8
 11867 0079 F9       		.byte	-7
 11868 007a FA       		.byte	-6
 11869 007b FB       		.byte	-5
 11870 007c FC       		.byte	-4
 11871 007d FD       		.byte	-3
 11872 007e FE       		.byte	-2
 11873 007f FF       		.byte	-1
 11874              		.section	.rodata.LfnOfs,"a",%progbits
 11875              		.align	2
 11876              		.set	.LANCHOR1,. + 0
 11879              	LfnOfs:
 11880 0000 01       		.byte	1
 11881 0001 03       		.byte	3
 11882 0002 05       		.byte	5
 11883 0003 07       		.byte	7
 11884 0004 09       		.byte	9
 11885 0005 0E       		.byte	14
 11886 0006 10       		.byte	16
 11887 0007 12       		.byte	18
 11888 0008 14       		.byte	20
 11889 0009 16       		.byte	22
 11890 000a 18       		.byte	24
 11891 000b 1C       		.byte	28
 11892 000c 1E       		.byte	30
 11893              		.section	.rodata.create_name.str1.4,"aMS",%progbits,1
 11894              		.align	2
 11895              	.LC0:
 11896 0000 222A3A3C 		.ascii	"\"*:<>?|\177\000"
 11896      3E3F7C7F 
 11896      00
 11897 0009 000000   		.space	3
 11898              	.LC1:
 11899 000c 2B2C3B3D 		.ascii	"+,;=[]\000"
 11899      5B5D00
 11900              		.section	.rodata.cst.14722,"a",%progbits
 11901              		.align	2
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 345


 11902              		.set	.LANCHOR7,. + 0
 11905              	cst.14722:
 11906 0000 0100     		.short	1
 11907 0002 0400     		.short	4
 11908 0004 1000     		.short	16
 11909 0006 4000     		.short	64
 11910 0008 0001     		.short	256
 11911 000a 0002     		.short	512
 11912 000c 0000     		.short	0
 11913              		.section	.rodata.cst32.14723,"a",%progbits
 11914              		.align	2
 11915              		.set	.LANCHOR6,. + 0
 11918              	cst32.14723:
 11919 0000 0100     		.short	1
 11920 0002 0200     		.short	2
 11921 0004 0400     		.short	4
 11922 0006 0800     		.short	8
 11923 0008 1000     		.short	16
 11924 000a 2000     		.short	32
 11925 000c 0000     		.short	0
 11926              		.section	.rodata.f_mkfs.str1.4,"aMS",%progbits,1
 11927              		.align	2
 11928              	.LC2:
 11929 0000 EBFE904D 		.ascii	"\353\376\220MSDOS5.0\000"
 11929      53444F53 
 11929      352E3000 
 11930              	.LC3:
 11931 000c 4E4F204E 		.ascii	"NO NAME    FAT32   \000"
 11931      414D4520 
 11931      20202046 
 11931      41543332 
 11931      20202000 
 11932              	.LC4:
 11933 0020 4E4F204E 		.ascii	"NO NAME    FAT     \000"
 11933      414D4520 
 11933      20202046 
 11933      41542020 
 11933      20202000 
 11934              		.text
 11935              	.Letext0:
 11936              		.file 2 "Middlewares/Third_Party/FatFs/src/integer.h"
 11937              		.file 3 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\machine\\_default
 11938              		.file 4 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 11939              		.file 5 "Drivers/CMSIS/Include/core_cm7.h"
 11940              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 11941              		.file 7 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\lib\\gcc\\arm-none-eabi\\7.3.1\\include\\
 11942              		.file 8 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\stdio.h"
 11943              		.file 9 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 11944              		.file 10 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 11945              		.file 11 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\lib\\gcc\\arm-none-eabi\\7.3.1\\include\
 11946              		.file 12 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 11947              		.file 13 "<built-in>"
 11948              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 11949              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 11950              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 11951              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 11952              		.file 18 "c:\\program files (x86)\\gnu\\7_2018-q2-update\\arm-none-eabi\\include\\stdlib.h"
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 346


 11953              		.file 19 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_def.h"
 11954              		.file 20 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_ctlreq.h"
 11955              		.file 21 "Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc/usbh_msc.h"
 11956              		.file 22 "Middlewares/Third_Party/FatFs/src/ff.h"
 11957              		.file 23 "Middlewares/Third_Party/FatFs/src/diskio.h"
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 347


DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:18     .text.ld_word:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:24     .text.ld_word:00000000 ld_word
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:47     .text.ld_dword:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:53     .text.ld_dword:00000000 ld_dword
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:83     .text.st_word:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:89     .text.st_word:00000000 st_word
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:110    .text.st_dword:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:116    .text.st_dword:00000000 st_dword
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:145    .text.mem_cpy:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:151    .text.mem_cpy:00000000 mem_cpy
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:183    .text.mem_set:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:189    .text.mem_set:00000000 mem_set
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:213    .text.mem_cmp:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:219    .text.mem_cmp:00000000 mem_cmp
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:269    .text.chk_chr:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:275    .text.chk_chr:00000000 chk_chr
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:305    .text.chk_lock:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:311    .text.chk_lock:00000000 chk_lock
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:427    .text.chk_lock:00000070 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:432    .text.enq_lock:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:438    .text.enq_lock:00000000 enq_lock
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:475    .text.enq_lock:0000001c $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:480    .text.inc_lock:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:486    .text.inc_lock:00000000 inc_lock
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:639    .text.inc_lock:000000a0 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:644    .text.dec_lock:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:650    .text.dec_lock:00000000 dec_lock
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:715    .text.dec_lock:0000003c $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:720    .text.clear_lock:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:726    .text.clear_lock:00000000 clear_lock
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:792    .text.clear_lock:00000038 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:797    .text.clust2sect:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:803    .text.clust2sect:00000000 clust2sect
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:836    .text.clmt_clust:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:842    .text.clmt_clust:00000000 clmt_clust
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:893    .text.ld_clust:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:899    .text.ld_clust:00000000 ld_clust
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:944    .text.st_clust:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:950    .text.st_clust:00000000 st_clust
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:994    .text.pick_lfn:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1000   .text.pick_lfn:00000000 pick_lfn
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1114   .text.pick_lfn:00000084 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1119   .text.put_lfn:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1125   .text.put_lfn:00000000 put_lfn
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1225   .text.put_lfn:00000074 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1230   .text.gen_numname:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1236   .text.gen_numname:00000000 gen_numname
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1397   .text.sum_sfn:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1403   .text.sum_sfn:00000000 sum_sfn
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1440   .text.get_ldnumber:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1446   .text.get_ldnumber:00000000 get_ldnumber
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1543   .text.get_ldnumber:00000054 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1548   .text.putc_init:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1554   .text.putc_init:00000000 putc_init
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1574   .text.lock_fs:00000000 $t
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 348


C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1580   .text.lock_fs:00000000 lock_fs
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1616   .text.validate:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1622   .text.validate:00000000 validate
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1692   .text.sync_window:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1698   .text.sync_window:00000000 sync_window
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1788   .text.move_window:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1794   .text.move_window:00000000 move_window
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1852   .text.check_fs:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1858   .text.check_fs:00000000 check_fs
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1941   .text.check_fs:00000070 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1948   .text.find_volume:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:1954   .text.find_volume:00000000 find_volume
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:2520   .text.find_volume:00000308 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:2528   .text.put_fat:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:2534   .text.put_fat:00000000 put_fat
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:2732   .text.get_fat:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:2738   .text.get_fat:00000000 get_fat
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:2904   .text.dir_sdi:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:2910   .text.dir_sdi:00000000 dir_sdi
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:3067   .text.create_chain:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:3073   .text.create_chain:00000000 create_chain
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:3257   .text.remove_chain:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:3263   .text.remove_chain:00000000 remove_chain
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:3384   .text.dir_next:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:3390   .text.dir_next:00000000 dir_next
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:3619   .text.dir_alloc:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:3625   .text.dir_alloc:00000000 dir_alloc
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:3715   .text.dir_read:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:3721   .text.dir_read:00000000 dir_read
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:3897   .text.dir_remove:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:3903   .text.dir_remove:00000000 dir_remove
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:3989   .text.unlock_fs:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:3995   .text.unlock_fs:00000000 unlock_fs
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:4036   .text.create_name:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:4042   .text.create_name:00000000 create_name
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:4533   .text.create_name:0000028c $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:4541   .text.get_fileinfo:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:4547   .text.get_fileinfo:00000000 get_fileinfo
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:4770   .text.cmp_lfn:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:4776   .text.cmp_lfn:00000000 cmp_lfn
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:4911   .text.cmp_lfn:000000a0 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:4916   .text.dir_find:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:4922   .text.dir_find:00000000 dir_find
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:5115   .text.follow_path:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:5121   .text.follow_path:00000000 follow_path
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:5283   .text.dir_register:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:5289   .text.dir_register:00000000 dir_register
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:5535   .text.dir_register:00000140 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:5540   .text.sync_fs:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:5546   .text.sync_fs:00000000 sync_fs
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:5642   .text.sync_fs:00000084 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:5648   .text.f_mount:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:5655   .text.f_mount:00000000 f_mount
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:5778   .text.f_mount:00000088 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:5783   .text.f_open:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:5790   .text.f_open:00000000 f_open
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:6258   .text.f_read:00000000 $t
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 349


C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:6265   .text.f_read:00000000 f_read
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:6624   .text.f_write:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:6631   .text.f_write:00000000 f_write
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:7022   .text.putc_bfd:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:7028   .text.putc_bfd:00000000 putc_bfd
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:7118   .text.putc_flush:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:7124   .text.putc_flush:00000000 putc_flush
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:7194   .text.f_sync:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:7201   .text.f_sync:00000000 f_sync
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:7342   .text.f_close:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:7349   .text.f_close:00000000 f_close
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:7419   .text.f_chdrive:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:7426   .text.f_chdrive:00000000 f_chdrive
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:7475   .text.f_chdrive:00000024 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:7480   .text.f_chdir:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:7487   .text.f_chdir:00000000 f_chdir
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:7612   .text.f_lseek:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:7619   .text.f_lseek:00000000 f_lseek
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:8215   .text.f_opendir:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:8222   .text.f_opendir:00000000 f_opendir
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:8385   .text.f_closedir:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:8392   .text.f_closedir:00000000 f_closedir
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:8456   .text.f_readdir:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:8463   .text.f_readdir:00000000 f_readdir
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:8581   .text.f_stat:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:8588   .text.f_stat:00000000 f_stat
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:8688   .text.f_getfree:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:8695   .text.f_getfree:00000000 f_getfree
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:8914   .text.f_truncate:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:8921   .text.f_truncate:00000000 f_truncate
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:9100   .text.f_unlink:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:9107   .text.f_unlink:00000000 f_unlink
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:9340   .text.f_mkdir:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:9347   .text.f_mkdir:00000000 f_mkdir
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:9688   .text.f_rename:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:9695   .text.f_rename:00000000 f_rename
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:9956   .text.f_mkfs:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:9963   .text.f_mkfs:00000000 f_mkfs
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:10387  .text.f_mkfs:00000268 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:10394  .text.f_mkfs:00000280 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:10973  .text.f_mkfs:0000062c $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:10982  .text.f_mkfs:00000644 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11003  .text.f_gets:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11010  .text.f_gets:00000000 f_gets
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11106  .text.f_putc:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11113  .text.f_putc:00000000 f_putc
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11153  .text.f_puts:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11160  .text.f_puts:00000000 f_puts
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11209  .text.f_printf:00000000 $t
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11216  .text.f_printf:00000000 f_printf
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11366  .text.f_printf:000000a0 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11717  .bss.CurrVol:00000000 CurrVol
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11718  .bss.CurrVol:00000000 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11720  .bss.FatFs:00000000 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11724  .bss.FatFs:00000000 FatFs
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11727  .bss.Files:00000000 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11731  .bss.Files:00000000 Files
ARM GAS  C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s 			page 350


C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11734  .bss.Fsid:00000000 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11738  .bss.Fsid:00000000 Fsid
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11741  .rodata.ExCvt:00000000 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11745  .rodata.ExCvt:00000000 ExCvt
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11875  .rodata.LfnOfs:00000000 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11879  .rodata.LfnOfs:00000000 LfnOfs
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11894  .rodata.create_name.str1.4:00000000 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11901  .rodata.cst.14722:00000000 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11905  .rodata.cst.14722:00000000 cst.14722
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11914  .rodata.cst32.14723:00000000 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11918  .rodata.cst32.14723:00000000 cst32.14723
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11927  .rodata.f_mkfs.str1.4:00000000 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11390  .text.f_printf:000000b7 $d
C:\Users\Patryk\AppData\Local\Temp\ccJXiE1E.s:11390  .text.f_printf:000000b8 $t

UNDEFINED SYMBOLS
ff_req_grant
disk_status
disk_write
disk_read
disk_initialize
ff_rel_grant
ff_convert
ff_wtoupper
disk_ioctl
ff_del_syncobj
ff_cre_syncobj
ff_memalloc
get_fattime
ff_memfree
